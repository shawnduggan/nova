/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NovaPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/settings.ts
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  aiProviders: {
    claude: {
      apiKey: "",
      model: "claude-sonnet-4",
      temperature: 0.7,
      maxTokens: 1e3
    },
    openai: {
      apiKey: "",
      baseUrl: "https://api.openai.com/v1",
      model: "gpt-4o",
      temperature: 0.7,
      maxTokens: 1e3
    },
    google: {
      apiKey: "",
      model: "gemini-2.5-flash-preview-05-20",
      temperature: 0.7,
      maxTokens: 1e3
    },
    ollama: {
      baseUrl: "http://localhost:11434",
      model: "",
      temperature: 0.7,
      maxTokens: 1e3
    }
  },
  platformSettings: {
    desktop: {
      primaryProvider: "ollama",
      fallbackProviders: ["openai", "google", "ollama"]
    },
    mobile: {
      primaryProvider: "none",
      fallbackProviders: ["openai", "google"]
    }
  },
  general: {
    defaultTemperature: 0.7,
    defaultMaxTokens: 1e3,
    autoSave: true
  },
  licensing: {
    licenseKey: "",
    debugSettings: {
      enabled: false
    }
  }
};
var NovaSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Nova AI Settings" });
    this.createLicenseSettings();
    this.createGeneralSettings();
    this.createPlatformSettings();
    this.createProviderSettings();
  }
  createLicenseSettings() {
    var _a, _b;
    const { containerEl } = this;
    const licenseContainer = containerEl.createDiv({ cls: "nova-license-section" });
    licenseContainer.createEl("h3", { text: "License & Tier" });
    const currentTier = ((_a = this.plugin.featureManager) == null ? void 0 : _a.getCurrentTier()) || "core";
    const currentLicense = (_b = this.plugin.featureManager) == null ? void 0 : _b.getCurrentLicense();
    const tierDisplay = licenseContainer.createDiv({ cls: "nova-tier-display" });
    const tierText = currentTier === "supernova" ? "SuperNova" : "Core (Free)";
    const tierIcon = currentTier === "supernova" ? "\u2B50" : "\u{1F193}";
    tierDisplay.innerHTML = `
			<div class="nova-tier-badge ${currentTier}">
				<span class="tier-icon">${tierIcon}</span>
				<span class="tier-name">${tierText}</span>
			</div>
		`;
    if (currentLicense) {
      const statusEl = licenseContainer.createDiv({ cls: "nova-license-status" });
      const expiryText = currentLicense.expiresAt ? `Expires: ${currentLicense.expiresAt.toLocaleDateString()}` : "Lifetime License";
      statusEl.innerHTML = `
				<div class="license-info">
					<span class="license-email">${currentLicense.email}</span>
					<span class="license-expiry">${expiryText}</span>
				</div>
			`;
    }
    new import_obsidian.Setting(licenseContainer).setName("License Key").setDesc("Enter your Nova SuperNova license key to unlock premium features").addText((text) => {
      var _a2;
      text.inputEl.type = "password";
      text.setPlaceholder("Enter license key...").setValue(this.plugin.settings.licensing.licenseKey).onChange(async (value) => {
        this.plugin.settings.licensing.licenseKey = value;
        await this.plugin.saveSettings();
        if (this.plugin.featureManager) {
          await this.plugin.featureManager.updateLicense(value || null);
          this.display();
        }
      });
      const validateButton = (_a2 = text.inputEl.parentElement) == null ? void 0 : _a2.createEl("button", {
        text: "Validate",
        cls: "nova-validate-btn"
      });
      if (validateButton) {
        validateButton.addEventListener("click", async () => {
          const licenseKey = text.inputEl.value;
          if (!licenseKey) {
            this.showLicenseMessage("Please enter a license key first.", "error");
            return;
          }
          validateButton.textContent = "Validating...";
          validateButton.disabled = true;
          try {
            if (this.plugin.featureManager) {
              await this.plugin.featureManager.updateLicense(licenseKey);
              const tier = this.plugin.featureManager.getCurrentTier();
              if (tier === "supernova") {
                this.showLicenseMessage("\u2705 Valid SuperNova license!", "success");
              } else {
                this.showLicenseMessage("\u274C Invalid or expired license key.", "error");
              }
              this.display();
            }
          } catch (error) {
            this.showLicenseMessage("\u274C Error validating license.", "error");
          } finally {
            validateButton.textContent = "Validate";
            validateButton.disabled = false;
          }
        });
      }
    });
    this.createFeatureComparison(licenseContainer);
    if (true) {
      this.createDebugSettings(licenseContainer);
    }
  }
  createFeatureComparison(container) {
    const comparisonContainer = container.createDiv({ cls: "nova-feature-comparison" });
    comparisonContainer.createEl("h4", { text: "Feature Comparison" });
    const table = comparisonContainer.createEl("table", { cls: "nova-comparison-table" });
    const headerRow = table.createEl("tr");
    headerRow.createEl("th", { text: "Feature" });
    headerRow.createEl("th", { text: "Core (Free)" });
    headerRow.createEl("th", { text: "SuperNova" });
    const features = [
      ["Basic Document Editing", "\u2705", "\u2705"],
      ["Local AI (Ollama, LM Studio)", "\u2705", "\u2705"],
      ["One Cloud AI Provider", "\u2705", "\u2705"],
      ["Multiple Cloud AI Providers", "\u274C", "\u2705"],
      ["Provider Switching in Chat", "\u274C", "\u2705"],
      ["Mobile Device Support", "\u274C", "\u2705"],
      ["Advanced Templates", "\u274C", "\u2705"],
      ["Priority Support", "\u274C", "\u2705"]
    ];
    features.forEach(([feature, core, supernova]) => {
      const row = table.createEl("tr");
      row.createEl("td", { text: feature });
      row.createEl("td", { text: core, cls: core === "\u2705" ? "feature-yes" : "feature-no" });
      row.createEl("td", { text: supernova, cls: supernova === "\u2705" ? "feature-yes" : "feature-no" });
    });
    const upgradeContainer = comparisonContainer.createDiv({ cls: "nova-upgrade-container" });
    const upgradeButton = upgradeContainer.createEl("button", {
      text: "\u2B50 Upgrade to SuperNova",
      cls: "nova-upgrade-btn"
    });
    upgradeButton.addEventListener("click", () => {
      window.open("https://novawriter.ai/upgrade", "_blank");
    });
  }
  createDebugSettings(container) {
    const debugContainer = container.createDiv({ cls: "nova-debug-section" });
    debugContainer.createEl("h4", { text: "Development Settings" });
    new import_obsidian.Setting(debugContainer).setName("Debug Mode").setDesc("Enable development testing features").addToggle((toggle) => toggle.setValue(this.plugin.settings.licensing.debugSettings.enabled).onChange(async (value) => {
      this.plugin.settings.licensing.debugSettings.enabled = value;
      await this.plugin.saveSettings();
      if (this.plugin.featureManager) {
        this.plugin.featureManager.updateDebugSettings(this.plugin.settings.licensing.debugSettings);
      }
      this.display();
    }));
    if (this.plugin.settings.licensing.debugSettings.enabled) {
      new import_obsidian.Setting(debugContainer).setName("Override Tier").setDesc("Override license tier for testing").addDropdown((dropdown) => dropdown.addOption("", "Use Real License").addOption("core", "Force Core Tier").addOption("supernova", "Force SuperNova Tier").setValue(this.plugin.settings.licensing.debugSettings.overrideTier || "").onChange(async (value) => {
        this.plugin.settings.licensing.debugSettings.overrideTier = value || void 0;
        await this.plugin.saveSettings();
        if (this.plugin.featureManager) {
          this.plugin.featureManager.updateDebugSettings(this.plugin.settings.licensing.debugSettings);
        }
        this.display();
      }));
    }
  }
  showLicenseMessage(message, type) {
    const existingMessage = this.containerEl.querySelector(".nova-license-message");
    if (existingMessage) {
      existingMessage.remove();
    }
    const messageEl = this.containerEl.createDiv({
      cls: `nova-license-message ${type}`,
      text: message
    });
    setTimeout(() => {
      messageEl.remove();
    }, 5e3);
  }
  createGeneralSettings() {
    const { containerEl } = this;
    containerEl.createEl("h3", { text: "General Settings" });
    new import_obsidian.Setting(containerEl).setName("Default Temperature").setDesc("Controls randomness in AI responses (0.0 - 1.0)").addSlider((slider) => slider.setLimits(0, 1, 0.1).setValue(this.plugin.settings.general.defaultTemperature).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.general.defaultTemperature = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("Default Max Tokens").setDesc("Maximum length of AI responses").addText((text) => text.setPlaceholder("1000").setValue(this.plugin.settings.general.defaultMaxTokens.toString()).onChange(async (value) => {
      const numValue = parseInt(value);
      if (!isNaN(numValue) && numValue > 0) {
        this.plugin.settings.general.defaultMaxTokens = numValue;
        await this.plugin.saveSettings();
      }
    }));
    new import_obsidian.Setting(containerEl).setName("Auto-save settings").setDesc("Automatically save settings when changed").addToggle((toggle) => toggle.setValue(this.plugin.settings.general.autoSave).onChange(async (value) => {
      this.plugin.settings.general.autoSave = value;
      await this.plugin.saveSettings();
    }));
  }
  createProviderSettings() {
    var _a;
    const { containerEl } = this;
    containerEl.createEl("h3", { text: "AI Provider Settings" });
    const currentTier = ((_a = this.plugin.featureManager) == null ? void 0 : _a.getCurrentTier()) || "core";
    const isCoreTier = currentTier === "core";
    if (isCoreTier) {
      const restrictionNotice = containerEl.createDiv({ cls: "nova-license-message" });
      restrictionNotice.innerHTML = `
				<strong>Core Tier Restrictions:</strong> You can configure 1 local provider (Ollama) and 1 cloud provider. 
				<a href="#" class="upgrade-link">Upgrade to SuperNova</a> for unlimited providers.
			`;
      const upgradeLink = restrictionNotice.querySelector(".upgrade-link");
      upgradeLink == null ? void 0 : upgradeLink.addEventListener("click", (e) => {
        e.preventDefault();
        window.open("https://novawriter.ai/upgrade", "_blank");
      });
    }
    this.createOllamaSettings();
    this.createClaudeSettings(isCoreTier);
    this.createGoogleSettings(isCoreTier);
    this.createOpenAISettings(isCoreTier);
  }
  createClaudeSettings(isRestricted = false) {
    const { containerEl } = this;
    if (isRestricted && !this.isProviderAllowedForCoreTier("claude")) {
      return this.createRestrictedProviderNotice(containerEl, "Claude (Anthropic)");
    }
    const claudeContainer = containerEl.createDiv({ cls: "nova-provider-section" });
    claudeContainer.createEl("h4", { text: "Claude (Anthropic)" });
    new import_obsidian.Setting(claudeContainer).setName("API Key").setDesc("Your Anthropic API key").addText((text) => text.setPlaceholder("sk-ant-...").setValue(this.plugin.settings.aiProviders.claude.apiKey || "").onChange(async (value) => {
      this.plugin.settings.aiProviders.claude.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(claudeContainer).setName("Model").setDesc("Claude model to use").addDropdown((dropdown) => dropdown.addOption("claude-sonnet-4", "Claude Sonnet 4").addOption("claude-opus-4", "Claude Opus 4").addOption("claude-3-haiku-20240307", "Claude 3 Haiku").addOption("claude-3-sonnet-20240229", "Claude 3 Sonnet").addOption("claude-3-opus-20240229", "Claude 3 Opus").setValue(this.plugin.settings.aiProviders.claude.model || "claude-sonnet-4").onChange(async (value) => {
      this.plugin.settings.aiProviders.claude.model = value;
      await this.plugin.saveSettings();
    }));
  }
  isProviderAllowedForCoreTier(providerType) {
    if (!this.plugin.aiProviderManager) return true;
    return this.plugin.aiProviderManager.isProviderAllowed(providerType);
  }
  createRestrictedProviderNotice(container, providerName) {
    const restrictedContainer = container.createDiv({ cls: "nova-provider-section nova-provider-restricted" });
    restrictedContainer.innerHTML = `
			<h4>${providerName} <span class="restriction-badge">SuperNova Only</span></h4>
			<p class="restriction-text">This provider requires a SuperNova license.</p>
		`;
  }
  createOpenAISettings(isRestricted = false) {
    const { containerEl } = this;
    if (isRestricted && !this.isProviderAllowedForCoreTier("openai")) {
      return this.createRestrictedProviderNotice(containerEl, "OpenAI");
    }
    const openaiContainer = containerEl.createDiv({ cls: "nova-provider-section" });
    openaiContainer.createEl("h4", { text: "OpenAI" });
    new import_obsidian.Setting(openaiContainer).setName("API Key").setDesc("Your OpenAI API key").addText((text) => text.setPlaceholder("sk-...").setValue(this.plugin.settings.aiProviders.openai.apiKey || "").onChange(async (value) => {
      this.plugin.settings.aiProviders.openai.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(openaiContainer).setName("Base URL").setDesc("OpenAI API base URL (for custom endpoints)").addText((text) => text.setPlaceholder("https://api.openai.com/v1").setValue(this.plugin.settings.aiProviders.openai.baseUrl || "").onChange(async (value) => {
      this.plugin.settings.aiProviders.openai.baseUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(openaiContainer).setName("Model").setDesc("OpenAI model to use").addDropdown((dropdown) => dropdown.addOption("gpt-4o", "GPT-4o").addOption("gpt-3.5-turbo", "GPT-3.5 Turbo").addOption("gpt-4", "GPT-4").addOption("gpt-4-turbo-preview", "GPT-4 Turbo").setValue(this.plugin.settings.aiProviders.openai.model || "gpt-4o").onChange(async (value) => {
      this.plugin.settings.aiProviders.openai.model = value;
      await this.plugin.saveSettings();
    }));
  }
  createGoogleSettings(isRestricted = false) {
    const { containerEl } = this;
    if (isRestricted && !this.isProviderAllowedForCoreTier("google")) {
      return this.createRestrictedProviderNotice(containerEl, "Google (Gemini)");
    }
    const googleContainer = containerEl.createDiv({ cls: "nova-provider-section" });
    googleContainer.createEl("h4", { text: "Google (Gemini)" });
    new import_obsidian.Setting(googleContainer).setName("API Key").setDesc("Your Google AI API key").addText((text) => text.setPlaceholder("AI...").setValue(this.plugin.settings.aiProviders.google.apiKey || "").onChange(async (value) => {
      this.plugin.settings.aiProviders.google.apiKey = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(googleContainer).setName("Model").setDesc("Gemini model to use").addDropdown((dropdown) => dropdown.addOption("gemini-2.5-flash-preview-05-20", "Gemini 2.5 Flash Preview").addOption("gemini-2.5-pro-preview-06-05", "Gemini 2.5 Pro Preview").addOption("gemini-1.5-flash", "Gemini 1.5 Flash").addOption("gemini-1.5-pro", "Gemini 1.5 Pro").setValue(this.plugin.settings.aiProviders.google.model || "gemini-2.5-flash-preview-05-20").onChange(async (value) => {
      this.plugin.settings.aiProviders.google.model = value;
      await this.plugin.saveSettings();
    }));
  }
  createOllamaSettings() {
    const { containerEl } = this;
    const ollamaContainer = containerEl.createDiv({ cls: "nova-provider-section" });
    ollamaContainer.createEl("h4", { text: "Ollama (Local)" });
    new import_obsidian.Setting(ollamaContainer).setName("Base URL").setDesc("Ollama server URL").addText((text) => text.setPlaceholder("http://localhost:11434").setValue(this.plugin.settings.aiProviders.ollama.baseUrl || "").onChange(async (value) => {
      this.plugin.settings.aiProviders.ollama.baseUrl = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(ollamaContainer).setName("Model").setDesc("Ollama model to use").addText((text) => text.setPlaceholder("llama2").setValue(this.plugin.settings.aiProviders.ollama.model || "").onChange(async (value) => {
      this.plugin.settings.aiProviders.ollama.model = value;
      await this.plugin.saveSettings();
    }));
  }
  createPlatformSettings() {
    var _a;
    const { containerEl } = this;
    containerEl.createEl("h3", { text: "Platform Settings" });
    const currentTier = ((_a = this.plugin.featureManager) == null ? void 0 : _a.getCurrentTier()) || "core";
    const isCoreTier = currentTier === "core";
    const platformContainer = containerEl.createDiv({ cls: "nova-platform-section" });
    if (isCoreTier) {
      const restrictionNotice = platformContainer.createDiv({ cls: "nova-license-message" });
      restrictionNotice.innerHTML = `
				<strong>Platform Restrictions:</strong> Core tier allows 1 local + 1 cloud provider on desktop. 
				Mobile is disabled for Core tier users.
			`;
    }
    platformContainer.createEl("h4", { text: "Desktop" });
    const desktopDropdown = new import_obsidian.Setting(platformContainer).setName("Primary Provider").setDesc("Primary AI provider for desktop").addDropdown((dropdown) => {
      const allowedProviders = this.getAllowedProvidersForPlatform("desktop");
      allowedProviders.forEach((provider) => {
        const label = this.getProviderDisplayName(provider);
        dropdown.addOption(provider, label);
      });
      return dropdown.setValue(this.plugin.settings.platformSettings.desktop.primaryProvider).onChange(async (value) => {
        if (this.validateProviderSelection(value, "desktop")) {
          this.plugin.settings.platformSettings.desktop.primaryProvider = value;
          await this.plugin.saveSettings();
          if (this.plugin.aiProviderManager) {
            this.plugin.aiProviderManager.updateSettings(this.plugin.settings);
          }
        }
      });
    });
    platformContainer.createEl("h4", { text: "Mobile" });
    const mobileDesc = isCoreTier ? "Mobile access requires SuperNova license" : "Primary AI provider for mobile";
    const mobileSetting = new import_obsidian.Setting(platformContainer).setName("Primary Provider").setDesc(mobileDesc);
    if (isCoreTier) {
      mobileSetting.addDropdown((dropdown) => dropdown.addOption("none", "Upgrade to SuperNova for Mobile Access").setValue("none").setDisabled(true));
    } else {
      mobileSetting.addDropdown((dropdown) => dropdown.addOption("none", "None (Disabled)").addOption("claude", "Claude").addOption("openai", "OpenAI").addOption("google", "Google").setValue(this.plugin.settings.platformSettings.mobile.primaryProvider).onChange(async (value) => {
        this.plugin.settings.platformSettings.mobile.primaryProvider = value;
        await this.plugin.saveSettings();
      }));
    }
  }
  getAllowedProvidersForPlatform(platform) {
    var _a;
    if (!this.plugin.aiProviderManager) {
      return ["claude", "openai", "google", "ollama"];
    }
    const currentTier = ((_a = this.plugin.featureManager) == null ? void 0 : _a.getCurrentTier()) || "core";
    if (platform === "mobile" && currentTier === "core") {
      return ["none"];
    }
    const allowedProviders = this.plugin.aiProviderManager.getAllowedProviders();
    return allowedProviders.length > 0 ? allowedProviders : ["claude", "openai", "google", "ollama"];
  }
  getProviderDisplayName(provider) {
    const names = {
      "claude": "Claude (Anthropic)",
      "openai": "OpenAI",
      "google": "Google (Gemini)",
      "ollama": "Ollama (Local)",
      "none": "None (Disabled)"
    };
    return names[provider] || provider;
  }
  validateProviderSelection(provider, platform) {
    var _a;
    const currentTier = ((_a = this.plugin.featureManager) == null ? void 0 : _a.getCurrentTier()) || "core";
    if (currentTier === "supernova") {
      return true;
    }
    if (platform === "mobile" && provider !== "none") {
      this.showLicenseMessage("\u274C Mobile access requires SuperNova license.", "error");
      return false;
    }
    if (platform === "desktop" && this.plugin.aiProviderManager) {
      if (!this.plugin.aiProviderManager.isProviderAllowed(provider)) {
        this.showLicenseMessage("\u274C This provider requires SuperNova license.", "error");
        return false;
      }
    }
    return true;
  }
};

// src/ai/provider-manager.ts
var import_obsidian2 = require("obsidian");

// src/ai/providers/claude.ts
var ClaudeProvider = class {
  constructor(config) {
    this.name = "Claude (Anthropic)";
    this.config = config;
  }
  updateConfig(config) {
    this.config = config;
  }
  async isAvailable() {
    return !!this.config.apiKey;
  }
  async generateText(prompt, options) {
    const messages = [{ role: "user", content: prompt }];
    return this.chatCompletion(messages, options);
  }
  async *generateTextStream(prompt, options) {
    const messages = [{ role: "user", content: prompt }];
    yield* this.chatCompletionStream(messages, options);
  }
  async chatCompletion(messages, options) {
    if (!this.config.apiKey) {
      throw new Error("Claude API key not configured");
    }
    const response = await fetch("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": this.config.apiKey,
        "anthropic-version": "2023-06-01"
      },
      body: JSON.stringify({
        model: (options == null ? void 0 : options.model) || this.config.model || "claude-3-haiku-20240307",
        max_tokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3,
        temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
        system: options == null ? void 0 : options.systemPrompt,
        messages: messages.map((msg) => ({
          role: msg.role === "assistant" ? "assistant" : "user",
          content: msg.content
        }))
      })
    });
    if (!response.ok) {
      throw new Error(`Claude API error: ${response.statusText}`);
    }
    const data = await response.json();
    return data.content[0].text;
  }
  async complete(systemPrompt, userPrompt, options) {
    const messages = [{ role: "user", content: userPrompt }];
    const completeOptions = { ...options, systemPrompt };
    return this.chatCompletion(messages, completeOptions);
  }
  async *chatCompletionStream(messages, options) {
    var _a, _b;
    if (!this.config.apiKey) {
      throw new Error("Claude API key not configured");
    }
    const response = await fetch("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "x-api-key": this.config.apiKey,
        "anthropic-version": "2023-06-01"
      },
      body: JSON.stringify({
        model: (options == null ? void 0 : options.model) || this.config.model || "claude-3-haiku-20240307",
        max_tokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3,
        temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
        system: options == null ? void 0 : options.systemPrompt,
        stream: true,
        messages: messages.map((msg) => ({
          role: msg.role === "assistant" ? "assistant" : "user",
          content: msg.content
        }))
      })
    });
    if (!response.ok) {
      throw new Error(`Claude API error: ${response.statusText}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("Failed to get response reader");
    }
    const decoder = new TextDecoder();
    let buffer = "";
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        buffer += decoder.decode(value, { stream: true });
        const lines = buffer.split("\n");
        buffer = lines.pop() || "";
        for (const line of lines) {
          if (line.startsWith("data: ")) {
            const data = line.slice(6);
            if (data === "[DONE]") {
              yield { content: "", done: true };
              return;
            }
            try {
              const parsed = JSON.parse(data);
              if (parsed.type === "content_block_delta" && ((_b = parsed.delta) == null ? void 0 : _b.text)) {
                yield { content: parsed.delta.text, done: false };
              }
            } catch (e) {
            }
          }
        }
      }
    } finally {
      reader.releaseLock();
    }
    yield { content: "", done: true };
  }
};

// src/ai/providers/openai.ts
var OpenAIProvider = class {
  constructor(config) {
    this.name = "OpenAI";
    this.config = config;
  }
  updateConfig(config) {
    this.config = config;
  }
  async isAvailable() {
    return !!this.config.apiKey;
  }
  async generateText(prompt, options) {
    const messages = [{ role: "user", content: prompt }];
    return this.chatCompletion(messages, options);
  }
  async *generateTextStream(prompt, options) {
    const messages = [{ role: "user", content: prompt }];
    yield* this.chatCompletionStream(messages, options);
  }
  async chatCompletion(messages, options) {
    if (!this.config.apiKey) {
      throw new Error("OpenAI API key not configured");
    }
    const requestMessages = [...messages];
    if (options == null ? void 0 : options.systemPrompt) {
      requestMessages.unshift({ role: "system", content: options.systemPrompt });
    }
    const response = await fetch(this.config.baseUrl || "https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.config.apiKey}`
      },
      body: JSON.stringify({
        model: (options == null ? void 0 : options.model) || this.config.model || "gpt-3.5-turbo",
        messages: requestMessages,
        max_tokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3,
        temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7
      })
    });
    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.statusText}`);
    }
    const data = await response.json();
    return data.choices[0].message.content;
  }
  async complete(systemPrompt, userPrompt, options) {
    const messages = [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt }
    ];
    return this.chatCompletion(messages, options);
  }
  async *chatCompletionStream(messages, options) {
    var _a, _b, _c, _d;
    if (!this.config.apiKey) {
      throw new Error("OpenAI API key not configured");
    }
    const requestMessages = [...messages];
    if (options == null ? void 0 : options.systemPrompt) {
      requestMessages.unshift({ role: "system", content: options.systemPrompt });
    }
    const response = await fetch(this.config.baseUrl || "https://api.openai.com/v1/chat/completions", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.config.apiKey}`
      },
      body: JSON.stringify({
        model: (options == null ? void 0 : options.model) || this.config.model || "gpt-3.5-turbo",
        messages: requestMessages,
        max_tokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3,
        temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
        stream: true
      })
    });
    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.statusText}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("Failed to get response reader");
    }
    const decoder = new TextDecoder();
    let buffer = "";
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        buffer += decoder.decode(value, { stream: true });
        const lines = buffer.split("\n");
        buffer = lines.pop() || "";
        for (const line of lines) {
          if (line.startsWith("data: ")) {
            const data = line.slice(6);
            if (data === "[DONE]") {
              yield { content: "", done: true };
              return;
            }
            try {
              const parsed = JSON.parse(data);
              const content = (_d = (_c = (_b = parsed.choices) == null ? void 0 : _b[0]) == null ? void 0 : _c.delta) == null ? void 0 : _d.content;
              if (content) {
                yield { content, done: false };
              }
            } catch (e) {
            }
          }
        }
      }
    } finally {
      reader.releaseLock();
    }
    yield { content: "", done: true };
  }
};

// src/ai/providers/google.ts
var GoogleProvider = class {
  constructor(config) {
    this.name = "Google (Gemini)";
    this.config = config;
  }
  updateConfig(config) {
    this.config = config;
  }
  async isAvailable() {
    return !!this.config.apiKey;
  }
  async generateText(prompt, options) {
    const messages = [{ role: "user", content: prompt }];
    return this.chatCompletion(messages, options);
  }
  async *generateTextStream(prompt, options) {
    const messages = [{ role: "user", content: prompt }];
    yield* this.chatCompletionStream(messages, options);
  }
  formatMessagesForGemini(messages, systemPrompt) {
    const contents = [];
    if (systemPrompt) {
      contents.push({
        role: "user",
        parts: [{ text: `System: ${systemPrompt}` }]
      });
    }
    for (const message of messages) {
      const role = message.role === "assistant" ? "model" : "user";
      contents.push({
        role,
        parts: [{ text: message.content }]
      });
    }
    return contents;
  }
  async chatCompletion(messages, options) {
    if (!this.config.apiKey) {
      throw new Error("Google API key not configured");
    }
    const model = (options == null ? void 0 : options.model) || this.config.model || "gemini-pro";
    const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${this.config.apiKey}`;
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        contents: this.formatMessagesForGemini(messages, options == null ? void 0 : options.systemPrompt),
        generationConfig: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          maxOutputTokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Google API error: ${response.statusText}`);
    }
    const data = await response.json();
    return data.candidates[0].content.parts[0].text;
  }
  async complete(systemPrompt, userPrompt, options) {
    const messages = [{ role: "user", content: userPrompt }];
    const completeOptions = { ...options, systemPrompt };
    return this.chatCompletion(messages, completeOptions);
  }
  async *chatCompletionStream(messages, options) {
    var _a, _b, _c, _d, _e, _f;
    if (!this.config.apiKey) {
      throw new Error("Google API key not configured");
    }
    const model = (options == null ? void 0 : options.model) || this.config.model || "gemini-pro";
    const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:streamGenerateContent?key=${this.config.apiKey}`;
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        contents: this.formatMessagesForGemini(messages, options == null ? void 0 : options.systemPrompt),
        generationConfig: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          maxOutputTokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Google API error: ${response.statusText}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("Failed to get response reader");
    }
    const decoder = new TextDecoder();
    let buffer = "";
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        buffer += decoder.decode(value, { stream: true });
        const lines = buffer.split("\n");
        buffer = lines.pop() || "";
        for (const line of lines) {
          if (line.trim()) {
            try {
              const parsed = JSON.parse(line);
              const text = (_f = (_e = (_d = (_c = (_b = parsed.candidates) == null ? void 0 : _b[0]) == null ? void 0 : _c.content) == null ? void 0 : _d.parts) == null ? void 0 : _e[0]) == null ? void 0 : _f.text;
              if (text) {
                yield { content: text, done: false };
              }
            } catch (e) {
            }
          }
        }
      }
    } finally {
      reader.releaseLock();
    }
    yield { content: "", done: true };
  }
};

// src/ai/providers/ollama.ts
var OllamaProvider = class {
  constructor(config) {
    this.name = "Ollama (Local)";
    this.config = config;
  }
  updateConfig(config) {
    this.config = config;
  }
  async isAvailable() {
    if (!this.config.model) return false;
    try {
      const baseUrl = this.config.baseUrl || "http://localhost:11434";
      const response = await fetch(`${baseUrl}/api/tags`, {
        method: "GET",
        headers: { "Content-Type": "application/json" }
      });
      return response.ok;
    } catch (e) {
      return false;
    }
  }
  async generateText(prompt, options) {
    const baseUrl = this.config.baseUrl || "http://localhost:11434";
    const model = (options == null ? void 0 : options.model) || this.config.model;
    if (!model) {
      throw new Error("Ollama model must be specified");
    }
    const response = await fetch(`${baseUrl}/api/generate`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model,
        prompt,
        stream: false,
        options: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          num_predict: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.statusText}`);
    }
    const data = await response.json();
    return data.response;
  }
  async *generateTextStream(prompt, options) {
    var _a;
    const baseUrl = this.config.baseUrl || "http://localhost:11434";
    const model = (options == null ? void 0 : options.model) || this.config.model;
    if (!model) {
      throw new Error("Ollama model must be specified");
    }
    const response = await fetch(`${baseUrl}/api/generate`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model,
        prompt,
        stream: true,
        options: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          num_predict: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.statusText}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("Failed to get response reader");
    }
    const decoder = new TextDecoder();
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        const lines = decoder.decode(value).split("\n");
        for (const line of lines) {
          if (line.trim()) {
            try {
              const parsed = JSON.parse(line);
              if (parsed.response) {
                yield { content: parsed.response, done: false };
              }
              if (parsed.done) {
                yield { content: "", done: true };
                return;
              }
            } catch (e) {
            }
          }
        }
      }
    } finally {
      reader.releaseLock();
    }
    yield { content: "", done: true };
  }
  async chatCompletion(messages, options) {
    const baseUrl = this.config.baseUrl || "http://localhost:11434";
    const model = (options == null ? void 0 : options.model) || this.config.model;
    if (!model) {
      throw new Error("Ollama model must be specified");
    }
    const response = await fetch(`${baseUrl}/api/chat`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model,
        messages: messages.map((msg) => ({
          role: msg.role,
          content: msg.content
        })),
        stream: false,
        options: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          num_predict: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.statusText}`);
    }
    const data = await response.json();
    return data.message.content;
  }
  async complete(systemPrompt, userPrompt, options) {
    const messages = [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt }
    ];
    return this.chatCompletion(messages, options);
  }
  async *chatCompletionStream(messages, options) {
    var _a, _b;
    const baseUrl = this.config.baseUrl || "http://localhost:11434";
    const model = (options == null ? void 0 : options.model) || this.config.model;
    if (!model) {
      throw new Error("Ollama model must be specified");
    }
    const response = await fetch(`${baseUrl}/api/chat`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model,
        messages: messages.map((msg) => ({
          role: msg.role,
          content: msg.content
        })),
        stream: true,
        options: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          num_predict: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.statusText}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("Failed to get response reader");
    }
    const decoder = new TextDecoder();
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        const lines = decoder.decode(value).split("\n");
        for (const line of lines) {
          if (line.trim()) {
            try {
              const parsed = JSON.parse(line);
              if ((_b = parsed.message) == null ? void 0 : _b.content) {
                yield { content: parsed.message.content, done: false };
              }
              if (parsed.done) {
                yield { content: "", done: true };
                return;
              }
            } catch (e) {
            }
          }
        }
      }
    } finally {
      reader.releaseLock();
    }
    yield { content: "", done: true };
  }
};

// src/ai/provider-manager.ts
var AIProviderManager = class {
  constructor(settings, featureManager) {
    this.providers = /* @__PURE__ */ new Map();
    this.settings = settings;
    this.featureManager = featureManager;
  }
  async initialize() {
    this.providers.set("claude", new ClaudeProvider(this.settings.aiProviders.claude));
    this.providers.set("openai", new OpenAIProvider(this.settings.aiProviders.openai));
    this.providers.set("google", new GoogleProvider(this.settings.aiProviders.google));
    this.providers.set("ollama", new OllamaProvider(this.settings.aiProviders.ollama));
  }
  updateSettings(settings) {
    this.settings = settings;
    this.providers.forEach((provider, type) => {
      var _a;
      if (type !== "none" && type in this.settings.aiProviders) {
        (_a = provider.updateConfig) == null ? void 0 : _a.call(provider, this.settings.aiProviders[type]);
      }
    });
  }
  getPlatformProviders() {
    if (import_obsidian2.Platform.isMobile && this.featureManager) {
      if (!this.featureManager.isFeatureEnabled("mobile_access")) {
        return ["none"];
      }
    }
    const platform = import_obsidian2.Platform.isMobile ? "mobile" : "desktop";
    const platformSettings = this.settings.platformSettings[platform];
    let providers = [platformSettings.primaryProvider, ...platformSettings.fallbackProviders];
    if (this.featureManager && !this.featureManager.isFeatureEnabled("unlimited_cloud_ai")) {
      providers = this.filterProvidersForCoreTier(providers);
    }
    return providers;
  }
  filterProvidersForCoreTier(providers) {
    const localProviders = ["ollama"];
    const cloudProviders = ["claude", "openai", "google"];
    let allowedLocal = [];
    let allowedCloud = [];
    for (const provider of providers) {
      if (localProviders.includes(provider) && allowedLocal.length === 0) {
        allowedLocal.push(provider);
        break;
      }
    }
    for (const provider of providers) {
      if (cloudProviders.includes(provider) && allowedCloud.length === 0) {
        allowedCloud.push(provider);
        break;
      }
    }
    return providers.filter(
      (p) => p === "none" || allowedLocal.includes(p) || allowedCloud.includes(p)
    );
  }
  async getAvailableProvider() {
    const orderedProviders = this.getPlatformProviders();
    if (orderedProviders[0] === "none") {
      return null;
    }
    for (const providerType of orderedProviders) {
      if (providerType === "none") continue;
      const provider = this.providers.get(providerType);
      if (provider && await provider.isAvailable()) {
        return provider;
      }
    }
    return null;
  }
  async generateText(prompt, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    return provider.generateText(prompt, options);
  }
  async *generateTextStream(prompt, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    yield* provider.generateTextStream(prompt, options);
  }
  async chatCompletion(messages, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    return provider.chatCompletion(messages, options);
  }
  async *chatCompletionStream(messages, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    yield* provider.chatCompletionStream(messages, options);
  }
  getProviderNames() {
    return Array.from(this.providers.values()).map((p) => p.name);
  }
  async getCurrentProviderName() {
    const provider = await this.getAvailableProvider();
    return provider ? provider.name : "None";
  }
  async complete(systemPrompt, userPrompt, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    return provider.complete(systemPrompt, userPrompt, options);
  }
  getAllowedProviders() {
    return this.getPlatformProviders();
  }
  isProviderAllowed(providerType) {
    return this.getAllowedProviders().includes(providerType);
  }
  getProviderLimits() {
    if (this.featureManager && this.featureManager.isFeatureEnabled("unlimited_cloud_ai")) {
      return { local: Infinity, cloud: Infinity };
    }
    return { local: 1, cloud: 1 };
  }
  cleanup() {
    this.providers.clear();
  }
};

// src/ui/sidebar-view.ts
var import_obsidian3 = require("obsidian");
var VIEW_TYPE_NOVA_SIDEBAR = "nova-sidebar";
var NovaSidebarView = class extends import_obsidian3.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.currentFile = null;
    this.plugin = plugin;
  }
  getViewType() {
    return VIEW_TYPE_NOVA_SIDEBAR;
  }
  getDisplayText() {
    return "Nova AI";
  }
  getIcon() {
    return "nova-star";
  }
  async onOpen() {
    var _a, _b, _c;
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("nova-sidebar-container");
    if (import_obsidian3.Platform.isMobile && ((_a = this.plugin.featureManager) == null ? void 0 : _a.getCurrentTier()) === "core") {
      if (!this.plugin.featureManager.isFeatureEnabled("mobile_access")) {
        this.showMobileBlockedMessage(container);
        return;
      }
    }
    const wrapperEl = container.createDiv({ cls: "nova-wrapper" });
    wrapperEl.style.cssText = `
			display: flex;
			flex-direction: column;
			height: 100%;
			overflow: hidden;
		`;
    const headerEl = wrapperEl.createDiv({ cls: "nova-header" });
    headerEl.style.cssText = `
			display: flex;
			align-items: center;
			justify-content: space-between;
			padding: 10px;
			border-bottom: 1px solid var(--background-modifier-border);
			flex-shrink: 0;
		`;
    const titleEl = headerEl.createEl("h4");
    titleEl.style.cssText = "margin: 0; font-size: 1.1em; display: flex; align-items: center; gap: 6px;";
    titleEl.innerHTML = `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: 18px; height: 18px;">
			<circle cx="12" cy="12" r="2.5" fill="currentColor"/>
			<path d="M12 1L12 6" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M12 18L12 23" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M23 12L18 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M6 12L1 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M18.364 5.636L15.536 8.464" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M8.464 15.536L5.636 18.364" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M18.364 18.364L15.536 15.536" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M8.464 8.464L5.636 5.636" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
		</svg>Nova`;
    const rightContainer = headerEl.createDiv();
    rightContainer.style.cssText = "display: flex; align-items: center; gap: 8px;";
    const currentTier = ((_b = this.plugin.featureManager) == null ? void 0 : _b.getCurrentTier()) || "core";
    const canSwitchProviders = ((_c = this.plugin.featureManager) == null ? void 0 : _c.isFeatureEnabled("provider_switching")) || false;
    if (canSwitchProviders) {
      this.createProviderDropdown(rightContainer);
    } else {
      this.createStaticProviderStatus(rightContainer);
    }
    const clearButton = new import_obsidian3.ButtonComponent(rightContainer);
    clearButton.setButtonText("Clear").setTooltip("Clear conversation history").onClick(() => this.clearChat());
    this.createChatInterface(wrapperEl);
    this.createInputInterface(wrapperEl);
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        this.loadConversationForActiveFile();
      })
    );
    this.loadConversationForActiveFile();
  }
  async onClose() {
    var _a;
    if ((_a = this.currentProviderDropdown) == null ? void 0 : _a.cleanup) {
      this.currentProviderDropdown.cleanup();
    }
  }
  createChatInterface(container) {
    this.chatContainer = container.createDiv({ cls: "nova-chat-container" });
    this.chatContainer.style.cssText = `
			flex: 1;
			overflow-y: auto;
			padding: 10px;
			background: var(--background-secondary);
			display: flex;
			flex-direction: column;
			gap: 8px;
		`;
    this.addWelcomeMessage();
  }
  createInputInterface(container) {
    this.inputContainer = container.createDiv({ cls: "nova-input-container" });
    this.inputContainer.style.cssText = `
			display: flex;
			flex-direction: column;
			gap: 8px;
			padding: 10px;
			border-top: 1px solid var(--background-modifier-border);
			flex-shrink: 0;
		`;
    const inputRow = this.inputContainer.createDiv({ cls: "nova-input-row" });
    inputRow.style.cssText = `
			display: flex;
			align-items: center;
			gap: 8px;
		`;
    const textAreaContainer = inputRow.createDiv();
    textAreaContainer.style.cssText = "flex: 1;";
    this.textArea = new import_obsidian3.TextAreaComponent(textAreaContainer);
    this.textArea.setPlaceholder("Ask Nova to help edit your document...");
    this.textArea.inputEl.style.cssText = `
			width: 100%;
			min-height: 38px;
			max-height: 120px;
			resize: vertical;
			border: 1px solid var(--background-modifier-border);
			border-radius: 8px;
			padding: 10px;
			font-size: var(--font-text-size);
			line-height: var(--line-height-normal);
		`;
    this.sendButton = new import_obsidian3.ButtonComponent(inputRow);
    this.sendButton.setIcon("send");
    this.sendButton.setTooltip("Send message");
    this.sendButton.setCta();
    this.sendButton.onClick(() => this.handleSend());
    this.sendButton.buttonEl.style.cssText = `
			width: 36px;
			height: 36px;
			border-radius: 50%;
			display: flex;
			align-items: center;
			justify-content: center;
			padding: 0;
			flex-shrink: 0;
		`;
    this.textArea.inputEl.addEventListener("keydown", (event) => {
      if (event.key === "Enter" && !event.shiftKey) {
        event.preventDefault();
        this.handleSend();
      }
    });
  }
  addMessage(role, content) {
    const messageEl = this.chatContainer.createDiv({ cls: `nova-message nova-message-${role}` });
    messageEl.style.cssText = `
			margin-bottom: 10px;
			padding: 8px 12px;
			border-radius: 8px;
			max-width: 85%;
			${role === "user" ? "margin-left: auto; background: var(--interactive-accent); color: var(--text-on-accent);" : role === "system" ? "margin: 0 auto; background: var(--background-modifier-hover); color: var(--text-muted); text-align: center; font-size: 0.9em;" : "background: var(--background-primary); border: 1px solid var(--background-modifier-border);"}
		`;
    const roleEl = messageEl.createEl("div", {
      text: role === "user" ? "You" : role === "system" ? "System" : "Nova",
      cls: "nova-message-role"
    });
    roleEl.style.cssText = `
			font-size: 0.8em;
			opacity: 0.7;
			margin-bottom: 4px;
			font-weight: 600;
		`;
    const contentEl = messageEl.createEl("div", { cls: "nova-message-content" });
    contentEl.textContent = content;
    setTimeout(() => {
      this.chatContainer.scrollTo({
        top: this.chatContainer.scrollHeight,
        behavior: "smooth"
      });
    }, 50);
  }
  addWelcomeMessage(message) {
    const welcomeEl = this.chatContainer.createDiv({ cls: "nova-welcome" });
    welcomeEl.style.cssText = `
			display: flex;
			align-items: center;
			gap: 12px;
			margin: 16px auto;
			padding: 16px 20px;
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: 18px;
			max-width: 90%;
			animation: fadeIn 0.5s ease-in;
		`;
    const iconContainer = welcomeEl.createDiv({ cls: "nova-welcome-icon" });
    iconContainer.style.cssText = `
			position: relative;
			width: 32px;
			height: 32px;
			flex-shrink: 0;
		`;
    iconContainer.innerHTML = `
			<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: 32px; height: 32px; color: var(--interactive-accent);">
				<circle cx="12" cy="12" r="2.5" fill="currentColor"/>
				<path d="M12 1L12 6" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
				<path d="M12 18L12 23" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
				<path d="M23 12L18 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
				<path d="M6 12L1 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
				<path d="M18.364 5.636L15.536 8.464" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
				<path d="M8.464 15.536L5.636 18.364" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
				<path d="M18.364 18.364L15.536 15.536" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
				<path d="M8.464 8.464L5.636 5.636" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			</svg>
		`;
    const textContainer = welcomeEl.createDiv();
    textContainer.style.cssText = `
			flex: 1;
			line-height: 1.4;
		`;
    const titleEl = textContainer.createDiv({ text: "Welcome to Nova" });
    titleEl.style.cssText = `
			font-weight: 600;
			color: var(--text-normal);
			margin-bottom: 4px;
			font-size: var(--font-text-size);
		`;
    const subtitleEl = textContainer.createDiv({ text: message || "Your AI thinking partner. Ask me to help edit your document!" });
    subtitleEl.style.cssText = `
			color: var(--text-muted);
			font-size: 0.9em;
		`;
    setTimeout(() => {
      this.chatContainer.scrollTo({
        top: this.chatContainer.scrollHeight,
        behavior: "smooth"
      });
    }, 50);
  }
  addSuccessIndicator(action) {
    const indicatorEl = this.chatContainer.createDiv({ cls: "nova-success-indicator" });
    indicatorEl.style.cssText = `
			display: flex;
			align-items: center;
			justify-content: center;
			margin: 8px auto;
			padding: 6px 12px;
			background: rgba(76, 175, 80, 0.1);
			border: 1px solid rgba(76, 175, 80, 0.3);
			border-radius: 16px;
			font-size: 0.8em;
			color: var(--text-muted);
			max-width: 200px;
			animation: fadeIn 0.3s ease-in;
		`;
    indicatorEl.innerHTML = `
			<div style="width: 12px; height: 12px; margin-right: 6px; border-radius: 50%; background: #4caf50; display: flex; align-items: center; justify-content: center;">
				<div style="width: 4px; height: 2px; border-left: 1px solid white; border-bottom: 1px solid white; transform: rotate(-45deg) translate(-0.5px, -0.5px);"></div>
			</div>
			${this.getCompactSuccessMessage(action)}
		`;
    setTimeout(() => {
      this.chatContainer.scrollTo({
        top: this.chatContainer.scrollHeight,
        behavior: "smooth"
      });
    }, 50);
  }
  getCompactSuccessMessage(action) {
    switch (action) {
      case "add":
        return "Content added";
      case "edit":
        return "Content edited";
      case "delete":
        return "Content deleted";
      case "grammar":
        return "Grammar fixed";
      case "rewrite":
        return "Content rewritten";
      default:
        return "Command completed";
    }
  }
  async handleSend() {
    const message = this.textArea.getValue().trim();
    if (!message) return;
    this.addMessage("user", message);
    this.textArea.setValue("");
    this.sendButton.setDisabled(true);
    try {
      const loadingEl = this.chatContainer.createDiv({ cls: "nova-loading" });
      loadingEl.style.cssText = `
				padding: 12px 16px;
				background: var(--background-primary);
				border: 1px solid var(--background-modifier-border);
				border-radius: 12px;
				margin-bottom: 8px;
				max-width: 80%;
				display: flex;
				align-items: center;
				gap: 10px;
			`;
      const novaContainer = loadingEl.createDiv({ cls: "nova-burst-container" });
      novaContainer.innerHTML = `
				<div class="nova-burst">
					<div class="nova-core"></div>
					<div class="nova-ring nova-ring-1"></div>
					<div class="nova-ring nova-ring-2"></div>
					<div class="nova-ring nova-ring-3"></div>
				</div>
			`;
      const textEl = loadingEl.createSpan({ text: "Nova is thinking..." });
      textEl.style.cssText = "color: var(--text-muted); font-size: 0.9em;";
      const activeFile = this.app.workspace.getActiveFile();
      if (activeFile) {
        await this.plugin.documentEngine.addUserMessage(message);
      }
      const isLikelyCommand = this.plugin.promptBuilder["isLikelyCommand"](message);
      let response = null;
      if (isLikelyCommand && activeFile) {
        const parsedCommand = this.plugin.commandParser.parseCommand(message);
        response = await this.executeCommand(parsedCommand);
      } else {
        const prompt = await this.plugin.promptBuilder.buildPromptForMessage(message, activeFile || void 0);
        response = await this.plugin.aiProviderManager.complete(prompt.systemPrompt, prompt.userPrompt, {
          temperature: prompt.config.temperature,
          maxTokens: prompt.config.maxTokens
        });
      }
      loadingEl.remove();
      if (activeFile && response) {
        await this.plugin.documentEngine.addAssistantMessage(response);
      }
      if (response) {
        this.addMessage("assistant", response);
      }
    } catch (error) {
      const loadingEl = this.chatContainer.querySelector(".nova-loading");
      if (loadingEl) loadingEl.remove();
      this.addMessage("assistant", `Sorry, I encountered an error: ${error.message}`);
    } finally {
      this.sendButton.setDisabled(false);
    }
  }
  async insertTextIntoActiveNote(text) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian3.ItemView);
    if (activeView && "editor" in activeView) {
      const editor = activeView.editor;
      if (editor) {
        const cursor = editor.getCursor();
        editor.replaceRange(text, cursor);
      }
    }
  }
  async executeCommand(command) {
    try {
      if (!this.currentFile) {
        return `\u274C No markdown file is open. Please open a file in the editor to use editing commands.`;
      }
      const leaves = this.app.workspace.getLeavesOfType("markdown");
      let markdownView = null;
      for (const leaf of leaves) {
        const view = leaf.view;
        if (view.file === this.currentFile) {
          markdownView = view;
          break;
        }
      }
      if (!markdownView) {
        const leaf = this.app.workspace.getLeaf(false);
        if (leaf) {
          await leaf.openFile(this.currentFile);
          markdownView = leaf.view;
        }
      }
      if (!markdownView) {
        return `\u274C Unable to access the file "${this.currentFile.basename}". Please make sure it's open in the editor.`;
      }
      let result;
      switch (command.action) {
        case "add":
          result = await this.plugin.addCommandHandler.execute(command);
          break;
        case "edit":
          result = await this.plugin.editCommandHandler.execute(command);
          break;
        case "delete":
          result = await this.plugin.deleteCommandHandler.execute(command);
          break;
        case "grammar":
          result = await this.plugin.grammarCommandHandler.execute(command);
          break;
        case "rewrite":
          result = await this.plugin.rewriteCommandHandler.execute(command);
          break;
        default:
          return `I don't understand the command "${command.action}". Try asking me to add, edit, delete, fix grammar, or rewrite content.`;
      }
      if (result.success) {
        this.addSuccessIndicator(command.action);
        return null;
      } else {
        return `Failed to ${command.action}: ${result.error}`;
      }
    } catch (error) {
      return `\u274C Error executing command: ${error.message}`;
    }
  }
  async loadConversationForActiveFile() {
    const activeFile = this.app.workspace.getActiveFile();
    let targetFile = activeFile;
    if (!targetFile) {
      const leaves = this.app.workspace.getLeavesOfType("markdown");
      if (leaves.length > 0) {
        const view = leaves[0].view;
        targetFile = view.file;
      }
    }
    if (!targetFile || targetFile === this.currentFile) {
      return;
    }
    this.currentFile = targetFile;
    this.chatContainer.empty();
    try {
      const recentMessages = await this.plugin.conversationManager.getRecentMessages(targetFile, 10);
      if (recentMessages.length > 0) {
        recentMessages.forEach((msg) => {
          if (msg.role !== "system") {
            this.addMessage(msg.role, msg.content);
          }
        });
      } else {
        this.addWelcomeMessage(`Ready to help you with "${targetFile.basename}". What would you like to do?`);
      }
    } catch (error) {
      console.warn("Failed to load conversation history:", error);
      this.addWelcomeMessage(`Ready to help you with "${targetFile.basename}". What would you like to do?`);
    }
  }
  async clearChat() {
    this.chatContainer.empty();
    if (this.currentFile) {
      try {
        await this.plugin.conversationManager.clearConversation(this.currentFile);
      } catch (error) {
        console.warn("Failed to clear conversation:", error);
      }
    }
    if (this.currentFile) {
      this.addWelcomeMessage(`Chat cleared! Ready to help you with "${this.currentFile.basename}". What would you like to do?`);
    } else {
      this.addWelcomeMessage("Chat cleared! Ready to help. What would you like to do?");
    }
    new import_obsidian3.Notice("Chat history cleared");
  }
  // Public methods for testing
  async sendMessage(message) {
    const activeFile = this.plugin.documentEngine.getActiveFile();
    const prompt = await this.plugin.promptBuilder.buildPromptForMessage(message, activeFile || void 0);
    const command = this.plugin.commandParser.parseCommand(message);
    const validActions = ["add", "edit", "delete", "grammar", "rewrite"];
    if (validActions.includes(command.action)) {
      switch (command.action) {
        case "add":
          await this.plugin.addCommandHandler.execute(command);
          break;
        case "edit":
          await this.plugin.editCommandHandler.execute(command);
          break;
        case "delete":
          await this.plugin.deleteCommandHandler.execute(command);
          break;
        case "grammar":
          await this.plugin.grammarCommandHandler.execute(command);
          break;
        case "rewrite":
          await this.plugin.rewriteCommandHandler.execute(command);
          break;
      }
    } else {
      if (activeFile) {
        await this.plugin.conversationManager.addUserMessage(activeFile, message, null);
      }
      await this.plugin.aiProviderManager.complete(prompt.systemPrompt, prompt.userPrompt);
      if (activeFile) {
        await this.plugin.conversationManager.addAssistantMessage(activeFile, "AI response", { success: true, editType: "none" });
      }
    }
  }
  async loadConversationHistory(file) {
    const messages = await this.plugin.conversationManager.getRecentMessages(file, 50);
  }
  /**
   * Create static provider status for Core tier users
   */
  createStaticProviderStatus(container) {
    const providerStatus = container.createDiv({ cls: "nova-header-provider" });
    providerStatus.style.cssText = `
			display: flex;
			align-items: center;
			gap: 4px;
			font-size: 0.75em;
			color: var(--text-muted);
			opacity: 0.8;
		`;
    const headerStatusDot = providerStatus.createSpan({ cls: "nova-status-dot-small" });
    headerStatusDot.style.cssText = `
			width: 6px;
			height: 6px;
			border-radius: 50%;
			background: #4caf50;
		`;
    const headerProviderName = providerStatus.createSpan({ text: "Loading..." });
    this.plugin.aiProviderManager.getCurrentProviderName().then((name) => {
      headerProviderName.setText(name);
    });
  }
  /**
   * Create provider dropdown for SuperNova tier users
   */
  createProviderDropdown(container) {
    const dropdownContainer = container.createDiv({ cls: "nova-provider-dropdown-container" });
    dropdownContainer.style.cssText = `
			position: relative;
			display: flex;
			align-items: center;
		`;
    const providerButton = dropdownContainer.createEl("button", { cls: "nova-provider-button" });
    providerButton.style.cssText = `
			display: flex;
			align-items: center;
			gap: 4px;
			padding: 4px 8px;
			font-size: 0.75em;
			color: var(--text-muted);
			background: var(--background-modifier-hover);
			border: 1px solid var(--background-modifier-border);
			border-radius: 4px;
			cursor: pointer;
			transition: background-color 0.2s ease;
		`;
    const statusDot = providerButton.createSpan({ cls: "nova-status-dot-small" });
    statusDot.style.cssText = `
			width: 6px;
			height: 6px;
			border-radius: 50%;
			background: #4caf50;
		`;
    const providerName = providerButton.createSpan({ text: "Loading..." });
    const dropdownArrow = providerButton.createSpan({ text: "\u25BC" });
    dropdownArrow.style.cssText = `
			font-size: 0.6em;
			margin-left: 4px;
			transition: transform 0.2s ease;
		`;
    const dropdownMenu = dropdownContainer.createDiv({ cls: "nova-provider-dropdown-menu" });
    dropdownMenu.style.cssText = `
			position: absolute;
			top: 100%;
			right: 0;
			min-width: 150px;
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: 6px;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			z-index: 1000;
			display: none;
			overflow: hidden;
		`;
    let isDropdownOpen = false;
    const updateCurrentProvider = async () => {
      const currentProviderName = await this.plugin.aiProviderManager.getCurrentProviderName();
      providerName.setText(currentProviderName);
    };
    const toggleDropdown = () => {
      isDropdownOpen = !isDropdownOpen;
      dropdownMenu.style.display = isDropdownOpen ? "block" : "none";
      dropdownArrow.style.transform = isDropdownOpen ? "rotate(180deg)" : "rotate(0deg)";
      if (isDropdownOpen) {
        this.populateProviderDropdown(dropdownMenu);
      }
    };
    const closeDropdown = (event) => {
      if (!dropdownContainer.contains(event.target)) {
        isDropdownOpen = false;
        dropdownMenu.style.display = "none";
        dropdownArrow.style.transform = "rotate(0deg)";
      }
    };
    providerButton.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleDropdown();
    });
    document.addEventListener("click", closeDropdown);
    updateCurrentProvider();
    this.currentProviderDropdown = {
      updateCurrentProvider,
      cleanup: () => document.removeEventListener("click", closeDropdown)
    };
  }
  /**
   * Populate provider dropdown with available providers
   */
  async populateProviderDropdown(dropdownMenu) {
    dropdownMenu.empty();
    const allowedProviders = this.plugin.aiProviderManager.getAllowedProviders();
    const currentProviderName = await this.plugin.aiProviderManager.getCurrentProviderName();
    for (const providerType of allowedProviders) {
      if (providerType === "none") continue;
      const providerItem = dropdownMenu.createDiv({ cls: "nova-provider-dropdown-item" });
      providerItem.style.cssText = `
				padding: 8px 12px;
				cursor: pointer;
				display: flex;
				align-items: center;
				gap: 8px;
				font-size: 0.85em;
				transition: background-color 0.2s ease;
			`;
      const providerDot = providerItem.createSpan();
      providerDot.style.cssText = `
				width: 8px;
				height: 8px;
				border-radius: 50%;
				background: ${this.getProviderColor(providerType)};
			`;
      const displayName = this.getProviderDisplayName(providerType);
      const nameSpan = providerItem.createSpan({ text: displayName });
      const isCurrent = displayName === currentProviderName;
      if (isCurrent) {
        providerItem.style.background = "var(--background-modifier-hover)";
        nameSpan.style.fontWeight = "bold";
      }
      providerItem.addEventListener("click", async () => {
        if (!isCurrent) {
          await this.switchToProvider(providerType);
          dropdownMenu.style.display = "none";
          if (this.currentProviderDropdown) {
            this.currentProviderDropdown.updateCurrentProvider();
          }
        }
      });
      providerItem.addEventListener("mouseenter", () => {
        if (!isCurrent) {
          providerItem.style.background = "var(--background-modifier-border-hover)";
        }
      });
      providerItem.addEventListener("mouseleave", () => {
        if (!isCurrent) {
          providerItem.style.background = "transparent";
        }
      });
    }
  }
  /**
   * Get display name for provider
   */
  getProviderDisplayName(providerType) {
    const names = {
      "claude": "Claude",
      "openai": "OpenAI",
      "google": "Gemini",
      "ollama": "Ollama",
      "none": "None"
    };
    return names[providerType] || providerType;
  }
  /**
   * Get color for provider type
   */
  getProviderColor(providerType) {
    const colors = {
      "claude": "#D2691E",
      "openai": "#10A37F",
      "google": "#4285F4",
      "ollama": "#7C3AED",
      "none": "#999"
    };
    return colors[providerType] || "#4caf50";
  }
  /**
   * Switch to a different provider and update conversation context
   */
  async switchToProvider(providerType) {
    try {
      const switchMessage = `\u{1F504} Switched to ${this.getProviderDisplayName(providerType)}`;
      this.addMessage("system", switchMessage);
      const platform = import_obsidian3.Platform.isMobile ? "mobile" : "desktop";
      this.plugin.settings.platformSettings[platform].primaryProvider = providerType;
      await this.plugin.saveSettings();
      this.plugin.aiProviderManager.updateSettings(this.plugin.settings);
    } catch (error) {
      console.error("Error switching provider:", error);
      this.addMessage("system", `\u274C Failed to switch to ${this.getProviderDisplayName(providerType)}`);
    }
  }
  /**
   * Show blocked message for Core tier mobile users
   */
  showMobileBlockedMessage(container) {
    container.addClass("nova-mobile-blocked");
    const messageContainer = container.createDiv({ cls: "nova-mobile-block-container" });
    messageContainer.innerHTML = `
			<div class="nova-mobile-block-content">
				<div class="nova-block-icon">\u{1F6AB}</div>
				<h3>Mobile Access Restricted</h3>
				<div class="nova-tier-badge core">
					<span class="tier-icon">\u{1F193}</span>
					<span class="tier-name">Core (Free)</span>
				</div>
				<p>Nova Core is designed for desktop use only.</p>
				<p>Mobile access is available with Nova SuperNova.</p>
				
				<div class="nova-feature-list">
					<h4>SuperNova includes:</h4>
					<ul>
						<li>\u2705 Mobile device support</li>
						<li>\u2705 Multiple AI providers</li>
						<li>\u2705 In-chat provider switching</li>
						<li>\u2705 Advanced templates</li>
					</ul>
				</div>
				
				<button class="mod-cta nova-upgrade-btn">
					\u2B50 Upgrade to SuperNova
				</button>
			</div>
		`;
    const upgradeBtn = messageContainer.querySelector(".nova-upgrade-btn");
    upgradeBtn.addEventListener("click", () => {
      window.open("https://novawriter.ai/upgrade", "_blank");
    });
  }
};

// src/core/document-engine.ts
var import_obsidian4 = require("obsidian");

// src/core/conversation-manager.ts
var ConversationManager = class {
  constructor(dataStore) {
    this.dataStore = dataStore;
    this.conversations = /* @__PURE__ */ new Map();
    this.maxMessagesPerFile = 100;
    // Limit conversation history
    this.storageKey = "nova-conversations";
    this.loadConversations();
  }
  /**
   * Load conversations from plugin data
   */
  async loadConversations() {
    try {
      const data = await this.dataStore.loadData(this.storageKey);
      if (data && Array.isArray(data)) {
        for (const conversation of data) {
          this.conversations.set(conversation.filePath, conversation);
        }
      }
    } catch (error) {
      console.warn("Failed to load conversation data:", error);
    }
  }
  /**
   * Save conversations to plugin data
   */
  async saveConversations() {
    try {
      const conversationsArray = Array.from(this.conversations.values());
      await this.dataStore.saveData(this.storageKey, conversationsArray);
    } catch (error) {
      console.error("Failed to save conversation data:", error);
    }
  }
  /**
   * Get conversation for a specific file
   */
  getConversation(file) {
    const filePath = file.path;
    if (!this.conversations.has(filePath)) {
      const newConversation = {
        filePath,
        messages: [],
        lastUpdated: Date.now(),
        metadata: {
          editCount: 0,
          commandFrequency: {
            add: 0,
            edit: 0,
            delete: 0,
            grammar: 0,
            rewrite: 0
          }
        }
      };
      this.conversations.set(filePath, newConversation);
    }
    return this.conversations.get(filePath);
  }
  /**
   * Add a user message to the conversation
   */
  async addUserMessage(file, content, command) {
    const conversation = this.getConversation(file);
    const message = {
      id: this.generateMessageId(),
      role: "user",
      content,
      timestamp: Date.now(),
      command
    };
    conversation.messages.push(message);
    conversation.lastUpdated = Date.now();
    if (command && conversation.metadata) {
      conversation.metadata.commandFrequency[command.action]++;
    }
    await this.trimAndSave(conversation);
    return message;
  }
  /**
   * Add an assistant response to the conversation
   */
  async addAssistantMessage(file, content, result) {
    const conversation = this.getConversation(file);
    const message = {
      id: this.generateMessageId(),
      role: "assistant",
      content,
      timestamp: Date.now(),
      result
    };
    conversation.messages.push(message);
    conversation.lastUpdated = Date.now();
    if ((result == null ? void 0 : result.success) && conversation.metadata) {
      conversation.metadata.editCount++;
    }
    await this.trimAndSave(conversation);
    return message;
  }
  /**
   * Add a system message to the conversation
   */
  async addSystemMessage(file, content) {
    const conversation = this.getConversation(file);
    const message = {
      id: this.generateMessageId(),
      role: "system",
      content,
      timestamp: Date.now()
    };
    conversation.messages.push(message);
    conversation.lastUpdated = Date.now();
    await this.trimAndSave(conversation);
    return message;
  }
  /**
   * Get recent messages for context
   */
  getRecentMessages(file, count = 10) {
    const conversation = this.getConversation(file);
    return conversation.messages.slice(-count);
  }
  /**
   * Get messages by role
   */
  getMessagesByRole(file, role) {
    const conversation = this.getConversation(file);
    return conversation.messages.filter((msg) => msg.role === role);
  }
  /**
   * Get conversation context for AI prompts
   */
  getConversationContext(file, maxMessages = 6) {
    const messages = this.getRecentMessages(file, maxMessages);
    if (messages.length === 0) {
      return "";
    }
    const contextLines = messages.map((msg) => {
      const timestamp = new Date(msg.timestamp).toLocaleTimeString();
      let line = `[${timestamp}] ${msg.role.toUpperCase()}: ${msg.content}`;
      if (msg.command) {
        line += ` (Command: ${msg.command.action} ${msg.command.target})`;
      }
      if (msg.result) {
        line += ` (Result: ${msg.result.success ? "success" : "failed"})`;
      }
      return line;
    });
    return `Previous conversation:
${contextLines.join("\n")}
`;
  }
  /**
   * Clear conversation for a file
   */
  async clearConversation(file) {
    const conversation = this.getConversation(file);
    conversation.messages = [];
    conversation.lastUpdated = Date.now();
    if (conversation.metadata) {
      conversation.metadata.editCount = 0;
      conversation.metadata.commandFrequency = {
        add: 0,
        edit: 0,
        delete: 0,
        grammar: 0,
        rewrite: 0
      };
    }
    await this.saveConversations();
  }
  /**
   * Get conversation statistics
   */
  getStats(file) {
    var _a;
    const conversation = this.getConversation(file);
    let mostUsedCommand = null;
    let maxCount = 0;
    if (conversation.metadata) {
      for (const [action, count] of Object.entries(conversation.metadata.commandFrequency)) {
        if (count > maxCount) {
          maxCount = count;
          mostUsedCommand = action;
        }
      }
    }
    const conversationAge = conversation.messages.length > 0 ? Date.now() - conversation.messages[0].timestamp : 0;
    return {
      messageCount: conversation.messages.length,
      editCount: ((_a = conversation.metadata) == null ? void 0 : _a.editCount) || 0,
      mostUsedCommand,
      conversationAge
    };
  }
  /**
   * Remove old conversations to manage memory
   */
  async cleanupOldConversations(maxAge = 7 * 24 * 60 * 60 * 1e3) {
    const now = Date.now();
    let removedCount = 0;
    for (const [filePath, conversation] of this.conversations.entries()) {
      if (now - conversation.lastUpdated > maxAge) {
        this.conversations.delete(filePath);
        removedCount++;
      }
    }
    if (removedCount > 0) {
      await this.saveConversations();
    }
    return removedCount;
  }
  /**
   * Export conversation for a file
   */
  exportConversation(file) {
    const conversation = this.getConversation(file);
    const lines = [`# Conversation History for ${file.name}`, ""];
    for (const message of conversation.messages) {
      const timestamp = new Date(message.timestamp).toLocaleString();
      lines.push(`## ${message.role.toUpperCase()} (${timestamp})`);
      lines.push(message.content);
      if (message.command) {
        lines.push(`*Command: ${message.command.action} ${message.command.target}*`);
      }
      if (message.result) {
        lines.push(`*Result: ${message.result.success ? "Success" : "Failed"}*`);
        if (message.result.error) {
          lines.push(`*Error: ${message.result.error}*`);
        }
      }
      lines.push("");
    }
    return lines.join("\n");
  }
  /**
   * Generate unique message ID
   */
  generateMessageId() {
    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
   * Trim conversation to max length and save
   */
  async trimAndSave(conversation) {
    if (conversation.messages.length > this.maxMessagesPerFile) {
      conversation.messages = conversation.messages.slice(-this.maxMessagesPerFile);
    }
    await this.saveConversations();
  }
  /**
   * Get all conversation file paths
   */
  getAllConversationFiles() {
    return Array.from(this.conversations.keys());
  }
  /**
   * Check if file has active conversation
   */
  hasConversation(file) {
    const conversation = this.conversations.get(file.path);
    return conversation ? conversation.messages.length > 0 : false;
  }
  /**
   * Update conversation file path (for file renames)
   */
  async updateFilePath(oldPath, newPath) {
    const conversation = this.conversations.get(oldPath);
    if (conversation) {
      conversation.filePath = newPath;
      this.conversations.delete(oldPath);
      this.conversations.set(newPath, conversation);
      await this.saveConversations();
    }
  }
};

// src/core/document-engine.ts
var DocumentEngine = class {
  constructor(app, dataStore) {
    this.app = app;
    this.conversationManager = null;
    if (dataStore) {
      this.conversationManager = new ConversationManager(dataStore);
    }
  }
  /**
   * Set conversation manager (for dependency injection)
   */
  setConversationManager(conversationManager) {
    this.conversationManager = conversationManager;
  }
  /**
   * Get the active editor instance
   */
  getActiveEditor() {
    const activeEditor = this.app.workspace.activeEditor;
    if (activeEditor == null ? void 0 : activeEditor.editor) {
      return activeEditor.editor;
    }
    let view = this.app.workspace.getActiveViewOfType(import_obsidian4.MarkdownView);
    if (!view) {
      const leaves = this.app.workspace.getLeavesOfType("markdown");
      for (const leaf of leaves) {
        const leafView = leaf.view;
        if (leafView instanceof import_obsidian4.MarkdownView) {
          view = leafView;
          break;
        }
      }
    }
    if (!view) {
      return null;
    }
    const editor = view.editor;
    return editor || null;
  }
  /**
   * Get the active file
   */
  getActiveFile() {
    return this.app.workspace.getActiveFile();
  }
  /**
   * Get the currently selected text
   */
  getSelectedText() {
    const editor = this.getActiveEditor();
    if (!editor) return "";
    return editor.getSelection();
  }
  /**
   * Get the current cursor position
   */
  getCursorPosition() {
    const editor = this.getActiveEditor();
    if (!editor) return null;
    return editor.getCursor();
  }
  /**
   * Extract comprehensive document context
   */
  async getDocumentContext() {
    const file = this.getActiveFile();
    const editor = this.getActiveEditor();
    if (!file || !editor) {
      return null;
    }
    const content = editor.getValue();
    const selectedText = this.getSelectedText();
    const cursorPosition = this.getCursorPosition();
    const headings = this.extractHeadings(content);
    const surroundingLines = cursorPosition ? this.getSurroundingLines(content, cursorPosition.line) : void 0;
    return {
      file,
      filename: file.basename,
      content,
      headings,
      selectedText: selectedText || void 0,
      cursorPosition: cursorPosition || void 0,
      surroundingLines
    };
  }
  /**
   * Extract headings from document content
   */
  extractHeadings(content) {
    const lines = content.split("\n");
    const headings = [];
    let charCount = 0;
    lines.forEach((line, index) => {
      const headingMatch = line.match(/^(#{1,6})\s+(.+)$/);
      if (headingMatch) {
        const level = headingMatch[1].length;
        const text = headingMatch[2];
        headings.push({
          text,
          level,
          line: index,
          position: {
            start: charCount,
            end: charCount + line.length
          }
        });
      }
      charCount += line.length + 1;
    });
    return headings;
  }
  /**
   * Get lines surrounding the cursor position
   */
  getSurroundingLines(content, currentLine, contextSize = 5) {
    const lines = content.split("\n");
    const startLine = Math.max(0, currentLine - contextSize);
    const endLine = Math.min(lines.length - 1, currentLine + contextSize);
    return {
      before: lines.slice(startLine, currentLine),
      after: lines.slice(currentLine + 1, endLine + 1)
    };
  }
  /**
   * Apply an edit to the document
   */
  async applyEdit(content, position, options = {}) {
    const editor = this.getActiveEditor();
    const file = this.getActiveFile();
    if (!editor || !file) {
      return {
        success: false,
        error: "No active editor or file",
        editType: "insert"
      };
    }
    try {
      let appliedAt;
      if (position === "cursor") {
        appliedAt = editor.getCursor();
        editor.replaceRange(content, appliedAt);
      } else if (position === "selection") {
        const selection = editor.getSelection();
        if (!selection) {
          return {
            success: false,
            error: "No text selected",
            editType: "replace"
          };
        }
        appliedAt = editor.getCursor("from");
        editor.replaceSelection(content);
      } else if (position === "end") {
        const lastLine = editor.lastLine();
        const lastLineLength = editor.getLine(lastLine).length;
        appliedAt = { line: lastLine, ch: lastLineLength };
        const currentContent = editor.getValue();
        const newContent = currentContent + (currentContent.endsWith("\n") ? "" : "\n") + content;
        await this.app.vault.modify(file, newContent);
      } else {
        appliedAt = position;
        editor.replaceRange(content, appliedAt);
      }
      if (options.selectNewText) {
        const endPos = {
          line: appliedAt.line + content.split("\n").length - 1,
          ch: content.includes("\n") ? content.split("\n").pop().length : appliedAt.ch + content.length
        };
        editor.setSelection(appliedAt, endPos);
      }
      if (options.scrollToEdit) {
        editor.scrollIntoView({
          from: appliedAt,
          to: appliedAt
        }, true);
      }
      return {
        success: true,
        content,
        editType: position === "selection" ? "replace" : position === "end" ? "append" : "insert",
        appliedAt
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "insert"
      };
    }
  }
  /**
   * Delete content at a specific location
   */
  async deleteContent(target, location) {
    const editor = this.getActiveEditor();
    const file = this.getActiveFile();
    if (!editor || !file) {
      return {
        success: false,
        error: "No active editor or file",
        editType: "delete"
      };
    }
    try {
      if (target === "selection") {
        const selection = editor.getSelection();
        if (!selection) {
          return {
            success: false,
            error: "No text selected",
            editType: "delete"
          };
        }
        editor.replaceSelection("");
        return {
          success: true,
          editType: "delete"
        };
      } else if (target === "line") {
        const cursor = editor.getCursor();
        const line = cursor.line;
        editor.replaceRange(
          "",
          { line, ch: 0 },
          { line: line + 1, ch: 0 }
        );
        return {
          success: true,
          editType: "delete",
          appliedAt: { line, ch: 0 }
        };
      } else if (target === "section" && location) {
        const section = await this.findSection(location);
        if (!section) {
          return {
            success: false,
            error: `Section "${location}" not found`,
            editType: "delete"
          };
        }
        const content = editor.getValue();
        const lines = content.split("\n");
        const newLines = lines.filter(
          (_, index) => index < section.range.start || index > section.range.end
        );
        await this.app.vault.modify(file, newLines.join("\n"));
        return {
          success: true,
          editType: "delete",
          appliedAt: { line: section.range.start, ch: 0 }
        };
      }
      return {
        success: false,
        error: "Invalid delete target",
        editType: "delete"
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "delete"
      };
    }
  }
  /**
   * Find a section by heading name
   */
  async findSection(headingText) {
    const context = await this.getDocumentContext();
    if (!context) return null;
    const headingIndex = context.headings.findIndex(
      (h) => h.text.toLowerCase().includes(headingText.toLowerCase())
    );
    if (headingIndex === -1) return null;
    const heading = context.headings[headingIndex];
    const nextHeading = context.headings[headingIndex + 1];
    const lines = context.content.split("\n");
    const endLine = nextHeading ? nextHeading.line - 1 : lines.length - 1;
    const sectionLines = lines.slice(heading.line + 1, endLine + 1);
    const sectionContent = sectionLines.join("\n").trim();
    return {
      heading: heading.text,
      level: heading.level,
      content: sectionContent,
      range: {
        start: heading.line,
        end: endLine
      }
    };
  }
  /**
   * Get the full document content
   */
  async getDocumentContent() {
    const editor = this.getActiveEditor();
    if (!editor) return null;
    return editor.getValue();
  }
  /**
   * Replace the entire document content
   */
  async setDocumentContent(content) {
    const file = this.getActiveFile();
    if (!file) {
      return {
        success: false,
        error: "No active file",
        editType: "replace"
      };
    }
    try {
      await this.app.vault.modify(file, content);
      return {
        success: true,
        content,
        editType: "replace"
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
  // Conversation management methods
  /**
   * Add user message to conversation
   */
  async addUserMessage(content, command) {
    if (!this.conversationManager) return;
    const file = this.getActiveFile();
    if (file) {
      await this.conversationManager.addUserMessage(file, content, command);
    }
  }
  /**
   * Add assistant response to conversation
   */
  async addAssistantMessage(content, result) {
    if (!this.conversationManager) return;
    const file = this.getActiveFile();
    if (file) {
      await this.conversationManager.addAssistantMessage(file, content, result);
    }
  }
  /**
   * Add system message to conversation
   */
  async addSystemMessage(content) {
    if (!this.conversationManager) return;
    const file = this.getActiveFile();
    if (file) {
      await this.conversationManager.addSystemMessage(file, content);
    }
  }
  /**
   * Get conversation context for AI prompts
   */
  getConversationContext(maxMessages = 6) {
    if (!this.conversationManager) return "";
    const file = this.getActiveFile();
    if (!file) return "";
    return this.conversationManager.getConversationContext(file, maxMessages);
  }
  /**
   * Clear conversation for current file
   */
  async clearConversation() {
    if (!this.conversationManager) return;
    const file = this.getActiveFile();
    if (file) {
      await this.conversationManager.clearConversation(file);
    }
  }
  /**
   * Get conversation statistics for current file
   */
  getConversationStats() {
    if (!this.conversationManager) return null;
    const file = this.getActiveFile();
    if (!file) return null;
    return this.conversationManager.getStats(file);
  }
  /**
   * Check if current file has an active conversation
   */
  hasConversation() {
    if (!this.conversationManager) return false;
    const file = this.getActiveFile();
    if (!file) return false;
    return this.conversationManager.hasConversation(file);
  }
  /**
   * Export conversation for current file
   */
  exportConversation() {
    if (!this.conversationManager) return null;
    const file = this.getActiveFile();
    if (!file) return null;
    return this.conversationManager.exportConversation(file);
  }
};

// src/core/context-builder.ts
var ContextBuilder = class {
  constructor() {
    this.defaultConfig = {
      maxContextLines: 20,
      includeStructure: true,
      includeHistory: false,
      temperature: 0.7,
      maxTokens: 1e3
    };
  }
  /**
   * Build prompt for a specific command
   */
  buildPrompt(command, documentContext, options = {}, conversationContext) {
    const config = { ...this.defaultConfig, ...options };
    const systemPrompt = this.buildSystemPrompt(command.action, config);
    const contextInfo = this.buildContextInfo(documentContext, command, config, conversationContext);
    const userPrompt = this.buildUserPrompt(command, contextInfo);
    return {
      systemPrompt,
      userPrompt,
      context: contextInfo,
      config: {
        temperature: config.temperature || 0.7,
        maxTokens: config.maxTokens || 1e3
      }
    };
  }
  /**
   * Build system prompt based on action type
   */
  buildSystemPrompt(action, config) {
    const basePrompt = `You are Nova, an AI writing partner that helps users edit documents directly. You work with Markdown documents in Obsidian.

IMPORTANT GUIDELINES:
- Provide ONLY the content to be inserted/modified, no explanations or meta-text
- Maintain the document's existing style and tone unless specifically asked to change it
- Preserve formatting, structure, and markdown syntax
- Be concise and focused on the specific request
- Do not add section headers unless specifically requested`;
    const actionSpecificPrompts = {
      add: `
TASK: Add new content to the document.
- Create well-structured, relevant content that fits the document's purpose
- Use appropriate markdown formatting (headings, lists, emphasis)
- Ensure smooth flow with existing content
- Match the document's style and tone`,
      edit: `
TASK: Edit and improve existing content.
- Enhance clarity, readability, and flow
- Preserve the original meaning unless changes are requested
- Improve word choice and sentence structure
- Maintain the original formatting and structure`,
      delete: `
TASK: Remove specified content from the document.
- Identify the exact content to be removed
- Ensure remaining content flows naturally
- Preserve document structure and formatting
- Confirm the deletion is appropriate for the context`,
      grammar: `
TASK: Fix grammar, spelling, and language issues.
- Correct spelling errors, grammar mistakes, and typos
- Improve sentence structure and clarity
- Maintain the original voice and style
- Preserve all formatting and markdown syntax
- Make minimal changes - only fix actual errors`,
      rewrite: `
TASK: Rewrite or restructure content.
- Create new content that serves the same purpose
- Improve organization, clarity, and flow
- Use more effective language and structure
- Maintain key information and concepts
- Adapt to any specified style requirements`
    };
    return basePrompt + actionSpecificPrompts[action];
  }
  /**
   * Build user prompt with specific instructions
   */
  buildUserPrompt(command, contextInfo) {
    let prompt = `${contextInfo}

USER REQUEST: ${command.instruction}`;
    if (command.context && command.context.trim()) {
      prompt += `

ADDITIONAL REQUIREMENTS: ${command.context}`;
    }
    const targetInstructions = this.getTargetInstructions(command);
    if (targetInstructions) {
      prompt += `

${targetInstructions}`;
    }
    const actionInstructions = this.getActionInstructions(command);
    if (actionInstructions) {
      prompt += `

${actionInstructions}`;
    }
    return prompt;
  }
  /**
   * Get target-specific instructions
   */
  getTargetInstructions(command) {
    switch (command.target) {
      case "selection":
        return "FOCUS: Work with the selected text only. Provide the improved version of the selected content.";
      case "section":
        if (command.location) {
          return `FOCUS: Work with the "${command.location}" section. ${command.action === "add" ? "Add content to this section." : "Modify only this section."}`;
        }
        return "FOCUS: Work with the current section.";
      case "document":
        return "FOCUS: Apply changes to the entire document while preserving its structure.";
      case "end":
        return "FOCUS: Add content at the end of the document. Ensure it flows naturally from existing content.";
      case "paragraph":
        return "FOCUS: Work with the current paragraph or create a new paragraph.";
      default:
        return "";
    }
  }
  /**
   * Get action-specific instructions
   */
  getActionInstructions(command) {
    switch (command.action) {
      case "add":
        return "OUTPUT: Provide only the new content to be added. Include appropriate headings if adding a section.";
      case "edit":
        return "OUTPUT: Provide only the improved version of the content.";
      case "delete":
        return 'OUTPUT: Confirm what should be deleted by providing the exact text to remove, or respond "CONFIRMED" if the deletion is clear.';
      case "grammar":
        return "OUTPUT: Provide only the corrected text with grammar and spelling fixes.";
      case "rewrite":
        return "OUTPUT: Provide the completely rewritten content that serves the same purpose.";
      default:
        return "";
    }
  }
  /**
   * Build context information for the prompt
   */
  buildContextInfo(documentContext, command, config, conversationContext) {
    let context = `DOCUMENT: ${documentContext.filename}
`;
    if (config.includeHistory && conversationContext && conversationContext.trim()) {
      context += `
${conversationContext}
`;
    }
    if (config.includeStructure && documentContext.headings.length > 0) {
      context += "\nDOCUMENT STRUCTURE:\n";
      documentContext.headings.forEach((heading) => {
        const indent = "  ".repeat(heading.level - 1);
        context += `${indent}- ${heading.text}
`;
      });
    }
    if (documentContext.selectedText && command.target === "selection") {
      context += `
SELECTED TEXT:
${documentContext.selectedText}
`;
    }
    if (command.target === "section" && command.location) {
      const section = this.findSectionInContent(documentContext.content, command.location);
      if (section) {
        context += `
CURRENT SECTION "${command.location}":
${section}
`;
      }
    } else if (command.target === "paragraph" && documentContext.surroundingLines) {
      context += "\nCURRENT CONTEXT:\n";
      if (documentContext.surroundingLines.before.length > 0) {
        context += `Before: ${documentContext.surroundingLines.before.join(" ")}
`;
      }
      if (documentContext.surroundingLines.after.length > 0) {
        context += `After: ${documentContext.surroundingLines.after.join(" ")}
`;
      }
    }
    const contentLines = documentContext.content.split("\n");
    if (contentLines.length > config.maxContextLines) {
      const start = Math.max(0, contentLines.length - config.maxContextLines);
      context += `
RECENT CONTENT (last ${config.maxContextLines} lines):
`;
      context += contentLines.slice(start).join("\n");
    } else {
      context += `
FULL DOCUMENT:
${documentContext.content}`;
    }
    return context;
  }
  /**
   * Find a specific section in content
   */
  findSectionInContent(content, sectionName) {
    const lines = content.split("\n");
    const normalizedSectionName = sectionName.toLowerCase().trim();
    let sectionStart = -1;
    let sectionLevel = 0;
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i];
      const headingMatch = line.match(/^(#{1,6})\s+(.+)$/);
      if (headingMatch) {
        const level = headingMatch[1].length;
        const heading = headingMatch[2].toLowerCase().trim();
        if (heading === normalizedSectionName || heading.includes(normalizedSectionName)) {
          sectionStart = i;
          sectionLevel = level;
          break;
        }
      }
    }
    if (sectionStart === -1) return null;
    let sectionEnd = lines.length;
    for (let i = sectionStart + 1; i < lines.length; i++) {
      const line = lines[i];
      const headingMatch = line.match(/^(#{1,6})\s+/);
      if (headingMatch && headingMatch[1].length <= sectionLevel) {
        sectionEnd = i;
        break;
      }
    }
    return lines.slice(sectionStart, sectionEnd).join("\n");
  }
  /**
   * Create a simple prompt for basic operations
   */
  buildSimplePrompt(instruction, context) {
    const systemPrompt = `You are Nova, an AI writing partner. Provide helpful, concise responses to user requests. Focus on being practical and actionable.`;
    let userPrompt = instruction;
    if (context) {
      userPrompt = `Context: ${context}

Request: ${instruction}`;
    }
    return {
      systemPrompt,
      userPrompt,
      context: context || "",
      config: {
        temperature: 0.7,
        maxTokens: 500
      }
    };
  }
  /**
   * Build prompt for conversation context
   */
  buildConversationPrompt(message, documentContext, recentHistory = []) {
    let systemPrompt = `You are Nova, an AI writing partner that helps users with their documents. You can:
- Answer questions about writing and editing
- Provide suggestions for improvement
- Help plan document structure
- Assist with research and content development

Be helpful, concise, and practical in your responses.`;
    let userPrompt = message;
    let context = "";
    if (documentContext) {
      context += `Current document: ${documentContext.filename}
`;
      if (documentContext.headings.length > 0) {
        context += "Document structure:\n";
        documentContext.headings.forEach((heading) => {
          const indent = "  ".repeat(heading.level - 1);
          context += `${indent}- ${heading.text}
`;
        });
      }
    }
    if (recentHistory.length > 0) {
      context += "\nRecent conversation:\n";
      recentHistory.slice(-3).forEach((msg) => {
        if (msg.role === "user") {
          context += `You: ${msg.content}
`;
        } else if (msg.role === "assistant") {
          context += `Nova: ${msg.content}
`;
        }
      });
    }
    if (context) {
      userPrompt = `${context}

Current message: ${message}`;
    }
    return {
      systemPrompt,
      userPrompt,
      context,
      config: {
        temperature: 0.8,
        maxTokens: 800
      }
    };
  }
  /**
   * Estimate token count for a prompt
   */
  estimateTokenCount(prompt) {
    const totalText = prompt.systemPrompt + prompt.userPrompt + prompt.context;
    return Math.ceil(totalText.length / 4);
  }
  /**
   * Validate prompt generation
   */
  validatePrompt(prompt) {
    const issues = [];
    if (!prompt.systemPrompt || prompt.systemPrompt.trim().length === 0) {
      issues.push("System prompt is empty");
    }
    if (!prompt.userPrompt || prompt.userPrompt.trim().length === 0) {
      issues.push("User prompt is empty");
    }
    const tokenCount = this.estimateTokenCount(prompt);
    if (tokenCount > 8e3) {
      issues.push(`Prompt is too long (${tokenCount} tokens, max 8000)`);
    }
    if (prompt.config.temperature < 0 || prompt.config.temperature > 1) {
      issues.push("Temperature must be between 0 and 1");
    }
    if (prompt.config.maxTokens < 10 || prompt.config.maxTokens > 4e3) {
      issues.push("Max tokens must be between 10 and 4000");
    }
    return {
      valid: issues.length === 0,
      issues
    };
  }
};

// src/core/command-parser.ts
var COMMAND_PATTERNS = [
  {
    action: "grammar",
    patterns: [
      /\b(grammar|spell|spelling|proofread|polish)\b/i,
      /\bcheck\b.*\b(grammar|spelling|errors)\b/i,
      /\bmake\s+.*\b(grammatical|correct|proper)\b/i,
      /\bfix\s+.*\b(grammar|errors|mistakes|typos)\b/i,
      /\bcorrect\b.*\b(grammar|spelling|errors)\b/i
    ],
    targets: ["selection", "document", "paragraph"]
  },
  {
    action: "rewrite",
    patterns: [
      /\b(rewrite|reword|rephrase|restructure|reorganize)\b/i,
      /\bwrite\s+.*\b(new|different|alternative)\b/i,
      /\bgenerate\s+.*\b(sections|parts|multiple)\b/i,
      /\bmake\s+.*\b(sections|parts|multiple)\b/i
    ],
    targets: ["document", "end"]
  },
  {
    action: "delete",
    patterns: [
      /\b(delete|remove|eliminate|cut|erase)\b/i,
      /\bget\s+rid\s+of\b/i,
      /\btake\s+out\b/i,
      /\bdrop\b.*\b(section|paragraph|part)\b/i
    ],
    targets: ["selection", "section", "line"]
  },
  {
    action: "add",
    patterns: [
      /\b(add|create|write|insert|include)\b.*\b(section|paragraph|heading|content|text|part)\b/i,
      /\b(add|create|write|insert)\b(?!\s+.*\b(better|clearer|more|less)\b)/i,
      /\bmake\s+.*\b(section|part)\b/i,
      /\bgenerate\b.*\b(section|content|text)\b/i
    ],
    targets: ["end", "section", "paragraph"]
  },
  {
    action: "edit",
    patterns: [
      /\b(edit|modify|change|update|revise|improve|enhance)\b/i,
      /\bmake\s+.*\b(better|clearer|more|less|formal|professional|detailed|comprehensive)\b/i,
      /\b(fix|correct|adjust)\b(?!.*\b(grammar|spelling|errors)\b)/i,
      /\b(expand|shorten|condense)\b/i
    ],
    targets: ["selection", "section", "paragraph"]
  }
];
var LOCATION_PATTERNS = [
  /\b(?:to|in|at|under|within|inside)\s+(?:the\s+)?["']([^"']+?)["']\s+(?:section|heading|part)/i,
  /\b(?:the\s+)?["']([^"']+?)["']\s+(?:section|heading|part)/i,
  /\b(?:section|heading|part)\s+["']([^"']+?)["']/i,
  /\b(?:section|heading)\s+(?:called|titled|named)\s+["']([^"']+?)["']/i,
  /\b(?:called|titled|named)\s+["']([^"']+?)["']/i,
  /\b(?:the\s+)?([a-zA-Z][a-zA-Z\s&]*?)\s+(?:section|heading)\b/i
];
var TARGET_PATTERNS = [
  { pattern: /\b(?:selected|highlighted|chosen)\s+(?:text|content)/i, target: "selection" },
  { pattern: /\b(?:this|current|selected)\s+(?:paragraph|line)/i, target: "paragraph" },
  { pattern: /\b(?:entire|whole|full)\s+(?:document|file|note)/i, target: "document" },
  { pattern: /\b(?:end|bottom|conclusion)/i, target: "end" },
  { pattern: /\b(?:section|heading|part)/i, target: "section" }
];
var CommandParser = class {
  /**
   * Parse natural language input into an EditCommand
   */
  parseCommand(input, hasSelection = false) {
    const normalizedInput = input.trim().toLowerCase();
    const action = this.detectAction(normalizedInput);
    const target = this.detectTarget(normalizedInput, hasSelection, action);
    const location = this.extractLocation(input);
    const context = this.extractContext(input);
    return {
      action,
      target,
      location,
      instruction: input,
      context
    };
  }
  /**
   * Detect the action type from the input
   */
  detectAction(input) {
    for (const commandPattern of COMMAND_PATTERNS) {
      for (const pattern of commandPattern.patterns) {
        if (pattern.test(input)) {
          return commandPattern.action;
        }
      }
    }
    if (/\b(add|create|write|insert|include|generate.*section)\b/i.test(input)) {
      return "add";
    }
    if (/\b(fix|correct|grammar|spell|proofread|polish)\b/i.test(input)) {
      return "grammar";
    }
    if (/\b(delete|remove|eliminate)\b/i.test(input)) {
      return "delete";
    }
    if (/\b(rewrite|rephrase|restructure|generate.*new)\b/i.test(input)) {
      return "rewrite";
    }
    return "edit";
  }
  /**
   * Detect the target type from the input
   */
  detectTarget(input, hasSelection, action) {
    for (const targetPattern of TARGET_PATTERNS) {
      if (targetPattern.pattern.test(input)) {
        return targetPattern.target;
      }
    }
    if (hasSelection && (action === "edit" || action === "grammar" || action === "delete")) {
      return "selection";
    }
    switch (action) {
      case "add":
        return input.includes("section") || input.includes("heading") ? "section" : "end";
      case "edit":
        return hasSelection ? "selection" : "paragraph";
      case "delete":
        return hasSelection ? "selection" : "section";
      case "grammar":
        return hasSelection ? "selection" : "document";
      case "rewrite":
        return "end";
      default:
        return "paragraph";
    }
  }
  /**
   * Extract location information from the input
   */
  extractLocation(input) {
    for (const pattern of LOCATION_PATTERNS) {
      const match = pattern.exec(input);
      if (match && match[1]) {
        return match[1].trim();
      }
    }
    return void 0;
  }
  /**
   * Extract additional context from the input
   */
  extractContext(input) {
    const styleIndicators = [
      "formal",
      "informal",
      "casual",
      "professional",
      "academic",
      "technical",
      "simple",
      "complex",
      "detailed",
      "brief",
      "concise",
      "verbose",
      "friendly",
      "serious",
      "humorous",
      "creative",
      "analytical"
    ];
    const foundStyles = styleIndicators.filter(
      (style) => input.toLowerCase().includes(style)
    );
    let context = "";
    if (foundStyles.length > 0) {
      context += `Style: ${foundStyles.join(", ")}. `;
    }
    if (input.includes("short") || input.includes("brief") || input.includes("concise")) {
      context += "Keep it brief. ";
    }
    if (input.includes("long") || input.includes("detailed") || input.includes("comprehensive")) {
      context += "Provide detailed content. ";
    }
    if (input.includes("bullet") || input.includes("list")) {
      context += "Use bullet points or lists. ";
    }
    if (input.includes("example") || input.includes("examples")) {
      context += "Include examples. ";
    }
    if (input.includes("number") || input.includes("numbered")) {
      context += "Use numbered lists. ";
    }
    return context.trim();
  }
  /**
   * Validate if a command can be executed
   */
  validateCommand(command, hasSelection) {
    if (command.target === "selection" && !hasSelection) {
      return {
        valid: false,
        error: "This command requires text to be selected first"
      };
    }
    if (command.target === "section" && command.action === "delete" && !command.location) {
      return {
        valid: false,
        error: "Please specify which section to delete"
      };
    }
    if (command.action === "add" && command.target === "selection") {
      return {
        valid: false,
        error: 'Cannot add content to a selection. Use "edit" to modify selected text'
      };
    }
    return { valid: true };
  }
  /**
   * Get suggested commands based on context
   */
  getSuggestions(hasSelection, hasHeadings) {
    const suggestions = [];
    if (hasSelection) {
      suggestions.push(
        "Make this more concise",
        "Fix grammar in this text",
        "Make this more professional",
        "Expand on this point"
      );
    } else {
      suggestions.push(
        "Add a conclusion section",
        "Fix grammar in this document",
        "Add an introduction",
        "Create a summary"
      );
    }
    if (hasHeadings) {
      suggestions.push(
        "Add content to the introduction section",
        "Expand the methodology section"
      );
    }
    return suggestions;
  }
  /**
   * Parse multiple commands from a single input
   */
  parseMultipleCommands(input) {
    const separators = /\b(?:then|also|and then|after that|next|additionally)\b/i;
    const parts = input.split(separators);
    if (parts.length === 1) {
      return [this.parseCommand(input)];
    }
    return parts.map((part) => part.trim()).filter((part) => part.length > 0).map((part) => this.parseCommand(part));
  }
  /**
   * Get command description for display
   */
  getCommandDescription(command) {
    const { action, target, location } = command;
    let description = "";
    switch (action) {
      case "add":
        description = "Add new content";
        break;
      case "edit":
        description = "Edit existing content";
        break;
      case "delete":
        description = "Remove content";
        break;
      case "grammar":
        description = "Fix grammar and spelling";
        break;
      case "rewrite":
        description = "Generate new sections";
        break;
    }
    if (location) {
      description += ` in "${location}"`;
    } else {
      switch (target) {
        case "selection":
          description += " in selected text";
          break;
        case "section":
          description += " in current section";
          break;
        case "paragraph":
          description += " in current paragraph";
          break;
        case "document":
          description += " in entire document";
          break;
        case "end":
          description += " at end of document";
          break;
      }
    }
    return description;
  }
};

// src/core/prompt-builder.ts
var PromptBuilder = class {
  constructor(documentEngine, conversationManager) {
    this.contextBuilder = new ContextBuilder();
    this.documentEngine = documentEngine;
    this.conversationManager = conversationManager;
    this.commandParser = new CommandParser();
  }
  /**
   * Build prompt for a user message - determines if it's a command or conversation
   */
  async buildPromptForMessage(message, file, options = {}) {
    const isLikelyCommand = this.isLikelyCommand(message);
    if (isLikelyCommand && file) {
      const parsedCommand = this.commandParser.parseCommand(message);
      return this.buildCommandPrompt(parsedCommand, file, options);
    } else {
      return this.buildConversationPrompt(message, file, options);
    }
  }
  /**
   * Check if a message is likely a command vs conversation
   */
  isLikelyCommand(message) {
    const commandWords = [
      "add",
      "create",
      "write",
      "insert",
      "include",
      "generate",
      "edit",
      "modify",
      "change",
      "update",
      "revise",
      "improve",
      "enhance",
      "delete",
      "remove",
      "eliminate",
      "cut",
      "erase",
      "fix",
      "correct",
      "grammar",
      "spell",
      "proofread",
      "polish",
      "rewrite",
      "reword",
      "rephrase",
      "restructure",
      "reorganize"
    ];
    const lowerMessage = message.toLowerCase();
    return commandWords.some((word) => lowerMessage.includes(word));
  }
  /**
   * Build prompt for a specific command
   */
  async buildCommandPrompt(command, file, options = {}) {
    if (!file) {
      throw new Error("File is required for command prompts");
    }
    const documentContext = await this.getDocumentContext(file);
    let conversationContext;
    if (options.includeHistory) {
      const recentMessages = await this.conversationManager.getRecentMessages(file, 5);
      conversationContext = this.formatConversationHistory(recentMessages);
    }
    return this.contextBuilder.buildPrompt(command, documentContext, options, conversationContext);
  }
  /**
   * Build prompt for conversation (non-command messages)
   */
  async buildConversationPrompt(message, file, options = {}) {
    let documentContext;
    let recentHistory = [];
    if (file) {
      documentContext = await this.getDocumentContext(file);
      recentHistory = await this.conversationManager.getRecentMessages(file, 5);
    }
    return this.contextBuilder.buildConversationPrompt(message, documentContext, recentHistory);
  }
  /**
   * Build simple prompt for basic operations
   */
  buildSimplePrompt(instruction, context) {
    return this.contextBuilder.buildSimplePrompt(instruction, context);
  }
  /**
   * Get document context for a file
   */
  async getDocumentContext(file) {
    const context = await this.documentEngine.getDocumentContext();
    if (!context) {
      const content = await this.documentEngine.getDocumentContent() || "";
      return {
        file,
        filename: file.basename,
        content,
        headings: [],
        selectedText: void 0,
        surroundingLines: void 0
      };
    }
    return context;
  }
  /**
   * Format conversation history for context
   */
  formatConversationHistory(messages) {
    if (messages.length === 0) return "";
    let formatted = "RECENT CONVERSATION:\n";
    messages.forEach((msg) => {
      const role = msg.role === "user" ? "You" : "Nova";
      formatted += `${role}: ${msg.content}
`;
    });
    return formatted;
  }
  /**
   * Validate and optimize prompt before sending to AI
   */
  validateAndOptimizePrompt(prompt) {
    const validation = this.contextBuilder.validatePrompt(prompt);
    if (!validation.valid) {
      console.warn("Prompt validation issues:", validation.issues);
      let optimizedPrompt = { ...prompt };
      const tokenCount = this.contextBuilder.estimateTokenCount(prompt);
      if (tokenCount > 8e3) {
        const maxContextLength = Math.floor(prompt.context.length * 0.6);
        optimizedPrompt.context = prompt.context.substring(0, maxContextLength) + "\n[Context truncated...]";
      }
      if (prompt.config.temperature < 0 || prompt.config.temperature > 1) {
        optimizedPrompt.config.temperature = Math.max(0, Math.min(1, prompt.config.temperature));
      }
      if (prompt.config.maxTokens < 10 || prompt.config.maxTokens > 4e3) {
        optimizedPrompt.config.maxTokens = Math.max(10, Math.min(4e3, prompt.config.maxTokens));
      }
      return optimizedPrompt;
    }
    return prompt;
  }
  /**
   * Get token count estimate for a prompt
   */
  getTokenCount(prompt) {
    return this.contextBuilder.estimateTokenCount(prompt);
  }
  /**
   * Create prompt for a specific action with minimal context
   */
  async buildQuickPrompt(action, instruction, file) {
    const command = {
      action,
      target: "document",
      instruction,
      location: void 0,
      context: void 0
    };
    if (file) {
      return this.buildCommandPrompt(command, file, {
        maxContextLines: 10,
        includeStructure: false,
        includeHistory: false
      });
    } else {
      return this.buildSimplePrompt(instruction);
    }
  }
  /**
   * Build prompt with custom system prompt override
   */
  async buildCustomPrompt(systemPrompt, userMessage, file) {
    let context = "";
    if (file) {
      const documentContext = await this.getDocumentContext(file);
      context = `Document: ${documentContext.filename}
${documentContext.content}`;
    }
    return {
      systemPrompt,
      userPrompt: userMessage,
      context,
      config: {
        temperature: 0.7,
        maxTokens: 1e3
      }
    };
  }
};

// src/core/commands/add-command.ts
var AddCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute add command
   */
  async execute(command) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "insert"
        };
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const validation = this.contextBuilder.validatePrompt(prompt);
      if (!validation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${validation.issues.join(", ")}`,
          editType: "insert"
        };
      }
      try {
        await this.documentEngine.addUserMessage(command.instruction, command);
        const content = await this.providerManager.generateText(
          prompt.userPrompt,
          {
            systemPrompt: prompt.systemPrompt,
            temperature: prompt.config.temperature,
            maxTokens: prompt.config.maxTokens
          }
        );
        if (!content || content.trim().length === 0) {
          const result2 = {
            success: false,
            error: "AI provider returned empty content",
            editType: "insert"
          };
          await this.documentEngine.addAssistantMessage("Failed to generate content", result2);
          return result2;
        }
        const result = await this.documentEngine.applyEdit(
          content,
          await this.determineInsertPosition(command, documentContext),
          {
            scrollToEdit: true,
            selectNewText: false
          }
        );
        if (!result.success) {
          await this.documentEngine.addAssistantMessage("Failed to add content", result);
        }
        return result;
      } catch (error) {
        const result = {
          success: false,
          error: error instanceof Error ? error.message : "AI generation failed",
          editType: "insert"
        };
        await this.documentEngine.addAssistantMessage(
          `Error: ${result.error}`,
          result
        );
        return result;
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "insert"
      };
    }
  }
  /**
   * Determine where to insert new content
   */
  async determineInsertPosition(command, documentContext) {
    switch (command.target) {
      case "end":
        return "end";
      case "section":
        if (command.location) {
          const section = await this.documentEngine.findSection(command.location);
          if (section) {
            return { line: section.range.end, ch: 0 };
          }
        }
        return "cursor";
      case "paragraph":
        return "cursor";
      case "document":
        return "end";
      default:
        return "cursor";
    }
  }
  /**
   * Validate add command requirements
   */
  validateCommand(command, hasSelection) {
    if (command.target === "selection") {
      return {
        valid: false,
        error: 'Cannot add content to a selection. Use "edit" to modify selected text'
      };
    }
    if (command.target === "section" && !command.location) {
      return { valid: true };
    }
    return { valid: true };
  }
  /**
   * Get suggestions for add commands
   */
  getSuggestions(documentContext) {
    const suggestions = [
      "Add a conclusion section",
      "Add an introduction",
      "Create a summary",
      "Add examples",
      "Create a methodology section"
    ];
    if (documentContext.headings.length > 0) {
      const sectionNames = documentContext.headings.map((h) => h.text);
      if (!sectionNames.some((name) => name.toLowerCase().includes("introduction"))) {
        suggestions.unshift("Add an introduction section");
      }
      if (!sectionNames.some((name) => name.toLowerCase().includes("conclusion"))) {
        suggestions.push("Add a conclusion section");
      }
      if (!sectionNames.some((name) => name.toLowerCase().includes("summary"))) {
        suggestions.push("Add a summary section");
      }
    }
    return suggestions.slice(0, 8);
  }
  /**
   * Preview what content would be added (without actually adding it)
   */
  async preview(command) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found"
        };
      }
      let positionDescription = "";
      switch (command.target) {
        case "end":
          positionDescription = "at the end of the document";
          break;
        case "section":
          if (command.location) {
            positionDescription = `in the "${command.location}" section`;
          } else {
            positionDescription = "in the current section";
          }
          break;
        case "paragraph":
          positionDescription = "at the cursor position";
          break;
        case "document":
          positionDescription = "at the end of the document";
          break;
        default:
          positionDescription = "at the cursor position";
      }
      return {
        success: true,
        preview: `Will add new content ${positionDescription}`,
        position: positionDescription
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
};

// src/core/commands/edit-command.ts
var EditCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute edit command
   */
  async execute(command) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "replace"
        };
      }
      const validation = this.validateCommand(command, !!documentContext.selectedText);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "replace"
        };
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const promptValidation = this.contextBuilder.validatePrompt(prompt);
      if (!promptValidation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${promptValidation.issues.join(", ")}`,
          editType: "replace"
        };
      }
      try {
        await this.documentEngine.addUserMessage(command.instruction, command);
        const content = await this.providerManager.generateText(
          prompt.userPrompt,
          {
            systemPrompt: prompt.systemPrompt,
            temperature: prompt.config.temperature,
            maxTokens: prompt.config.maxTokens
          }
        );
        if (!content || content.trim().length === 0) {
          const result2 = {
            success: false,
            error: "AI provider returned empty content",
            editType: "replace"
          };
          await this.documentEngine.addAssistantMessage("Failed to generate content", result2);
          return result2;
        }
        const result = await this.applyEdit(command, documentContext, content);
        if (!result.success) {
          await this.documentEngine.addAssistantMessage("Failed to edit content", result);
        }
        return result;
      } catch (error) {
        const result = {
          success: false,
          error: error instanceof Error ? error.message : "AI generation failed",
          editType: "replace"
        };
        await this.documentEngine.addAssistantMessage(
          `Error: ${result.error}`,
          result
        );
        return result;
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
  /**
   * Apply edit based on command target
   */
  async applyEdit(command, documentContext, content) {
    switch (command.target) {
      case "selection":
        return await this.documentEngine.applyEdit(
          content,
          "selection",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "section":
        if (command.location) {
          const section = await this.documentEngine.findSection(command.location);
          if (section) {
            const newSectionContent = `${section.heading}

${content}`;
            const startPos = { line: section.range.start, ch: 0 };
            const endPos = { line: section.range.end + 1, ch: 0 };
            const editor = this.documentEngine.getActiveEditor();
            if (!editor) {
              return {
                success: false,
                error: "No active editor",
                editType: "replace"
              };
            }
            editor.replaceRange(newSectionContent, startPos, endPos);
            return {
              success: true,
              content: newSectionContent,
              editType: "replace",
              appliedAt: startPos
            };
          } else {
            return {
              success: false,
              error: `Section "${command.location}" not found`,
              editType: "replace"
            };
          }
        }
      // Fall through to paragraph if no location specified
      case "paragraph":
        return await this.documentEngine.applyEdit(
          content,
          "cursor",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "document":
        return await this.documentEngine.setDocumentContent(content);
      case "end":
        return await this.documentEngine.applyEdit(
          content,
          "end",
          {
            scrollToEdit: true,
            selectNewText: false
          }
        );
      default:
        return {
          success: false,
          error: "Invalid edit target",
          editType: "replace"
        };
    }
  }
  /**
   * Validate edit command requirements
   */
  validateCommand(command, hasSelection) {
    if (command.target === "selection" && !hasSelection) {
      return {
        valid: false,
        error: "This command requires text to be selected first"
      };
    }
    if (command.target === "section" && command.action === "edit" && command.location) {
      return { valid: true };
    }
    return { valid: true };
  }
  /**
   * Get suggestions for edit commands
   */
  getSuggestions(documentContext, hasSelection) {
    const suggestions = [];
    if (hasSelection) {
      suggestions.push(
        "Make this more concise",
        "Make this more professional",
        "Make this more detailed",
        "Improve clarity and flow",
        "Make this more formal",
        "Simplify this text",
        "Expand on this point",
        "Make this more engaging"
      );
    } else {
      suggestions.push(
        "Improve the writing style",
        "Make the document more professional",
        "Enhance clarity throughout",
        "Improve the introduction",
        "Polish the conclusion",
        "Make it more concise",
        "Add more detail",
        "Improve the flow between sections"
      );
      if (documentContext.headings.length > 0) {
        documentContext.headings.forEach((heading) => {
          suggestions.push(`Improve the "${heading.text}" section`);
        });
      }
    }
    return suggestions.slice(0, 10);
  }
  /**
   * Preview what would be edited
   */
  async preview(command) {
    var _a, _b;
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found"
        };
      }
      let affectedContent = "";
      let previewText = "";
      switch (command.target) {
        case "selection":
          if (documentContext.selectedText) {
            affectedContent = documentContext.selectedText;
            previewText = "Will edit the selected text";
          } else {
            return {
              success: false,
              error: "No text is currently selected"
            };
          }
          break;
        case "section":
          if (command.location) {
            const section = await this.documentEngine.findSection(command.location);
            if (section) {
              affectedContent = section.content;
              previewText = `Will edit the entire "${command.location}" section`;
            } else {
              return {
                success: false,
                error: `Section "${command.location}" not found`
              };
            }
          } else {
            previewText = "Will edit content at cursor position";
          }
          break;
        case "paragraph":
          previewText = "Will edit content at cursor position";
          if (documentContext.surroundingLines) {
            const currentLine = (_b = (_a = documentContext.cursorPosition) == null ? void 0 : _a.line) != null ? _b : 0;
            const editor = this.documentEngine.getActiveEditor();
            if (editor) {
              affectedContent = editor.getLine(currentLine);
            }
          }
          break;
        case "document":
          affectedContent = documentContext.content;
          previewText = "Will edit the entire document";
          break;
        case "end":
          previewText = "Will add edited content at the end of the document";
          break;
        default:
          return {
            success: false,
            error: "Invalid edit target"
          };
      }
      return {
        success: true,
        preview: previewText,
        affectedContent: affectedContent.length > 200 ? affectedContent.substring(0, 200) + "..." : affectedContent
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Get edit targets available for current context
   */
  getAvailableTargets(documentContext) {
    const targets = ["paragraph", "document", "end"];
    if (documentContext.selectedText) {
      targets.unshift("selection");
    }
    if (documentContext.headings.length > 0) {
      targets.splice(-2, 0, "section");
    }
    return targets;
  }
  /**
   * Estimate the scope of changes
   */
  async estimateScope(command) {
    const documentContext = await this.documentEngine.getDocumentContext();
    if (!documentContext) {
      return {
        charactersAffected: 0,
        linesAffected: 0,
        scopeDescription: "No document available"
      };
    }
    let charactersAffected = 0;
    let linesAffected = 0;
    let scopeDescription = "";
    switch (command.target) {
      case "selection":
        if (documentContext.selectedText) {
          charactersAffected = documentContext.selectedText.length;
          linesAffected = documentContext.selectedText.split("\n").length;
          scopeDescription = "Selected text only";
        }
        break;
      case "section":
        if (command.location) {
          const section = await this.documentEngine.findSection(command.location);
          if (section) {
            charactersAffected = section.content.length;
            linesAffected = section.range.end - section.range.start;
            scopeDescription = `"${command.location}" section`;
          }
        }
        break;
      case "paragraph":
        charactersAffected = 100;
        linesAffected = 1;
        scopeDescription = "Current paragraph";
        break;
      case "document":
        charactersAffected = documentContext.content.length;
        linesAffected = documentContext.content.split("\n").length;
        scopeDescription = "Entire document";
        break;
      case "end":
        charactersAffected = 0;
        linesAffected = 0;
        scopeDescription = "New content at end";
        break;
    }
    return {
      charactersAffected,
      linesAffected,
      scopeDescription
    };
  }
};

// src/core/commands/delete-command.ts
var DeleteCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute delete command
   */
  async execute(command) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "delete"
        };
      }
      const validation = this.validateCommand(command, !!documentContext.selectedText);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "delete"
        };
      }
      if (command.instruction && command.instruction.trim().length > 0) {
        await this.documentEngine.addUserMessage(command.instruction, command);
        const conversationContext = this.documentEngine.getConversationContext();
        const promptConfig = conversationContext ? { includeHistory: true } : {};
        const prompt = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
        const promptValidation = this.contextBuilder.validatePrompt(prompt);
        if (!promptValidation.valid) {
          return {
            success: false,
            error: `Prompt validation failed: ${promptValidation.issues.join(", ")}`,
            editType: "delete"
          };
        }
        try {
          const aiResponse = await this.providerManager.generateText(
            prompt.userPrompt,
            {
              systemPrompt: prompt.systemPrompt,
              temperature: prompt.config.temperature,
              maxTokens: prompt.config.maxTokens
            }
          );
        } catch (error) {
          const result2 = {
            success: false,
            error: error instanceof Error ? error.message : "AI analysis failed",
            editType: "delete"
          };
          await this.documentEngine.addAssistantMessage(
            `Error: ${result2.error}`,
            result2
          );
          return result2;
        }
      }
      const result = await this.applyDeletion(command, documentContext);
      if (command.instruction && command.instruction.trim().length > 0 && !result.success) {
        await this.documentEngine.addAssistantMessage("Failed to delete content", result);
      }
      return result;
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "delete"
      };
    }
  }
  /**
   * Apply deletion based on command target
   */
  async applyDeletion(command, documentContext) {
    switch (command.target) {
      case "selection":
        if (documentContext.selectedText) {
          return await this.documentEngine.applyEdit(
            "",
            "selection",
            {
              scrollToEdit: true,
              selectNewText: false
            }
          );
        } else {
          return {
            success: false,
            error: "No text selected for deletion",
            editType: "delete"
          };
        }
      case "section":
        if (command.location) {
          const section = await this.documentEngine.findSection(command.location);
          if (section) {
            const startPos = { line: section.range.start, ch: 0 };
            const endPos = { line: section.range.end + 1, ch: 0 };
            const editor = this.documentEngine.getActiveEditor();
            if (!editor) {
              return {
                success: false,
                error: "No active editor",
                editType: "delete"
              };
            }
            editor.replaceRange("", startPos, endPos);
            return {
              success: true,
              content: "",
              editType: "delete",
              appliedAt: startPos
            };
          } else {
            return {
              success: false,
              error: `Section "${command.location}" not found`,
              editType: "delete"
            };
          }
        } else {
          return {
            success: false,
            error: "Section name required for section deletion",
            editType: "delete"
          };
        }
      case "paragraph":
        if (documentContext.cursorPosition) {
          const editor = this.documentEngine.getActiveEditor();
          if (!editor) {
            return {
              success: false,
              error: "No active editor",
              editType: "delete"
            };
          }
          const currentLine = documentContext.cursorPosition.line;
          const lineContent = editor.getLine(currentLine);
          let startLine = currentLine;
          let endLine = currentLine;
          while (startLine > 0) {
            const prevLine = editor.getLine(startLine - 1);
            if (prevLine.trim() === "" || prevLine.startsWith("#")) {
              break;
            }
            startLine--;
          }
          const lineCount = editor.lineCount();
          while (endLine < lineCount - 1) {
            const nextLine = editor.getLine(endLine + 1);
            if (nextLine.trim() === "" || nextLine.startsWith("#")) {
              break;
            }
            endLine++;
          }
          const startPos = { line: startLine, ch: 0 };
          const endPos = { line: endLine + 1, ch: 0 };
          editor.replaceRange("", startPos, endPos);
          return {
            success: true,
            content: "",
            editType: "delete",
            appliedAt: startPos
          };
        } else {
          return {
            success: false,
            error: "No cursor position available",
            editType: "delete"
          };
        }
      case "document":
        return await this.documentEngine.setDocumentContent("");
      case "end":
        return {
          success: false,
          error: "Cannot delete from end of document. Use a different target.",
          editType: "delete"
        };
      default:
        return {
          success: false,
          error: "Invalid deletion target",
          editType: "delete"
        };
    }
  }
  /**
   * Validate delete command requirements
   */
  validateCommand(command, hasSelection) {
    if (command.target === "selection" && !hasSelection) {
      return {
        valid: false,
        error: "This command requires text to be selected first"
      };
    }
    if (command.target === "section" && !command.location) {
      return {
        valid: false,
        error: "Section name required for section deletion"
      };
    }
    if (command.target === "end") {
      return {
        valid: false,
        error: "Cannot delete from end of document. Use a different target."
      };
    }
    return { valid: true };
  }
  /**
   * Get suggestions for delete commands
   */
  getSuggestions(documentContext, hasSelection) {
    const suggestions = [];
    if (hasSelection) {
      suggestions.push(
        "Delete the selected text",
        "Remove this content",
        "Clear the selection"
      );
    } else {
      suggestions.push(
        "Delete the current paragraph",
        "Remove empty sections",
        "Clear redundant content",
        "Delete duplicate information"
      );
      if (documentContext.headings.length > 0) {
        documentContext.headings.forEach((heading) => {
          suggestions.push(`Delete the "${heading.text}" section`);
        });
      }
    }
    return suggestions.slice(0, 8);
  }
  /**
   * Preview what would be deleted
   */
  async preview(command) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found"
        };
      }
      let affectedContent = "";
      let previewText = "";
      switch (command.target) {
        case "selection":
          if (documentContext.selectedText) {
            affectedContent = documentContext.selectedText;
            previewText = "Will delete the selected text";
          } else {
            return {
              success: false,
              error: "No text is currently selected"
            };
          }
          break;
        case "section":
          if (command.location) {
            const section = await this.documentEngine.findSection(command.location);
            if (section) {
              affectedContent = `${section.heading}

${section.content}`;
              previewText = `Will delete the entire "${command.location}" section`;
            } else {
              return {
                success: false,
                error: `Section "${command.location}" not found`
              };
            }
          } else {
            return {
              success: false,
              error: "Section name required for preview"
            };
          }
          break;
        case "paragraph":
          previewText = "Will delete the current paragraph";
          if (documentContext.cursorPosition) {
            const editor = this.documentEngine.getActiveEditor();
            if (editor) {
              const currentLine = documentContext.cursorPosition.line;
              let paragraphLines = [];
              let startLine = currentLine;
              let endLine = currentLine;
              while (startLine > 0) {
                const prevLine = editor.getLine(startLine - 1);
                if (prevLine.trim() === "" || prevLine.startsWith("#")) {
                  break;
                }
                startLine--;
              }
              const lineCount = editor.lineCount();
              while (endLine < lineCount - 1) {
                const nextLine = editor.getLine(endLine + 1);
                if (nextLine.trim() === "" || nextLine.startsWith("#")) {
                  break;
                }
                endLine++;
              }
              for (let i = startLine; i <= endLine; i++) {
                paragraphLines.push(editor.getLine(i));
              }
              affectedContent = paragraphLines.join("\n");
            }
          }
          break;
        case "document":
          affectedContent = documentContext.content;
          previewText = "Will delete all document content";
          break;
        case "end":
          return {
            success: false,
            error: "Cannot delete from end of document"
          };
        default:
          return {
            success: false,
            error: "Invalid deletion target"
          };
      }
      return {
        success: true,
        preview: previewText,
        affectedContent: affectedContent.length > 200 ? affectedContent.substring(0, 200) + "..." : affectedContent
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Get delete targets available for current context
   */
  getAvailableTargets(documentContext) {
    const targets = ["paragraph", "document"];
    if (documentContext.selectedText) {
      targets.unshift("selection");
    }
    if (documentContext.headings.length > 0) {
      targets.splice(-1, 0, "section");
    }
    return targets;
  }
  /**
   * Estimate the scope of deletion
   */
  async estimateScope(command) {
    const documentContext = await this.documentEngine.getDocumentContext();
    if (!documentContext) {
      return {
        charactersAffected: 0,
        linesAffected: 0,
        scopeDescription: "No document available"
      };
    }
    let charactersAffected = 0;
    let linesAffected = 0;
    let scopeDescription = "";
    switch (command.target) {
      case "selection":
        if (documentContext.selectedText) {
          charactersAffected = documentContext.selectedText.length;
          linesAffected = documentContext.selectedText.split("\n").length;
          scopeDescription = "Selected text only";
        }
        break;
      case "section":
        if (command.location) {
          const section = await this.documentEngine.findSection(command.location);
          if (section) {
            charactersAffected = section.content.length + section.heading.length;
            linesAffected = section.range.end - section.range.start + 1;
            scopeDescription = `"${command.location}" section`;
          }
        }
        break;
      case "paragraph":
        charactersAffected = 100;
        linesAffected = 1;
        scopeDescription = "Current paragraph";
        break;
      case "document":
        charactersAffected = documentContext.content.length;
        linesAffected = documentContext.content.split("\n").length;
        scopeDescription = "Entire document";
        break;
      case "end":
        charactersAffected = 0;
        linesAffected = 0;
        scopeDescription = "Invalid target for deletion";
        break;
    }
    return {
      charactersAffected,
      linesAffected,
      scopeDescription
    };
  }
};

// src/core/commands/grammar-command.ts
var GrammarCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute grammar command
   */
  async execute(command) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "replace"
        };
      }
      const validation = this.validateCommand(command, !!documentContext.selectedText);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "replace"
        };
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const promptValidation = this.contextBuilder.validatePrompt(prompt);
      if (!promptValidation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${promptValidation.issues.join(", ")}`,
          editType: "replace"
        };
      }
      try {
        await this.documentEngine.addUserMessage(command.instruction, command);
        const correctedContent = await this.providerManager.generateText(
          prompt.userPrompt,
          {
            systemPrompt: prompt.systemPrompt,
            temperature: 0.3,
            // Lower temperature for grammar corrections
            maxTokens: prompt.config.maxTokens
          }
        );
        if (!correctedContent || correctedContent.trim().length === 0) {
          const result2 = {
            success: false,
            error: "AI provider returned empty content",
            editType: "replace"
          };
          await this.documentEngine.addAssistantMessage("Failed to generate corrected content", result2);
          return result2;
        }
        const result = await this.applyGrammarCorrection(command, documentContext, correctedContent);
        if (!result.success) {
          await this.documentEngine.addAssistantMessage("Failed to correct grammar", result);
        }
        return result;
      } catch (error) {
        const result = {
          success: false,
          error: error instanceof Error ? error.message : "Grammar correction failed",
          editType: "replace"
        };
        await this.documentEngine.addAssistantMessage(
          `Error: ${result.error}`,
          result
        );
        return result;
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
  /**
   * Apply grammar correction based on command target
   */
  async applyGrammarCorrection(command, documentContext, correctedContent) {
    switch (command.target) {
      case "selection":
        return await this.documentEngine.applyEdit(
          correctedContent,
          "selection",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "section":
        if (command.location) {
          const section = await this.documentEngine.findSection(command.location);
          if (section) {
            const newSectionContent = `${section.heading}

${correctedContent}`;
            const startPos = { line: section.range.start, ch: 0 };
            const endPos = { line: section.range.end + 1, ch: 0 };
            const editor = this.documentEngine.getActiveEditor();
            if (!editor) {
              return {
                success: false,
                error: "No active editor",
                editType: "replace"
              };
            }
            editor.replaceRange(newSectionContent, startPos, endPos);
            return {
              success: true,
              content: newSectionContent,
              editType: "replace",
              appliedAt: startPos
            };
          } else {
            return {
              success: false,
              error: `Section "${command.location}" not found`,
              editType: "replace"
            };
          }
        }
      // Fall through to paragraph if no location specified
      case "paragraph":
        if (documentContext.cursorPosition) {
          const editor = this.documentEngine.getActiveEditor();
          if (!editor) {
            return {
              success: false,
              error: "No active editor",
              editType: "replace"
            };
          }
          const currentLine = documentContext.cursorPosition.line;
          let startLine = currentLine;
          let endLine = currentLine;
          while (startLine > 0) {
            const prevLine = editor.getLine(startLine - 1);
            if (prevLine.trim() === "" || prevLine.startsWith("#")) {
              break;
            }
            startLine--;
          }
          const lineCount = editor.lineCount();
          while (endLine < lineCount - 1) {
            const nextLine = editor.getLine(endLine + 1);
            if (nextLine.trim() === "" || nextLine.startsWith("#")) {
              break;
            }
            endLine++;
          }
          const startPos = { line: startLine, ch: 0 };
          const endPos = { line: endLine, ch: editor.getLine(endLine).length };
          editor.replaceRange(correctedContent, startPos, endPos);
          return {
            success: true,
            content: correctedContent,
            editType: "replace",
            appliedAt: startPos
          };
        } else {
          return {
            success: false,
            error: "No cursor position available",
            editType: "replace"
          };
        }
      case "document":
        return await this.documentEngine.setDocumentContent(correctedContent);
      case "end":
        return await this.documentEngine.applyEdit(
          correctedContent,
          "end",
          {
            scrollToEdit: true,
            selectNewText: false
          }
        );
      default:
        return {
          success: false,
          error: "Invalid grammar correction target",
          editType: "replace"
        };
    }
  }
  /**
   * Validate grammar command requirements
   */
  validateCommand(command, hasSelection) {
    if (command.target === "selection" && !hasSelection) {
      return {
        valid: false,
        error: "This command requires text to be selected first"
      };
    }
    if (command.target === "section" && command.action === "grammar" && command.location) {
      return { valid: true };
    }
    return { valid: true };
  }
  /**
   * Get suggestions for grammar commands
   */
  getSuggestions(documentContext, hasSelection) {
    const suggestions = [];
    if (hasSelection) {
      suggestions.push(
        "Fix grammar in selected text",
        "Correct spelling and punctuation",
        "Improve sentence structure",
        "Fix capitalization errors",
        "Correct verb tenses",
        "Fix subject-verb agreement",
        "Improve readability"
      );
    } else {
      suggestions.push(
        "Check grammar throughout document",
        "Fix spelling errors",
        "Correct punctuation",
        "Improve sentence structure",
        "Fix grammatical errors in current paragraph",
        "Check for common mistakes",
        "Proofread the document"
      );
      if (documentContext.headings.length > 0) {
        documentContext.headings.forEach((heading) => {
          suggestions.push(`Check grammar in "${heading.text}" section`);
        });
      }
    }
    return suggestions.slice(0, 10);
  }
  /**
   * Preview what would be grammar-corrected
   */
  async preview(command) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found"
        };
      }
      let affectedContent = "";
      let previewText = "";
      const potentialIssues = [];
      switch (command.target) {
        case "selection":
          if (documentContext.selectedText) {
            affectedContent = documentContext.selectedText;
            previewText = "Will check grammar in the selected text";
            potentialIssues.push(...this.detectPotentialIssues(affectedContent));
          } else {
            return {
              success: false,
              error: "No text is currently selected"
            };
          }
          break;
        case "section":
          if (command.location) {
            const section = await this.documentEngine.findSection(command.location);
            if (section) {
              affectedContent = section.content;
              previewText = `Will check grammar in the "${command.location}" section`;
              potentialIssues.push(...this.detectPotentialIssues(affectedContent));
            } else {
              return {
                success: false,
                error: `Section "${command.location}" not found`
              };
            }
          } else {
            previewText = "Will check grammar at cursor position";
          }
          break;
        case "paragraph":
          previewText = "Will check grammar in the current paragraph";
          if (documentContext.cursorPosition) {
            const editor = this.documentEngine.getActiveEditor();
            if (editor) {
              const currentLine = documentContext.cursorPosition.line;
              let paragraphLines = [];
              let startLine = currentLine;
              let endLine = currentLine;
              while (startLine > 0) {
                const prevLine = editor.getLine(startLine - 1);
                if (prevLine.trim() === "" || prevLine.startsWith("#")) {
                  break;
                }
                startLine--;
              }
              const lineCount = editor.lineCount();
              while (endLine < lineCount - 1) {
                const nextLine = editor.getLine(endLine + 1);
                if (nextLine.trim() === "" || nextLine.startsWith("#")) {
                  break;
                }
                endLine++;
              }
              for (let i = startLine; i <= endLine; i++) {
                paragraphLines.push(editor.getLine(i));
              }
              affectedContent = paragraphLines.join("\n");
              potentialIssues.push(...this.detectPotentialIssues(affectedContent));
            }
          }
          break;
        case "document":
          affectedContent = documentContext.content;
          previewText = "Will check grammar throughout the entire document";
          potentialIssues.push(...this.detectPotentialIssues(affectedContent));
          break;
        case "end":
          previewText = "Will add grammar-corrected content at the end of the document";
          break;
        default:
          return {
            success: false,
            error: "Invalid grammar correction target"
          };
      }
      return {
        success: true,
        preview: previewText,
        affectedContent: affectedContent.length > 200 ? affectedContent.substring(0, 200) + "..." : affectedContent,
        potentialIssues: potentialIssues.slice(0, 5)
        // Limit to 5 issues
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Detect potential grammar issues in text
   */
  detectPotentialIssues(text) {
    const issues = [];
    const patterns = [
      { pattern: /\bi\s/gi, issue: 'Lowercase "i" should be capitalized' },
      { pattern: /\.\s*[a-z]/g, issue: "Sentence should start with capital letter" },
      { pattern: /\s{2,}/g, issue: "Multiple spaces detected" },
      { pattern: /[.!?]{2,}/g, issue: "Multiple punctuation marks" },
      { pattern: /\s+[.!?,:;]/g, issue: "Space before punctuation" },
      { pattern: /[.!?]\w/g, issue: "Missing space after punctuation" },
      { pattern: /\bteh\b/gi, issue: 'Common typo: "teh" should be "the"' },
      { pattern: /\band\s+and\b/gi, issue: 'Duplicate "and"' },
      { pattern: /\bthe\s+the\b/gi, issue: 'Duplicate "the"' },
      { pattern: /\bis\s+is\b/gi, issue: 'Duplicate "is"' }
    ];
    patterns.forEach(({ pattern, issue }) => {
      if (pattern.test(text)) {
        issues.push(issue);
      }
    });
    return issues;
  }
  /**
   * Get grammar check targets available for current context
   */
  getAvailableTargets(documentContext) {
    const targets = ["paragraph", "document", "end"];
    if (documentContext.selectedText) {
      targets.unshift("selection");
    }
    if (documentContext.headings.length > 0) {
      targets.splice(-2, 0, "section");
    }
    return targets;
  }
  /**
   * Estimate the scope of grammar correction
   */
  async estimateScope(command) {
    const documentContext = await this.documentEngine.getDocumentContext();
    if (!documentContext) {
      return {
        charactersAffected: 0,
        linesAffected: 0,
        scopeDescription: "No document available",
        estimatedIssues: 0
      };
    }
    let charactersAffected = 0;
    let linesAffected = 0;
    let scopeDescription = "";
    let contentToAnalyze = "";
    switch (command.target) {
      case "selection":
        if (documentContext.selectedText) {
          charactersAffected = documentContext.selectedText.length;
          linesAffected = documentContext.selectedText.split("\n").length;
          scopeDescription = "Selected text only";
          contentToAnalyze = documentContext.selectedText;
        }
        break;
      case "section":
        if (command.location) {
          const section = await this.documentEngine.findSection(command.location);
          if (section) {
            charactersAffected = section.content.length;
            linesAffected = section.range.end - section.range.start;
            scopeDescription = `"${command.location}" section`;
            contentToAnalyze = section.content;
          }
        }
        break;
      case "paragraph":
        charactersAffected = 100;
        linesAffected = 1;
        scopeDescription = "Current paragraph";
        if (documentContext.surroundingLines) {
          contentToAnalyze = documentContext.surroundingLines.before.join("\n") + "\n" + documentContext.surroundingLines.after.join("\n");
        }
        break;
      case "document":
        charactersAffected = documentContext.content.length;
        linesAffected = documentContext.content.split("\n").length;
        scopeDescription = "Entire document";
        contentToAnalyze = documentContext.content;
        break;
      case "end":
        charactersAffected = 0;
        linesAffected = 0;
        scopeDescription = "New content at end";
        break;
    }
    const estimatedIssues = this.detectPotentialIssues(contentToAnalyze).length;
    return {
      charactersAffected,
      linesAffected,
      scopeDescription,
      estimatedIssues
    };
  }
};

// src/core/commands/rewrite-command.ts
var RewriteCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute rewrite command
   */
  async execute(command) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "replace"
        };
      }
      const validation = this.validateCommand(command, !!documentContext.selectedText);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "replace"
        };
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const promptValidation = this.contextBuilder.validatePrompt(prompt);
      if (!promptValidation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${promptValidation.issues.join(", ")}`,
          editType: "replace"
        };
      }
      try {
        await this.documentEngine.addUserMessage(command.instruction, command);
        const rewrittenContent = await this.providerManager.generateText(
          prompt.userPrompt,
          {
            systemPrompt: prompt.systemPrompt,
            temperature: prompt.config.temperature,
            maxTokens: prompt.config.maxTokens
          }
        );
        if (!rewrittenContent || rewrittenContent.trim().length === 0) {
          const result2 = {
            success: false,
            error: "AI provider returned empty content",
            editType: "replace"
          };
          await this.documentEngine.addAssistantMessage("Failed to generate rewritten content", result2);
          return result2;
        }
        const result = await this.applyRewrite(command, documentContext, rewrittenContent);
        if (!result.success) {
          await this.documentEngine.addAssistantMessage("Failed to rewrite content", result);
        }
        return result;
      } catch (error) {
        const result = {
          success: false,
          error: error instanceof Error ? error.message : "Rewrite generation failed",
          editType: "replace"
        };
        await this.documentEngine.addAssistantMessage(
          `Error: ${result.error}`,
          result
        );
        return result;
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
  /**
   * Apply rewrite based on command target
   */
  async applyRewrite(command, documentContext, rewrittenContent) {
    switch (command.target) {
      case "selection":
        return await this.documentEngine.applyEdit(
          rewrittenContent,
          "selection",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "section":
        if (command.location) {
          const section = await this.documentEngine.findSection(command.location);
          if (section) {
            const newSectionContent = `${section.heading}

${rewrittenContent}`;
            const startPos = { line: section.range.start, ch: 0 };
            const endPos = { line: section.range.end + 1, ch: 0 };
            const editor = this.documentEngine.getActiveEditor();
            if (!editor) {
              return {
                success: false,
                error: "No active editor",
                editType: "replace"
              };
            }
            editor.replaceRange(newSectionContent, startPos, endPos);
            return {
              success: true,
              content: newSectionContent,
              editType: "replace",
              appliedAt: startPos
            };
          } else {
            return {
              success: false,
              error: `Section "${command.location}" not found`,
              editType: "replace"
            };
          }
        }
      // Fall through to paragraph if no location specified
      case "paragraph":
        if (documentContext.cursorPosition) {
          const editor = this.documentEngine.getActiveEditor();
          if (!editor) {
            return {
              success: false,
              error: "No active editor",
              editType: "replace"
            };
          }
          const currentLine = documentContext.cursorPosition.line;
          let startLine = currentLine;
          let endLine = currentLine;
          while (startLine > 0) {
            const prevLine = editor.getLine(startLine - 1);
            if (prevLine.trim() === "" || prevLine.startsWith("#")) {
              break;
            }
            startLine--;
          }
          const lineCount = editor.lineCount();
          while (endLine < lineCount - 1) {
            const nextLine = editor.getLine(endLine + 1);
            if (nextLine.trim() === "" || nextLine.startsWith("#")) {
              break;
            }
            endLine++;
          }
          const startPos = { line: startLine, ch: 0 };
          const endPos = { line: endLine, ch: editor.getLine(endLine).length };
          editor.replaceRange(rewrittenContent, startPos, endPos);
          return {
            success: true,
            content: rewrittenContent,
            editType: "replace",
            appliedAt: startPos
          };
        } else {
          return {
            success: false,
            error: "No cursor position available",
            editType: "replace"
          };
        }
      case "document":
        return await this.documentEngine.setDocumentContent(rewrittenContent);
      case "end":
        return await this.documentEngine.applyEdit(
          rewrittenContent,
          "end",
          {
            scrollToEdit: true,
            selectNewText: false
          }
        );
      default:
        return {
          success: false,
          error: "Invalid rewrite target",
          editType: "replace"
        };
    }
  }
  /**
   * Validate rewrite command requirements
   */
  validateCommand(command, hasSelection) {
    if (command.target === "selection" && !hasSelection) {
      return {
        valid: false,
        error: "This command requires text to be selected first"
      };
    }
    if (command.target === "section" && command.action === "rewrite" && command.location) {
      return { valid: true };
    }
    return { valid: true };
  }
  /**
   * Get suggestions for rewrite commands
   */
  getSuggestions(documentContext, hasSelection) {
    const suggestions = [];
    if (hasSelection) {
      suggestions.push(
        "Rewrite in a more formal tone",
        "Rewrite in a casual tone",
        "Make this more concise",
        "Expand with more detail",
        "Rewrite for clarity",
        "Simplify the language",
        "Make it more engaging",
        "Rewrite in bullet points",
        "Convert to narrative form"
      );
    } else {
      suggestions.push(
        "Rewrite the current paragraph",
        "Rewrite in a different style",
        "Make the writing more engaging",
        "Simplify complex language",
        "Rewrite for different audience",
        "Convert to more formal tone",
        "Make the content more concise"
      );
      if (documentContext.headings.length > 0) {
        documentContext.headings.forEach((heading) => {
          suggestions.push(`Rewrite the "${heading.text}" section`);
        });
      }
    }
    return suggestions.slice(0, 10);
  }
  /**
   * Preview what would be rewritten
   */
  async preview(command) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found"
        };
      }
      let affectedContent = "";
      let previewText = "";
      const rewriteStyle = this.inferRewriteStyle(command.instruction);
      switch (command.target) {
        case "selection":
          if (documentContext.selectedText) {
            affectedContent = documentContext.selectedText;
            previewText = `Will rewrite the selected text`;
            if (rewriteStyle) {
              previewText += ` (${rewriteStyle})`;
            }
          } else {
            return {
              success: false,
              error: "No text is currently selected"
            };
          }
          break;
        case "section":
          if (command.location) {
            const section = await this.documentEngine.findSection(command.location);
            if (section) {
              affectedContent = section.content;
              previewText = `Will rewrite the "${command.location}" section`;
              if (rewriteStyle) {
                previewText += ` (${rewriteStyle})`;
              }
            } else {
              return {
                success: false,
                error: `Section "${command.location}" not found`
              };
            }
          } else {
            previewText = "Will rewrite content at cursor position";
          }
          break;
        case "paragraph":
          previewText = "Will rewrite the current paragraph";
          if (rewriteStyle) {
            previewText += ` (${rewriteStyle})`;
          }
          if (documentContext.cursorPosition) {
            const editor = this.documentEngine.getActiveEditor();
            if (editor) {
              const currentLine = documentContext.cursorPosition.line;
              let paragraphLines = [];
              let startLine = currentLine;
              let endLine = currentLine;
              while (startLine > 0) {
                const prevLine = editor.getLine(startLine - 1);
                if (prevLine.trim() === "" || prevLine.startsWith("#")) {
                  break;
                }
                startLine--;
              }
              const lineCount = editor.lineCount();
              while (endLine < lineCount - 1) {
                const nextLine = editor.getLine(endLine + 1);
                if (nextLine.trim() === "" || nextLine.startsWith("#")) {
                  break;
                }
                endLine++;
              }
              for (let i = startLine; i <= endLine; i++) {
                paragraphLines.push(editor.getLine(i));
              }
              affectedContent = paragraphLines.join("\n");
            }
          }
          break;
        case "document":
          affectedContent = documentContext.content;
          previewText = "Will rewrite the entire document";
          if (rewriteStyle) {
            previewText += ` (${rewriteStyle})`;
          }
          break;
        case "end":
          previewText = "Will add rewritten content at the end of the document";
          if (rewriteStyle) {
            previewText += ` (${rewriteStyle})`;
          }
          break;
        default:
          return {
            success: false,
            error: "Invalid rewrite target"
          };
      }
      return {
        success: true,
        preview: previewText,
        affectedContent: affectedContent.length > 200 ? affectedContent.substring(0, 200) + "..." : affectedContent,
        rewriteStyle
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Infer rewrite style from instruction
   */
  inferRewriteStyle(instruction) {
    const lowerInstruction = instruction.toLowerCase();
    if (lowerInstruction.includes("formal")) return "formal tone";
    if (lowerInstruction.includes("casual") || lowerInstruction.includes("informal")) return "casual tone";
    if (lowerInstruction.includes("concise") || lowerInstruction.includes("shorter")) return "more concise";
    if (lowerInstruction.includes("expand") || lowerInstruction.includes("detail")) return "more detailed";
    if (lowerInstruction.includes("simple") || lowerInstruction.includes("simplify")) return "simplified language";
    if (lowerInstruction.includes("engaging") || lowerInstruction.includes("interesting")) return "more engaging";
    if (lowerInstruction.includes("professional")) return "professional tone";
    if (lowerInstruction.includes("bullet") || lowerInstruction.includes("list")) return "bullet point format";
    if (lowerInstruction.includes("narrative") || lowerInstruction.includes("story")) return "narrative style";
    if (lowerInstruction.includes("technical")) return "technical style";
    if (lowerInstruction.includes("creative")) return "creative style";
    return "";
  }
  /**
   * Get rewrite targets available for current context
   */
  getAvailableTargets(documentContext) {
    const targets = ["paragraph", "document", "end"];
    if (documentContext.selectedText) {
      targets.unshift("selection");
    }
    if (documentContext.headings.length > 0) {
      targets.splice(-2, 0, "section");
    }
    return targets;
  }
  /**
   * Estimate the scope of rewriting
   */
  async estimateScope(command) {
    const documentContext = await this.documentEngine.getDocumentContext();
    if (!documentContext) {
      return {
        charactersAffected: 0,
        linesAffected: 0,
        scopeDescription: "No document available",
        rewriteComplexity: "low"
      };
    }
    let charactersAffected = 0;
    let linesAffected = 0;
    let scopeDescription = "";
    let contentToAnalyze = "";
    switch (command.target) {
      case "selection":
        if (documentContext.selectedText) {
          charactersAffected = documentContext.selectedText.length;
          linesAffected = documentContext.selectedText.split("\n").length;
          scopeDescription = "Selected text only";
          contentToAnalyze = documentContext.selectedText;
        }
        break;
      case "section":
        if (command.location) {
          const section = await this.documentEngine.findSection(command.location);
          if (section) {
            charactersAffected = section.content.length;
            linesAffected = section.range.end - section.range.start;
            scopeDescription = `"${command.location}" section`;
            contentToAnalyze = section.content;
          }
        }
        break;
      case "paragraph":
        charactersAffected = 100;
        linesAffected = 1;
        scopeDescription = "Current paragraph";
        if (documentContext.surroundingLines) {
          contentToAnalyze = documentContext.surroundingLines.before.join("\n") + "\n" + documentContext.surroundingLines.after.join("\n");
        }
        break;
      case "document":
        charactersAffected = documentContext.content.length;
        linesAffected = documentContext.content.split("\n").length;
        scopeDescription = "Entire document";
        contentToAnalyze = documentContext.content;
        break;
      case "end":
        charactersAffected = 0;
        linesAffected = 0;
        scopeDescription = "New content at end";
        break;
    }
    const rewriteComplexity = this.estimateComplexity(contentToAnalyze, command.instruction);
    return {
      charactersAffected,
      linesAffected,
      scopeDescription,
      rewriteComplexity
    };
  }
  /**
   * Estimate rewrite complexity
   */
  estimateComplexity(content, instruction) {
    const contentLength = content.length;
    const lowerInstruction = instruction.toLowerCase();
    let complexity = "low";
    if (contentLength > 1e3) complexity = "high";
    else if (contentLength > 300) complexity = "medium";
    const complexInstructions = [
      "restructure",
      "reorganize",
      "completely rewrite",
      "transform",
      "change style",
      "different audience",
      "technical",
      "academic"
    ];
    if (complexInstructions.some((term) => lowerInstruction.includes(term))) {
      if (complexity === "low") complexity = "medium";
      else if (complexity === "medium") complexity = "high";
    }
    return complexity;
  }
};

// src/licensing/feature-manager.ts
var FeatureManager = class {
  constructor(licenseValidator, debugSettings) {
    this.licenseValidator = licenseValidator;
    this.features = /* @__PURE__ */ new Map();
    this.currentLicense = null;
    this.currentTier = "core" /* CORE */;
    this.debugSettings = { enabled: false };
    if (debugSettings) {
      this.debugSettings = debugSettings;
    }
    this.initializeFeatureFlags();
  }
  /**
   * Initialize all feature flags for Core vs SuperNova tiers
   */
  initializeFeatureFlags() {
    this.registerFeature({
      key: "basic_editing",
      requiredTier: "core" /* CORE */,
      enabled: true,
      description: "Basic document editing commands (add, edit, delete, grammar, rewrite)"
    });
    this.registerFeature({
      key: "local_ai_providers",
      requiredTier: "core" /* CORE */,
      enabled: true,
      description: "Local AI providers (Ollama, LM Studio)"
    });
    this.registerFeature({
      key: "file_conversations",
      requiredTier: "core" /* CORE */,
      enabled: true,
      description: "File-scoped conversation history"
    });
    this.registerFeature({
      key: "single_cloud_provider",
      requiredTier: "core" /* CORE */,
      enabled: true,
      description: "One cloud AI provider (user choice: Claude, OpenAI, or Google)"
    });
    this.registerFeature({
      key: "unlimited_cloud_ai",
      requiredTier: "supernova" /* SUPERNOVA */,
      enabled: false,
      description: "Unlimited access to all cloud AI providers",
      fallbackBehavior: "prompt_upgrade"
    });
    this.registerFeature({
      key: "provider_switching",
      requiredTier: "supernova" /* SUPERNOVA */,
      enabled: false,
      description: "Switch AI providers directly in chat interface",
      fallbackBehavior: "prompt_upgrade"
    });
    this.registerFeature({
      key: "mobile_access",
      requiredTier: "supernova" /* SUPERNOVA */,
      enabled: false,
      description: "Mobile device support (iOS/Android)",
      fallbackBehavior: "prompt_upgrade"
    });
    this.registerFeature({
      key: "advanced_templates",
      requiredTier: "supernova" /* SUPERNOVA */,
      enabled: false,
      description: "Advanced template integration and custom prompts",
      fallbackBehavior: "prompt_upgrade"
    });
    this.registerFeature({
      key: "batch_operations",
      requiredTier: "supernova" /* SUPERNOVA */,
      enabled: false,
      description: "Batch document processing",
      fallbackBehavior: "limited_usage"
    });
    this.registerFeature({
      key: "cross_document_context",
      requiredTier: "supernova" /* SUPERNOVA */,
      enabled: false,
      description: "Reference other vault notes during editing",
      fallbackBehavior: "disable"
    });
    this.registerFeature({
      key: "priority_support",
      requiredTier: "supernova" /* SUPERNOVA */,
      enabled: false,
      description: "Priority email support and feature requests",
      fallbackBehavior: "disable"
    });
  }
  /**
   * Register a new feature flag
   */
  registerFeature(flag) {
    this.features.set(flag.key, flag);
    this.updateFeatureAvailability();
  }
  /**
   * Update license and recalculate feature availability
   */
  async updateLicense(licenseKey) {
    if (!licenseKey) {
      this.currentLicense = null;
      this.currentTier = "core" /* CORE */;
    } else {
      const validation = await this.licenseValidator.validateLicense(licenseKey);
      if (validation.valid && validation.license) {
        this.currentLicense = validation.license;
        this.currentTier = validation.license.tier === "supernova" ? "supernova" /* SUPERNOVA */ : "core" /* CORE */;
      } else {
        this.currentLicense = null;
        this.currentTier = "core" /* CORE */;
      }
    }
    this.updateFeatureAvailability();
  }
  /**
   * Get current user's license tier
   */
  getCurrentTier() {
    if (this.debugSettings.enabled && this.debugSettings.overrideTier) {
      return this.debugSettings.overrideTier === "supernova" ? "supernova" /* SUPERNOVA */ : "core" /* CORE */;
    }
    return this.currentTier;
  }
  /**
   * Get current license information
   */
  getCurrentLicense() {
    return this.currentLicense;
  }
  /**
   * Check if a feature is enabled for current tier
   */
  isFeatureEnabled(featureKey) {
    var _a;
    const feature = this.features.get(featureKey);
    return (_a = feature == null ? void 0 : feature.enabled) != null ? _a : false;
  }
  /**
   * Check feature access with detailed result
   */
  checkFeatureAccess(featureKey) {
    const feature = this.features.get(featureKey);
    if (!feature) {
      return {
        allowed: false,
        reason: `Feature '${featureKey}' not found`
      };
    }
    if (feature.enabled) {
      return { allowed: true };
    }
    const currentTier = this.getCurrentTier();
    const requiredTier = feature.requiredTier;
    return {
      allowed: false,
      reason: `Feature requires ${requiredTier} tier (current: ${currentTier})`,
      fallbackBehavior: feature.fallbackBehavior,
      upgradePrompt: this.getUpgradePrompt(feature)
    };
  }
  /**
   * Get all features for a specific tier
   */
  getFeaturesForTier(tier) {
    return Array.from(this.features.values()).filter(
      (feature) => tier === "supernova" /* SUPERNOVA */ ? true : feature.requiredTier === "core" /* CORE */
    );
  }
  /**
   * Update debug settings for development testing
   */
  updateDebugSettings(settings) {
    this.debugSettings = settings;
    this.updateFeatureAvailability();
  }
  /**
   * Get debug settings
   */
  getDebugSettings() {
    return { ...this.debugSettings };
  }
  /**
   * Update feature availability based on current tier
   */
  updateFeatureAvailability() {
    const currentTier = this.getCurrentTier();
    for (const [key, feature] of this.features) {
      const shouldEnable = currentTier === "supernova" /* SUPERNOVA */ || feature.requiredTier === "core" /* CORE */;
      this.features.set(key, { ...feature, enabled: shouldEnable });
    }
  }
  /**
   * Generate upgrade prompt for blocked feature
   */
  getUpgradePrompt(feature) {
    return `${feature.description} is available with Nova SuperNova. Upgrade to unlock this feature and support Nova development.`;
  }
  /**
   * Get feature usage summary for current tier
   */
  getFeatureSummary() {
    const currentTier = this.getCurrentTier();
    const enabled = [];
    const disabled = [];
    for (const [key, feature] of this.features) {
      if (feature.enabled) {
        enabled.push(key);
      } else {
        disabled.push(key);
      }
    }
    return { tier: currentTier, enabled, disabled };
  }
};

// src/licensing/license-validator.ts
var LicenseValidator = class {
  constructor() {
    // Embedded signing key - in production this would be obfuscated
    this.SECRET_KEY = "nova-license-signing-key-2025";
  }
  /**
   * Validates a license key and returns validation result
   */
  async validateLicense(licenseKey) {
    try {
      const license = this.parseLicenseKey(licenseKey);
      if (!license) {
        return {
          valid: false,
          error: "INVALID_FORMAT" /* INVALID_FORMAT */
        };
      }
      const validationError = await this.validateLicenseObject(license);
      if (validationError) {
        return {
          valid: false,
          license,
          error: validationError
        };
      }
      return {
        valid: true,
        license
      };
    } catch (error) {
      return {
        valid: false,
        error: "MALFORMED_DATA" /* MALFORMED_DATA */
      };
    }
  }
  /**
   * Parses a license key string into a License object
   */
  parseLicenseKey(licenseKey) {
    try {
      const decoded = this.base64Decode(licenseKey);
      const parts = decoded.split("|");
      if (parts.length !== 5) {
        return null;
      }
      const [email, tier, expiresAtStr, issuedAtStr, signature] = parts;
      if (tier !== "core" && tier !== "supernova") {
        return null;
      }
      const expiresAt = expiresAtStr === "lifetime" ? null : new Date(expiresAtStr);
      const issuedAt = new Date(issuedAtStr);
      if (isNaN(issuedAt.getTime())) {
        return null;
      }
      if (expiresAt && isNaN(expiresAt.getTime())) {
        return null;
      }
      return {
        email,
        tier,
        expiresAt,
        issuedAt,
        signature,
        licenseKey
      };
    } catch (error) {
      return null;
    }
  }
  /**
   * Safe base64 decode that handles both browser and Node.js environments
   */
  base64Decode(str) {
    if (typeof atob !== "undefined") {
      return atob(str);
    }
    return Buffer.from(str, "base64").toString("utf8");
  }
  /**
   * Safe base64 encode that handles both browser and Node.js environments
   */
  base64Encode(str) {
    if (typeof btoa !== "undefined") {
      return btoa(str);
    }
    return Buffer.from(str, "utf8").toString("base64");
  }
  /**
   * Validates a license object
   */
  async validateLicenseObject(license) {
    const expectedSignature = await this.generateSignature(
      license.email,
      license.tier,
      license.expiresAt,
      license.issuedAt
    );
    if (license.signature !== expectedSignature) {
      return "INVALID_SIGNATURE" /* INVALID_SIGNATURE */;
    }
    if (license.expiresAt && /* @__PURE__ */ new Date() > license.expiresAt) {
      return "EXPIRED" /* EXPIRED */;
    }
    if (license.issuedAt > /* @__PURE__ */ new Date()) {
      return "FUTURE_DATED" /* FUTURE_DATED */;
    }
    return null;
  }
  /**
   * Generates HMAC-SHA256 signature for license data
   */
  async generateSignature(email, tier, expiresAt, issuedAt) {
    const data = `${email}|${tier}|${(expiresAt == null ? void 0 : expiresAt.toISOString()) || "lifetime"}|${issuedAt.toISOString()}`;
    const encoder = new TextEncoder();
    const keyData = encoder.encode(this.SECRET_KEY);
    const messageData = encoder.encode(data);
    const cryptoKey = await crypto.subtle.importKey(
      "raw",
      keyData,
      { name: "HMAC", hash: "SHA-256" },
      false,
      ["sign"]
    );
    const signature = await crypto.subtle.sign("HMAC", cryptoKey, messageData);
    return Array.from(new Uint8Array(signature)).map((b) => b.toString(16).padStart(2, "0")).join("");
  }
  /**
   * Creates a test license for development purposes
   */
  async createTestLicense(email, tier, lifetimeMode = true) {
    const issuedAt = /* @__PURE__ */ new Date();
    const expiresAt = lifetimeMode ? null : new Date(Date.now() + 365 * 24 * 60 * 60 * 1e3);
    const signature = await this.generateSignature(email, tier, expiresAt, issuedAt);
    const licenseData = `${email}|${tier}|${(expiresAt == null ? void 0 : expiresAt.toISOString()) || "lifetime"}|${issuedAt.toISOString()}|${signature}`;
    return this.base64Encode(licenseData);
  }
};

// main.ts
var NOVA_ICON_SVG = `
<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <!-- Central star core -->
  <circle cx="12" cy="12" r="2.5" fill="currentColor"/>
  
  <!-- Primary rays (4 main directions) -->
  <path d="M12 1L12 6" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M12 18L12 23" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M23 12L18 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M6 12L1 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  
  <!-- Secondary rays (diagonals) -->
  <path d="M18.364 5.636L15.536 8.464" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M8.464 15.536L5.636 18.364" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M18.364 18.364L15.536 15.536" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M8.464 8.464L5.636 5.636" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
</svg>`;
var NovaPlugin = class extends import_obsidian5.Plugin {
  async onload() {
    try {
      console.log("Nova: onload starting...");
      await this.loadSettings();
      console.log("Nova: settings loaded");
      this.licenseValidator = new LicenseValidator();
      this.featureManager = new FeatureManager(
        this.licenseValidator,
        this.settings.licensing.debugSettings
      );
      if (this.settings.licensing.licenseKey) {
        await this.featureManager.updateLicense(this.settings.licensing.licenseKey);
      }
      console.log("Nova: feature manager initialized");
      if (import_obsidian5.Platform.isMobile && this.featureManager.getCurrentTier() === "core") {
        if (!this.featureManager.isFeatureEnabled("mobile_access")) {
          this.showMobileUpgradePrompt();
          return;
        }
      }
      (0, import_obsidian5.addIcon)("nova-star", NOVA_ICON_SVG);
      console.log("Nova: icon registered");
      this.aiProviderManager = new AIProviderManager(this.settings, this.featureManager);
      await this.aiProviderManager.initialize();
      console.log("Nova: AI provider manager initialized");
      const dataStore = {
        loadData: (key) => this.loadDataWithKey(key),
        saveData: (key, data) => this.saveDataWithKey(key, data)
      };
      this.conversationManager = new ConversationManager(dataStore);
      this.documentEngine = new DocumentEngine(this.app, dataStore);
      this.documentEngine.setConversationManager(this.conversationManager);
      this.contextBuilder = new ContextBuilder();
      this.commandParser = new CommandParser();
      this.promptBuilder = new PromptBuilder(this.documentEngine, this.conversationManager);
      this.addCommandHandler = new AddCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.editCommandHandler = new EditCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.deleteCommandHandler = new DeleteCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.grammarCommandHandler = new GrammarCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.rewriteCommandHandler = new RewriteCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      console.log("Nova: document engine and commands initialized");
      this.registerView(
        VIEW_TYPE_NOVA_SIDEBAR,
        (leaf) => new NovaSidebarView(leaf, this)
      );
      console.log("Nova: view registered");
      const ribbonIcon = this.addRibbonIcon("nova-star", "Nova AI", (evt) => {
        this.activateView();
      });
      console.log("Nova: ribbon icon added");
      console.log("Nova: ribbon icon element:", ribbonIcon);
      console.log("Nova: ribbon icon innerHTML:", ribbonIcon.innerHTML);
      console.log("Nova: ribbon icon classList:", ribbonIcon.classList.toString());
      this.addCommand({
        id: "nova-add-content",
        name: "Nova: Add content",
        editorCallback: async (editor, ctx) => {
          await this.handleAddCommand();
        }
      });
      this.addCommand({
        id: "nova-edit-content",
        name: "Nova: Edit content",
        editorCallback: async (editor, ctx) => {
          await this.handleEditCommand();
        }
      });
      this.addCommand({
        id: "nova-delete-content",
        name: "Nova: Delete content",
        editorCallback: async (editor, ctx) => {
          await this.handleDeleteCommand();
        }
      });
      this.addCommand({
        id: "nova-fix-grammar",
        name: "Nova: Fix grammar",
        editorCallback: async (editor, ctx) => {
          await this.handleGrammarCommand();
        }
      });
      this.addCommand({
        id: "nova-rewrite-content",
        name: "Nova: Rewrite content",
        editorCallback: async (editor, ctx) => {
          await this.handleRewriteCommand();
        }
      });
      this.addCommand({
        id: "open-nova-sidebar",
        name: "Nova: Open sidebar",
        callback: () => {
          this.activateView();
        }
      });
      console.log("Nova: commands registered");
      this.addSettingTab(new NovaSettingTab(this.app, this));
      console.log("Nova: settings tab added");
      console.log("Nova: onload completed successfully");
    } catch (error) {
      console.error("Nova: Error in onload:", error);
    }
  }
  onunload() {
    var _a;
    (_a = this.aiProviderManager) == null ? void 0 : _a.cleanup();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    var _a;
    await this.saveData(this.settings);
    (_a = this.aiProviderManager) == null ? void 0 : _a.updateSettings(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await (leaf == null ? void 0 : leaf.setViewState({ type: VIEW_TYPE_NOVA_SIDEBAR, active: true }));
    }
    workspace.revealLeaf(leaf);
  }
  /**
   * Handle add content command with user input
   */
  async handleAddCommand() {
    const instruction = await this.promptForInstruction("What would you like to add?");
    if (!instruction) return;
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      const hasSelection = !!(documentContext == null ? void 0 : documentContext.selectedText);
      const command = this.commandParser.parseCommand(instruction, hasSelection);
      const result = await this.addCommandHandler.execute(command);
      if (result.success) {
        new import_obsidian5.Notice("Content added successfully");
      } else {
        new import_obsidian5.Notice(`Failed to add content: ${result.error}`);
      }
    } catch (error) {
      new import_obsidian5.Notice(`Error: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Handle edit content command with user input
   */
  async handleEditCommand() {
    const instruction = await this.promptForInstruction("How would you like to edit the content?");
    if (!instruction) return;
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      const hasSelection = !!(documentContext == null ? void 0 : documentContext.selectedText);
      const command = this.commandParser.parseCommand(instruction, hasSelection);
      const result = await this.editCommandHandler.execute(command);
      if (result.success) {
        new import_obsidian5.Notice("Content edited successfully");
      } else {
        new import_obsidian5.Notice(`Failed to edit content: ${result.error}`);
      }
    } catch (error) {
      new import_obsidian5.Notice(`Error: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Handle delete content command with user input
   */
  async handleDeleteCommand() {
    const instruction = await this.promptForInstruction("What would you like to delete?");
    if (!instruction) return;
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      const hasSelection = !!(documentContext == null ? void 0 : documentContext.selectedText);
      const command = this.commandParser.parseCommand(instruction, hasSelection);
      const result = await this.deleteCommandHandler.execute(command);
      if (result.success) {
        new import_obsidian5.Notice("Content deleted successfully");
      } else {
        new import_obsidian5.Notice(`Failed to delete content: ${result.error}`);
      }
    } catch (error) {
      new import_obsidian5.Notice(`Error: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Handle grammar correction command
   */
  async handleGrammarCommand() {
    const documentContext = await this.documentEngine.getDocumentContext();
    if (!documentContext) {
      new import_obsidian5.Notice("No active document found");
      return;
    }
    let target = "document";
    let instruction = "Fix grammar and spelling errors";
    if (documentContext.selectedText) {
      target = "selection";
      instruction = "Fix grammar and spelling errors in the selected text";
    }
    try {
      const command = {
        action: "grammar",
        target,
        instruction
      };
      const result = await this.grammarCommandHandler.execute(command);
      if (result.success) {
        new import_obsidian5.Notice("Grammar corrected successfully");
      } else {
        new import_obsidian5.Notice(`Failed to correct grammar: ${result.error}`);
      }
    } catch (error) {
      new import_obsidian5.Notice(`Error: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Handle rewrite content command with user input
   */
  async handleRewriteCommand() {
    const instruction = await this.promptForInstruction("How would you like to rewrite the content?");
    if (!instruction) return;
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      const hasSelection = !!(documentContext == null ? void 0 : documentContext.selectedText);
      const command = this.commandParser.parseCommand(instruction, hasSelection);
      const result = await this.rewriteCommandHandler.execute(command);
      if (result.success) {
        new import_obsidian5.Notice("Content rewritten successfully");
      } else {
        new import_obsidian5.Notice(`Failed to rewrite content: ${result.error}`);
      }
    } catch (error) {
      new import_obsidian5.Notice(`Error: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Prompt user for instruction input
   */
  async promptForInstruction(placeholder) {
    return new Promise((resolve) => {
      const modal = document.createElement("div");
      modal.className = "modal nova-input-modal";
      modal.innerHTML = `
				<div class="modal-container">
					<div class="modal-bg" onclick="this.parentElement.parentElement.remove(); resolve(null);"></div>
					<div class="modal-content">
						<div class="modal-header">
							<h3>Nova AI Command</h3>
							<button class="modal-close-button" onclick="this.closest('.modal').remove(); resolve(null);">\xD7</button>
						</div>
						<div class="modal-body">
							<input type="text" class="nova-instruction-input" placeholder="${placeholder}" autofocus>
						</div>
						<div class="modal-footer">
							<button class="mod-cta nova-submit-btn">Execute</button>
							<button class="nova-cancel-btn">Cancel</button>
						</div>
					</div>
				</div>
			`;
      const input = modal.querySelector(".nova-instruction-input");
      const submitBtn = modal.querySelector(".nova-submit-btn");
      const cancelBtn = modal.querySelector(".nova-cancel-btn");
      const handleSubmit = () => {
        const value = input.value.trim();
        modal.remove();
        resolve(value || null);
      };
      const handleCancel = () => {
        modal.remove();
        resolve(null);
      };
      input.addEventListener("keydown", (e) => {
        if (e.key === "Enter") {
          e.preventDefault();
          handleSubmit();
        } else if (e.key === "Escape") {
          e.preventDefault();
          handleCancel();
        }
      });
      submitBtn.addEventListener("click", handleSubmit);
      cancelBtn.addEventListener("click", handleCancel);
      document.body.appendChild(modal);
      input.focus();
    });
  }
  /**
   * Show upgrade prompt for Core tier mobile users
   */
  showMobileUpgradePrompt() {
    const modal = document.createElement("div");
    modal.className = "modal nova-mobile-upgrade-modal";
    modal.innerHTML = `
			<div class="modal-container">
				<div class="modal-bg"></div>
				<div class="modal-content">
					<div class="modal-header">
						<h3>\u{1F680} Nova SuperNova Required</h3>
					</div>
					<div class="modal-body">
						<div class="nova-tier-badge core" style="margin-bottom: 1em;">
							<span class="tier-icon">\u{1F193}</span>
							<span class="tier-name">Core (Free)</span>
						</div>
						<p>Mobile access is available with Nova SuperNova.</p>
						<p>Core tier is limited to desktop use only.</p>
						<div class="nova-feature-list">
							<h4>SuperNova includes:</h4>
							<ul>
								<li>\u2705 Mobile device support</li>
								<li>\u2705 Multiple AI providers</li>
								<li>\u2705 In-chat provider switching</li>
								<li>\u2705 Advanced templates</li>
								<li>\u2705 Priority support</li>
							</ul>
						</div>
					</div>
					<div class="modal-footer">
						<button class="mod-cta nova-upgrade-btn">\u2B50 Upgrade to SuperNova</button>
						<button class="nova-close-btn">Close</button>
					</div>
				</div>
			</div>
		`;
    const upgradeBtn = modal.querySelector(".nova-upgrade-btn");
    const closeBtn = modal.querySelector(".nova-close-btn");
    const modalBg = modal.querySelector(".modal-bg");
    const closeModal = () => {
      modal.remove();
    };
    upgradeBtn.addEventListener("click", () => {
      window.open("https://novawriter.ai/upgrade", "_blank");
      closeModal();
    });
    closeBtn.addEventListener("click", closeModal);
    modalBg.addEventListener("click", closeModal);
    document.body.appendChild(modal);
    new import_obsidian5.Notice("Nova mobile access requires SuperNova license", 8e3);
  }
  // DataStore interface implementation for ConversationManager
  async loadDataWithKey(key) {
    const allData = await this.loadData();
    return allData ? allData[key] : void 0;
  }
  async saveDataWithKey(key, data) {
    const allData = await this.loadData() || {};
    allData[key] = data;
    return await this.saveData(allData);
  }
};
//# sourceMappingURL=data:application/json;base64,
