/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NovaPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian16 = require("obsidian");

// src/settings.ts
var import_obsidian13 = require("obsidian");

// src/ui/sidebar-view.ts
var import_obsidian11 = require("obsidian");

// src/core/document-analysis.ts
var DocumentAnalyzer = class {
  static analyzeStructure(content) {
    const lines = content.split("\n");
    const headings = [];
    const emptyHeadings = [];
    const incompleteBullets = [];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      const headingMatch = line.match(/^(#{1,6})\s+(.+)$/);
      if (headingMatch) {
        const level = headingMatch[1].length;
        const text = headingMatch[2];
        const hasContent = this.hasContentAfterHeading(lines, i);
        const isEmpty = !hasContent;
        headings.push({ level, text, isEmpty });
        if (isEmpty) {
          emptyHeadings.push(text);
        }
      }
      if (line.match(/^[-*+]\s*(.*)\.\.\.?\s*$/) || line.match(/^[-*+]\s*$/) || line.match(/^[-*+]\s*(TODO|TBD)/i)) {
        incompleteBullets.push(line);
      }
    }
    const wordCount = content.split(/\s+/).filter((word) => word.length > 0).length;
    return {
      headings,
      wordCount,
      emptyHeadings,
      incompleteBullets
    };
  }
  static hasContentAfterHeading(lines, headingIndex) {
    var _a;
    const currentHeading = lines[headingIndex].trim();
    const currentLevel = ((_a = currentHeading.match(/^(#{1,6})/)) == null ? void 0 : _a[1].length) || 0;
    for (let i = headingIndex + 1; i < lines.length; i++) {
      const line = lines[i].trim();
      const headingMatch = line.match(/^(#{1,6})\s/);
      if (headingMatch) {
        const nextLevel = headingMatch[1].length;
        if (nextLevel <= currentLevel) {
          return false;
        }
      }
      if (line.length > 0) return true;
    }
    return false;
  }
};

// src/core/multi-doc-context.ts
var import_obsidian = require("obsidian");
var MultiDocContextHandler = class {
  constructor(app) {
    this.persistentContext = /* @__PURE__ */ new Map();
    this.TOKEN_LIMIT = 8e3;
    this.WARNING_THRESHOLD = 0.8;
    this.app = app;
  }
  /**
   * Parse a message for document references
   */
  parseMessage(message, conversationFilePath) {
    const references = [];
    let cleanedMessage = message;
    const refPattern = /(\+)?\[\[([^\]]+?)(?:#([^\]]+?))?\]\]/g;
    let match;
    while ((match = refPattern.exec(message)) !== null) {
      const docName = match[2];
      const property = match[3];
      const rawReference = match[0];
      const file = this.findFile(docName);
      if (file) {
        references.push({
          file,
          isPersistent: true,
          // All references are now persistent
          rawReference,
          property
        });
      }
    }
    for (const ref of references) {
      cleanedMessage = cleanedMessage.replace(ref.rawReference, " ");
    }
    cleanedMessage = cleanedMessage.replace(/\s{2,}/g, " ").trim();
    const persistentRefs = references.filter((ref) => ref.isPersistent);
    if (persistentRefs.length > 0) {
      const existing = this.persistentContext.get(conversationFilePath) || [];
      const updatedPersistent = [...existing];
      for (const ref of persistentRefs) {
        const exists = updatedPersistent.some((existing2) => existing2.file.path === ref.file.path);
        if (!exists) {
          updatedPersistent.push(ref);
        }
      }
      this.persistentContext.set(conversationFilePath, updatedPersistent);
    }
    return { cleanedMessage, references };
  }
  /**
   * Build complete context including persistent documents
   */
  async buildContext(message, currentFile, conversationData) {
    const { cleanedMessage, references } = this.parseMessage(message, currentFile.path);
    const existingPersistent = this.persistentContext.get(currentFile.path) || [];
    if (references.length > 0) {
      const updatedPersistent = [...existingPersistent];
      for (const ref of references) {
        const exists = updatedPersistent.some((existing) => existing.file.path === ref.file.path);
        if (!exists) {
          updatedPersistent.push(ref);
        }
      }
      this.persistentContext.set(currentFile.path, updatedPersistent);
    }
    const rawPersistentDocs = this.persistentContext.get(currentFile.path) || [];
    const allPersistentDocs = rawPersistentDocs.filter((docRef) => {
      if (!(docRef == null ? void 0 : docRef.file) || !this.app.vault.getAbstractFileByPath(docRef.file.path)) {
        return false;
      }
      return true;
    });
    if (allPersistentDocs.length !== rawPersistentDocs.length) {
      if (allPersistentDocs.length > 0) {
        this.persistentContext.set(currentFile.path, allPersistentDocs);
      } else {
        this.persistentContext.delete(currentFile.path);
      }
    }
    const contextParts = [];
    const currentFileContext = await this.getFullDocumentContext(currentFile, true, 100);
    if (currentFileContext) {
      contextParts.push(currentFileContext);
    }
    for (const docRef of allPersistentDocs) {
      const contextPart = await this.getDocumentContext(docRef);
      if (contextPart) {
        contextParts.push(contextPart);
      }
    }
    const contextString = contextParts.join("\n\n---\n\n");
    const tokenCount = this.estimateTokens(contextString);
    const isNearLimit = tokenCount > this.TOKEN_LIMIT * this.WARNING_THRESHOLD;
    return {
      cleanedMessage,
      context: {
        persistentDocs: allPersistentDocs,
        contextString,
        tokenCount,
        isNearLimit
      }
    };
  }
  /**
   * Get full document context including metadata/properties
   */
  async getFullDocumentContext(file, includeContent = true, maxLines = 50) {
    try {
      let contextParts = [];
      contextParts.push(`## Document: ${file.basename}`);
      const cache = this.app.metadataCache.getFileCache(file);
      if ((cache == null ? void 0 : cache.frontmatter) && Object.keys(cache.frontmatter).length > 0) {
        contextParts.push("\n### Properties/Metadata:");
        for (const [key, value] of Object.entries(cache.frontmatter)) {
          const formattedValue = typeof value === "object" ? JSON.stringify(value) : value;
          contextParts.push(`- ${key}: ${formattedValue}`);
        }
      }
      if (includeContent) {
        const content = await this.app.vault.read(file);
        if (content) {
          const lines = content.split("\n");
          let contentStartIndex = 0;
          if (lines[0] === "---") {
            for (let i = 1; i < lines.length; i++) {
              if (lines[i] === "---") {
                contentStartIndex = i + 1;
                break;
              }
            }
          }
          const contentLines = lines.slice(contentStartIndex);
          const truncatedContent = contentLines.slice(0, maxLines).join("\n");
          const wasTruncated = contentLines.length > maxLines;
          contextParts.push("\n### Content:");
          contextParts.push(truncatedContent);
          if (wasTruncated) {
            contextParts.push("\n[... truncated for brevity ...]");
          }
        }
      }
      return contextParts.join("\n");
    } catch (error) {
      return null;
    }
  }
  /**
   * Get context for a specific document reference
   */
  async getDocumentContext(docRef) {
    try {
      const { file, property } = docRef;
      if (!file || !this.app.vault.getAbstractFileByPath(file.path)) {
        return null;
      }
      if (property) {
        const cache = this.app.metadataCache.getFileCache(file);
        if ((cache == null ? void 0 : cache.frontmatter) && cache.frontmatter[property]) {
          return `## ${file.basename} - ${property}
${cache.frontmatter[property]}`;
        }
        return null;
      } else {
        return this.getFullDocumentContext(file);
      }
    } catch (error) {
      return null;
    }
  }
  /**
   * Find a file by name or path
   */
  findFile(nameOrPath) {
    let file = this.app.vault.getAbstractFileByPath(nameOrPath);
    if (!file || !(file instanceof import_obsidian.TFile)) {
      file = this.app.vault.getAbstractFileByPath(nameOrPath + ".md");
    }
    if (!file || !(file instanceof import_obsidian.TFile)) {
      const files = this.app.vault.getMarkdownFiles();
      file = files.find(
        (f) => f.basename === nameOrPath || f.name === nameOrPath || f.path.endsWith("/" + nameOrPath) || f.path.endsWith("/" + nameOrPath + ".md")
      ) || null;
    }
    return file instanceof import_obsidian.TFile ? file : null;
  }
  /**
   * Clear persistent context for a conversation
   */
  clearPersistentContext(filePath) {
    this.persistentContext.delete(filePath);
  }
  /**
   * Get persistent context for a conversation
   */
  getPersistentContext(filePath) {
    return this.persistentContext.get(filePath) || [];
  }
  /**
   * Remove a specific document from persistent context
   */
  removePersistentDoc(filePath, docToRemove) {
    const current = this.persistentContext.get(filePath) || [];
    const filtered = current.filter((ref) => ref.file.path !== docToRemove);
    if (filtered.length > 0) {
      this.persistentContext.set(filePath, filtered);
    } else {
      this.persistentContext.delete(filePath);
    }
  }
  /**
   * Estimate token count (rough approximation)
   */
  estimateTokens(text) {
    return Math.ceil(text.length / 4);
  }
  /**
   * Get visual indicators for context state
   */
  getContextIndicators(context) {
    const docCount = context.persistentDocs.length;
    const percentage = Math.round(context.tokenCount / this.TOKEN_LIMIT * 100);
    let className = "nova-context-indicator";
    let tooltip = `Context: ${docCount} document${docCount !== 1 ? "s" : ""}, ~${context.tokenCount} tokens`;
    if (context.isNearLimit) {
      className += " nova-context-warning";
      tooltip += " (approaching limit)";
    }
    const text = `${docCount} docs ${percentage}%`;
    return { text, className, tooltip };
  }
  /**
   * Format context for display in UI
   */
  formatContextForDisplay(context) {
    const items = [];
    for (const doc of context.persistentDocs) {
      items.push(`${doc.file.basename}${doc.property ? `#${doc.property}` : ""}`);
    }
    return items;
  }
};

// src/ai/models.ts
function getAvailableModels(providerType, settings) {
  var _a, _b;
  switch (providerType) {
    case "claude":
      return [
        { value: "claude-opus-4-20250514", label: "Claude Opus 4" },
        { value: "claude-sonnet-4-20250514", label: "Claude Sonnet 4" },
        { value: "claude-3-7-sonnet-latest", label: "Claude 3.7 Sonnet" },
        { value: "claude-3-5-sonnet-latest", label: "Claude 3.5 Sonnet" },
        { value: "claude-3-5-sonnet-20241022", label: "Claude 3.5 Sonnet (Oct 22)" },
        { value: "claude-3-5-haiku-latest", label: "Claude 3.5 Haiku" }
      ];
    case "openai":
      return [
        { value: "gpt-4.1-2025-04-14", label: "GPT-4.1" },
        { value: "gpt-4.1-mini-2025-04-14", label: "GPT-4.1 Mini" },
        { value: "gpt-4.1-nano-2025-04-14", label: "GPT-4.1 Nano" },
        { value: "gpt-4o", label: "GPT-4o" },
        { value: "gpt-4o-mini", label: "GPT-4o Mini" }
      ];
    case "google":
      return [
        { value: "gemini-2.5-flash-preview-04-17", label: "Gemini 2.5 Flash" },
        { value: "gemini-2.5-pro-preview-03-25", label: "Gemini 2.5 Pro" },
        { value: "gemini-2.0-flash", label: "Gemini 2.0 Flash" },
        { value: "gemini-2.0-flash-lite", label: "Gemini 2.0 Flash-Lite" }
      ];
    case "ollama":
      const ollamaModel = (_b = (_a = settings == null ? void 0 : settings.aiProviders) == null ? void 0 : _a.ollama) == null ? void 0 : _b.model;
      if (ollamaModel && ollamaModel.trim()) {
        return [{ value: ollamaModel, label: ollamaModel }];
      }
      return [];
    default:
      return [];
  }
}

// src/ui/input-handler.ts
var import_obsidian3 = require("obsidian");

// src/ui/wikilink-suggest.ts
var import_obsidian2 = require("obsidian");
var NovaWikilinkAutocomplete = class {
  constructor(app, textArea, container) {
    // Reference to NovaSidebarView
    this.lastTriggerPos = -1;
    this.app = app;
    this.textArea = textArea;
    this.setupEventListeners();
  }
  setSidebarView(sidebarView) {
    this.sidebarView = sidebarView;
  }
  setupEventListeners() {
    this.textArea.addEventListener("input", this.handleInput.bind(this));
  }
  handleInput() {
    const text = this.textArea.value;
    const cursorPos = this.textArea.selectionStart;
    const beforeCursor = text.substring(0, cursorPos);
    const linkMatch = beforeCursor.match(/\[\[([^\]]*?)$/);
    if (linkMatch && cursorPos !== this.lastTriggerPos) {
      this.lastTriggerPos = cursorPos;
      this.showNativeFileModal();
    }
  }
  showNativeFileModal() {
    const modal = new WikilinkFileModal(
      this.app,
      async (file) => {
        await this.selectFile(file);
      },
      () => {
        this.lastTriggerPos = -1;
      }
    );
    modal.open();
  }
  async selectFile(file) {
    const text = this.textArea.value;
    const cursorPos = this.textArea.selectionStart;
    const beforeCursor = text.substring(0, cursorPos);
    const linkMatch = beforeCursor.match(/\[\[([^\]]*?)$/);
    if (linkMatch) {
      const startPos = cursorPos - linkMatch[0].length;
      const newText = text.substring(0, startPos) + text.substring(cursorPos);
      this.textArea.value = newText;
      this.textArea.setSelectionRange(startPos, startPos);
      this.textArea.dispatchEvent(new Event("input", { bubbles: true }));
    }
    if (this.sidebarView && this.sidebarView.addFilesToContext) {
      await this.sidebarView.addFilesToContext([file.basename]);
    }
    this.lastTriggerPos = -1;
    this.textArea.focus();
  }
  destroy() {
  }
};
var WikilinkFileModal = class extends import_obsidian2.FuzzySuggestModal {
  constructor(app, onSelect, onCancel) {
    super(app);
    this.allFiles = [];
    this.onSelectCallback = onSelect;
    this.onCancelCallback = onCancel;
    this.setPlaceholder("Search files to add to context...");
    this.loadFiles();
  }
  onOpen() {
    super.onOpen();
    this.addInstructions();
  }
  addInstructions() {
    const instructionsEl = this.modalEl.createDiv({ cls: "prompt-instructions" });
    const navInstruction = instructionsEl.createDiv({ cls: "prompt-instruction" });
    navInstruction.createSpan({ cls: "prompt-instruction-command", text: "\u2191\u2193" });
    navInstruction.createSpan({ text: "to navigate" });
    const useInstruction = instructionsEl.createDiv({ cls: "prompt-instruction" });
    useInstruction.createSpan({ cls: "prompt-instruction-command", text: "\u21B5" });
    useInstruction.createSpan({ text: "to use" });
    const escInstruction = instructionsEl.createDiv({ cls: "prompt-instruction" });
    escInstruction.createSpan({ cls: "prompt-instruction-command", text: "esc" });
    escInstruction.createSpan({ text: "to dismiss" });
  }
  loadFiles() {
    this.allFiles = this.app.vault.getMarkdownFiles();
    this.allFiles.sort((a, b) => b.stat.mtime - a.stat.mtime);
  }
  getItems() {
    return this.allFiles;
  }
  getItemText(file) {
    return file.basename;
  }
  onChooseItem(file) {
    this.onSelectCallback(file);
  }
  renderSuggestion(match, el) {
    const file = match.item;
    const container = el.createDiv({ cls: "suggestion-content" });
    const title = container.createDiv({ cls: "suggestion-title" });
    title.textContent = file.basename;
    const aux = container.createDiv({ cls: "suggestion-aux" });
    aux.textContent = file.path;
  }
  onClose() {
    super.onClose();
    if (this.onCancelCallback) {
      this.onCancelCallback();
    }
  }
};

// src/ui/input-handler.ts
var _InputHandler = class _InputHandler {
  constructor(plugin, container, contextManager) {
    this.dropZoneOverlay = null;
    this.isDragging = false;
    // Reference to NovaSidebarView for context operations
    // Event cleanup tracking
    this.eventListeners = [];
    this.plugin = plugin;
    this.container = container;
    this.contextManager = contextManager;
  }
  setSidebarView(sidebarView) {
    this.sidebarView = sidebarView;
    if (this.wikilinkAutocomplete) {
      this.wikilinkAutocomplete.setSidebarView(sidebarView);
    }
  }
  setCommandSystem(commandSystem) {
    this.commandSystem = commandSystem;
    const sendButtonEl = this.sendButton.buttonEl;
    sendButtonEl.remove();
    this.commandSystem.createCommandButton(this.inputRow);
    this.inputRow.appendChild(sendButtonEl);
    this.commandSystem.createCommandPickerInContainer(this.inputRow);
  }
  getTextArea() {
    return this.textArea;
  }
  createInputInterface(chatContainer) {
    this.container = this.container.createDiv({ cls: "nova-input-container" });
    this.container.style.cssText = `
			flex-shrink: 0;
			padding: var(--size-4-3);
			border-top: 1px solid var(--background-modifier-border);
			position: relative;
		`;
    this.inputRow = this.container.createDiv({ cls: "nova-input-row" });
    this.inputRow.style.cssText = `
			display: flex;
			gap: var(--size-2-3);
			align-items: center;
			position: relative;
		`;
    const textAreaContainer = this.inputRow.createDiv();
    textAreaContainer.style.cssText = "flex: 1; position: relative;";
    this.textArea = new import_obsidian3.TextAreaComponent(textAreaContainer);
    this.textArea.setPlaceholder("How can I help with your writing?");
    this.textArea.inputEl.style.cssText = `
			min-height: 80px;
			max-height: 200px;
			resize: none;
			overflow-y: auto;
			border-radius: var(--radius-s);
			padding: var(--size-2-2) var(--size-2-3);
			border: 1px solid var(--background-modifier-border);
			background: var(--background-primary);
			color: var(--text-normal);
			font-family: var(--font-interface);
			font-size: var(--font-ui-medium);
			line-height: 1.4;
			width: 100%;
			box-sizing: border-box;
		`;
    this.autoGrowTextarea = () => {
      const textarea = this.textArea.inputEl;
      textarea.style.height = "auto";
      textarea.style.height = Math.min(textarea.scrollHeight, 200) + "px";
    };
    this.addEventListener(this.textArea.inputEl, "input", this.autoGrowTextarea);
    setTimeout(this.autoGrowTextarea, 0);
    this.wikilinkAutocomplete = new NovaWikilinkAutocomplete(this.plugin.app, this.textArea.inputEl, this.inputRow);
    if (this.sidebarView) {
      this.wikilinkAutocomplete.setSidebarView(this.sidebarView);
    }
    this.addEventListener(this.textArea.inputEl, "input", () => {
      this.contextManager.updateLiveContextPreview(this.textArea.getValue());
    });
    this.sendButton = new import_obsidian3.ButtonComponent(this.inputRow);
    this.sendButton.setIcon("send");
    this.sendButton.setTooltip("Send message");
    this.sendButton.onClick(() => this.handleSend());
    this.sendButton.buttonEl.style.cssText = `
			min-width: var(--size-4-9);
			height: var(--size-4-9);
			border-radius: 50%;
			display: flex;
			align-items: center;
			justify-content: center;
			padding: 0;
			flex-shrink: 0;
			background: var(--interactive-accent);
			color: var(--text-on-accent);
			border: none;
		`;
    this.addEventListener(this.textArea.inputEl, "keydown", (event) => {
      var _a, _b, _c, _d;
      const keyEvent = event;
      if (keyEvent.key === "Enter" && !keyEvent.shiftKey) {
        event.preventDefault();
        ((_a = this.commandSystem) == null ? void 0 : _a.handleCommandPickerSelection()) || false || this.handleSend();
      } else if (keyEvent.key === "Escape") {
        (_b = this.commandSystem) == null ? void 0 : _b.hideCommandPicker();
      } else if (keyEvent.key === "ArrowUp" || keyEvent.key === "ArrowDown") {
        if ((_c = this.commandSystem) == null ? void 0 : _c.handleCommandPickerNavigation(keyEvent.key)) {
          event.preventDefault();
        }
      } else if (keyEvent.key === "Tab") {
        if ((_d = this.commandSystem) == null ? void 0 : _d.handleCommandPickerNavigation(keyEvent.key)) {
          event.preventDefault();
        }
      }
    });
    this.addEventListener(this.textArea.inputEl, "input", () => {
      if (this.commandSystem) {
        this.commandSystem.handleInputChange();
      }
    });
    this.setupDragAndDrop();
  }
  focus() {
    setTimeout(() => {
      var _a;
      if ((_a = this.textArea) == null ? void 0 : _a.inputEl) {
        this.textArea.inputEl.focus();
      }
    }, _InputHandler.FOCUS_DELAY_MS);
  }
  handleSend() {
    var _a;
    const message = this.textArea.getValue().trim();
    if (!message) return;
    this.textArea.setValue("");
    this.autoGrowTextarea();
    this.contextManager.hideContextPreview();
    (_a = this.onSendMessage) == null ? void 0 : _a.call(this, message);
  }
  setOnSendMessage(callback) {
    this.onSendMessage = callback;
  }
  getValue() {
    return this.textArea.getValue();
  }
  setValue(value) {
    this.textArea.setValue(value);
    this.autoGrowTextarea();
  }
  insertText(text) {
    const currentValue = this.textArea.getValue();
    const textarea = this.textArea.inputEl;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const newValue = currentValue.slice(0, start) + text + currentValue.slice(end);
    this.textArea.setValue(newValue);
    const newPosition = start + text.length;
    setTimeout(() => {
      textarea.setSelectionRange(newPosition, newPosition);
      textarea.focus();
    }, 0);
    this.autoGrowTextarea();
  }
  insertTextWithCursor(beforeCursor, afterCursor = "") {
    const currentValue = this.textArea.getValue();
    const textarea = this.textArea.inputEl;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const newValue = currentValue.slice(0, start) + beforeCursor + afterCursor + currentValue.slice(end);
    this.textArea.setValue(newValue);
    const cursorPosition = start + beforeCursor.length;
    setTimeout(() => {
      textarea.setSelectionRange(cursorPosition, cursorPosition);
      textarea.focus();
    }, 0);
    this.autoGrowTextarea();
  }
  addEventListener(element, event, handler) {
    element.addEventListener(event, handler);
    this.eventListeners.push({ element, event, handler });
  }
  setupDragAndDrop() {
    const dropZone = this.textArea.inputEl;
    this.addEventListener(dropZone, "dragenter", (e) => {
      e.preventDefault();
      this.handleDragEnter();
    });
    this.addEventListener(dropZone, "dragover", (e) => {
      e.preventDefault();
      e.dataTransfer.dropEffect = "copy";
    });
    this.addEventListener(dropZone, "dragleave", (e) => {
      if (e.target === dropZone) {
        this.handleDragLeave();
      }
    });
    this.addEventListener(dropZone, "drop", (e) => {
      e.preventDefault();
      this.handleDrop(e);
    });
  }
  handleDragEnter() {
    if (this.isDragging) return;
    this.isDragging = true;
    if (!this.dropZoneOverlay) {
      this.dropZoneOverlay = document.createElement("div");
      this.dropZoneOverlay.className = "nova-drop-zone-overlay";
      this.dropZoneOverlay.style.cssText = `
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				background: var(--interactive-accent);
				opacity: 0;
				border: 2px dashed var(--interactive-accent);
				border-radius: var(--radius-s);
				display: flex;
				align-items: center;
				justify-content: center;
				pointer-events: none;
				transition: opacity 0.2s ease;
				z-index: 10;
			`;
      const iconContainer = document.createElement("div");
      iconContainer.style.cssText = `
				background: var(--background-primary);
				border-radius: 50%;
				width: 48px;
				height: 48px;
				display: flex;
				align-items: center;
				justify-content: center;
				box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
				opacity: 0;
				transform: scale(0.8);
				transition: all 0.2s ease;
			`;
      const icon = document.createElement("div");
      icon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>`;
      icon.style.cssText = `
				color: var(--interactive-accent);
				display: flex;
				align-items: center;
				justify-content: center;
			`;
      iconContainer.appendChild(icon);
      this.dropZoneOverlay.appendChild(iconContainer);
    }
    const textAreaContainer = this.textArea.inputEl.parentElement;
    textAreaContainer.style.position = "relative";
    textAreaContainer.appendChild(this.dropZoneOverlay);
    setTimeout(() => {
      if (this.dropZoneOverlay) {
        this.dropZoneOverlay.style.opacity = "0.1";
        const icon = this.dropZoneOverlay.querySelector("div");
        if (icon) {
          icon.style.opacity = "1";
          icon.style.transform = "scale(1)";
        }
      }
    }, 10);
  }
  handleDragLeave() {
    this.isDragging = false;
    if (this.dropZoneOverlay) {
      this.dropZoneOverlay.style.opacity = "0";
      const icon = this.dropZoneOverlay.querySelector("div");
      if (icon) {
        icon.style.opacity = "0";
        icon.style.transform = "scale(0.8)";
      }
      setTimeout(() => {
        var _a;
        (_a = this.dropZoneOverlay) == null ? void 0 : _a.remove();
        this.dropZoneOverlay = null;
      }, 200);
    }
  }
  handleDrop(e) {
    var _a;
    this.handleDragLeave();
    const files = [];
    const textPlainData = (_a = e.dataTransfer) == null ? void 0 : _a.getData("text/plain");
    if (textPlainData && textPlainData.includes("obsidian://open?")) {
      const urls = textPlainData.split(/[\n\r]/).filter((line) => line.trim().startsWith("obsidian://open?"));
      for (const urlString of urls) {
        try {
          const url = new URL(urlString.trim());
          const filePath = url.searchParams.get("file");
          if (filePath) {
            const decodedPath = decodeURIComponent(filePath);
            const pathParts = decodedPath.split(/[/\\]/);
            const filename = pathParts[pathParts.length - 1];
            if (filename.endsWith(".md")) {
              const baseName = filename.replace(".md", "");
              if (baseName && !files.includes(baseName)) {
                files.push(baseName);
              }
            } else {
              if (filename && !files.includes(filename)) {
                files.push(filename);
              }
            }
          }
        } catch (error) {
          console.warn("Failed to parse Obsidian URL:", urlString, error);
        }
      }
    }
    if (files.length > 0) {
      this.addFilesToContext(files);
    } else if (textPlainData && textPlainData.includes("obsidian://open?")) {
      new import_obsidian3.Notice("Only markdown files can be added to context", 3e3);
    } else if (textPlainData && textPlainData.trim() && !textPlainData.includes("://")) {
      new import_obsidian3.Notice("Folders cannot be added to context. Please select individual files.", 3e3);
    }
  }
  async addFilesToContext(filenames) {
    if (filenames.length === 0) return;
    if (!this.plugin.featureManager.isFeatureEnabled("multi-doc-context")) {
      new import_obsidian3.Notice("Multi-document context is currently in early access for Supernova supporters. Available to all users August 15, 2025.", 3e3);
      return;
    }
    if (this.sidebarView) {
      await this.sidebarView.addFilesToContext(filenames);
    }
  }
  refreshCommandButton() {
    if (this.commandSystem) {
      this.commandSystem.updateCommandButtonVisibility();
    }
  }
  updateContextState(hasContext) {
    if (this.container) {
      if (hasContext) {
        this.container.classList.add("has-context");
      } else {
        this.container.classList.remove("has-context");
      }
    }
  }
  cleanup() {
    if (this.wikilinkAutocomplete) {
      this.wikilinkAutocomplete.destroy();
    }
    if (this.dropZoneOverlay) {
      this.dropZoneOverlay.remove();
      this.dropZoneOverlay = null;
    }
    this.eventListeners.forEach(({ element, event, handler }) => {
      element.removeEventListener(event, handler);
    });
    this.eventListeners = [];
  }
};
_InputHandler.FOCUS_DELAY_MS = 150;
var InputHandler = _InputHandler;

// src/ui/command-system.ts
var import_obsidian4 = require("obsidian");
var CommandSystem = class {
  constructor(plugin, container, textArea) {
    this.commandPickerItems = [];
    this.selectedCommandIndex = -1;
    this.isCommandMenuVisible = false;
    this.plugin = plugin;
    this.container = container;
    this.textArea = textArea;
  }
  createCommandButton(inputRow) {
    this.commandButton = new import_obsidian4.ButtonComponent(inputRow);
    this.commandButton.setIcon("zap");
    this.commandButton.setTooltip("Commands");
    this.commandButton.onClick(() => this.toggleCommandMenu());
    this.commandButton.buttonEl.style.cssText = `
			min-width: var(--size-4-9);
			height: var(--size-4-9);
			border-radius: 50%;
			display: ${this.shouldShowCommandButton() ? "flex" : "none"};
			align-items: center;
			justify-content: center;
			padding: 0;
			flex-shrink: 0;
			margin-right: var(--size-2-3);
		`;
    return this.commandButton;
  }
  createCommandPicker() {
    this.createCommandPickerInContainer(this.container);
  }
  createCommandPickerInContainer(container) {
    this.commandPicker = container.createDiv({ cls: "nova-command-picker" });
    this.commandPicker.style.cssText = `
			position: absolute;
			bottom: 100%;
			left: 0;
			right: 0;
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: 8px;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			max-height: 200px;
			overflow-y: auto;
			z-index: 1000;
			display: none;
			margin-bottom: 4px;
		`;
  }
  shouldShowCommandButton() {
    return import_obsidian4.Platform.isMobile && this.plugin.settings.showCommandButton && this.plugin.featureManager.isFeatureEnabled("commands");
  }
  updateCommandButtonVisibility() {
    if (this.commandButton) {
      const shouldShow = this.shouldShowCommandButton();
      this.commandButton.buttonEl.style.display = shouldShow ? "flex" : "none";
    }
  }
  toggleCommandMenu() {
    if (!this.commandMenu) {
      this.createCommandMenu();
    }
    if (this.isCommandMenuVisible) {
      this.hideCommandMenu();
    } else {
      this.showCommandMenu();
    }
  }
  createCommandMenu() {
    this.commandMenu = this.container.createDiv({ cls: "nova-command-menu" });
    this.commandMenu.style.cssText = `
			position: absolute;
			bottom: 100%;
			right: 0;
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: var(--radius-s);
			box-shadow: var(--shadow-s);
			min-width: 250px;
			max-height: 300px;
			overflow-y: auto;
			z-index: 1000;
			display: none;
			padding: var(--size-2-2);
		`;
    const commands = [
      { name: "Improve Writing", description: "Enhance clarity and flow", command: "improve writing" },
      { name: "Fix Grammar", description: "Correct grammar and spelling", command: "fix grammar" },
      { name: "Summarize", description: "Create a concise summary", command: "summarize" },
      { name: "Expand Ideas", description: "Develop thoughts further", command: "expand" },
      { name: "Explain", description: "Clarify complex concepts", command: "explain this" },
      { name: "Continue Writing", description: "Extend the current text", command: "continue writing" }
    ];
    const title = this.commandMenu.createEl("div", { text: "Quick Commands" });
    title.style.cssText = `
			font-size: var(--font-ui-medium);
			font-weight: 600;
			margin-bottom: var(--size-2-3);
			color: var(--text-normal);
		`;
    commands.forEach((cmd) => {
      const cmdEl = this.commandMenu.createDiv({ cls: "nova-command-item" });
      cmdEl.style.cssText = `
				padding: var(--size-2-2) var(--size-2-3);
				border-radius: var(--radius-xs);
				cursor: pointer;
				margin-bottom: var(--size-2-1);
				transition: background-color 0.1s;
			`;
      const nameEl = cmdEl.createEl("div", { text: cmd.name });
      nameEl.style.cssText = `
				font-weight: 500;
				color: var(--text-normal);
				margin-bottom: var(--size-2-1);
			`;
      const descEl = cmdEl.createEl("div", { text: cmd.description });
      descEl.style.cssText = `
				font-size: var(--font-ui-smaller);
				color: var(--text-muted);
			`;
      cmdEl.addEventListener("click", () => {
        this.textArea.setValue(cmd.command + " ");
        this.textArea.inputEl.focus();
        this.hideCommandMenu();
      });
      cmdEl.addEventListener("mouseenter", () => {
        cmdEl.style.background = "var(--background-modifier-hover)";
      });
      cmdEl.addEventListener("mouseleave", () => {
        cmdEl.style.background = "transparent";
      });
    });
  }
  showCommandMenu() {
    if (this.commandMenu) {
      this.commandMenu.style.display = "block";
      this.isCommandMenuVisible = true;
    }
  }
  hideCommandMenu() {
    if (this.commandMenu) {
      this.commandMenu.style.display = "none";
      this.isCommandMenuVisible = false;
    }
  }
  handleInputChange() {
    if (!this.textArea) {
      return;
    }
    const input = this.textArea.getValue();
    if (input.startsWith(":")) {
      this.showStructuredCommandPicker(input);
    } else {
      this.hideCommandPicker();
    }
  }
  /**
   * Show structured command picker for ":" trigger  
   */
  showStructuredCommandPicker(input) {
    if (!this.commandPicker) {
      return;
    }
    const structuredCommands = this.getStructuredCommands();
    const filterText = input.slice(1).toLowerCase();
    const filtered = structuredCommands.filter(
      (cmd) => cmd.name.toLowerCase().includes(filterText) || cmd.command.toLowerCase().includes(filterText) || cmd.keywords.some((keyword) => keyword.toLowerCase().includes(filterText))
    );
    this.commandPickerItems = [];
    this.commandPicker.empty();
    this.selectedCommandIndex = -1;
    if (filtered.length > 0) {
      filtered.forEach((cmd, index) => {
        const item = this.commandPicker.createDiv({ cls: "nova-command-picker-item" });
        item.style.cssText = `
					padding: 8px 12px;
					cursor: pointer;
					border-bottom: 1px solid var(--background-modifier-border-hover);
					transition: background-color 0.2s;
				`;
        const nameEl = item.createEl("div", { text: cmd.name });
        nameEl.style.cssText = `
					font-weight: 500;
					color: var(--text-normal);
					margin-bottom: 4px;
				`;
        const descEl = item.createEl("div", { text: cmd.description });
        descEl.style.cssText = `
					font-size: 0.85em;
					color: var(--text-muted);
					margin-bottom: 4px;
				`;
        const exampleEl = item.createEl("div", { text: `Example: ${cmd.example}` });
        exampleEl.style.cssText = `
					font-size: 0.8em;
					color: var(--text-accent);
					font-family: var(--font-monospace);
				`;
        item.addEventListener("click", () => {
          this.selectStructuredCommand(cmd.template);
        });
        item.addEventListener("mouseenter", () => {
          this.selectedCommandIndex = index;
          this.updateCommandPickerSelection();
        });
        this.commandPickerItems.push(item);
      });
      this.commandPicker.style.display = "block";
    } else {
      this.hideCommandPicker();
    }
  }
  hideCommandPicker() {
    this.commandPicker.style.display = "none";
    this.commandPickerItems = [];
    this.selectedCommandIndex = -1;
  }
  handleCommandPickerNavigation(key) {
    if (this.commandPickerItems.length === 0) return false;
    if (key === "ArrowDown") {
      this.selectedCommandIndex = Math.min(this.selectedCommandIndex + 1, this.commandPickerItems.length - 1);
      this.updateCommandPickerSelection();
      return true;
    } else if (key === "ArrowUp") {
      this.selectedCommandIndex = Math.max(this.selectedCommandIndex - 1, -1);
      this.updateCommandPickerSelection();
      return true;
    } else if (key === "Tab" && this.selectedCommandIndex >= 0) {
      return this.handleCommandPickerSelection();
    }
    return false;
  }
  handleCommandPickerSelection() {
    if (this.selectedCommandIndex >= 0 && this.commandPickerItems.length > 0) {
      const commands = this.getStructuredCommands();
      const input = this.textArea.getValue();
      if (input.startsWith(":")) {
        const filterText = input.slice(1).toLowerCase();
        const filtered = commands.filter(
          (cmd) => cmd.name.toLowerCase().includes(filterText) || cmd.command.toLowerCase().includes(filterText) || cmd.keywords.some((keyword) => keyword.toLowerCase().includes(filterText))
        );
        if (this.selectedCommandIndex < filtered.length) {
          const selectedCmd = filtered[this.selectedCommandIndex];
          this.selectStructuredCommand(selectedCmd.template);
          return true;
        }
      }
    }
    return false;
  }
  updateCommandPickerSelection() {
    this.commandPickerItems.forEach((item, index) => {
      if (index === this.selectedCommandIndex) {
        item.style.background = "var(--background-modifier-hover)";
      } else {
        item.style.background = "transparent";
      }
    });
  }
  selectCommand(command) {
    this.textArea.setValue(command + " ");
    this.textArea.inputEl.focus();
    const length = this.textArea.getValue().length;
    this.textArea.inputEl.setSelectionRange(length, length);
    this.hideCommandPicker();
  }
  /**
   * Get structured commands for ":" trigger
   */
  getStructuredCommands() {
    return [
      {
        name: "Add Content",
        description: "Add new content at cursor position",
        command: "add",
        template: "add {cursor}",
        example: ":add paragraph about methodology",
        keywords: ["create", "new", "insert", "write"]
      },
      {
        name: "Edit Selection",
        description: "Edit the selected text",
        command: "edit",
        template: "edit to {cursor}",
        example: ":edit to be more formal",
        keywords: ["modify", "update", "change", "revise"]
      },
      {
        name: "Delete Selection",
        description: "Remove the selected text",
        command: "delete",
        template: "delete {cursor}",
        example: ":delete selected text",
        keywords: ["remove", "eliminate", "erase"]
      },
      {
        name: "Rewrite",
        description: "Rewrite content with specific style",
        command: "rewrite",
        template: "rewrite as {cursor}",
        example: ":rewrite as bullet points",
        keywords: ["rephrase", "restructure", "reword"]
      },
      {
        name: "Fix Grammar",
        description: "Correct grammar and spelling errors",
        command: "grammar",
        template: "fix grammar {cursor}",
        example: ":fix grammar in selection",
        keywords: ["correct", "proofread", "spelling"]
      },
      {
        name: "Continue",
        description: "Continue writing from current position",
        command: "continue",
        template: "continue {cursor}",
        example: ":continue with examples",
        keywords: ["extend", "expand", "proceed"]
      },
      {
        name: "Update Metadata",
        description: "Update document properties",
        command: "metadata",
        template: "update {cursor} property",
        example: ":update tags property",
        keywords: ["frontmatter", "properties", "tags"]
      }
    ];
  }
  /**
   * Select a structured command and insert template
   */
  selectStructuredCommand(template) {
    this.hideCommandPicker();
    const cursorPos = template.indexOf("{cursor}");
    if (cursorPos !== -1) {
      const beforeCursor = template.slice(0, cursorPos);
      const afterCursor = template.slice(cursorPos + 8);
      this.textArea.setValue(beforeCursor + afterCursor);
      setTimeout(() => {
        this.textArea.inputEl.setSelectionRange(cursorPos, cursorPos);
        this.textArea.inputEl.focus();
      }, 0);
    } else {
      this.textArea.setValue(template);
      this.textArea.inputEl.focus();
    }
  }
  cleanup() {
    if (this.commandMenu) {
      this.commandMenu.remove();
    }
    if (this.commandPicker) {
      this.commandPicker.remove();
    }
  }
};

// src/ui/context-manager.ts
var import_obsidian5 = require("obsidian");
var _ContextManager = class _ContextManager {
  constructor(plugin, app, container) {
    this.currentContext = null;
    this.plugin = plugin;
    this.app = app;
    this.container = container;
    this.multiDocHandler = new MultiDocContextHandler(app);
  }
  setSidebarView(sidebarView) {
    this.sidebarView = sidebarView;
  }
  createContextIndicator() {
    this.contextIndicator = this.container.createDiv({ cls: "nova-context-indicator" });
    this.contextIndicator.style.cssText = `
			position: absolute;
			top: -2px;
			right: var(--size-4-3);
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: var(--radius-s);
			padding: var(--size-2-1) var(--size-2-2);
			font-size: var(--font-ui-smaller);
			color: var(--text-muted);
			display: none;
			z-index: 100;
			max-width: 200px;
			box-shadow: var(--shadow-s);
		`;
  }
  createContextPreview() {
    const previewContainer = this.container.createDiv({ cls: "nova-context-preview" });
    previewContainer.style.cssText = `
			background: var(--background-modifier-hover);
			border: 1px solid var(--background-modifier-border);
			border-radius: var(--radius-s);
			padding: var(--size-2-2) var(--size-2-3);
			margin-bottom: var(--size-2-2);
			font-size: var(--font-ui-small);
			display: none;
		`;
    const previewLabel = previewContainer.createSpan({ text: "Context: " });
    previewLabel.style.cssText = "color: var(--text-muted); font-weight: 600;";
    const previewList = previewContainer.createSpan({ cls: "nova-context-preview-list" });
    previewList.style.cssText = "color: var(--interactive-accent);";
    return previewContainer;
  }
  updateLiveContextPreview(message) {
    if (!this.contextPreview || !this.plugin.featureManager.isFeatureEnabled("multi-doc-context")) {
      return;
    }
    if (!message) {
      this.contextPreview.style.display = "none";
      return;
    }
    const refPattern = /(\+)?\[\[([^\]]+?)(?:#([^\]]+?))?\]\]/g;
    const foundRefs = [];
    let match;
    while ((match = refPattern.exec(message)) !== null) {
      const docName = match[2];
      const property = match[3];
      foundRefs.push({ name: docName, property });
    }
    if (foundRefs.length === 0) {
      this.contextPreview.style.display = "none";
      return;
    }
    const previewList = this.contextPreview.querySelector(".nova-context-preview-list");
    if (previewList) {
      const refsText = foundRefs.map(
        (ref) => ref.property ? `${ref.name}#${ref.property}` : ref.name
      ).join(", ");
      previewList.textContent = refsText;
    }
    this.contextPreview.style.display = "block";
  }
  async buildContext(message, currentFile) {
    var _a;
    if (!this.plugin.featureManager.isFeatureEnabled("multi-doc-context") || !currentFile) {
      return null;
    }
    try {
      const result = await this.multiDocHandler.buildContext(message, currentFile);
      this.currentContext = result.context;
      if ((_a = result.context) == null ? void 0 : _a.persistentDocs.length) {
        this.updateContextIndicator(result.context);
        if (result.context.isNearLimit) {
          new import_obsidian5.Notice("\u26A0\uFE0F Approaching token limit. Consider removing some documents from context.", _ContextManager.NOTICE_DURATION_MS);
        }
      }
      return result.context;
    } catch (error) {
      return null;
    }
  }
  updateContextIndicator(context) {
    if (!this.contextIndicator) return;
    const docCount = context.persistentDocs.length;
    if (docCount > 0) {
      this.contextIndicator.textContent = `${docCount} doc${docCount > 1 ? "s" : ""}`;
      this.contextIndicator.style.display = "block";
      this.contextIndicator.style.cursor = "pointer";
      this.contextIndicator.onclick = () => {
        this.showContextDetails(context);
      };
      this.contextIndicator.addEventListener("mouseenter", () => {
        this.contextIndicator.style.background = "var(--interactive-hover)";
      });
      this.contextIndicator.addEventListener("mouseleave", () => {
        this.contextIndicator.style.background = "var(--background-primary)";
      });
    } else {
      this.contextIndicator.style.display = "none";
    }
  }
  showContextDetails(context) {
    const modal = this.container.createDiv({ cls: "nova-context-modal" });
    modal.style.cssText = `
			position: fixed;
			top: 0;
			left: 0;
			right: 0;
			bottom: 0;
			background: rgba(0, 0, 0, 0.5);
			display: flex;
			align-items: center;
			justify-content: center;
			z-index: 10000;
		`;
    const content = modal.createDiv();
    content.style.cssText = `
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: var(--radius-s);
			padding: var(--size-4-4);
			max-width: 80%;
			max-height: 80%;
			overflow-y: auto;
			box-shadow: var(--shadow-s);
		`;
    const header = content.createEl("h3", { text: "Context Documents" });
    header.style.cssText = "margin-top: 0; margin-bottom: var(--size-4-3);";
    context.persistentDocs.forEach((doc) => {
      const docEl = content.createDiv();
      docEl.style.cssText = `
				padding: var(--size-2-2);
				margin-bottom: var(--size-2-2);
				background: var(--background-modifier-hover);
				border-radius: var(--radius-xs);
			`;
      const nameEl = docEl.createEl("div", { text: doc.file.basename });
      nameEl.style.cssText = "font-weight: 600; margin-bottom: var(--size-2-1);";
      if (doc.property) {
        const propEl = docEl.createEl("div", { text: `Property: ${doc.property}` });
        propEl.style.cssText = "font-size: var(--font-ui-smaller); color: var(--text-muted);";
      }
      const previewEl = docEl.createEl("div", { text: doc.file.path });
      previewEl.style.cssText = "font-size: var(--font-ui-smaller); color: var(--text-muted); margin-top: var(--size-2-1);";
    });
    const buttonContainer = content.createDiv();
    buttonContainer.style.cssText = `
			margin-top: var(--size-4-3);
			display: flex;
			gap: var(--size-2-2);
			justify-content: flex-end;
		`;
    const closeBtn = buttonContainer.createEl("button", { text: "Close" });
    closeBtn.style.cssText = `
			padding: var(--size-2-2) var(--size-4-3);
			background: var(--background-secondary);
			color: var(--text-normal);
			border: 1px solid var(--background-modifier-border);
			border-radius: var(--radius-s);
			cursor: pointer;
		`;
    closeBtn.onclick = () => modal.remove();
    modal.onclick = (e) => {
      if (e.target === modal) modal.remove();
    };
  }
  hideContextPreview() {
    if (this.contextPreview) {
      this.contextPreview.style.display = "none";
    }
  }
  hideContextIndicator() {
    if (this.contextIndicator) {
      this.contextIndicator.style.display = "none";
    }
  }
  clearCurrentContext() {
    this.currentContext = null;
    this.hideContextIndicator();
    this.hideContextPreview();
  }
  getCurrentContext() {
    return this.currentContext;
  }
  cleanup() {
    this.clearCurrentContext();
    if (this.contextIndicator) {
      this.contextIndicator.remove();
    }
    if (this.contextPreview) {
      this.contextPreview.remove();
    }
  }
};
// Reference to NovaSidebarView for adding files
_ContextManager.NOTICE_DURATION_MS = 5e3;
var ContextManager = _ContextManager;

// src/ui/chat-renderer.ts
var _ChatRenderer = class _ChatRenderer {
  constructor(plugin, chatContainer) {
    this.plugin = plugin;
    this.chatContainer = chatContainer;
  }
  /**
   * Add a chat message with role header
   */
  addMessage(role, content) {
    const messageEl = this.chatContainer.createDiv({ cls: `nova-message nova-message-${role}` });
    messageEl.style.cssText = `
			margin-bottom: var(--size-4-2);
			padding: var(--size-2-3) var(--size-4-3);
			border-radius: var(--radius-s);
			max-width: 85%;
			${role === "user" ? "margin-left: auto; background: var(--interactive-accent); color: var(--text-on-accent);" : role === "system" ? "margin: 0 auto; background: var(--background-modifier-hover); color: var(--text-muted); text-align: center; font-size: var(--font-ui-small);" : "background: var(--background-primary); border: 1px solid var(--background-modifier-border);"}
		`;
    const roleEl = messageEl.createEl("div", {
      text: role === "user" ? "You" : role === "system" ? "System" : "Nova",
      cls: "nova-message-role"
    });
    roleEl.style.cssText = `
			font-size: var(--font-ui-smaller);
			opacity: 0.7;
			margin-bottom: var(--size-2-1);
			font-weight: 600;
		`;
    const contentEl = messageEl.createEl("div", { cls: "nova-message-content" });
    if (role === "system" && content.includes("<svg")) {
      contentEl.innerHTML = content;
    } else {
      contentEl.textContent = content;
    }
    this.scrollToBottom(true);
  }
  /**
   * Unified message creation - determines CSS class at creation time
   */
  addStatusMessage(content, options) {
    const cssClass = this.getMessageCSSClass(content, options);
    const messageEl = this.chatContainer.createDiv({ cls: `nova-message ${cssClass}` });
    const contentEl = messageEl.createEl("div", { cls: "nova-message-content" });
    if (content.includes("<svg")) {
      contentEl.innerHTML = content;
    } else {
      contentEl.textContent = content;
    }
    if (options.persist) {
      const activeFile = this.plugin.app.workspace.getActiveFile();
      if (activeFile) {
        this.plugin.conversationManager.addSystemMessage(
          activeFile,
          content,
          { messageType: cssClass }
          // Store CSS class as metadata
        );
      }
    }
    this.scrollToBottom();
  }
  getMessageCSSClass(content, options) {
    if (options.type === "pill") {
      return `nova-pill-${options.variant}`;
    } else {
      return `nova-bubble-${options.variant}`;
    }
  }
  // Simple wrapper methods for backward compatibility
  addSuccessMessage(content, persist = false) {
    if (!content.startsWith("\u2713 ") && !content.includes("<svg")) {
      content = "\u2713 " + content;
    }
    this.addStatusMessage(content, { type: "pill", variant: "success", persist });
  }
  addErrorMessage(content, persist = false) {
    if (!content.startsWith("\u274C ") && !content.includes("<svg")) {
      content = "\u274C " + content;
    }
    const type = content.length <= 30 ? "pill" : "bubble";
    this.addStatusMessage(content, { type, variant: "error", persist });
  }
  addWelcomeMessage(message) {
    const welcomeEl = this.chatContainer.createDiv({ cls: "nova-welcome" });
    welcomeEl.style.cssText = `
			padding: var(--size-4-4);
			margin-bottom: var(--size-4-3);
			background: var(--background-primary);
			border-radius: var(--radius-s);
			border: 1px solid var(--background-modifier-border);
		`;
    const content = message || `
			<div style="display: flex; flex-direction: column; align-items: center;">
				<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: 32px; height: 32px; color: var(--interactive-accent); margin-bottom: var(--size-4-2);">
					<circle cx="12" cy="12" r="2.5" fill="currentColor"/>
					<path d="M12 1L12 6" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
					<path d="M12 18L12 23" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
					<path d="M23 12L18 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
					<path d="M6 12L1 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
					<path d="M18.364 5.636L15.536 8.464" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
					<path d="M8.464 15.536L5.636 18.364" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
					<path d="M18.364 18.364L15.536 15.536" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
					<path d="M8.464 8.464L5.636 5.636" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
				</svg>
				<p style="margin: 0; margin-left: var(--size-2-3); color: var(--text-muted); font-size: var(--font-ui-medium); line-height: 1.4; text-align: left; align-self: flex-start;">
					I'm your AI writing partner. Ask questions in chat or give commands to edit at your cursor position.<br><br>CTRL/CMD-Z once or twice to undo changes.
				</p>
			</div>
		`;
    welcomeEl.innerHTML = content;
    this.scrollToBottom(true);
  }
  clearChat() {
    this.chatContainer.empty();
  }
  scrollToBottom(smooth = false) {
    setTimeout(() => {
      if (smooth) {
        this.chatContainer.scrollTo({
          top: this.chatContainer.scrollHeight,
          behavior: "smooth"
        });
      } else {
        this.chatContainer.scrollTop = this.chatContainer.scrollHeight;
      }
    }, _ChatRenderer.SCROLL_DELAY_MS);
  }
  async loadConversationHistory(file) {
    var _a;
    const messages = await this.plugin.conversationManager.getRecentMessages(file, 50);
    if (messages.length === 0) {
      this.addWelcomeMessage();
      return;
    }
    for (const message of messages) {
      if (message.role === "system" && ((_a = message.metadata) == null ? void 0 : _a.messageType)) {
        const messageEl = this.chatContainer.createDiv({
          cls: `nova-message ${message.metadata.messageType}`
        });
        const contentEl = messageEl.createEl("div", { cls: "nova-message-content" });
        if (message.content.includes("<svg")) {
          contentEl.innerHTML = message.content;
        } else {
          contentEl.textContent = message.content;
        }
      } else {
        this.addMessage(message.role, message.content);
      }
    }
    this.scrollToBottom();
  }
};
_ChatRenderer.SCROLL_DELAY_MS = 50;
var ChatRenderer = _ChatRenderer;

// src/ui/streaming-manager.ts
var import_obsidian6 = require("obsidian");
var _StreamingManager = class _StreamingManager {
  constructor() {
    this.dotsAnimationInterval = null;
    this.thinkingNotice = null;
    this.currentStreamingEndPos = null;
    this.streamingStartPos = null;
    this.originalPosition = null;
  }
  /**
   * Show thinking notice with context-aware phrase and animated dots
   */
  showThinkingNotice(actionType) {
    try {
      const phrases = _StreamingManager.THINKING_PHRASES[actionType] || _StreamingManager.THINKING_PHRASES["chat"];
      const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
      this.thinkingNotice = new import_obsidian6.Notice(`Nova: ${randomPhrase}.`, 0);
      const initialNoticeText = `Nova: ${randomPhrase}.`;
      const noticeEl = this.thinkingNotice.noticeEl;
      if (noticeEl) {
        noticeEl.textContent = initialNoticeText;
      }
      this.startNoticeDotsAnimation(randomPhrase);
    } catch (error) {
      console.warn("Failed to create thinking notice:", error);
    }
  }
  /**
   * Start streaming at a specific position with hybrid approach
   * For selection replacement: startPos and endPos define the range to replace
   * For cursor insertion: startPos is the cursor position, endPos should be null
   */
  startStreaming(editor, startPos, endPos, options = {}) {
    this.originalPosition = { from: startPos, to: endPos };
    if (endPos) {
      editor.replaceRange("", startPos, endPos);
      this.currentStreamingEndPos = startPos;
    } else {
      this.currentStreamingEndPos = startPos;
    }
    this.streamingStartPos = null;
    const updateStream = (newText, isComplete) => {
      this.updateStreamingText(editor, newText, isComplete, options);
    };
    const stopStream = () => {
      this.stopAnimation();
      this.cleanup();
    };
    return { updateStream, stopStream };
  }
  /**
   * Update streaming text with proper position tracking
   */
  updateStreamingText(editor, newText, isComplete, options) {
    try {
      if (this.currentStreamingEndPos) {
        if (this.thinkingNotice) {
          this.stopDotsAnimation();
        }
        if (!this.streamingStartPos) {
          this.streamingStartPos = { ...this.currentStreamingEndPos };
        }
        const lines = newText.split("\n");
        const newEndPos = {
          line: this.streamingStartPos.line + lines.length - 1,
          ch: lines.length > 1 ? lines[lines.length - 1].length : this.streamingStartPos.ch + newText.length
        };
        editor.replaceRange(newText, this.streamingStartPos, this.currentStreamingEndPos);
        this.currentStreamingEndPos = newEndPos;
        if (options.onChunk) {
          options.onChunk(newText, isComplete);
        }
      }
      if (isComplete) {
        editor.setCursor(this.currentStreamingEndPos);
        this.cleanup();
        if (options.onComplete) {
          options.onComplete();
        }
      }
    } catch (error) {
      console.warn("Error updating streaming text:", error);
      this.cleanup();
      if (options.onError) {
        options.onError(error instanceof Error ? error : new Error(String(error)));
      }
    }
  }
  /**
   * Animate dots in notice text
   */
  startNoticeDotsAnimation(basePhrase) {
    let dotCount = 1;
    this.dotsAnimationInterval = setInterval(() => {
      try {
        if (!this.thinkingNotice) return;
        dotCount++;
        if (dotCount > 5) {
          dotCount = 1;
        }
        const dots = ".".repeat(dotCount);
        const noticeText = `Nova: ${basePhrase}${dots}`;
        const noticeEl = this.thinkingNotice.noticeEl;
        if (noticeEl) {
          noticeEl.textContent = noticeText;
        }
      } catch (error) {
        console.warn("Error in notice dots animation:", error);
        this.stopDotsAnimation();
      }
    }, 400);
  }
  /**
   * Stop the dots animation and dismiss notice
   */
  stopDotsAnimation() {
    if (this.dotsAnimationInterval) {
      clearInterval(this.dotsAnimationInterval);
      this.dotsAnimationInterval = null;
    }
    if (this.thinkingNotice) {
      this.thinkingNotice.hide();
      this.thinkingNotice = null;
    }
  }
  /**
   * Stop all animations and clean up
   */
  stopAnimation() {
    this.stopDotsAnimation();
  }
  /**
   * Clean up all internal state
   */
  cleanup() {
    this.currentStreamingEndPos = null;
    this.streamingStartPos = null;
    this.originalPosition = null;
  }
  /**
   * Get the original position before streaming started
   */
  getOriginalPosition() {
    return this.originalPosition;
  }
  /**
   * Check if currently streaming
   */
  isStreaming() {
    return this.currentStreamingEndPos !== null;
  }
};
// Comprehensive thinking phrases for all action types
_StreamingManager.THINKING_PHRASES = {
  "improve": [
    "refining...",
    "polishing...",
    "enhancing...",
    "crafting...",
    "perfecting...",
    "smoothing...",
    "sharpening...",
    "elevating...",
    "fine-tuning...",
    "sculpting..."
  ],
  "longer": [
    "expanding...",
    "developing...",
    "elaborating...",
    "building...",
    "enriching...",
    "deepening...",
    "growing...",
    "extending...",
    "amplifying...",
    "unfolding..."
  ],
  "shorter": [
    "condensing...",
    "distilling...",
    "tightening...",
    "focusing...",
    "streamlining...",
    "compressing...",
    "trimming...",
    "clarifying...",
    "simplifying...",
    "concentrating..."
  ],
  "tone": [
    "adjusting tone...",
    "reshaping...",
    "reframing...",
    "adapting...",
    "transforming...",
    "modulating...",
    "recasting...",
    "shifting...",
    "reforming...",
    "reimagining..."
  ],
  "custom": [
    "working on it...",
    "considering...",
    "thinking...",
    "processing...",
    "analyzing...",
    "contemplating...",
    "understanding...",
    "interpreting...",
    "exploring...",
    "evaluating..."
  ],
  "chat": [
    "composing...",
    "drafting...",
    "creating...",
    "generating...",
    "writing...",
    "crafting...",
    "formulating...",
    "developing...",
    "building...",
    "constructing..."
  ],
  "add": [
    "composing...",
    "drafting...",
    "creating...",
    "generating...",
    "writing...",
    "crafting...",
    "formulating...",
    "developing...",
    "building...",
    "constructing..."
  ],
  "edit": [
    "refining...",
    "polishing...",
    "enhancing...",
    "crafting...",
    "perfecting...",
    "smoothing...",
    "sharpening...",
    "elevating...",
    "fine-tuning...",
    "sculpting..."
  ],
  "rewrite": [
    "refining...",
    "polishing...",
    "enhancing...",
    "crafting...",
    "perfecting...",
    "smoothing...",
    "sharpening...",
    "elevating...",
    "fine-tuning...",
    "sculpting..."
  ],
  "grammar": [
    "refining...",
    "polishing...",
    "enhancing...",
    "crafting...",
    "perfecting...",
    "smoothing...",
    "sharpening...",
    "elevating...",
    "fine-tuning...",
    "sculpting..."
  ],
  "delete": [
    "condensing...",
    "distilling...",
    "tightening...",
    "focusing...",
    "streamlining...",
    "compressing...",
    "trimming...",
    "clarifying...",
    "simplifying...",
    "concentrating..."
  ]
};
var StreamingManager = _StreamingManager;

// src/ui/selection-context-menu.ts
var import_obsidian10 = require("obsidian");

// src/core/commands/selection-edit-command.ts
var import_obsidian7 = require("obsidian");
var SelectionEditCommand = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  /**
   * Execute a selection-based edit action
   */
  async execute(action, editor, selectedText, customInstruction) {
    try {
      const selectionRange = {
        from: editor.getCursor("from"),
        to: editor.getCursor("to")
      };
      const loadingNotice = new import_obsidian7.Notice("Nova is processing your request...", 0);
      const prompt2 = this.buildPrompt(action, selectedText, customInstruction);
      const response = await this.plugin.aiProviderManager.complete(
        prompt2.systemPrompt,
        prompt2.userPrompt
      );
      loadingNotice.hide();
      const transformedText = this.cleanAIResponse(response);
      return {
        success: true,
        transformedText,
        originalRange: selectionRange
      };
    } catch (error) {
      console.error("Selection edit command error:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error occurred"
      };
    }
  }
  /**
   * Execute a selection-based edit action with streaming
   */
  async executeStreaming(action, editor, selectedText, onChunk, customInstruction) {
    try {
      const selectionRange = {
        from: editor.getCursor("from"),
        to: editor.getCursor("to")
      };
      const prompt2 = this.buildPrompt(action, selectedText, customInstruction);
      await new Promise((resolve) => setTimeout(resolve, 1e3));
      let fullResponse = "";
      const stream = this.plugin.aiProviderManager.generateTextStream(prompt2.userPrompt, {
        systemPrompt: prompt2.systemPrompt
      });
      for await (const chunk of stream) {
        if (chunk.error) {
          throw new Error(chunk.error);
        }
        fullResponse += chunk.content;
        if (fullResponse.trim().length > 0 || chunk.done) {
          const cleanedChunk = this.cleanAIResponse(fullResponse);
          onChunk(cleanedChunk, chunk.done);
        }
        if (chunk.done) {
          break;
        }
        await new Promise((resolve) => setTimeout(resolve, 50));
      }
      const finalText = this.cleanAIResponse(fullResponse);
      if (!finalText.trim()) {
        return {
          success: false,
          error: "AI provider returned empty response",
          originalRange: selectionRange
        };
      }
      return {
        success: true,
        transformedText: finalText,
        originalRange: selectionRange
      };
    } catch (error) {
      console.error("Selection edit streaming error:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error occurred"
      };
    }
  }
  /**
   * Build prompt for the AI based on the action type
   */
  buildPrompt(action, selectedText, customInstruction) {
    const baseSystemPrompt = `You are Nova, an AI writing assistant. Your task is to transform the provided text according to the user's request. 

CRITICAL RULES:
- Provide ONLY the transformed text, no explanations or meta-commentary
- Maintain the original meaning unless specifically asked to change it
- Preserve the original format (markdown, structure, etc.) unless instructed otherwise
- Do not add introductory phrases like "Here's the improved text:" or similar
- Return only the content that should replace the selected text`;
    let specificPrompt = "";
    let userPrompt = "";
    switch (action) {
      case "improve":
        specificPrompt = `
TASK: Improve the writing quality
- Make the text clearer and more concise
- Improve flow and readability
- Fix any awkward phrasing
- Preserve the original tone and meaning`;
        userPrompt = `Improve this text:

${selectedText}`;
        break;
      case "longer":
        specificPrompt = `
TASK: Expand the text with more detail
- Add relevant examples, context, or explanations
- Maintain the original style and voice
- Expand ideas without changing the core message
- Make it more comprehensive and detailed`;
        userPrompt = `Make this text longer and more detailed:

${selectedText}`;
        break;
      case "shorter":
        specificPrompt = `
TASK: Condense the text to essential points
- Remove redundancy and unnecessary words
- Keep all key information and meaning
- Make it more concise and direct
- Preserve the original tone`;
        userPrompt = `Make this text shorter and more concise:

${selectedText}`;
        break;
      case "tone":
        const toneMap = {
          "formal": "professional and structured, suitable for business or academic contexts",
          "casual": "relaxed and conversational, suitable for informal communication",
          "academic": "scholarly and precise, using technical vocabulary where appropriate",
          "friendly": "warm and approachable, building connection with the reader"
        };
        const toneDescription = toneMap[customInstruction || "formal"] || toneMap.formal;
        specificPrompt = `
TASK: Change the tone to be ${toneDescription}
- Adjust language and vocabulary to match the requested tone
- Keep the same content and meaning
- Maintain appropriate formality level for the chosen tone`;
        userPrompt = `Rewrite this text in a ${customInstruction || "formal"} tone:

${selectedText}`;
        break;
      case "custom":
        specificPrompt = `
TASK: Apply custom transformation
- Follow the user's specific instruction exactly
- Maintain content integrity unless asked to change it
- Apply the requested changes precisely`;
        userPrompt = `Apply this instruction to the text: "${customInstruction}"

Text to transform:

${selectedText}`;
        break;
      default:
        specificPrompt = `
TASK: General text improvement
- Enhance clarity and readability
- Preserve original meaning and tone`;
        userPrompt = `Improve this text:

${selectedText}`;
    }
    return {
      systemPrompt: baseSystemPrompt + "\n" + specificPrompt,
      userPrompt
    };
  }
  /**
   * Clean AI response to extract only the transformed text
   */
  cleanAIResponse(response) {
    let cleaned = response.trim();
    const introPatterns = [
      /^Here's the improved text:?\s*/i,
      /^Here's the rewritten text:?\s*/i,
      /^Here's the transformed text:?\s*/i,
      /^Improved version:?\s*/i,
      /^Rewritten:?\s*/i,
      /^Result:?\s*/i,
      /^Output:?\s*/i
    ];
    for (const pattern of introPatterns) {
      cleaned = cleaned.replace(pattern, "");
    }
    cleaned = cleaned.split(/\n\s*---+\s*/).shift() || cleaned;
    cleaned = cleaned.split(/\n\s*\*\*?Explanation\*?\*?:/i).shift() || cleaned;
    return cleaned.trim();
  }
};

// src/ui/tone-selection-modal.ts
var import_obsidian8 = require("obsidian");
var TONE_OPTIONS = [
  {
    id: "formal",
    label: "Formal",
    description: "Professional, structured language suitable for business or academic contexts"
  },
  {
    id: "casual",
    label: "Casual",
    description: "Relaxed, conversational tone for informal communication"
  },
  {
    id: "academic",
    label: "Academic",
    description: "Scholarly, precise language with technical vocabulary"
  },
  {
    id: "friendly",
    label: "Friendly",
    description: "Warm, approachable tone that builds connection"
  }
];
var ToneSelectionModal = class extends import_obsidian8.FuzzySuggestModal {
  constructor(app, onSelect, onCancel) {
    super(app);
    this.onSelect = onSelect;
    this.onCancel = onCancel;
    this.setPlaceholder("Choose a writing tone...");
    this.setInstructions([
      { command: "\u2191\u2193", purpose: "to navigate" },
      { command: "\u21B5", purpose: "to apply tone" },
      { command: "esc", purpose: "to cancel" }
    ]);
  }
  getItems() {
    return TONE_OPTIONS;
  }
  getItemText(tone) {
    return `${tone.label} - ${tone.description}`;
  }
  onChooseItem(tone, evt) {
    this.onSelect(tone.id);
  }
  onClose() {
    const { contentEl } = this;
    if (contentEl.parentElement) {
      this.onCancel();
    }
  }
};

// src/ui/custom-instruction-modal.ts
var import_obsidian9 = require("obsidian");
var CustomInstructionModal = class extends import_obsidian9.Modal {
  constructor(app, onSubmit, onCancel) {
    super(app);
    this.instruction = "";
    this.onSubmit = onSubmit;
    this.onCancel = onCancel;
  }
  onOpen() {
    var _a;
    const { contentEl } = this;
    contentEl.empty();
    this.modalEl.addClass("nova-custom-instruction-modal");
    contentEl.createEl("h2", { text: "Tell Nova" });
    new import_obsidian9.Setting(contentEl).setName("Instruction").setDesc("Describe how you want Nova to transform your selected text");
    const textAreaSetting = new import_obsidian9.Setting(contentEl).addTextArea((text) => {
      text.setPlaceholder('e.g., "make this more persuasive", "add statistics", "write in bullet points"').setValue(this.instruction).onChange((value) => {
        this.instruction = value;
      });
      text.inputEl.rows = 4;
      text.inputEl.style.width = "100%";
      text.inputEl.style.minHeight = "100px";
      setTimeout(() => text.inputEl.focus(), 50);
      text.inputEl.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && (e.ctrlKey || e.metaKey)) {
          e.preventDefault();
          this.submit();
        }
      });
      return text;
    });
    textAreaSetting.settingEl.style.border = "none";
    (_a = textAreaSetting.settingEl.querySelector(".setting-item-info")) == null ? void 0 : _a.remove();
    const control = textAreaSetting.settingEl.querySelector(".setting-item-control");
    if (control instanceof HTMLElement) {
      control.style.width = "100%";
    }
    new import_obsidian9.Setting(contentEl).addButton((btn) => btn.setButtonText("Cancel").onClick(() => {
      this.close();
      this.onCancel();
    })).addButton((btn) => btn.setButtonText("Transform Text").setCta().onClick(() => this.submit()));
  }
  submit() {
    if (this.instruction.trim()) {
      this.close();
      this.onSubmit(this.instruction.trim());
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/ui/selection-context-menu.ts
var SELECTION_ACTIONS = [
  {
    id: "improve",
    label: "Improve Writing",
    icon: "sparkles",
    description: "Make text clearer, more concise, better flow"
  },
  {
    id: "longer",
    label: "Make Longer",
    icon: "plus-circle",
    description: "Expand ideas with more detail and examples"
  },
  {
    id: "shorter",
    label: "Make Shorter",
    icon: "minus-circle",
    description: "Condense to essential points"
  },
  {
    id: "tone",
    label: "Change Tone",
    icon: "palette",
    description: "Adjust writing style and tone"
  },
  {
    id: "custom",
    label: "Tell Nova...",
    icon: "message-circle",
    description: "Custom instruction for transformation"
  }
];
var _SelectionContextMenu = class _SelectionContextMenu {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
    /**
     * Update text with streaming effect
     */
    this.currentStreamingEndPos = null;
    this.streamingTextContainer = null;
    this.streamingStartPos = null;
    this.animatedSelection = null;
    this.dotsAnimationInterval = null;
    this.thinkingNotice = null;
    this.originalSelectionRange = null;
    this.selectionEditCommand = new SelectionEditCommand(plugin);
  }
  /**
   * Register the context menu with Obsidian's editor
   */
  register() {
    this.plugin.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor) => {
        this.addNovaSubmenu(menu, editor);
      })
    );
  }
  /**
   * Add Nova submenu to the context menu if text is selected
   */
  addNovaSubmenu(menu, editor) {
    const selectedText = editor.getSelection();
    if (!selectedText || selectedText.trim().length === 0) {
      return;
    }
    menu.addSeparator();
    SELECTION_ACTIONS.forEach((action) => {
      menu.addItem((item) => {
        item.setTitle(`Nova: ${action.label}`).setIcon(action.icon || "edit").onClick(() => {
          this.handleSelectionAction(action.id, editor, selectedText);
        });
      });
    });
  }
  /**
   * Handle selection action when menu item is clicked
   */
  async handleSelectionAction(actionId, editor, selectedText, customInstruction) {
    try {
      if (actionId === "tone" && !customInstruction) {
        this.showToneSelectionModal(editor, selectedText);
        return;
      }
      if (actionId === "custom" && !customInstruction) {
        this.showCustomInstructionModal(editor, selectedText);
        return;
      }
      await this.executeSelectionEdit(actionId, editor, selectedText, customInstruction);
    } catch (error) {
      console.error("Error executing Nova selection action:", error);
      new import_obsidian10.Notice("Failed to execute Nova action. Please try again.", 3e3);
    }
  }
  /**
   * Show tone selection modal
   */
  showToneSelectionModal(editor, selectedText) {
    const modal = new ToneSelectionModal(
      this.app,
      async (selectedTone) => {
        await this.executeSelectionEdit("tone", editor, selectedText, selectedTone);
      },
      () => {
      }
    );
    modal.open();
  }
  /**
   * Show custom instruction modal
   */
  showCustomInstructionModal(editor, selectedText) {
    const modal = new CustomInstructionModal(
      this.app,
      async (instruction) => {
        await this.executeSelectionEdit("custom", editor, selectedText, instruction);
      },
      () => {
      }
    );
    modal.open();
  }
  /**
   * Execute the selection edit command with streaming
   */
  async executeSelectionEdit(actionId, editor, selectedText, customInstruction) {
    this.startSelectionAnimation(editor);
    const originalRange = {
      from: editor.getCursor("from"),
      to: editor.getCursor("to")
    };
    try {
      await this.showThinkingAnimation(editor, originalRange.from, originalRange.to, actionId);
      const result = await this.selectionEditCommand.executeStreaming(
        actionId,
        editor,
        selectedText,
        (chunk, isComplete) => {
          this.updateStreamingText(editor, chunk, originalRange.from, isComplete);
        },
        customInstruction
      );
      if (result.success) {
        const actionName = this.getActionDisplayName(actionId);
        new import_obsidian10.Notice(`Nova: Text ${actionName} successfully`, 2e3);
        this.addSuccessChatMessage(actionId, selectedText, customInstruction);
      } else {
        new import_obsidian10.Notice(`Nova: ${result.error || "Failed to process text"}`, 3e3);
        this.addFailureChatMessage(actionId, result.error || "Failed to process text");
        this.restoreOriginalText(editor);
      }
    } catch (error) {
      console.error("Error in streaming selection edit:", error);
      new import_obsidian10.Notice("Failed to execute Nova action. Please try again.", 3e3);
      this.restoreOriginalText(editor);
    } finally {
      this.stopSelectionAnimation();
      this.stopDotsAnimation();
    }
  }
  updateStreamingText(editor, newText, startPos, isComplete) {
    try {
      if (this.currentStreamingEndPos) {
        if (this.thinkingNotice) {
          this.stopDotsAnimation();
        }
        if (!this.streamingStartPos) {
          this.streamingStartPos = { ...this.currentStreamingEndPos };
        }
        if (newText.trim().length > 0) {
          const lines = newText.split("\n");
          const newEndPos = {
            line: this.streamingStartPos.line + lines.length - 1,
            ch: lines.length > 1 ? lines[lines.length - 1].length : this.streamingStartPos.ch + newText.length
          };
          editor.replaceRange(newText, this.streamingStartPos, this.currentStreamingEndPos);
          this.currentStreamingEndPos = newEndPos;
        }
      }
      if (isComplete) {
        if (this.currentStreamingEndPos) {
          editor.setCursor(this.currentStreamingEndPos);
        }
        this.currentStreamingEndPos = null;
        this.streamingStartPos = null;
        this.originalSelectionRange = null;
      }
    } catch (error) {
      console.warn("Error updating streaming text:", error);
      if (this.originalSelectionRange && this.originalSelectionRange.text) {
        try {
          const restorePos = this.streamingStartPos || this.currentStreamingEndPos;
          if (restorePos) {
            editor.replaceRange(this.originalSelectionRange.text, restorePos, this.currentStreamingEndPos || restorePos);
            const lines = this.originalSelectionRange.text.split("\n");
            const endPos = {
              line: restorePos.line + lines.length - 1,
              ch: lines.length > 1 ? lines[lines.length - 1].length : restorePos.ch + this.originalSelectionRange.text.length
            };
            editor.setCursor(endPos);
          }
        } catch (restoreError) {
          console.warn("Could not restore original text:", restoreError);
        }
      }
      this.currentStreamingEndPos = null;
      this.streamingStartPos = null;
      this.originalSelectionRange = null;
    }
  }
  /**
   * Restore original text if streaming fails completely
   */
  restoreOriginalText(editor) {
    if (this.originalSelectionRange && this.originalSelectionRange.text) {
      try {
        const restorePos = this.streamingStartPos || this.currentStreamingEndPos || this.originalSelectionRange.from;
        if (restorePos) {
          const currentEndPos = this.currentStreamingEndPos || restorePos;
          editor.replaceRange(this.originalSelectionRange.text, restorePos, currentEndPos);
          const lines = this.originalSelectionRange.text.split("\n");
          const endPos = {
            line: restorePos.line + lines.length - 1,
            ch: lines.length > 1 ? lines[lines.length - 1].length : restorePos.ch + this.originalSelectionRange.text.length
          };
          editor.setCursor(endPos);
        }
      } catch (restoreError) {
        console.warn("Could not restore original text after failure:", restoreError);
      }
    }
    this.currentStreamingEndPos = null;
    this.streamingStartPos = null;
    this.originalSelectionRange = null;
  }
  /**
   * Start pulsing animation on selected text
   */
  startSelectionAnimation(editor) {
    var _a;
    try {
      const editorContainer = ((_a = editor.cm) == null ? void 0 : _a.dom) || document.querySelector(".cm-editor");
      if (editorContainer) {
        editorContainer.classList.add("nova-selection-processing");
      }
      const selection = editor.getSelection();
      if (selection) {
        this.animatedSelection = {
          from: editor.getCursor("from"),
          to: editor.getCursor("to")
        };
      }
    } catch (error) {
      console.warn("Failed to start selection animation:", error);
    }
  }
  /**
   * Stop pulsing animation
   */
  stopSelectionAnimation() {
    try {
      const editorElements = document.querySelectorAll(".CodeMirror, .cm-editor");
      editorElements.forEach((el) => {
        el.classList.remove("nova-selection-processing");
      });
      this.animatedSelection = null;
    } catch (error) {
      console.warn("Failed to stop selection animation:", error);
    }
  }
  /**
   * Show Nova thinking animation with notice + document placeholder
   */
  async showThinkingAnimation(editor, startPos, endPos, actionId) {
    try {
      const phrases = _SelectionContextMenu.THINKING_PHRASES[actionId] || _SelectionContextMenu.THINKING_PHRASES["custom"];
      const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
      this.showThinkingNotice(randomPhrase);
      const originalText = editor.getRange(startPos, endPos);
      editor.replaceRange("", startPos, endPos);
      this.currentStreamingEndPos = startPos;
      this.originalSelectionRange = {
        from: startPos,
        to: endPos,
        text: originalText
        // Store original text for restoration
      };
    } catch (error) {
      console.warn("Failed to show thinking animation:", error);
    }
  }
  /**
   * Show thinking notice with animated dots
   */
  showThinkingNotice(basePhrase) {
    try {
      this.thinkingNotice = new import_obsidian10.Notice(`Nova: ${basePhrase}.`, 0);
      const initialNoticeText = `Nova: ${basePhrase}.`;
      const noticeEl = this.thinkingNotice.noticeEl;
      if (noticeEl) {
        noticeEl.textContent = initialNoticeText;
      }
      this.startNoticeDotsAnimation(basePhrase);
    } catch (error) {
      console.warn("Failed to create thinking notice:", error);
    }
  }
  /**
   * Animate dots in notice text
   */
  startNoticeDotsAnimation(basePhrase) {
    let dotCount = 1;
    this.dotsAnimationInterval = setInterval(() => {
      try {
        if (!this.thinkingNotice) return;
        dotCount++;
        if (dotCount > 5) {
          dotCount = 1;
        }
        const dots = ".".repeat(dotCount);
        const noticeText = `Nova: ${basePhrase}${dots}`;
        const noticeEl = this.thinkingNotice.noticeEl;
        if (noticeEl) {
          noticeEl.textContent = noticeText;
        }
      } catch (error) {
        console.warn("Error in notice dots animation:", error);
        this.stopDotsAnimation();
      }
    }, 400);
  }
  /**
   * Stop the dots animation and dismiss notice
   */
  stopDotsAnimation() {
    if (this.dotsAnimationInterval) {
      clearInterval(this.dotsAnimationInterval);
      this.dotsAnimationInterval = null;
    }
    if (this.thinkingNotice) {
      this.thinkingNotice.hide();
      this.thinkingNotice = null;
    }
  }
  /**
   * Get display name for action
   */
  getActionDisplayName(actionId) {
    switch (actionId) {
      case "improve":
        return "improved";
      case "longer":
        return "expanded";
      case "shorter":
        return "condensed";
      case "tone":
        return "tone adjusted";
      case "custom":
        return "transformed";
      default:
        return "processed";
    }
  }
  /**
   * Add success message to chat using unified system
   */
  addSuccessChatMessage(actionId, originalText, customInstruction) {
    try {
      const leaves = this.app.workspace.getLeavesOfType("nova-sidebar");
      if (leaves.length > 0) {
        const sidebarView = leaves[0].view;
        if (sidebarView == null ? void 0 : sidebarView.chatRenderer) {
          const actionDescription = this.getActionDescription(actionId, customInstruction);
          const truncatedText = originalText.length > 50 ? originalText.substring(0, 50) + "..." : originalText;
          const message = `\u2713 ${actionDescription} text: "${truncatedText}"`;
          sidebarView.chatRenderer.addSuccessMessage(message, true);
        }
      }
    } catch (error) {
      console.warn("Failed to add success chat message:", error);
    }
  }
  /**
   * Add failure message to chat using unified system
   */
  addFailureChatMessage(actionId, errorMessage) {
    try {
      const leaves = this.app.workspace.getLeavesOfType("nova-sidebar");
      if (leaves.length > 0) {
        const sidebarView = leaves[0].view;
        if (sidebarView == null ? void 0 : sidebarView.chatRenderer) {
          const actionName = this.getActionDisplayName(actionId);
          const message = `\u2717 Failed to ${actionName.replace("ed", "")} text: ${errorMessage}`;
          sidebarView.chatRenderer.addErrorMessage(message, true);
        }
      }
    } catch (error) {
      console.warn("Failed to add error chat message:", error);
    }
  }
  /**
   * Get detailed action description for chat
   */
  getActionDescription(actionId, customInstruction) {
    switch (actionId) {
      case "improve":
        return "Improved";
      case "longer":
        return "Expanded";
      case "shorter":
        return "Condensed";
      case "tone":
        return `Changed tone to ${customInstruction || "formal"}`;
      case "custom":
        return `Applied "${customInstruction}"`;
      default:
        return "Processed";
    }
  }
};
// Dynamic thinking phrases for each action type
_SelectionContextMenu.THINKING_PHRASES = {
  "improve": [
    "refining...",
    "polishing...",
    "enhancing...",
    "crafting...",
    "perfecting...",
    "smoothing...",
    "sharpening...",
    "elevating...",
    "fine-tuning...",
    "sculpting..."
  ],
  "longer": [
    "expanding...",
    "developing...",
    "elaborating...",
    "building...",
    "enriching...",
    "deepening...",
    "growing...",
    "extending...",
    "amplifying...",
    "unfolding..."
  ],
  "shorter": [
    "condensing...",
    "distilling...",
    "tightening...",
    "focusing...",
    "streamlining...",
    "compressing...",
    "trimming...",
    "clarifying...",
    "simplifying...",
    "concentrating..."
  ],
  "tone": [
    "adjusting tone...",
    "reshaping...",
    "reframing...",
    "adapting...",
    "transforming...",
    "modulating...",
    "recasting...",
    "shifting...",
    "reforming...",
    "reimagining..."
  ],
  "custom": [
    "working on it...",
    "considering...",
    "thinking...",
    "processing...",
    "analyzing...",
    "contemplating...",
    "understanding...",
    "interpreting...",
    "exploring...",
    "evaluating..."
  ]
};
var SelectionContextMenu = _SelectionContextMenu;

// src/ui/sidebar-view.ts
var VIEW_TYPE_NOVA_SIDEBAR = "nova-sidebar";
var _NovaSidebarView = class _NovaSidebarView extends import_obsidian11.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.currentFile = null;
    this.currentContext = null;
    // Command system delegation
    this._commandPickerItems = [];
    this._selectedCommandIndex = -1;
    this._isCommandMenuVisible = false;
    // Cursor position tracking - file-scoped like conversation history
    this.currentFileCursorPosition = null;
    // Performance optimization - debouncing and timing constants
    this.contextPreviewDebounceTimeout = null;
    // Event listener cleanup tracking
    this.documentEventListeners = [];
    this.timeouts = [];
    this.plugin = plugin;
    this.multiDocHandler = new MultiDocContextHandler(this.app);
  }
  // Cursor-only architecture - delegate to new components
  get textArea() {
    var _a;
    return (_a = this.inputHandler) == null ? void 0 : _a.getTextArea();
  }
  get wikilinkAutocomplete() {
    return this.inputHandler ? { destroy: () => {
    } } : null;
  }
  get autoGrowTextarea() {
    return () => {
    };
  }
  get commandPickerItems() {
    return this._commandPickerItems;
  }
  set commandPickerItems(value) {
    this._commandPickerItems = value;
  }
  get selectedCommandIndex() {
    return this._selectedCommandIndex;
  }
  set selectedCommandIndex(value) {
    this._selectedCommandIndex = value;
  }
  get isCommandMenuVisible() {
    return this._isCommandMenuVisible;
  }
  set isCommandMenuVisible(value) {
    this._isCommandMenuVisible = value;
  }
  // Context system delegation
  get contextPreview() {
    var _a;
    return (_a = this.contextManager) == null ? void 0 : _a.contextPreview;
  }
  get contextIndicator() {
    var _a;
    return this._contextIndicator || ((_a = this.contextManager) == null ? void 0 : _a.contextIndicator);
  }
  set contextIndicator(value) {
    this._contextIndicator = value;
  }
  getViewType() {
    return VIEW_TYPE_NOVA_SIDEBAR;
  }
  getDisplayText() {
    return "Nova";
  }
  getIcon() {
    return "nova-star";
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("nova-sidebar-container");
    if (import_obsidian11.Platform.isMobile) {
      container.addClass("is-mobile");
    } else {
      container.addClass("is-desktop");
    }
    const wrapperEl = container.createDiv({ cls: "nova-wrapper" });
    wrapperEl.style.cssText = `
			display: flex;
			flex-direction: column;
			height: 100%;
			overflow: hidden;
			padding-bottom: ${import_obsidian11.Platform.isDesktopApp ? "var(--size-4-6)" : "var(--size-4-5)"};
		`;
    const headerEl = wrapperEl.createDiv({ cls: "nova-header" });
    headerEl.style.cssText = `
			display: flex;
			flex-direction: column;
			padding: var(--size-4-2);
			border-bottom: 1px solid var(--background-modifier-border);
			flex-shrink: 0;
		`;
    const topRowEl = headerEl.createDiv();
    topRowEl.style.cssText = `
			display: flex;
			align-items: center;
			justify-content: space-between;
		`;
    const titleEl = topRowEl.createEl("h4");
    titleEl.style.cssText = "margin: 0; font-size: var(--font-ui-medium); display: flex; align-items: center; gap: var(--size-2-2); color: var(--interactive-accent);";
    titleEl.innerHTML = `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: var(--icon-size); height: var(--icon-size);">
			<circle cx="12" cy="12" r="2.5" fill="currentColor"/>
			<path d="M12 1L12 6" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M12 18L12 23" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M23 12L18 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M6 12L1 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M18.364 5.636L15.536 8.464" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M8.464 15.536L5.636 18.364" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M18.364 18.364L15.536 15.536" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M8.464 8.464L5.636 5.636" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
		</svg>Nova`;
    const rightContainer = topRowEl.createDiv();
    rightContainer.style.cssText = "display: flex; align-items: center; gap: var(--size-2-3);";
    const privacyIndicator = rightContainer.createSpan({ cls: "nova-privacy-indicator" });
    privacyIndicator.style.cssText = `
			display: flex;
			align-items: center;
			padding: 4px;
			color: var(--icon-color);
			font-weight: var(--font-weight-medium);
		`;
    this.updatePrivacyIndicator(privacyIndicator);
    this.privacyIndicator = privacyIndicator;
    this.createProviderDropdown(rightContainer);
    const clearButton = new import_obsidian11.ButtonComponent(rightContainer);
    clearButton.setIcon("eraser").setTooltip("Clear conversation history").onClick(() => this.clearChat());
    this.createChatInterface(wrapperEl);
    this.createInputInterface(wrapperEl);
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        this.loadConversationForActiveFile();
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-change", (editor) => {
        this.trackCursorPosition(editor);
      })
    );
    this.loadConversationForActiveFile();
    setTimeout(() => this.refreshProviderStatus(), 100);
  }
  /**
   * Track cursor position changes in the active editor (file-scoped)
   */
  trackCursorPosition(editor) {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile || !editor) {
      return;
    }
    if (this.currentFile && activeFile.path === this.currentFile.path) {
      const cursorPos = editor.getCursor();
      if (cursorPos) {
        this.currentFileCursorPosition = cursorPos;
      }
    }
  }
  /**
   * Restore cursor position for current file (file-scoped)
   */
  restoreCursorPosition() {
    if (this.currentFileCursorPosition) {
      const editor = this.plugin.documentEngine.getActiveEditor();
      if (editor) {
        editor.setCursor(this.currentFileCursorPosition);
      }
    }
  }
  async onClose() {
    var _a;
    if ((_a = this.currentProviderDropdown) == null ? void 0 : _a.cleanup) {
      this.currentProviderDropdown.cleanup();
    }
    if (this.wikilinkAutocomplete) {
      this.wikilinkAutocomplete.destroy();
    }
    if (this.contextPreviewDebounceTimeout) {
      clearTimeout(this.contextPreviewDebounceTimeout);
      this.contextPreviewDebounceTimeout = null;
    }
    this.cleanupEventListeners();
    this.clearTimeouts();
    this.cleanupDOMElements();
  }
  /**
   * Add event listener with automatic cleanup tracking
   */
  addTrackedEventListener(element, event, handler) {
    element.addEventListener(event, handler);
    this.documentEventListeners.push({ element, event, handler });
  }
  /**
   * Add timeout with automatic cleanup tracking
   */
  addTrackedTimeout(callback, delay) {
    const id = setTimeout(() => {
      callback();
      this.timeouts = this.timeouts.filter((t) => t !== id);
    }, delay);
    this.timeouts.push(id);
    return id;
  }
  /**
   * Clean up all tracked event listeners
   */
  cleanupEventListeners() {
    this.documentEventListeners.forEach(({ element, event, handler }) => {
      element.removeEventListener(event, handler);
    });
    this.documentEventListeners = [];
  }
  /**
   * Clear all tracked timeouts
   */
  clearTimeouts() {
    this.timeouts.forEach((id) => clearTimeout(id));
    this.timeouts = [];
  }
  /**
   * Clean up DOM elements
   */
  cleanupDOMElements() {
  }
  createChatInterface(container) {
    this.chatContainer = container.createDiv({ cls: "nova-chat-container" });
    this.chatContainer.style.cssText = `
			flex: 1;
			overflow-y: auto;
			padding: var(--size-4-2);
			background: var(--background-secondary);
			display: flex;
			flex-direction: column;
			gap: var(--size-2-3);
		`;
    this.chatRenderer = new ChatRenderer(this.plugin, this.chatContainer);
    this.addWelcomeMessage();
  }
  createInputInterface(container) {
    this.inputContainer = container.createDiv({ cls: "nova-input-container" });
    this.createInputArea();
  }
  /**
   * Create the input area UI elements using new architecture
   */
  createInputArea() {
    this.inputContainer.empty();
    this.contextManager = new ContextManager(this.plugin, this.app, this.inputContainer);
    this.streamingManager = new StreamingManager();
    this.selectionContextMenu = new SelectionContextMenu(this.app, this.plugin);
    this.inputHandler = new InputHandler(this.plugin, this.inputContainer, this.contextManager);
    this.inputHandler.setSidebarView(this);
    this.contextManager.setSidebarView(this);
    this.inputHandler.createInputInterface(this.chatContainer);
    this.commandSystem = new CommandSystem(this.plugin, this.inputContainer, this.inputHandler.getTextArea());
    this.inputHandler.setCommandSystem(this.commandSystem);
    this.inputHandler.setOnSendMessage((message) => {
      this.handleSend(message);
    });
    this.contextManager.createContextIndicator();
  }
  addMessage(role, content) {
    const messageEl = this.chatContainer.createDiv({ cls: `nova-message nova-message-${role}` });
    messageEl.style.cssText = `
			margin-bottom: var(--size-4-2);
			padding: var(--size-2-3) var(--size-4-3);
			border-radius: var(--radius-s);
			max-width: 85%;
			${role === "user" ? "margin-left: auto; background: var(--interactive-accent); color: var(--text-on-accent);" : role === "system" ? "margin: 0 auto; background: var(--background-modifier-hover); color: var(--text-muted); text-align: center; font-size: var(--font-text-size);" : "background: var(--background-primary); border: 1px solid var(--background-modifier-border);"}
		`;
    const roleEl = messageEl.createEl("div", {
      text: role === "user" ? "You" : role === "system" ? "System" : "Nova",
      cls: "nova-message-role"
    });
    roleEl.style.cssText = `
			font-size: var(--font-ui-smaller);
			opacity: 0.7;
			margin-bottom: var(--size-2-1);
			font-weight: 600;
		`;
    const contentEl = messageEl.createEl("div", { cls: "nova-message-content" });
    if (role === "system" && content.includes("<svg")) {
      contentEl.innerHTML = content;
    } else {
      contentEl.textContent = content;
    }
    setTimeout(() => {
      this.chatContainer.scrollTo({
        top: this.chatContainer.scrollHeight,
        behavior: "smooth"
      });
    }, _NovaSidebarView.SCROLL_DELAY_MS);
  }
  // REPLACE with simple delegation to ChatRenderer:
  addSuccessMessage(content) {
    this.chatRenderer.addSuccessMessage(content, true);
  }
  addErrorMessage(content) {
    this.chatRenderer.addErrorMessage(content, true);
  }
  addWelcomeMessage(message) {
    this.chatRenderer.addWelcomeMessage(message);
  }
  addSuccessIndicator(action) {
    const messages = {
      "add": "\u2713 Content added",
      "edit": "\u2713 Content edited",
      "delete": "\u2713 Content deleted",
      "grammar": "\u2713 Grammar fixed",
      "rewrite": "\u2713 Content rewritten"
    };
    const message = messages[action] || "\u2713 Command completed";
    this.addSuccessMessage(message);
  }
  addErrorIndicator(action, error) {
    const messages = {
      "add": "\u274C Failed to add content",
      "edit": "\u274C Failed to edit content",
      "delete": "\u274C Failed to delete content",
      "grammar": "\u274C Failed to fix grammar",
      "rewrite": "\u274C Failed to rewrite content",
      "execute": "\u274C Command execution error"
    };
    let message = messages[action] || "\u274C Command failed";
    if (error) {
      message += `: ${error}`;
    }
    this.addErrorMessage(message);
  }
  async handleColonCommand(message) {
    var _a;
    if (!this.plugin.featureManager.isFeatureEnabled("commands")) {
      this.addErrorMessage("Commands are currently in early access for Supernova supporters. Available to all users September 30, 2025.");
      return true;
    }
    const command = message.slice(1).toLowerCase();
    const providerCommands = {
      "claude": "claude",
      "chatgpt": "openai",
      "openai": "openai",
      "gemini": "google",
      "google": "google",
      "ollama": "ollama"
    };
    if (providerCommands[command]) {
      const providerId = providerCommands[command];
      await this.plugin.settingTab.setCurrentProvider(providerId);
      await this.plugin.saveSettings();
      this.addSuccessMessage(`\u2713 Switched to ${this.getProviderWithModelDisplayName(providerId)}`);
      return true;
    }
    if (this.plugin.featureManager.isFeatureEnabled("commands")) {
      const customCommand = (_a = this.plugin.settings.customCommands) == null ? void 0 : _a.find((cmd) => cmd.trigger === command);
      if (customCommand) {
        this.inputHandler.getTextArea().setValue(customCommand.template);
        setTimeout(() => this.autoGrowTextarea(), 0);
        this.addSuccessMessage(`\u2713 Loaded template: ${customCommand.name}`);
        return true;
      }
    }
    this.addErrorMessage(`\u274C Unknown command ':${command}'. Try :claude, :chatgpt, :gemini, or :ollama`);
    return true;
  }
  createCommandPicker() {
    this.commandPicker = this.inputContainer.createDiv({ cls: "nova-command-picker nova-panel-base" });
    this.commandPicker.style.cssText = `
			position: absolute;
			bottom: 100%;
			left: 0;
			right: 0;
			border-bottom: none;
			border-radius: 8px 8px 0 0;
			max-height: 200px;
			overflow-y: auto;
			z-index: 1000;
			display: none;
			box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.1);
		`;
  }
  handleInputChange() {
    const value = this.inputHandler.getTextArea().getValue();
    if (value.startsWith(":") && this.plugin.featureManager.isFeatureEnabled("commands")) {
      const query = value.slice(1).toLowerCase();
      this.showCommandPicker(query);
    } else {
      this.hideCommandPicker();
    }
  }
  showCommandPicker(query) {
    const commands = this.getAvailableCommands().filter(
      (cmd) => cmd.trigger.toLowerCase().includes(query) || cmd.name.toLowerCase().includes(query)
    );
    this.commandPicker.empty();
    this.commandPickerItems = [];
    this.selectedCommandIndex = -1;
    if (commands.length === 0) {
      this.hideCommandPicker();
      return;
    }
    commands.forEach((command, index) => {
      const item = this.commandPicker.createDiv({ cls: "nova-command-item nova-panel-item" });
      const triggerEl = item.createSpan({ cls: "nova-command-trigger nova-panel-trigger" });
      triggerEl.textContent = `:${command.trigger}`;
      const nameEl = item.createSpan({ cls: "nova-command-name nova-panel-text" });
      nameEl.textContent = command.name;
      nameEl.style.cssText = "flex: 1;";
      if (command.description) {
        const descEl = item.createSpan({ cls: "nova-command-desc nova-panel-muted" });
        descEl.textContent = command.description;
      }
      item.addEventListener("click", () => {
        this.selectCommand(command.trigger);
      });
      item.addEventListener("mouseenter", () => {
        this.setSelectedCommand(index);
      });
      this.commandPickerItems.push(item);
    });
    this.commandPicker.style.display = "block";
  }
  hideCommandPicker() {
    this.commandPicker.style.display = "none";
    this.selectedCommandIndex = -1;
  }
  isCommandPickerVisible() {
    return this.commandPicker.style.display === "block";
  }
  navigateCommandPicker(direction) {
    if (this.commandPickerItems.length === 0) return;
    const newIndex = Math.max(0, Math.min(
      this.commandPickerItems.length - 1,
      this.selectedCommandIndex + direction
    ));
    this.setSelectedCommand(newIndex);
  }
  setSelectedCommand(index) {
    this.commandPickerItems.forEach((item) => {
      item.removeClass("selected");
    });
    this.selectedCommandIndex = index;
    if (index >= 0 && index < this.commandPickerItems.length) {
      this.commandPickerItems[index].addClass("selected");
      this.commandPickerItems[index].scrollIntoView({ block: "nearest" });
    }
  }
  handleCommandPickerSelection() {
    if (!this.isCommandPickerVisible() || this.selectedCommandIndex === -1) {
      return false;
    }
    const commands = this.getAvailableCommands();
    const selectedCommand = commands[this.selectedCommandIndex];
    if (selectedCommand) {
      this.selectCommand(selectedCommand.trigger);
      return true;
    }
    return false;
  }
  selectCommand(trigger) {
    this.inputHandler.getTextArea().setValue(`:${trigger}`);
    this.hideCommandPicker();
    this.handleSend();
  }
  getAvailableCommands() {
    var _a;
    const commands = [];
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian11.MarkdownView);
    const selectedText = (_a = activeView == null ? void 0 : activeView.editor) == null ? void 0 : _a.getSelection();
    if (selectedText && selectedText.trim().length > 0) {
      SELECTION_ACTIONS.forEach((action) => {
        commands.push({
          trigger: action.id,
          name: `Nova: ${action.label}`,
          description: action.description
        });
      });
      commands.push({ trigger: "---", name: "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500", description: "Provider Commands" });
    }
    commands.push(
      { trigger: "claude", name: "Switch to Claude", description: "Anthropic Claude AI" },
      { trigger: "chatgpt", name: "Switch to ChatGPT", description: "OpenAI GPT models" },
      { trigger: "gemini", name: "Switch to Gemini", description: "Google Gemini AI" }
    );
    if (import_obsidian11.Platform.isDesktopApp) {
      commands.push({ trigger: "ollama", name: "Switch to Ollama", description: "Local AI models" });
    }
    if (this.plugin.featureManager.isFeatureEnabled("commands")) {
      const customCommands = this.plugin.settings.customCommands || [];
      if (customCommands.length > 0) {
        commands.push({ trigger: "---", name: "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500", description: "Custom Commands" });
        customCommands.forEach((cmd) => {
          commands.push({
            trigger: cmd.trigger,
            name: cmd.name,
            ...cmd.description && { description: cmd.description }
          });
        });
      }
    }
    return commands;
  }
  createCommandMenu() {
    this.commandMenu = this.inputContainer.createDiv({ cls: "nova-command-menu nova-panel-base" });
    this.commandMenu.style.cssText = `
			position: absolute;
			bottom: 100%;
			right: 0;
			border-bottom: none;
			border-radius: 8px 8px 0 0;
			min-width: 240px;
			max-height: 300px;
			overflow-y: auto;
			z-index: 1000;
			display: none;
			box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.1);
		`;
    const commandMenuClickHandler = (event) => {
      if (!this.commandMenu.contains(event.target) && !this.commandButton.buttonEl.contains(event.target)) {
        this.hideCommandMenu();
      }
    };
    this.addTrackedEventListener(document, "click", commandMenuClickHandler);
  }
  toggleCommandMenu() {
    if (!this.plugin.featureManager.isFeatureEnabled("commands")) {
      this.addErrorMessage("Commands are currently in early access for Supernova supporters. Available to all users September 30, 2025.");
      return;
    }
    if (this.isCommandMenuVisible) {
      this.hideCommandMenu();
    } else {
      this.showCommandMenu();
    }
  }
  showCommandMenu() {
    const commands = this.getAvailableCommands();
    this.commandMenu.empty();
    const headerEl = this.commandMenu.createDiv({ cls: "nova-command-menu-header nova-panel-header" });
    headerEl.innerHTML = this.createInlineIcon("zap") + " Commands";
    commands.forEach((command) => {
      if (command.trigger === "---") {
        const separator = this.commandMenu.createDiv({ cls: "nova-command-menu-separator" });
        separator.style.cssText = `
					padding: 8px 16px 4px 16px;
					font-size: 0.75em;
					color: var(--text-muted);
					font-weight: 600;
					text-transform: uppercase;
					letter-spacing: 0.5px;
					border-top: 1px solid var(--background-modifier-border);
					margin-top: 4px;
					cursor: default;
				`;
        separator.textContent = command.description || "";
        return;
      }
      const item = this.commandMenu.createDiv({ cls: "nova-command-menu-item nova-panel-item-vertical" });
      const nameEl = item.createDiv({ cls: "nova-command-menu-name nova-panel-text" });
      nameEl.textContent = command.name;
      const triggerEl = item.createDiv({ cls: "nova-command-menu-trigger nova-panel-trigger" });
      triggerEl.textContent = `:${command.trigger}`;
      triggerEl.style.opacity = "0.8";
      if (command.description) {
        const descEl = item.createDiv({ cls: "nova-command-menu-desc nova-panel-muted" });
        descEl.textContent = command.description;
      }
      item.addEventListener("click", () => {
        this.executeCommandFromMenu(command.trigger);
      });
    });
    this.commandMenu.style.display = "block";
    this.isCommandMenuVisible = true;
  }
  hideCommandMenu() {
    this.commandMenu.style.display = "none";
    this.isCommandMenuVisible = false;
  }
  async executeCommandFromMenu(trigger) {
    var _a;
    this.hideCommandMenu();
    const selectionAction = SELECTION_ACTIONS.find((action) => action.id === trigger);
    if (selectionAction) {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian11.MarkdownView);
      const selectedText = (_a = activeView == null ? void 0 : activeView.editor) == null ? void 0 : _a.getSelection();
      if ((activeView == null ? void 0 : activeView.editor) && selectedText && selectedText.trim().length > 0) {
        await this.selectionContextMenu.handleSelectionAction(trigger, activeView.editor, selectedText);
      } else {
        new import_obsidian11.Notice("No text selected. Please select text to use Nova editing commands.", 3e3);
      }
      return;
    }
    if (trigger === "---") {
      return;
    }
    this.inputHandler.getTextArea().setValue(`:${trigger}`);
    this.handleSend();
  }
  createContextIndicator() {
    if (!this.plugin.featureManager.isFeatureEnabled("multi-doc-context")) {
      return;
    }
    this.contextIndicator = this.inputContainer.createDiv({ cls: "nova-context-indicator" });
    this.contextIndicator.style.cssText = `
			display: none;
			padding: 8px 12px;
			margin-bottom: 8px;
			background: var(--background-modifier-hover);
			border: 1px solid var(--background-modifier-border);
			border-radius: 8px;
			font-size: 0.85em;
			color: var(--text-muted);
			transition: all 0.2s ease;
		`;
  }
  createContextPreview() {
    if (!this.plugin.featureManager.isFeatureEnabled("multi-doc-context")) {
      return document.createElement("div");
    }
    const previewContainer = this.inputContainer.createDiv({ cls: "nova-context-preview" });
    previewContainer.style.cssText = `
			display: none;
			padding: 8px 12px;
			margin-bottom: 4px;
			background: rgba(var(--interactive-accent-rgb), 0.1);
			border: 1px solid rgba(var(--interactive-accent-rgb), 0.2);
			border-radius: 6px;
			font-size: 0.8em;
			color: var(--text-muted);
			transition: all 0.2s ease;
			align-items: center;
			gap: 4px;
		`;
    const previewText = previewContainer.createSpan({ cls: "nova-context-preview-text" });
    previewText.innerHTML = this.createInlineIcon("book-open") + " Context will include: ";
    previewText.style.cssText = "font-weight: 500; display: flex; align-items: center; gap: 6px;";
    const previewList = previewContainer.createSpan({ cls: "nova-context-preview-list" });
    previewList.style.cssText = "color: var(--interactive-accent);";
    return previewContainer;
  }
  /**
   * Debounced version of updateLiveContextPreview for performance
   */
  debouncedUpdateContextPreview() {
    if (this.contextPreviewDebounceTimeout) {
      clearTimeout(this.contextPreviewDebounceTimeout);
    }
    this.contextPreviewDebounceTimeout = setTimeout(() => {
      this.updateLiveContextPreview();
      this.contextPreviewDebounceTimeout = null;
    }, _NovaSidebarView.CONTEXT_PREVIEW_DEBOUNCE_MS);
  }
  updateLiveContextPreview() {
    var _a;
    if (!this.contextPreview || !this.plugin.featureManager.isFeatureEnabled("multi-doc-context")) {
      return;
    }
    const message = this.inputHandler.getTextArea().getValue();
    if (!message) {
      this.contextPreview.style.display = "none";
      return;
    }
    const refPattern = /(\+)?\[\[([^\]]+?)(?:#([^\]]+?))?\]\]/g;
    const foundRefs = [];
    let match;
    while ((match = refPattern.exec(message)) !== null) {
      const docName = match[2];
      const property = match[3];
      const file = this.findFileByName(docName);
      if (file) {
        foundRefs.push({
          name: docName,
          property
        });
      }
    }
    const persistentDocs = this.multiDocHandler.getPersistentContext(((_a = this.currentFile) == null ? void 0 : _a.path) || "");
    persistentDocs.forEach((doc) => {
      const exists = foundRefs.some((ref) => ref.name === doc.file.basename);
      if (!exists) {
        foundRefs.push({
          name: doc.file.basename,
          property: doc.property
        });
      }
    });
    if (foundRefs.length > 0) {
      const previewList = this.contextPreview.querySelector(".nova-context-preview-list");
      if (previewList) {
        const docNames = foundRefs.map((ref) => {
          const suffix = ref.property ? `#${ref.property}` : "";
          return `${ref.name}${suffix}`;
        });
        previewList.textContent = docNames.join(", ");
      }
      this.contextPreview.style.display = "block";
    } else {
      this.contextPreview.style.display = "none";
    }
  }
  findFileByName(nameOrPath) {
    let file = this.app.vault.getAbstractFileByPath(nameOrPath);
    if (!file || !(file instanceof import_obsidian11.TFile)) {
      file = this.app.vault.getAbstractFileByPath(nameOrPath + ".md");
    }
    if (!file || !(file instanceof import_obsidian11.TFile)) {
      const files = this.app.vault.getMarkdownFiles();
      file = files.find(
        (f) => f.basename === nameOrPath || f.name === nameOrPath || f.path.endsWith("/" + nameOrPath) || f.path.endsWith("/" + nameOrPath + ".md")
      ) || null;
    }
    return file instanceof import_obsidian11.TFile ? file : null;
  }
  updateContextIndicator() {
    if (!this.contextIndicator) {
      return;
    }
    this.contextIndicator.empty();
    if (!this.currentContext || !this.currentContext.persistentDocs) {
      this.contextIndicator.style.display = "none";
      if (this.inputHandler) {
        this.inputHandler.updateContextState(false);
      }
      return;
    }
    const allDocs = this.currentContext.persistentDocs;
    if (!allDocs || allDocs.length === 0) {
      this.contextIndicator.style.display = "none";
      if (this.inputHandler) {
        this.inputHandler.updateContextState(false);
      }
      return;
    }
    if (this.inputHandler) {
      this.inputHandler.updateContextState(true);
    }
    const isMobile = import_obsidian11.Platform.isMobile;
    this.contextIndicator.style.cssText = `
			display: flex;
			position: relative;
			padding: ${isMobile ? "12px 16px" : "8px 12px"};
			margin-bottom: 4px;
			background: rgba(var(--interactive-accent-rgb), 0.1);
			border: 1px solid rgba(var(--interactive-accent-rgb), 0.2);
			border-radius: 6px;
			font-size: ${isMobile ? "0.9em" : "0.8em"};
			color: var(--text-muted);
			transition: all 0.2s ease;
			cursor: pointer;
			min-height: ${isMobile ? "44px" : "auto"};
		`;
    const summaryEl = this.contextIndicator.createDiv({ cls: "nova-context-summary" });
    summaryEl.style.cssText = `
			display: flex;
			align-items: center;
			justify-content: space-between;
			width: 100%;
			height: 100%;
			cursor: pointer;
			pointer-events: auto;
		`;
    const summaryTextEl = summaryEl.createSpan({ cls: "nova-context-summary-text" });
    const tokenPercent = Math.round(this.currentContext.tokenCount / 8e3 * 100);
    const docNames = allDocs.filter((doc) => {
      var _a;
      return (_a = doc == null ? void 0 : doc.file) == null ? void 0 : _a.basename;
    }).map((doc) => doc.file.basename).slice(0, isMobile ? 1 : 2);
    const moreCount = allDocs.length > (isMobile ? 1 : 2) ? ` +${allDocs.length - (isMobile ? 1 : 2)}` : "";
    summaryTextEl.style.cssText = "font-weight: 500; color: var(--text-muted); flex: 1; pointer-events: none; display: flex; align-items: center; gap: 6px; min-width: 0;";
    const filenamePartEl = summaryTextEl.createSpan();
    filenamePartEl.style.cssText = "display: flex; align-items: center; gap: 4px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; min-width: 0; flex: 1;";
    const iconSpan = filenamePartEl.createSpan();
    iconSpan.innerHTML = this.createInlineIcon("book-open");
    iconSpan.style.cssText = "flex-shrink: 0; display: flex; align-items: center;";
    const textSpan = filenamePartEl.createSpan();
    textSpan.textContent = `${docNames.join(", ")}${moreCount}`;
    textSpan.style.cssText = "overflow: hidden; text-overflow: ellipsis; min-width: 0;";
    const tokenPartEl = summaryTextEl.createSpan();
    tokenPartEl.style.cssText = "white-space: nowrap; flex-shrink: 0; margin-left: 8px;";
    if (isMobile) {
      tokenPartEl.textContent = `(${tokenPercent}%)`;
    } else {
      tokenPartEl.textContent = `(${tokenPercent}% tokens)`;
    }
    const expandIndicatorEl = summaryEl.createSpan({ cls: "nova-context-expand-indicator" });
    expandIndicatorEl.innerHTML = this.createInlineIcon("more-horizontal", isMobile ? "16px" : "14px");
    expandIndicatorEl.style.cssText = `
			color: var(--interactive-accent);
			font-size: ${isMobile ? "16px" : "14px"};
			opacity: 0.8;
			padding: ${isMobile ? "8px" : "4px"};
			min-width: ${isMobile ? "44px" : "auto"};
			text-align: center;
			border-radius: 4px;
			transition: all 0.2s;
			pointer-events: none;
		`;
    expandIndicatorEl.setAttr("title", "Tap to manage documents");
    if (isMobile) {
      summaryEl.addEventListener("touchstart", () => {
        expandIndicatorEl.style.background = "rgba(var(--interactive-accent-rgb), 0.2)";
      });
      summaryEl.addEventListener("touchend", () => {
        this.addTrackedTimeout(() => {
          expandIndicatorEl.style.background = "none";
        }, _NovaSidebarView.HOVER_TIMEOUT_MS);
      });
    } else {
      summaryEl.addEventListener("mouseenter", () => {
        expandIndicatorEl.style.background = "rgba(var(--interactive-accent-rgb), 0.2)";
      });
      summaryEl.addEventListener("mouseleave", () => {
        expandIndicatorEl.style.background = "none";
      });
    }
    const expandedEl = this.contextIndicator.createDiv({ cls: "nova-context-expanded" });
    expandedEl.style.cssText = `
			display: none;
			position: absolute;
			bottom: 100%;
			left: ${isMobile ? "-8px" : "0"};
			right: ${isMobile ? "-8px" : "0"};
			background: var(--background-primary);
			border: 1px solid rgba(var(--interactive-accent-rgb), 0.2);
			border-radius: 6px;
			box-shadow: 0 ${isMobile ? "-4px 16px" : "-2px 8px"} rgba(0, 0, 0, ${isMobile ? "0.15" : "0.1"});
			z-index: 1000;
			margin-bottom: 2px;
			max-height: ${isMobile ? "60vh" : "200px"};
			overflow-y: auto;
			min-width: ${isMobile ? "100%" : "auto"};
		`;
    const expandedHeaderEl = expandedEl.createDiv({ cls: "nova-context-expanded-header" });
    expandedHeaderEl.style.cssText = `
			display: flex;
			align-items: center;
			justify-content: space-between;
			padding: ${isMobile ? "12px 16px" : "8px 12px"};
			border-bottom: 1px solid var(--background-modifier-border);
			font-weight: 500;
			color: var(--text-normal);
			font-size: 1em;
			min-height: ${isMobile ? "44px" : "auto"};
		`;
    const headerTitleEl = expandedHeaderEl.createSpan();
    headerTitleEl.innerHTML = this.createInlineIcon("book-open") + ` Documents (${allDocs.length})`;
    headerTitleEl.style.cssText = "display: flex; align-items: center; gap: 6px;";
    const clearAllBtnComponent = new import_obsidian11.ButtonComponent(expandedHeaderEl);
    clearAllBtnComponent.setIcon("trash-2").setTooltip("Clear all documents from context").onClick(async () => {
      if (this.currentFile) {
        this.multiDocHandler.clearPersistentContext(this.currentFile.path);
        await this.refreshContext();
      }
    });
    const clearAllBtn = clearAllBtnComponent.buttonEl;
    clearAllBtn.addClass("nova-context-clear-all-btn");
    clearAllBtn.style.cssText = `
			background: none;
			border: 1px solid var(--text-faint);
			color: var(--text-faint);
			cursor: pointer;
			padding: ${isMobile ? "8px 12px" : "4px 8px"};
			border-radius: 4px;
			font-size: 1em;
			transition: all 0.2s;
			min-width: ${isMobile ? "44px" : "auto"};
			min-height: ${isMobile ? "44px" : "auto"};
			display: flex;
			align-items: center;
			justify-content: center;
		`;
    if (isMobile) {
      clearAllBtn.addEventListener("touchstart", () => {
        clearAllBtn.style.background = "var(--background-modifier-error)";
        clearAllBtn.style.borderColor = "var(--text-error)";
        clearAllBtn.style.color = "var(--text-error)";
      });
      clearAllBtn.addEventListener("touchend", () => {
        setTimeout(() => {
          clearAllBtn.style.background = "none";
          clearAllBtn.style.borderColor = "var(--text-faint)";
          clearAllBtn.style.color = "var(--text-faint)";
        }, _NovaSidebarView.HOVER_TIMEOUT_MS);
      });
    } else {
      clearAllBtn.addEventListener("mouseenter", () => {
        clearAllBtn.style.background = "var(--background-modifier-error)";
        clearAllBtn.style.borderColor = "var(--text-error)";
        clearAllBtn.style.color = "var(--text-error)";
      });
      clearAllBtn.addEventListener("mouseleave", () => {
        clearAllBtn.style.background = "none";
        clearAllBtn.style.borderColor = "var(--text-faint)";
        clearAllBtn.style.color = "var(--text-faint)";
      });
    }
    const docListEl = expandedEl.createDiv({ cls: "nova-context-doc-list" });
    allDocs.filter((doc) => {
      var _a;
      return (_a = doc == null ? void 0 : doc.file) == null ? void 0 : _a.basename;
    }).forEach((doc, index) => {
      const docItemEl = docListEl.createDiv({ cls: "nova-context-doc-item" });
      docItemEl.style.cssText = `
				display: flex;
				align-items: center;
				justify-content: space-between;
				padding: ${isMobile ? "12px 16px" : "8px 12px"};
				border-bottom: ${index < allDocs.length - 1 ? "1px solid var(--background-modifier-border)" : "none"};
				transition: background-color 0.2s;
				min-height: ${isMobile ? "56px" : "auto"};
			`;
      const docInfoEl = docItemEl.createDiv({ cls: "nova-context-doc-info" });
      docInfoEl.style.cssText = `
				display: flex;
				align-items: center;
				gap: ${isMobile ? "12px" : "8px"};
				flex: 1;
				min-width: 0;
			`;
      const iconEl = docInfoEl.createSpan();
      iconEl.innerHTML = this.createInlineIcon("file-text");
      iconEl.style.cssText = "display: flex; align-items: center; font-size: 1em; flex-shrink: 0;";
      const nameEl = docInfoEl.createSpan({ cls: "nova-context-doc-name" });
      const suffix = doc.property ? `#${doc.property}` : "";
      nameEl.textContent = `${doc.file.basename}${suffix}`;
      nameEl.style.cssText = `
				font-weight: 400;
				color: var(--text-normal);
				text-overflow: ellipsis;
				overflow: hidden;
				white-space: nowrap;
				font-size: 1em;
				line-height: 1.4;
				flex: 1;
				min-width: 0;
				margin-right: 8px;
			`;
      nameEl.setAttr("title", `${doc.file.path} (read-only for editing)`);
      const readOnlyEl = docInfoEl.createSpan({ cls: "nova-context-readonly" });
      readOnlyEl.textContent = "read-only";
      readOnlyEl.style.cssText = `
				font-size: 0.75em;
				color: var(--text-muted);
				background: var(--background-modifier-hover);
				padding: 1px 4px;
				border-radius: 3px;
				font-weight: 500;
				text-transform: uppercase;
				letter-spacing: 0.5px;
				flex-shrink: 0;
				margin-right: 8px;
			`;
      const removeBtn = docItemEl.createEl("button", { cls: "nova-context-doc-remove" });
      removeBtn.textContent = "\xD7";
      removeBtn.style.cssText = `
				background: none;
				border: none;
				color: var(--text-faint);
				cursor: pointer;
				width: ${isMobile ? "44px" : "20px"};
				height: ${isMobile ? "44px" : "20px"};
				border-radius: 4px;
				display: flex;
				align-items: center;
				justify-content: center;
				font-size: ${isMobile ? "18px" : "14px"};
				transition: all 0.2s;
				font-weight: normal;
				line-height: 1;
			`;
      removeBtn.setAttr("title", `Remove ${doc.file.basename}`);
      removeBtn.addEventListener("click", async (e) => {
        e.stopPropagation();
        if (this.currentFile) {
          this.multiDocHandler.removePersistentDoc(this.currentFile.path, doc.file.path);
          await this.refreshContext();
        }
      });
      if (isMobile) {
        removeBtn.addEventListener("touchstart", () => {
          removeBtn.style.background = "var(--background-modifier-error)";
          removeBtn.style.color = "var(--text-error)";
        });
        removeBtn.addEventListener("touchend", () => {
          setTimeout(() => {
            removeBtn.style.background = "none";
            removeBtn.style.color = "var(--text-faint)";
          }, _NovaSidebarView.HOVER_TIMEOUT_MS);
        });
        docItemEl.addEventListener("touchstart", () => {
          docItemEl.style.background = "var(--background-modifier-hover)";
        });
        docItemEl.addEventListener("touchend", () => {
          setTimeout(() => {
            docItemEl.style.background = "transparent";
          }, _NovaSidebarView.HOVER_TIMEOUT_MS);
        });
      } else {
        removeBtn.addEventListener("mouseenter", () => {
          removeBtn.style.background = "var(--background-modifier-error)";
          removeBtn.style.color = "var(--text-error)";
        });
        removeBtn.addEventListener("mouseleave", () => {
          removeBtn.style.background = "none";
          removeBtn.style.color = "var(--text-faint)";
        });
        docItemEl.addEventListener("mouseenter", () => {
          docItemEl.style.background = "var(--background-modifier-hover)";
        });
        docItemEl.addEventListener("mouseleave", () => {
          docItemEl.style.background = "transparent";
        });
      }
    });
    let isExpanded = false;
    const toggleExpanded = (e) => {
      e.stopPropagation();
      isExpanded = !isExpanded;
      if (isExpanded) {
        expandedEl.style.display = "block";
        this.contextIndicator.style.zIndex = "1001";
      } else {
        expandedEl.style.display = "none";
        this.contextIndicator.style.zIndex = "auto";
      }
    };
    summaryEl.addEventListener("click", toggleExpanded);
    const closeHandler = (e) => {
      if (isExpanded && !this.contextIndicator.contains(e.target)) {
        isExpanded = false;
        expandedEl.style.display = "none";
        this.contextIndicator.style.zIndex = "auto";
      }
    };
    this.addTrackedEventListener(document, "click", closeHandler);
  }
  async refreshContext() {
    if (this.currentFile) {
      try {
        const persistentDocs = this.multiDocHandler.getPersistentContext(this.currentFile.path) || [];
        if (persistentDocs.length > 0) {
          this.currentContext = {
            persistentDocs,
            contextString: "",
            // Not needed for UI
            tokenCount: 0,
            // Not needed for UI refresh
            isNearLimit: false
          };
        } else {
          this.currentContext = null;
        }
        this.updateContextIndicator();
      } catch (error) {
        this.currentContext = null;
        this.updateContextIndicator();
      }
    } else {
      this.currentContext = null;
      this.updateContextIndicator();
    }
  }
  async handleSend(message) {
    var _a, _b, _c, _d, _e, _f;
    const messageText = message || this.inputHandler.getValue().trim();
    if (!messageText) return;
    const currentProviderType = await this.plugin.aiProviderManager.getCurrentProviderType();
    if (!currentProviderType) {
      this.addErrorMessage(this.createIconMessage("alert-circle", "Nova is disabled or no AI provider is available. Please configure an AI provider in settings."));
      return;
    }
    if (messageText.startsWith(":")) {
      const commandResult = await this.handleColonCommand(messageText);
      if (commandResult) {
        this.inputHandler.setValue("");
        return;
      }
    }
    let processedMessage = messageText;
    let multiDocContext = null;
    if (this.currentFile) {
      if (!this.plugin.featureManager.isFeatureEnabled("multi-doc-context")) {
        if (messageText.includes("[[")) {
          this.addErrorMessage("Multi-document context is currently in early access for Supernova supporters. Available to all users August 15, 2025.");
          return;
        }
      } else {
        const contextResult = await this.multiDocHandler.buildContext(messageText, this.currentFile);
        processedMessage = contextResult.cleanedMessage;
        multiDocContext = contextResult.context;
        this.currentContext = multiDocContext;
        this.updateContextIndicator();
        const previousPersistentCount = ((_b = (_a = this.currentContext) == null ? void 0 : _a.persistentDocs) == null ? void 0 : _b.length) || 0;
        const currentPersistentCount = ((_c = multiDocContext == null ? void 0 : multiDocContext.persistentDocs) == null ? void 0 : _c.length) || 0;
        const hasNewDocs = currentPersistentCount > previousPersistentCount;
        const isContextOnlyMessage = processedMessage.trim().length === 0 && hasNewDocs;
        if (isContextOnlyMessage) {
          const newDocsCount = currentPersistentCount - previousPersistentCount;
          if (newDocsCount > 0 && (multiDocContext == null ? void 0 : multiDocContext.persistentDocs) && multiDocContext.persistentDocs.length > 0) {
            const newDocs = multiDocContext.persistentDocs.slice(-newDocsCount);
            const docNames = newDocs.filter((doc) => {
              var _a2;
              return (_a2 = doc == null ? void 0 : doc.file) == null ? void 0 : _a2.basename;
            }).map((doc) => doc.file.basename).join(", ");
            if (docNames) {
              this.addSuccessMessage(this.createIconMessage("check-circle", `Added ${newDocsCount} document${newDocsCount !== 1 ? "s" : ""} to persistent context: ${docNames}`));
            }
          }
          this.inputHandler.setValue("");
          this.updateContextIndicator();
          if (this.contextPreview) {
            this.contextPreview.style.display = "none";
          }
          return;
        }
        if (((_d = multiDocContext == null ? void 0 : multiDocContext.persistentDocs) == null ? void 0 : _d.length) > 0) {
          const allDocs = multiDocContext.persistentDocs;
          const docNames = allDocs.filter((doc) => {
            var _a2;
            return (_a2 = doc == null ? void 0 : doc.file) == null ? void 0 : _a2.basename;
          }).map((doc) => doc.file.basename).join(", ");
          if (docNames && allDocs.length > 0) {
            const tokenInfo = multiDocContext.tokenCount > 0 ? ` (~${multiDocContext.tokenCount} tokens)` : "";
            const currentFile = ((_e = this.currentFile) == null ? void 0 : _e.basename) || "current file";
            this.addSuccessMessage(`\u2713 Included ${allDocs.length} document${allDocs.length !== 1 ? "s" : ""} in context: ${docNames}${tokenInfo}. Context documents are read-only; edit commands will only modify ${currentFile}.`);
          }
        }
        if (multiDocContext == null ? void 0 : multiDocContext.isNearLimit) {
          new import_obsidian11.Notice("\u26A0\uFE0F Approaching token limit. Consider removing some documents from context.", _NovaSidebarView.NOTICE_DURATION_MS);
        }
      }
    }
    this.inputHandler.setValue("");
    if (this.contextPreview) {
      this.contextPreview.style.display = "none";
    }
    const sendButton = this.inputHandler.sendButton;
    if (sendButton) sendButton.setDisabled(true);
    try {
      console.log("\u{1F680} CHAT INPUT HANDLING:", { messageText });
      const activeFile = this.app.workspace.getActiveFile();
      if (activeFile) {
        console.log("\u{1F4BE} About to persist user message:", { file: activeFile.path, messageText });
        await this.plugin.conversationManager.addUserMessage(activeFile, messageText, null);
        console.log("\u{1F4FA} About to display user message in UI");
        this.addMessage("user", messageText);
      }
      const loadingEl = this.chatContainer.createDiv({ cls: "nova-loading" });
      loadingEl.style.cssText = `
				padding: 12px 16px;
				background: var(--background-primary);
				border: 1px solid var(--background-modifier-border);
				border-radius: 12px;
				margin-bottom: 8px;
				max-width: 80%;
				display: flex;
				align-items: center;
				gap: 10px;
			`;
      const novaContainer = loadingEl.createDiv({ cls: "nova-burst-container" });
      novaContainer.innerHTML = `
				<div class="nova-burst">
					<div class="nova-core"></div>
					<div class="nova-ring nova-ring-1"></div>
					<div class="nova-ring nova-ring-2"></div>
					<div class="nova-ring nova-ring-3"></div>
				</div>
			`;
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian11.MarkdownView);
      const selectedText = (_f = activeView == null ? void 0 : activeView.editor) == null ? void 0 : _f.getSelection();
      const hasSelection = !!(selectedText && selectedText.trim().length > 0);
      const intent = await this.plugin.aiIntentClassifier.classifyIntent(processedMessage, hasSelection);
      let contextualCommand;
      if (intent === "METADATA" || intent === "CONTENT") {
        contextualCommand = this.plugin.commandParser.parseCommand(processedMessage);
      }
      const initialPhrase = this.getContextualThinkingPhrase(contextualCommand, processedMessage);
      const loadingTextEl = loadingEl.createSpan({ text: initialPhrase });
      loadingTextEl.style.cssText = "color: var(--text-muted); font-size: 0.9em;";
      this.startThinkingPhraseRotation(loadingTextEl, contextualCommand, processedMessage);
      let response = null;
      if (intent === "METADATA" && activeFile) {
        const parsedCommand = this.plugin.commandParser.parseCommand(processedMessage);
        response = await this.executeCommand(parsedCommand);
      } else if (intent === "CONTENT" && activeFile) {
        const parsedCommand = this.plugin.commandParser.parseCommand(processedMessage);
        response = await this.executeCommand(parsedCommand);
      } else {
        const prompt2 = await this.plugin.promptBuilder.buildPromptForMessage(processedMessage, activeFile || void 0);
        if (multiDocContext && multiDocContext.contextString) {
          const enhancedSystemPrompt = (prompt2.systemPrompt || "") + `

MULTI-DOCUMENT CONTEXT INSTRUCTIONS:
- You have access to multiple documents as REFERENCE CONTEXT ONLY
- These documents are for your understanding and background knowledge
- DO NOT echo, quote, or output content from these context documents unless specifically requested
- When responding, focus on the user's request, not the content of context documents
- Context documents are read-only; you can only edit the current working document
- If the user asks about context documents, you may reference and discuss their content`;
          const enhancedUserPrompt = `REFERENCE CONTEXT (for your understanding only):
${multiDocContext.contextString}

---

USER REQUEST: ${processedMessage}`;
          response = await this.plugin.aiProviderManager.complete(enhancedSystemPrompt, enhancedUserPrompt, {
            temperature: prompt2.config.temperature,
            maxTokens: prompt2.config.maxTokens
          });
        } else {
          response = await this.plugin.aiProviderManager.complete(prompt2.systemPrompt || "", prompt2.userPrompt, {
            temperature: prompt2.config.temperature,
            maxTokens: prompt2.config.maxTokens
          });
        }
      }
      const loadingTextSpan = loadingEl.querySelector("span");
      if (loadingTextSpan) {
        this.stopThinkingPhraseRotation(loadingTextSpan);
      }
      loadingEl.remove();
      const filteredResponse = response ? this.filterThinkingContent(response) : response;
      if (activeFile && filteredResponse) {
        await this.plugin.documentEngine.addAssistantMessage(filteredResponse);
      }
      if (filteredResponse) {
        if (filteredResponse.includes("x-circle") || filteredResponse.includes("Error executing command") || filteredResponse.includes("Failed to") || filteredResponse.includes("No markdown file is open") || filteredResponse.includes("Unable to access") || filteredResponse.includes("Unable to set")) {
          this.addErrorMessage(filteredResponse);
        } else {
          this.addMessage("assistant", filteredResponse);
        }
      }
    } catch (error) {
      const loadingEl = this.chatContainer.querySelector(".nova-loading");
      if (loadingEl) {
        const loadingTextSpan = loadingEl.querySelector("span");
        if (loadingTextSpan) {
          this.stopThinkingPhraseRotation(loadingTextSpan);
        }
        loadingEl.remove();
      }
      const errorMessage = error.message;
      let displayMessage;
      if (errorMessage.includes("Google API error")) {
        displayMessage = errorMessage;
      } else if (errorMessage.includes("OpenAI API error")) {
        displayMessage = errorMessage;
      } else if (errorMessage.includes("API key")) {
        displayMessage = `${errorMessage}. Please check your settings.`;
      } else if (errorMessage.includes("Failed to fetch") || errorMessage.includes("NetworkError")) {
        displayMessage = "Network error. Please check your internet connection and try again.";
      } else {
        displayMessage = `Sorry, I encountered an error: ${errorMessage}`;
      }
      this.addErrorMessage(displayMessage);
    } finally {
      const sendButton2 = this.inputHandler.sendButton;
      if (sendButton2) sendButton2.setDisabled(false);
      await this.refreshContext();
    }
  }
  async insertTextIntoActiveNote(text) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian11.ItemView);
    if (activeView && "editor" in activeView) {
      const editor = activeView.editor;
      if (editor) {
        const cursor = editor.getCursor();
        editor.replaceRange(text, cursor);
      }
    }
  }
  async executeCommand(command) {
    try {
      if (!this.currentFile) {
        return this.createIconMessage("x-circle", "No markdown file is open. Please open a file in the editor to use editing commands.");
      }
      const leaves = this.app.workspace.getLeavesOfType("markdown");
      let markdownView = null;
      for (const leaf of leaves) {
        const view = leaf.view;
        if (view.file === this.currentFile) {
          markdownView = view;
          break;
        }
      }
      if (!markdownView) {
        const leaf = this.app.workspace.getLeaf(false);
        if (leaf) {
          await leaf.openFile(this.currentFile);
          markdownView = leaf.view;
        }
      }
      if (!markdownView) {
        return this.createIconMessage("x-circle", `Unable to access the file "${this.currentFile.basename}". Please make sure it's open in the editor.`);
      }
      const activeFile = this.app.workspace.getActiveFile();
      if (!activeFile || activeFile !== this.currentFile) {
        this.app.workspace.setActiveLeaf(markdownView.leaf, { focus: false });
        await new Promise((resolve) => setTimeout(resolve, 50));
        const nowActiveFile = this.app.workspace.getActiveFile();
        if (!nowActiveFile || nowActiveFile !== this.currentFile) {
          return this.createIconMessage("x-circle", `Unable to set "${this.currentFile.basename}" as the active file. Edit commands can only modify the file you're chatting about to prevent accidental changes to context documents.`);
        }
      }
      const currentPos = this.plugin.documentEngine.getCursorPosition();
      if (currentPos) {
        this.currentFileCursorPosition = currentPos;
      }
      this.restoreCursorPosition();
      let result;
      switch (command.action) {
        case "add":
          result = await this.executeAddCommandWithStreaming(command);
          break;
        case "edit":
          result = await this.executeEditCommandWithStreaming(command);
          break;
        case "delete":
          result = await this.plugin.deleteCommandHandler.execute(command);
          break;
        case "grammar":
          result = await this.executeGrammarCommandWithStreaming(command);
          break;
        case "rewrite":
          result = await this.executeRewriteCommandWithStreaming(command);
          break;
        case "metadata":
          result = await this.plugin.metadataCommandHandler.execute(command);
          break;
        default:
          return `I don't understand the command "${command.action}". Try asking me to add, edit, delete, fix grammar, rewrite content, or update metadata/properties.`;
      }
      if (result.success) {
        this.addSuccessIndicator(command.action);
        return null;
      } else {
        this.addErrorIndicator(command.action, result.error);
        return null;
      }
    } catch (error) {
      this.addErrorIndicator("execute", error.message);
      return null;
    }
  }
  async loadConversationForActiveFile() {
    var _a, _b;
    const activeFile = this.app.workspace.getActiveFile();
    console.log("\u{1F504} FILE SWITCH EVENT:", {
      activeFile: activeFile == null ? void 0 : activeFile.path,
      currentFile: (_a = this.currentFile) == null ? void 0 : _a.path
    });
    let targetFile = activeFile;
    if (!targetFile) {
      const activeLeaf = this.app.workspace.activeLeaf;
      if (activeLeaf && activeLeaf.view instanceof import_obsidian11.MarkdownView) {
        targetFile = activeLeaf.view.file;
      } else {
        const leaves = this.app.workspace.getLeavesOfType("markdown");
        if (leaves.length > 0) {
          const view = leaves[0].view;
          targetFile = view.file;
        }
      }
    }
    if (!targetFile && this.currentFile) {
      console.log("\u{1F5D1}\uFE0F Clearing chat - no target file");
      this.currentFile = null;
      this.chatContainer.empty();
      this.refreshContext();
      this.addWelcomeMessage("Open a document to get started.");
      return;
    }
    if (!targetFile || targetFile === this.currentFile) {
      console.log("\u23ED\uFE0F Skipping file switch - same file or no file");
      return;
    }
    this.currentFileCursorPosition = null;
    console.log("\u{1F504} SWITCHING TO FILE:", {
      from: (_b = this.currentFile) == null ? void 0 : _b.path,
      to: targetFile.path
    });
    this.currentFile = targetFile;
    this.updateDocumentStats();
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian11.MarkdownView);
    if (activeView && activeView.editor) {
      this.trackCursorPosition(activeView.editor);
    }
    console.log("\u{1F9F9} CLEARING CHAT for file switch");
    this.chatContainer.empty();
    await this.refreshContext();
    try {
      console.log("\u{1F4DA} LOADING CONVERSATION HISTORY via ChatRenderer");
      await this.chatRenderer.loadConversationHistory(targetFile);
      await this.showDocumentInsights(targetFile);
    } catch (error) {
      console.log("\u274C CONVERSATION LOADING ERROR:", error);
      this.addWelcomeMessage();
    }
  }
  async clearChat() {
    this.chatContainer.empty();
    if (this.currentFile) {
      try {
        await this.plugin.conversationManager.clearConversation(this.currentFile);
        this.multiDocHandler.clearPersistentContext(this.currentFile.path);
        this.currentContext = null;
        if (this.contextIndicator) {
          this.contextIndicator.style.display = "none";
        }
      } catch (error) {
      }
    }
    new import_obsidian11.Notice("Chat cleared");
  }
  async updateDocumentStats() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) return;
    try {
      const content = await this.app.vault.read(activeFile);
      if (!content) return;
      const wordCount = content.split(/\s+/).filter((word) => word.length > 0).length;
      const headingCount = (content.match(/^#{1,6}\s/gm) || []).length;
      const headerEl = this.containerEl.querySelector(".nova-header");
      if (headerEl) {
        let statsEl = headerEl.querySelector(".nova-document-stats");
        if (!statsEl) {
          statsEl = headerEl.createEl("div", { cls: "nova-document-stats" });
        }
        if (statsEl && wordCount > 0) {
          statsEl.textContent = `${wordCount} words \u2022 ${headingCount} sections`;
          statsEl.style.cssText = `
						font-size: 0.75em;
						color: var(--text-muted);
						margin-top: var(--size-2-2);
					`;
        }
      }
    } catch (error) {
    }
  }
  async showDocumentInsights(file) {
    try {
      const content = await this.app.vault.read(file);
      const analysis = DocumentAnalyzer.analyzeStructure(content);
      if (analysis.emptyHeadings.length > 0 || analysis.incompleteBullets.length > 0) {
        const insights = [];
        if (analysis.emptyHeadings.length > 0) {
          insights.push(`${analysis.emptyHeadings.length} empty heading${analysis.emptyHeadings.length > 1 ? "s" : ""} to fill`);
        }
        if (analysis.incompleteBullets.length > 0) {
          insights.push(`${analysis.incompleteBullets.length} incomplete bullet${analysis.incompleteBullets.length > 1 ? "s" : ""}`);
        }
        if (insights.length > 0) {
          const bulletList = insights.map((insight) => `\u2022 ${insight}`).join("\n");
          const messageEl = this.chatContainer.createDiv({ cls: "nova-message nova-message-assistant nova-insights" });
          messageEl.style.cssText = `
						margin-bottom: var(--size-4-2);
						padding: var(--size-2-3) var(--size-4-3);
						border-radius: var(--radius-s);
						max-width: 85%;
						background: var(--background-modifier-hover);
						color: var(--text-muted);
						font-size: var(--font-text-size);
						text-align: left;
						margin-left: 0;
						margin-right: auto;
					`;
          const roleEl = messageEl.createEl("div", {
            text: "Nova",
            cls: "nova-message-role"
          });
          roleEl.style.cssText = `
						font-size: var(--font-ui-smaller);
						opacity: 0.7;
						margin-bottom: var(--size-2-1);
						font-weight: 600;
					`;
          const contentEl = messageEl.createEl("div", { cls: "nova-message-content" });
          contentEl.style.cssText = "white-space: pre-line; text-align: left;";
          contentEl.textContent = `I noticed:

${bulletList}

Let me help.`;
          setTimeout(() => {
            this.chatContainer.scrollTop = this.chatContainer.scrollHeight;
          }, 50);
        }
      }
    } catch (error) {
    }
  }
  // Public methods for testing
  async sendMessage(message) {
    const activeFile = this.plugin.documentEngine.getActiveFile();
    const prompt2 = await this.plugin.promptBuilder.buildPromptForMessage(message, activeFile || void 0);
    const command = this.plugin.commandParser.parseCommand(message);
    const validActions = ["add", "edit", "delete", "grammar", "rewrite", "metadata"];
    if (validActions.includes(command.action)) {
      const currentActiveFile = this.plugin.documentEngine.getActiveFile();
      if (activeFile && currentActiveFile && currentActiveFile !== activeFile) {
        throw new Error(`Security violation: Command attempted to edit wrong file. Expected: ${activeFile.basename}, Active: ${currentActiveFile.basename}`);
      }
      switch (command.action) {
        case "add":
          await this.plugin.addCommandHandler.execute(command);
          break;
        case "edit":
          await this.plugin.editCommandHandler.execute(command);
          break;
        case "delete":
          await this.plugin.deleteCommandHandler.execute(command);
          break;
        case "grammar":
          await this.plugin.grammarCommandHandler.execute(command);
          break;
        case "rewrite":
          await this.plugin.rewriteCommandHandler.execute(command);
          break;
        case "metadata":
          await this.plugin.metadataCommandHandler.execute(command);
          break;
      }
    } else {
      await this.plugin.aiProviderManager.complete(prompt2.systemPrompt || "", prompt2.userPrompt);
      if (activeFile) {
        await this.plugin.conversationManager.addAssistantMessage(activeFile, "AI response", { success: true, editType: "none" });
      }
    }
  }
  // REMOVED: Now using ChatRenderer's loadConversationHistory method directly
  /**
   * Update send button enabled/disabled state based on provider availability
   */
  async updateSendButtonState() {
    const currentProviderType = await this.plugin.aiProviderManager.getCurrentProviderType();
    const sendButton = this.inputHandler.sendButton;
    if (sendButton) sendButton.setDisabled(!currentProviderType);
  }
  /**
   * Update privacy indicator icon and tooltip based on current provider
   */
  async updatePrivacyIndicator(privacyIndicator) {
    const currentProviderType = await this.plugin.aiProviderManager.getCurrentProviderType();
    if (currentProviderType) {
      const isLocalProvider = currentProviderType === "ollama";
      const iconName = isLocalProvider ? "lock" : "unlock";
      const tooltip = isLocalProvider ? "Local processing - data stays on your device" : "Cloud processing - data sent to provider";
      (0, import_obsidian11.setIcon)(privacyIndicator, iconName);
      privacyIndicator.setAttribute("aria-label", tooltip);
      privacyIndicator.setAttribute("title", tooltip);
    } else {
      (0, import_obsidian11.setIcon)(privacyIndicator, "help-circle");
      privacyIndicator.setAttribute("aria-label", "No provider selected");
      privacyIndicator.setAttribute("title", "No provider selected");
    }
  }
  /**
   * Filter thinking content from AI responses
   * Removes content between <think>/<thinking> and </think>/<thinking> tags
   */
  filterThinkingContent(content) {
    return content.replace(/<think(?:ing)?[\s\S]*?<\/think(?:ing)?>/gi, "").trim();
  }
  /**
   * Refresh all provider status indicators in the UI
   */
  async refreshProviderStatus() {
    var _a;
    if (this.privacyIndicator) {
      await this.updatePrivacyIndicator(this.privacyIndicator);
    }
    this.updateSendButtonState();
    if ((_a = this.currentProviderDropdown) == null ? void 0 : _a.updateCurrentProvider) {
      await this.currentProviderDropdown.updateCurrentProvider();
    }
  }
  /**
   * Create provider dropdown for all users with their own API keys
   */
  createProviderDropdown(container) {
    const dropdownContainer = container.createDiv({ cls: "nova-provider-dropdown-container" });
    dropdownContainer.style.cssText = `
			position: relative;
			display: flex;
			align-items: center;
		`;
    const providerButton = dropdownContainer.createEl("button", { cls: "nova-provider-button" });
    providerButton.style.cssText = `
			display: flex;
			align-items: center;
			gap: 4px;
			padding: 4px 8px;
			font-size: 0.75em;
			color: var(--text-normal);
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: 4px;
			cursor: pointer;
			transition: background-color 0.2s ease;
		`;
    const providerName = providerButton.createSpan({ text: "Loading..." });
    const dropdownArrow = providerButton.createSpan({ text: "\u25BC" });
    dropdownArrow.style.cssText = `
			font-size: 0.6em;
			margin-left: 4px;
			transition: transform 0.2s ease;
		`;
    const dropdownMenu = dropdownContainer.createDiv({ cls: "nova-provider-dropdown-menu" });
    dropdownMenu.style.cssText = `
			position: absolute;
			top: 100%;
			right: 0;
			min-width: 150px;
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: 6px;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			z-index: 1000;
			display: none;
			overflow: hidden;
		`;
    let isDropdownOpen = false;
    const updateCurrentProvider = async () => {
      const currentProviderType = await this.plugin.aiProviderManager.getCurrentProviderType();
      if (currentProviderType) {
        const displayText = this.getProviderWithModelDisplayName(currentProviderType);
        providerName.setText(displayText);
      } else {
        const currentProviderName = await this.plugin.aiProviderManager.getCurrentProviderName();
        providerName.setText(currentProviderName);
      }
    };
    const toggleDropdown = () => {
      isDropdownOpen = !isDropdownOpen;
      dropdownMenu.style.display = isDropdownOpen ? "block" : "none";
      dropdownArrow.style.transform = isDropdownOpen ? "rotate(180deg)" : "rotate(0deg)";
      if (isDropdownOpen) {
        this.populateProviderDropdown(dropdownMenu);
      }
    };
    const closeDropdown = (event) => {
      if (!dropdownContainer.contains(event.target)) {
        isDropdownOpen = false;
        dropdownMenu.style.display = "none";
        dropdownArrow.style.transform = "rotate(0deg)";
      }
    };
    providerButton.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleDropdown();
    });
    this.addTrackedEventListener(document, "click", closeDropdown);
    updateCurrentProvider();
    this.currentProviderDropdown = {
      updateCurrentProvider,
      cleanup: () => document.removeEventListener("click", closeDropdown)
    };
  }
  /**
   * Get available models for a provider type
   */
  getAvailableModels(providerType) {
    return getAvailableModels(providerType, this.plugin.settings);
  }
  /**
   * Get current model for a provider type
   */
  getCurrentModel(providerType) {
    var _a;
    const providers = this.plugin.settings.aiProviders;
    const currentModel = (_a = providers[providerType]) == null ? void 0 : _a.model;
    if (currentModel) {
      return currentModel;
    }
    const availableModels = this.getAvailableModels(providerType);
    return availableModels.length > 0 ? availableModels[0].value : "";
  }
  /**
   * Get model display name from model value
   */
  getModelDisplayName(providerType, modelValue) {
    const models = this.getAvailableModels(providerType);
    const model = models.find((m) => m.value === modelValue);
    return model ? model.label : modelValue;
  }
  /**
   * Switch to a specific model for a provider
   */
  async switchToModel(providerType, modelValue) {
    const currentProviderType = await this.plugin.aiProviderManager.getCurrentProviderType();
    const isCurrentProvider = currentProviderType === providerType;
    const providers = this.plugin.settings.aiProviders;
    providers[providerType].model = modelValue;
    await this.plugin.saveSettings();
    if (isCurrentProvider) {
      const modelName = this.getModelDisplayName(providerType, modelValue);
      const providerName = this.getProviderDisplayName(providerType);
      this.addSuccessMessage(`\u2713 Switched to ${providerName} ${modelName}`);
    } else {
      await this.switchToProvider(providerType);
    }
    if (this.currentProviderDropdown) {
      this.currentProviderDropdown.updateCurrentProvider();
    }
  }
  /**
   * Populate provider dropdown with available providers
   */
  async populateProviderDropdown(dropdownMenu) {
    var _a;
    dropdownMenu.empty();
    const allowedProviders = this.plugin.aiProviderManager.getAllowedProviders();
    const currentProviderName = await this.plugin.aiProviderManager.getCurrentProviderName();
    for (const providerType of allowedProviders) {
      if (providerType === "none") continue;
      const providers = this.plugin.settings.aiProviders;
      const hasApiKey = (_a = providers[providerType]) == null ? void 0 : _a.apiKey;
      if (!hasApiKey && providerType !== "ollama") continue;
      const models = this.getAvailableModels(providerType);
      const currentModel = this.getCurrentModel(providerType);
      const displayName = this.getProviderDisplayName(providerType);
      const isCurrent = displayName === currentProviderName;
      const providerContainer = dropdownMenu.createDiv({ cls: "nova-provider-container" });
      const providerItem = providerContainer.createDiv({ cls: "nova-provider-dropdown-item" });
      providerItem.style.cssText = `
				padding: 8px 12px;
				cursor: pointer;
				display: flex;
				align-items: center;
				gap: 8px;
				font-size: 0.85em;
				color: var(--text-normal);
				transition: background-color 0.2s ease;
				position: relative;
			`;
      const providerDot = providerItem.createSpan();
      providerDot.style.cssText = `
				width: 8px;
				height: 8px;
				border-radius: 50%;
				background: ${this.getProviderColor(providerType)};
			`;
      const nameSpan = providerItem.createSpan({ text: displayName });
      nameSpan.style.flex = "1";
      let expandArrow = null;
      if (models.length > 0) {
        expandArrow = providerItem.createSpan({ text: "\u25B6" });
        expandArrow.style.cssText = `
					font-size: 0.6em;
					transition: transform 0.2s ease;
					color: var(--text-muted);
				`;
      }
      if (isCurrent) {
        providerItem.style.background = "var(--background-modifier-hover)";
        nameSpan.style.fontWeight = "bold";
      }
      let modelsMenu = null;
      let isExpanded = false;
      if (models.length > 0) {
        modelsMenu = providerContainer.createDiv({ cls: "nova-models-submenu" });
        modelsMenu.style.cssText = `
					display: none;
					background: var(--background-primary);
					border-left: 2px solid ${this.getProviderColor(providerType)};
					margin-left: 16px;
				`;
        for (const model of models) {
          const modelItem = modelsMenu.createDiv({ cls: "nova-model-item" });
          modelItem.style.cssText = `
						padding: 6px 12px;
						cursor: pointer;
						font-size: 0.8em;
						color: var(--text-normal);
						transition: background-color 0.2s ease;
						display: flex;
						align-items: center;
						gap: 8px;
					`;
          const modelDot = modelItem.createSpan();
          modelDot.style.cssText = `
						width: 4px;
						height: 4px;
						border-radius: 50%;
						background: ${model.value === currentModel ? this.getProviderColor(providerType) : "var(--text-muted)"};
					`;
          const modelName = modelItem.createSpan({ text: model.label });
          if (model.value === currentModel) {
            modelName.style.fontWeight = "bold";
          }
          modelItem.addEventListener("click", async (e) => {
            e.stopPropagation();
            await this.switchToModel(providerType, model.value);
            dropdownMenu.style.display = "none";
          });
          modelItem.addEventListener("mouseenter", () => {
            modelItem.style.background = "var(--background-modifier-border-hover)";
          });
          modelItem.addEventListener("mouseleave", () => {
            modelItem.style.background = "transparent";
          });
        }
      }
      providerItem.addEventListener("click", async (e) => {
        if (models.length > 0) {
          e.stopPropagation();
          isExpanded = !isExpanded;
          if (modelsMenu) {
            modelsMenu.style.display = isExpanded ? "block" : "none";
          }
          if (expandArrow) {
            expandArrow.style.transform = isExpanded ? "rotate(90deg)" : "rotate(0deg)";
          }
        } else {
          if (!isCurrent) {
            await this.switchToProvider(providerType);
            dropdownMenu.style.display = "none";
            if (this.currentProviderDropdown) {
              this.currentProviderDropdown.updateCurrentProvider();
            }
          }
        }
      });
      providerItem.addEventListener("mouseenter", () => {
        if (!isCurrent) {
          providerItem.style.background = "var(--background-modifier-border-hover)";
        }
      });
      providerItem.addEventListener("mouseleave", () => {
        if (!isCurrent && !isExpanded) {
          providerItem.style.background = "transparent";
        }
      });
    }
  }
  /**
   * Create a message with a clean icon (replaces emoji)
   */
  createIconMessage(iconName, message) {
    const iconSvg = this.getObsidianIcon(iconName, "14px");
    return `<span style="display: inline-flex; align-items: center; gap: 6px;">${iconSvg}<span>${message}</span></span>`;
  }
  /**
   * Create an inline icon for use in innerHTML
   */
  createInlineIcon(iconName, size = "14px") {
    return this.getObsidianIcon(iconName, size);
  }
  /**
   * Get Obsidian-style icon SVG
   */
  getObsidianIcon(iconName, size = "14px") {
    const icons = {
      "zap": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M13 2L3 14H12L11 22L21 10H12L13 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "refresh-cw": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M3 12A9 9 0 0 0 21 12A9 9 0 0 0 3 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M21 12L17 8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M21 12L17 16" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "edit": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M11 4H4A2 2 0 0 0 2 6V20A2 2 0 0 0 4 22H18A2 2 0 0 0 20 20V13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M18.5 2.5A2.12 2.12 0 0 1 21 5L12 14L8 15L9 11L18.5 2.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "help-circle": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
				<path d="M9.09 9A3 3 0 0 1 12 6A3 3 0 0 1 15 9C15 10.5 12 11 12 11" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<circle cx="12" cy="17" r="1" fill="currentColor"/>
			</svg>`,
      "book-open": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M2 3H8A4 4 0 0 1 12 7A4 4 0 0 1 16 3H22" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M2 3V19A2 2 0 0 0 4 21H9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M22 3V19A2 2 0 0 1 20 21H15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M12 7V21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "more-horizontal": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<circle cx="12" cy="12" r="1" fill="currentColor"/>
				<circle cx="19" cy="12" r="1" fill="currentColor"/>
				<circle cx="5" cy="12" r="1" fill="currentColor"/>
			</svg>`,
      "file-text": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M14 2H6A2 2 0 0 0 4 4V20A2 2 0 0 0 6 22H18A2 2 0 0 0 20 20V8L14 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M14 2V8H20" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M16 13H8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M16 17H8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M10 9H8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "x": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M18 6L6 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "check-circle": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
				<path d="M9 12L11 14L16 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "x-circle": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
				<path d="M15 9L9 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M9 9L15 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "trash-2": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M3 6H5H21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M8 6V4A2 2 0 0 1 10 2H14A2 2 0 0 1 16 4V6M19 6V20A2 2 0 0 1 17 22H7A2 2 0 0 1 5 20V6H19Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M10 11V17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M14 11V17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`
    };
    return icons[iconName] || icons["help-circle"];
  }
  /**
   * Get display name for provider
   */
  getProviderDisplayName(providerType) {
    const names = {
      "claude": "Anthropic",
      "openai": "OpenAI",
      "google": "Google",
      "ollama": "Ollama",
      "none": "None"
    };
    return names[providerType] || providerType;
  }
  /**
   * Get display name for header (just model name if available, otherwise provider name)
   */
  getProviderWithModelDisplayName(providerType) {
    const models = this.getAvailableModels(providerType);
    if (models.length > 0) {
      const currentModel = this.getCurrentModel(providerType);
      return this.getModelDisplayName(providerType, currentModel);
    }
    return this.getProviderDisplayName(providerType);
  }
  /**
   * Get color for provider type
   */
  getProviderColor(providerType) {
    const colors = {
      "claude": "var(--color-orange)",
      "openai": "var(--color-green)",
      "google": "var(--color-blue)",
      "ollama": "var(--color-purple)",
      "none": "var(--text-muted)"
    };
    return colors[providerType] || "var(--text-success)";
  }
  /**
   * Switch to a different provider and update conversation context
   */
  async switchToProvider(providerType) {
    try {
      this.addSuccessMessage(`\u2713 Switched to ${this.getProviderWithModelDisplayName(providerType)}`);
      const platform = import_obsidian11.Platform.isMobile ? "mobile" : "desktop";
      this.plugin.settings.platformSettings[platform].primaryProvider = providerType;
      await this.plugin.saveSettings();
      this.plugin.aiProviderManager.updateSettings(this.plugin.settings);
      setTimeout(() => this.refreshProviderStatus(), 100);
    } catch (error) {
      this.addErrorMessage(`\u274C Failed to switch to ${this.getProviderWithModelDisplayName(providerType)}`);
    }
  }
  /**
   * Check if the command button should be shown based on feature availability and user preference
   */
  shouldShowCommandButton() {
    if (!this.plugin.featureManager.isFeatureEnabled("commands")) {
      return false;
    }
    return this.plugin.settings.showCommandButton;
  }
  /**
   * Refresh all Supernova-gated UI elements when license status changes
   */
  refreshSupernovaUI() {
    this.refreshCommandButton();
  }
  /**
   * Refresh the command button visibility when settings change
   */
  refreshCommandButton() {
    if (this.inputHandler) {
      this.inputHandler.refreshCommandButton();
    }
  }
  /**
   * Update input row layout when command button visibility changes
   */
  updateInputRowLayout() {
  }
  /**
   * Execute add command with streaming support
   */
  async executeAddCommandWithStreaming(command) {
    try {
      const editor = this.plugin.documentEngine.getActiveEditor();
      if (!editor) {
        return {
          success: false,
          error: "No active editor found"
        };
      }
      const cursorPosition = this.plugin.documentEngine.getCursorPosition();
      if (!cursorPosition) {
        return {
          success: false,
          error: "Could not determine cursor position"
        };
      }
      const { updateStream, stopStream } = this.streamingManager.startStreaming(
        editor,
        cursorPosition
      );
      try {
        const result = await this.plugin.addCommandHandler.execute(command, (chunk, isComplete) => {
          updateStream(chunk, isComplete);
        });
        stopStream();
        return result;
      } catch (error) {
        stopStream();
        throw error;
      }
    } catch (error) {
      console.error("Error in streaming add command:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Execute edit command with streaming support
   */
  async executeEditCommandWithStreaming(command) {
    try {
      const editor = this.plugin.documentEngine.getActiveEditor();
      if (!editor) {
        return {
          success: false,
          error: "No active editor found"
        };
      }
      const cursorPosition = this.plugin.documentEngine.getCursorPosition();
      if (!cursorPosition) {
        return {
          success: false,
          error: "Could not determine cursor position"
        };
      }
      const { updateStream, stopStream } = this.streamingManager.startStreaming(
        editor,
        cursorPosition
      );
      try {
        const result = await this.plugin.editCommandHandler.execute(command, (chunk, isComplete) => {
          updateStream(chunk, isComplete);
        });
        stopStream();
        return result;
      } catch (error) {
        stopStream();
        throw error;
      }
    } catch (error) {
      console.error("Error in streaming edit command:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Execute rewrite command with streaming support
   */
  async executeRewriteCommandWithStreaming(command) {
    try {
      const editor = this.plugin.documentEngine.getActiveEditor();
      if (!editor) {
        return {
          success: false,
          error: "No active editor found"
        };
      }
      const cursorPosition = this.plugin.documentEngine.getCursorPosition();
      if (!cursorPosition) {
        return {
          success: false,
          error: "Could not determine cursor position"
        };
      }
      const { updateStream, stopStream } = this.streamingManager.startStreaming(
        editor,
        cursorPosition
      );
      try {
        const result = await this.plugin.rewriteCommandHandler.execute(command, (chunk, isComplete) => {
          updateStream(chunk, isComplete);
        });
        stopStream();
        return result;
      } catch (error) {
        stopStream();
        throw error;
      }
    } catch (error) {
      console.error("Error in streaming rewrite command:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Execute grammar command with streaming support
   */
  async executeGrammarCommandWithStreaming(command) {
    try {
      const editor = this.plugin.documentEngine.getActiveEditor();
      if (!editor) {
        return {
          success: false,
          error: "No active editor found"
        };
      }
      const cursorPosition = this.plugin.documentEngine.getCursorPosition();
      if (!cursorPosition) {
        return {
          success: false,
          error: "Could not determine cursor position"
        };
      }
      const { updateStream, stopStream } = this.streamingManager.startStreaming(
        editor,
        cursorPosition
      );
      try {
        const result = await this.plugin.grammarCommandHandler.execute(command, (chunk, isComplete) => {
          updateStream(chunk, isComplete);
        });
        stopStream();
        return result;
      } catch (error) {
        stopStream();
        throw error;
      }
    } catch (error) {
      console.error("Error in streaming grammar command:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Add files to persistent context
   */
  async addFilesToContext(filenames) {
    if (!this.currentFile) {
      new import_obsidian11.Notice("No file is open. Please open a file to add context.", 3e3);
      return;
    }
    const addedFiles = [];
    const alreadyExistingFiles = [];
    const notFoundFiles = [];
    const existingPersistent = this.multiDocHandler.getPersistentContext(this.currentFile.path) || [];
    const updatedPersistent = [...existingPersistent];
    for (const filename of filenames) {
      let file = this.app.vault.getAbstractFileByPath(filename);
      if (!file || !(file instanceof import_obsidian11.TFile)) {
        file = this.app.vault.getAbstractFileByPath(filename + ".md");
      }
      if (!file || !(file instanceof import_obsidian11.TFile)) {
        const files = this.app.vault.getMarkdownFiles();
        file = files.find(
          (f) => f.basename === filename || f.name === filename || f.path.endsWith("/" + filename) || f.path.endsWith("/" + filename + ".md")
        ) || null;
      }
      if (file instanceof import_obsidian11.TFile) {
        const exists = updatedPersistent.some((ref) => ref.file.path === file.path);
        if (!exists) {
          updatedPersistent.push({
            file,
            property: void 0,
            isPersistent: true,
            rawReference: `+[[${file.basename}]]`
          });
          addedFiles.push(file.basename);
        } else {
          alreadyExistingFiles.push(file.basename);
        }
      } else {
        notFoundFiles.push(filename);
      }
    }
    if (addedFiles.length > 0 || alreadyExistingFiles.length > 0) {
      const handler = this.multiDocHandler;
      handler.persistentContext.set(this.currentFile.path, updatedPersistent);
    }
    await this.refreshContext();
    const totalFiles = filenames.length;
    const messages = [];
    if (addedFiles.length > 0) {
      if (addedFiles.length === 1) {
        messages.push(`Added "${addedFiles[0]}" to context`);
      } else {
        messages.push(`Added ${addedFiles.length} files to context`);
      }
    }
    if (alreadyExistingFiles.length > 0) {
      if (alreadyExistingFiles.length === 1) {
        messages.push(`"${alreadyExistingFiles[0]}" already in context`);
      } else {
        messages.push(`${alreadyExistingFiles.length} already in context`);
      }
    }
    if (notFoundFiles.length > 0) {
      if (notFoundFiles.length === 1) {
        messages.push(`"${notFoundFiles[0]}" not found`);
      } else {
        messages.push(`${notFoundFiles.length} not found`);
      }
    }
    if (messages.length > 0) {
      const combinedMessage = messages.join(", ");
      const duration = notFoundFiles.length > 0 ? 3e3 : 2e3;
      new import_obsidian11.Notice(combinedMessage, duration);
    }
  }
  /**
   * Get contextual thinking phrase based on command type or message content
   */
  getContextualThinkingPhrase(command, messageText) {
    if (command) {
      switch (command.action) {
        case "grammar":
        case "edit":
          return this.getRandomPhrase("improve");
        case "add":
          return this.getRandomPhrase("generate");
        case "rewrite":
          return this.getRandomPhrase("improve");
        case "delete":
          return this.getRandomPhrase("process");
        default:
          return this.getRandomPhrase("chat");
      }
    } else if (messageText) {
      if (messageText.includes("improve") || messageText.includes("fix") || messageText.includes("grammar")) {
        return this.getRandomPhrase("improve");
      } else if (messageText.includes("add") || messageText.includes("create") || messageText.includes("write")) {
        return this.getRandomPhrase("generate");
      } else if (messageText.includes("switch") || messageText.includes("/")) {
        return this.getRandomPhrase("switch");
      }
    }
    return this.getRandomPhrase("chat");
  }
  /**
   * Get random phrase from specified category
   */
  getRandomPhrase(category) {
    const phrases = {
      "improve": ["refining...", "polishing...", "enhancing...", "crafting...", "perfecting...", "smoothing...", "sharpening...", "elevating...", "fine-tuning...", "sculpting..."],
      "generate": ["thinking...", "crafting...", "developing...", "composing...", "writing...", "creating...", "formulating...", "building...", "constructing...", "drafting..."],
      "switch": ["connecting...", "switching...", "updating...", "configuring...", "setting up...", "syncing...", "preparing...", "activating...", "initializing...", "establishing..."],
      "process": ["processing...", "analyzing...", "working...", "computing...", "calculating...", "examining...", "evaluating...", "interpreting...", "reviewing...", "scanning..."],
      "chat": ["thinking...", "processing...", "considering...", "analyzing...", "understanding...", "contemplating...", "exploring...", "evaluating...", "working on it...", "composing..."]
    };
    const categoryPhrases = phrases[category] || phrases.chat;
    return categoryPhrases[Math.floor(Math.random() * categoryPhrases.length)];
  }
  /**
   * Start phrase rotation animation for thinking text
   */
  startThinkingPhraseRotation(textEl, command, messageText) {
    const rotationInterval = setInterval(() => {
      const newPhrase = this.getContextualThinkingPhrase(command, messageText);
      textEl.textContent = newPhrase;
    }, 2e3);
    textEl.rotationInterval = rotationInterval;
  }
  /**
   * Stop phrase rotation animation and cleanup
   */
  stopThinkingPhraseRotation(textEl) {
    if (textEl.rotationInterval) {
      clearInterval(textEl.rotationInterval);
      textEl.rotationInterval = null;
    }
  }
};
_NovaSidebarView.CONTEXT_PREVIEW_DEBOUNCE_MS = 300;
_NovaSidebarView.SCROLL_DELAY_MS = 50;
_NovaSidebarView.FOCUS_DELAY_MS = 150;
_NovaSidebarView.HOVER_TIMEOUT_MS = 150;
_NovaSidebarView.NOTICE_DURATION_MS = 5e3;
var NovaSidebarView = _NovaSidebarView;

// src/ai/providers/claude.ts
var import_obsidian12 = require("obsidian");
var ClaudeProvider = class {
  constructor(config) {
    this.name = "Claude (Anthropic)";
    this.cachedModels = null;
    this.config = config;
  }
  updateConfig(config) {
    this.config = config;
  }
  async isAvailable() {
    return !!this.config.apiKey;
  }
  async generateText(prompt2, options) {
    const messages = [{ role: "user", content: prompt2 }];
    return this.chatCompletion(messages, options);
  }
  async *generateTextStream(prompt2, options) {
    const messages = [{ role: "user", content: prompt2 }];
    yield* this.chatCompletionStream(messages, options);
  }
  async chatCompletion(messages, options) {
    if (!this.config.apiKey) {
      throw new Error("Claude API key not configured");
    }
    const requestBody = JSON.stringify({
      model: (options == null ? void 0 : options.model) || this.config.model || "claude-3-5-haiku-latest",
      max_tokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3,
      temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
      system: options == null ? void 0 : options.systemPrompt,
      messages: messages.map((msg) => ({
        role: msg.role === "assistant" ? "assistant" : "user",
        content: msg.content
      }))
    });
    const maxRetries = 3;
    const baseDelay = 1e3;
    for (let attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        const response = await (0, import_obsidian12.requestUrl)({
          url: "https://api.anthropic.com/v1/messages",
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "x-api-key": this.config.apiKey,
            "anthropic-version": "2023-06-01"
          },
          body: requestBody
        });
        if (response.status === 200) {
          const data = response.json;
          return data.content[0].text;
        }
        if (response.status >= 500 && attempt < maxRetries) {
          const delay = baseDelay * Math.pow(2, attempt);
          await new Promise((resolve) => setTimeout(resolve, delay));
          continue;
        }
        throw new Error(`Claude API error: ${response.status} - ${response.text}`);
      } catch (error) {
        if (attempt < maxRetries && error instanceof Error && (error.message.includes("Network error") || error.message.includes("Failed to connect"))) {
          const delay = baseDelay * Math.pow(2, attempt);
          await new Promise((resolve) => setTimeout(resolve, delay));
          continue;
        }
        if (error instanceof Error && error.message.startsWith("Claude API error:")) {
          throw error;
        }
        throw new Error(`Failed to connect to Claude API: ${error instanceof Error ? error.message : "Network error"}`);
      }
    }
    throw new Error("Claude API: Maximum retries exceeded");
  }
  async complete(systemPrompt, userPrompt, options) {
    const messages = [{ role: "user", content: userPrompt }];
    const completeOptions = { ...options, systemPrompt };
    return this.chatCompletion(messages, completeOptions);
  }
  async *chatCompletionStream(messages, options) {
    const result = await this.chatCompletion(messages, options);
    const chunkSize = 3;
    for (let i = 0; i < result.length; i += chunkSize) {
      const chunk = result.slice(i, i + chunkSize);
      yield { content: chunk, done: false };
      await new Promise((resolve) => setTimeout(resolve, 20));
    }
    yield { content: "", done: true };
  }
  /**
   * Fetch available models from Claude API
   */
  async getAvailableModels() {
    if (!this.config.apiKey) {
      throw new Error("Claude API key not configured");
    }
    if (this.cachedModels) {
      return this.cachedModels;
    }
    try {
      const response = await (0, import_obsidian12.requestUrl)({
        url: "https://api.anthropic.com/v1/messages",
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-api-key": this.config.apiKey,
          "anthropic-version": "2023-06-01"
        },
        body: JSON.stringify({
          model: "claude-3-5-haiku-latest",
          max_tokens: 1,
          messages: [{ role: "user", content: "test" }]
        })
      });
      if (response.status !== 200) {
        throw new Error(`API key validation failed: ${response.status} - ${response.text}`);
      }
      const models = [
        "claude-opus-4-20250514",
        "claude-sonnet-4-20250514",
        "claude-3-7-sonnet-latest",
        "claude-3-5-sonnet-latest",
        "claude-3-5-haiku-latest"
      ];
      this.cachedModels = models;
      return models;
    } catch (error) {
      throw new Error(`Failed to fetch Claude models: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Clear cached models
   */
  clearModelCache() {
    this.cachedModels = null;
  }
};

// src/ai/providers/openai.ts
var OpenAIProvider = class {
  constructor(config) {
    this.name = "OpenAI";
    this.cachedModels = null;
    this.config = config;
  }
  updateConfig(config) {
    this.config = config;
  }
  async isAvailable() {
    return !!this.config.apiKey;
  }
  async generateText(prompt2, options) {
    const messages = [{ role: "user", content: prompt2 }];
    return this.chatCompletion(messages, options);
  }
  async *generateTextStream(prompt2, options) {
    const messages = [{ role: "user", content: prompt2 }];
    yield* this.chatCompletionStream(messages, options);
  }
  async chatCompletion(messages, options) {
    if (!this.config.apiKey) {
      throw new Error("OpenAI API key not configured");
    }
    const requestMessages = [...messages];
    if (options == null ? void 0 : options.systemPrompt) {
      requestMessages.unshift({ role: "system", content: options.systemPrompt });
    }
    const baseUrl = this.config.baseUrl || "https://api.openai.com/v1";
    const endpoint = baseUrl.endsWith("/chat/completions") ? baseUrl : `${baseUrl}/chat/completions`;
    const requestBody = JSON.stringify({
      model: (options == null ? void 0 : options.model) || this.config.model || "gpt-3.5-turbo",
      messages: requestMessages,
      max_tokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3,
      temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7
    });
    const maxRetries = 3;
    const baseDelay = 1e3;
    for (let attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        const response = await fetch(endpoint, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${this.config.apiKey}`
          },
          body: requestBody
        });
        if (response.ok) {
          const data = await response.json();
          return data.choices[0].message.content;
        }
        if (response.status >= 500 && attempt < maxRetries) {
          const delay = baseDelay * Math.pow(2, attempt);
          await new Promise((resolve) => setTimeout(resolve, delay));
          continue;
        }
        throw new Error(`OpenAI API error: ${response.statusText}`);
      } catch (error) {
        if (attempt < maxRetries && error instanceof Error && error.message.includes("fetch")) {
          const delay = baseDelay * Math.pow(2, attempt);
          await new Promise((resolve) => setTimeout(resolve, delay));
          continue;
        }
        throw error;
      }
    }
    throw new Error("OpenAI API: Maximum retries exceeded");
  }
  async complete(systemPrompt, userPrompt, options) {
    const messages = [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt }
    ];
    return this.chatCompletion(messages, options);
  }
  async *chatCompletionStream(messages, options) {
    var _a, _b, _c, _d;
    if (!this.config.apiKey) {
      throw new Error("OpenAI API key not configured");
    }
    const requestMessages = [...messages];
    if (options == null ? void 0 : options.systemPrompt) {
      requestMessages.unshift({ role: "system", content: options.systemPrompt });
    }
    const baseUrl = this.config.baseUrl || "https://api.openai.com/v1";
    const endpoint = baseUrl.endsWith("/chat/completions") ? baseUrl : `${baseUrl}/chat/completions`;
    const response = await fetch(endpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.config.apiKey}`
      },
      body: JSON.stringify({
        model: (options == null ? void 0 : options.model) || this.config.model || "gpt-3.5-turbo",
        messages: requestMessages,
        max_tokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3,
        temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
        stream: true
      })
    });
    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.statusText}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("Failed to get response reader");
    }
    const decoder = new TextDecoder();
    let buffer = "";
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        buffer += decoder.decode(value, { stream: true });
        const lines = buffer.split("\n");
        buffer = lines.pop() || "";
        for (const line of lines) {
          if (line.startsWith("data: ")) {
            const data = line.slice(6);
            if (data === "[DONE]") {
              yield { content: "", done: true };
              return;
            }
            try {
              const parsed = JSON.parse(data);
              const content = (_d = (_c = (_b = parsed.choices) == null ? void 0 : _b[0]) == null ? void 0 : _c.delta) == null ? void 0 : _d.content;
              if (content) {
                const chunkSize = 3;
                for (let i = 0; i < content.length; i += chunkSize) {
                  const chunk = content.slice(i, i + chunkSize);
                  yield { content: chunk, done: false };
                  await new Promise((resolve) => setTimeout(resolve, 20));
                }
              }
            } catch (e) {
            }
          }
        }
      }
    } finally {
      reader.releaseLock();
    }
    yield { content: "", done: true };
  }
  /**
   * Fetch available models from OpenAI API
   */
  async getAvailableModels() {
    if (!this.config.apiKey) {
      throw new Error("OpenAI API key not configured");
    }
    if (this.cachedModels) {
      return this.cachedModels;
    }
    try {
      const baseUrl = this.config.baseUrl || "https://api.openai.com/v1";
      const endpoint = baseUrl.endsWith("/models") ? baseUrl : `${baseUrl}/models`;
      const response = await fetch(endpoint, {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${this.config.apiKey}`
        }
      });
      if (!response.ok) {
        throw new Error(`API request failed: ${response.statusText}`);
      }
      const data = await response.json();
      const models = [
        "gpt-4.1-2025-04-14",
        "gpt-4.1-mini-2025-04-14",
        "gpt-4.1-nano-2025-04-14",
        "gpt-4o",
        "gpt-4o-mini"
      ];
      this.cachedModels = models;
      return models;
    } catch (error) {
      throw new Error(`Failed to fetch OpenAI models: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Clear cached models
   */
  clearModelCache() {
    this.cachedModels = null;
  }
};

// src/ai/providers/google.ts
var GoogleProvider = class {
  constructor(config) {
    this.name = "Google (Gemini)";
    this.cachedModels = null;
    this.config = config;
  }
  updateConfig(config) {
    this.config = config;
  }
  async isAvailable() {
    return !!this.config.apiKey;
  }
  async generateText(prompt2, options) {
    const messages = [{ role: "user", content: prompt2 }];
    return this.chatCompletion(messages, options);
  }
  async *generateTextStream(prompt2, options) {
    const messages = [{ role: "user", content: prompt2 }];
    yield* this.chatCompletionStream(messages, options);
  }
  formatMessagesForGemini(messages) {
    const contents = [];
    for (const message of messages) {
      const role = message.role === "assistant" ? "model" : "user";
      contents.push({
        role,
        parts: [{ text: message.content }]
      });
    }
    if (contents.length === 0) {
      throw new Error("No messages provided for Google API");
    }
    return contents;
  }
  async chatCompletion(messages, options) {
    if (!this.config.apiKey) {
      throw new Error("Google API key not configured");
    }
    const model = (options == null ? void 0 : options.model) || this.config.model || "gemini-2.0-flash";
    const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${this.config.apiKey}`;
    const requestBody = {
      contents: this.formatMessagesForGemini(messages),
      generationConfig: {
        temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
        maxOutputTokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
      }
    };
    if ((options == null ? void 0 : options.systemPrompt) && options.systemPrompt.trim()) {
      requestBody.systemInstruction = {
        parts: [{ text: options.systemPrompt }]
      };
    }
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(requestBody)
    });
    if (!response.ok) {
      const errorText = await response.text();
      let errorMessage = "";
      try {
        const errorData = JSON.parse(errorText);
        if (errorData.error) {
          const code = errorData.error.code || response.status;
          const message = errorData.error.message || errorData.error.status || response.statusText;
          errorMessage = `[${code}]: ${message}`;
          if (response.status === 400) {
            errorMessage += " (Check request format or model name)";
          } else if (response.status === 401) {
            errorMessage += " (Check API key in settings)";
          } else if (response.status === 404) {
            errorMessage += " (Model may not be available)";
          } else if (response.status === 429) {
            errorMessage += " (Rate limit exceeded)";
          }
        } else {
          errorMessage = `[${response.status}]: ${errorText}`;
        }
      } catch (e) {
        errorMessage = `[${response.status}]: ${errorText || response.statusText}`;
      }
      console.error("Google API Error Details:", {
        status: response.status,
        statusText: response.statusText,
        errorText,
        requestBody,
        model,
        url
      });
      throw new Error(`Google API error ${errorMessage}`);
    }
    const data = await response.json();
    if (!data.candidates || data.candidates.length === 0) {
      if (data.error) {
        throw new Error(`Google API error: ${data.error.message || JSON.stringify(data.error)}`);
      }
      throw new Error("Google API returned no candidates");
    }
    if (data.candidates[0].finishReason === "SAFETY" || data.candidates[0].finishReason === "BLOCKED") {
      throw new Error("Google API blocked the response due to safety filters");
    }
    if (data.candidates[0].finishReason === "MAX_TOKENS" && (!data.candidates[0].content || !data.candidates[0].content.parts || data.candidates[0].content.parts.length === 0)) {
      throw new Error('API hit token limit before generating any content. Please increase "Default Max Tokens" in settings.');
    }
    if (data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts.length > 0) {
      const text = data.candidates[0].content.parts[0].text;
      if (data.candidates[0].finishReason === "MAX_TOKENS") {
        throw new Error('Response was truncated due to token limit. Please increase "Default Max Tokens" in settings.');
      }
      if (!text || text.trim().length === 0) {
        console.error("Google API returned empty text content");
        throw new Error("Google API returned empty text content");
      }
      return text;
    }
    throw new Error("Google API returned empty response");
  }
  async complete(systemPrompt, userPrompt, options) {
    const messages = [{ role: "user", content: userPrompt }];
    const completeOptions = { ...options, systemPrompt };
    return this.chatCompletion(messages, completeOptions);
  }
  async *chatCompletionStream(messages, options) {
    var _a, _b, _c, _d, _e, _f;
    if (!this.config.apiKey) {
      throw new Error("Google API key not configured");
    }
    const model = (options == null ? void 0 : options.model) || this.config.model || "gemini-2.0-flash";
    const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:streamGenerateContent?key=${this.config.apiKey}`;
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        contents: this.formatMessagesForGemini(messages),
        generationConfig: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          maxOutputTokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        },
        ...(options == null ? void 0 : options.systemPrompt) && options.systemPrompt.trim() ? {
          systemInstruction: {
            parts: [{ text: options.systemPrompt }]
          }
        } : {}
      })
    });
    if (!response.ok) {
      const errorText = await response.text();
      let errorMessage = "";
      try {
        const errorData = JSON.parse(errorText);
        if (errorData.error) {
          const code = errorData.error.code || response.status;
          const message = errorData.error.message || errorData.error.status || response.statusText;
          errorMessage = `[${code}]: ${message}`;
        } else {
          errorMessage = `[${response.status}]: ${errorText}`;
        }
      } catch (e) {
        errorMessage = `[${response.status}]: ${errorText || response.statusText}`;
      }
      throw new Error(`Google API error ${errorMessage}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("Failed to get response reader");
    }
    const decoder = new TextDecoder();
    let buffer = "";
    let jsonBuffer = "";
    let braceCount = 0;
    let inJson = false;
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        buffer += decoder.decode(value, { stream: true });
        for (let i = 0; i < buffer.length; i++) {
          const char = buffer[i];
          if (char === "{") {
            if (!inJson) {
              inJson = true;
              jsonBuffer = "";
            }
            braceCount++;
            jsonBuffer += char;
          } else if (char === "}") {
            jsonBuffer += char;
            braceCount--;
            if (braceCount === 0 && inJson) {
              try {
                const parsed = JSON.parse(jsonBuffer);
                const text = (_f = (_e = (_d = (_c = (_b = parsed.candidates) == null ? void 0 : _b[0]) == null ? void 0 : _c.content) == null ? void 0 : _d.parts) == null ? void 0 : _e[0]) == null ? void 0 : _f.text;
                if (text) {
                  const chunkSize = 3;
                  for (let i2 = 0; i2 < text.length; i2 += chunkSize) {
                    const chunk = text.slice(i2, i2 + chunkSize);
                    yield { content: chunk, done: false };
                    await new Promise((resolve) => setTimeout(resolve, 20));
                  }
                }
              } catch (e) {
              }
              inJson = false;
              jsonBuffer = "";
            }
          } else if (inJson) {
            jsonBuffer += char;
          }
        }
        buffer = "";
      }
    } finally {
      reader.releaseLock();
    }
    yield { content: "", done: true };
  }
  /**
   * Fetch available models from Google API
   */
  async getAvailableModels() {
    if (!this.config.apiKey) {
      throw new Error("Google API key not configured");
    }
    if (this.cachedModels) {
      return this.cachedModels;
    }
    try {
      const url = `https://generativelanguage.googleapis.com/v1beta/models?key=${this.config.apiKey}`;
      const response = await fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        }
      });
      if (!response.ok) {
        throw new Error(`API request failed: ${response.statusText}`);
      }
      const data = await response.json();
      const models = [
        "gemini-2.5-flash-preview-04-17",
        "gemini-2.5-pro-preview-03-25",
        "gemini-2.0-flash",
        "gemini-2.0-flash-lite"
      ];
      this.cachedModels = models;
      return models;
    } catch (error) {
      throw new Error(`Failed to fetch Google models: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Clear cached models
   */
  clearModelCache() {
    this.cachedModels = null;
  }
};

// src/ai/providers/ollama.ts
var OllamaProvider = class {
  constructor(config) {
    this.name = "Ollama (Local)";
    this.config = config;
  }
  updateConfig(config) {
    this.config = config;
  }
  async isAvailable() {
    if (!this.config.model) return false;
    try {
      const baseUrl = this.config.baseUrl || "http://localhost:11434";
      const response = await fetch(`${baseUrl}/api/tags`, {
        method: "GET",
        headers: { "Content-Type": "application/json" }
      });
      return response.ok;
    } catch (e) {
      return false;
    }
  }
  async generateText(prompt2, options) {
    const baseUrl = this.config.baseUrl || "http://localhost:11434";
    const model = (options == null ? void 0 : options.model) || this.config.model;
    if (!model) {
      throw new Error("Ollama model must be specified");
    }
    const response = await fetch(`${baseUrl}/api/generate`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model,
        prompt: prompt2,
        stream: false,
        options: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          num_predict: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.statusText}`);
    }
    const data = await response.json();
    return data.response;
  }
  async *generateTextStream(prompt2, options) {
    var _a;
    const baseUrl = this.config.baseUrl || "http://localhost:11434";
    const model = (options == null ? void 0 : options.model) || this.config.model;
    if (!model) {
      throw new Error("Ollama model must be specified");
    }
    const response = await fetch(`${baseUrl}/api/generate`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model,
        prompt: prompt2,
        stream: true,
        options: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          num_predict: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.statusText}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("Failed to get response reader");
    }
    const decoder = new TextDecoder();
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        const lines = decoder.decode(value).split("\n");
        for (const line of lines) {
          if (line.trim()) {
            try {
              const parsed = JSON.parse(line);
              if (parsed.response) {
                const chunkSize = 3;
                for (let i = 0; i < parsed.response.length; i += chunkSize) {
                  const chunk = parsed.response.slice(i, i + chunkSize);
                  yield { content: chunk, done: false };
                  await new Promise((resolve) => setTimeout(resolve, 20));
                }
              }
              if (parsed.done) {
                yield { content: "", done: true };
                return;
              }
            } catch (e) {
            }
          }
        }
      }
    } finally {
      reader.releaseLock();
    }
    yield { content: "", done: true };
  }
  async chatCompletion(messages, options) {
    const baseUrl = this.config.baseUrl || "http://localhost:11434";
    const model = (options == null ? void 0 : options.model) || this.config.model;
    if (!model) {
      throw new Error("Ollama model must be specified");
    }
    const response = await fetch(`${baseUrl}/api/chat`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model,
        messages: messages.map((msg) => ({
          role: msg.role,
          content: msg.content
        })),
        stream: false,
        options: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          num_predict: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.statusText}`);
    }
    const data = await response.json();
    return data.message.content;
  }
  async complete(systemPrompt, userPrompt, options) {
    const messages = [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt }
    ];
    return this.chatCompletion(messages, options);
  }
  async *chatCompletionStream(messages, options) {
    var _a, _b;
    const baseUrl = this.config.baseUrl || "http://localhost:11434";
    const model = (options == null ? void 0 : options.model) || this.config.model;
    if (!model) {
      throw new Error("Ollama model must be specified");
    }
    const response = await fetch(`${baseUrl}/api/chat`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model,
        messages: messages.map((msg) => ({
          role: msg.role,
          content: msg.content
        })),
        stream: true,
        options: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          num_predict: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.statusText}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("Failed to get response reader");
    }
    const decoder = new TextDecoder();
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        const lines = decoder.decode(value).split("\n");
        for (const line of lines) {
          if (line.trim()) {
            try {
              const parsed = JSON.parse(line);
              if ((_b = parsed.message) == null ? void 0 : _b.content) {
                const chunkSize = 3;
                for (let i = 0; i < parsed.message.content.length; i += chunkSize) {
                  const chunk = parsed.message.content.slice(i, i + chunkSize);
                  yield { content: chunk, done: false };
                  await new Promise((resolve) => setTimeout(resolve, 20));
                }
              }
              if (parsed.done) {
                yield { content: "", done: true };
                return;
              }
            } catch (e) {
            }
          }
        }
      }
    } finally {
      reader.releaseLock();
    }
    yield { content: "", done: true };
  }
};

// src/settings.ts
var NOVA_ICON_SVG = `
<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <!-- Central star core -->
  <circle cx="12" cy="12" r="2.5" fill="currentColor"/>
  
  <!-- Primary rays (4 main directions) -->
  <path d="M12 1L12 6" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M12 18L12 23" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M23 12L18 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M6 12L1 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  
  <!-- Secondary rays (diagonals) -->
  <path d="M18.364 5.636L15.536 8.464" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M8.464 15.536L5.636 18.364" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M18.364 18.364L15.536 15.536" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M8.464 8.464L5.636 5.636" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
</svg>`;
var DEFAULT_SETTINGS = {
  aiProviders: {
    claude: {
      apiKey: "",
      model: "claude-3-5-sonnet-20241022",
      temperature: 0.7,
      maxTokens: 1e3
    },
    openai: {
      apiKey: "",
      baseUrl: "https://api.openai.com/v1",
      model: "gpt-4o",
      temperature: 0.7,
      maxTokens: 1e3
    },
    google: {
      apiKey: "",
      model: "gemini-1.5-flash",
      temperature: 0.7,
      maxTokens: 1e3
    },
    ollama: {
      baseUrl: "http://localhost:11434",
      model: "",
      temperature: 0.7,
      maxTokens: 1e3
    }
  },
  platformSettings: {
    desktop: {
      primaryProvider: "ollama",
      fallbackProviders: ["openai", "google", "ollama"]
    },
    mobile: {
      primaryProvider: "none",
      fallbackProviders: ["openai", "google"]
    }
  },
  customCommands: [],
  general: {
    defaultTemperature: 0.7,
    defaultMaxTokens: 1e3,
    autoSave: true
  },
  showCommandButton: true,
  licensing: {
    licenseKey: "",
    supernovaLicenseKey: "",
    isSupernova: false,
    debugSettings: {
      enabled: false,
      overrideDate: void 0,
      forceSupernova: false
    }
  }
};
var NovaSettingTab = class extends import_obsidian13.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.activeTab = "general";
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Nova AI Settings" });
    this.createTabNavigation();
    this.createTabContent();
  }
  createTabNavigation() {
    const tabContainer = this.containerEl.createDiv({ cls: "nova-tab-container" });
    const tabs = [
      { id: "general", label: "General" },
      { id: "providers", label: "AI Providers" },
      { id: "advanced", label: "Advanced" }
    ];
    tabs.forEach((tab) => {
      const tabEl = tabContainer.createDiv({
        cls: `nova-tab ${this.activeTab === tab.id ? "active" : ""}`,
        text: tab.label
      });
      tabEl.addEventListener("click", () => {
        this.switchTab(tab.id);
      });
    });
  }
  switchTab(tabId) {
    this.activeTab = tabId;
    this.display();
  }
  createTabContent() {
    const contentContainer = this.containerEl.createDiv({ cls: "nova-tab-content" });
    switch (this.activeTab) {
      case "general":
        this.createGeneralTabContent(contentContainer);
        break;
      case "providers":
        this.createProvidersTabContent(contentContainer);
        break;
      case "advanced":
        this.createAdvancedTabContent(contentContainer);
        break;
    }
  }
  createGeneralTabContent(container) {
    this.createLicenseSettings(container);
    this.createGeneralSettings(container);
  }
  createProvidersTabContent(container) {
    this.createProviderSettings(container);
  }
  createAdvancedTabContent(container) {
    this.createPlatformSettings(container);
    this.createCommandSettings(container);
  }
  createSecureApiKeyInput(container, options) {
    const setting = new import_obsidian13.Setting(container).setName(options.name).setDesc(options.desc);
    let actualValue = options.value;
    let isVisible = false;
    setting.addText((text) => {
      text.inputEl.type = "password";
      text.inputEl.style.fontFamily = "var(--font-monospace)";
      text.inputEl.style.width = "400px";
      text.inputEl.style.height = "40px";
      text.inputEl.style.position = "relative";
      text.setPlaceholder(options.placeholder);
      if (actualValue && actualValue.length > 12) {
        const masked = actualValue.slice(0, 8) + "\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022" + actualValue.slice(-4);
        text.setValue(masked);
      } else {
        text.setValue(actualValue);
      }
      const inputContainer = text.inputEl.parentElement;
      if (inputContainer) {
        inputContainer.style.position = "relative";
        const toggleBtn = inputContainer.createEl("button", { cls: "nova-toggle-btn" });
        toggleBtn.innerHTML = `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
					<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
					<circle cx="12" cy="12" r="3"/>
				</svg>`;
        toggleBtn.addEventListener("click", (e) => {
          e.preventDefault();
          isVisible = !isVisible;
          if (isVisible) {
            text.inputEl.type = "text";
            text.setValue(actualValue);
            toggleBtn.innerHTML = `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
							<path d="m9.88 9.88a3 3 0 1 0 4.24 4.24"/>
							<path d="m10.73 5.08a10.43 10.43 0 0 1 1.27-.08c7 0 11 8 11 8a13.16 13.16 0 0 1-1.67 2.68"/>
							<path d="M6.61 6.61A13.526 13.526 0 0 0 1 12s4 8 11 8a9.74 9.74 0 0 0 5.39-1.61"/>
							<line x1="2" y1="2" x2="22" y2="22"/>
						</svg>`;
          } else {
            text.inputEl.type = "password";
            if (actualValue && actualValue.length > 12) {
              const masked = actualValue.slice(0, 8) + "\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022" + actualValue.slice(-4);
              text.setValue(masked);
            } else {
              text.setValue(actualValue);
            }
            toggleBtn.innerHTML = `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
							<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
							<circle cx="12" cy="12" r="3"/>
						</svg>`;
          }
        });
      }
      text.onChange(async (value) => {
        actualValue = value;
        await options.onChange(value);
      });
      return text;
    });
  }
  createTestConnectionButton(container, provider) {
    const setting = new import_obsidian13.Setting(container).setName("Connection Status").setDesc("Test your API connection");
    const statusContainer = setting.controlEl.createDiv({ cls: "nova-connection-status-container" });
    setting.addButton((button) => {
      button.setButtonText("Test Connection").onClick(async () => {
        await this.testProviderConnection(provider, button.buttonEl, statusContainer);
      });
      return button;
    });
    this.updateConnectionStatus(statusContainer, provider);
  }
  async testProviderConnection(provider, buttonEl, statusContainer) {
    var _a, _b, _c, _d, _e, _f, _g;
    const originalText = buttonEl.textContent || "Test Connection";
    const button = buttonEl;
    console.log(`Starting connection test for ${provider}, button disabled: ${button.disabled}`);
    button.disabled = false;
    button.textContent = "Testing...";
    button.style.opacity = "0.6";
    this.setConnectionStatus(statusContainer, "testing", "Testing...");
    const restoreButton = () => {
      button.disabled = false;
      button.textContent = originalText;
      button.style.opacity = "1";
      console.log(`Button force-restored for ${provider}`);
    };
    const backupTimer = setTimeout(restoreButton, 12e3);
    try {
      const hasConfig = this.hasProviderConfig(provider);
      if (!hasConfig) {
        throw new Error("Provider not configured - missing API key or settings");
      }
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error("Connection timeout")), 1e4);
      });
      const testPromise = this.performRealConnectionTest(provider);
      await Promise.race([testPromise, timeoutPromise]);
      this.setConnectionStatus(statusContainer, "success", "\u25CF Connected");
      console.log(`Connection test successful for ${provider}`);
    } catch (error) {
      console.log(`Connection test failed for ${provider}:`, error);
      let errorMessage = "Connection failed";
      if (error.message === "Connection timeout") {
        errorMessage = "Timeout";
      } else if (provider === "ollama") {
        const ollamaUrl = this.plugin.settings.aiProviders.ollama.baseUrl;
        if (!ollamaUrl || ollamaUrl.trim() === "") {
          errorMessage = "No URL configured";
        } else {
          errorMessage = "Connection failed";
        }
      } else if (((_a = error.message) == null ? void 0 : _a.includes("401")) || ((_b = error.message) == null ? void 0 : _b.includes("unauthorized")) || ((_c = error.message) == null ? void 0 : _c.includes("API key"))) {
        errorMessage = "Invalid API key";
      } else if ((_d = error.message) == null ? void 0 : _d.includes("429")) {
        errorMessage = "Rate limited";
      } else if ((_e = error.message) == null ? void 0 : _e.includes("quota")) {
        errorMessage = "Quota exceeded";
      } else if (((_f = error.message) == null ? void 0 : _f.includes("not configured")) || ((_g = error.message) == null ? void 0 : _g.includes("missing"))) {
        errorMessage = "Not configured";
      } else {
        errorMessage = "Connection failed";
      }
      this.setConnectionStatus(statusContainer, "error", `\u25CF ${errorMessage}`);
    } finally {
      clearTimeout(backupTimer);
      restoreButton();
    }
  }
  async performRealConnectionTest(provider) {
    console.log(`Starting real connection test for ${provider}`);
    switch (provider) {
      case "claude": {
        const claudeProvider = new ClaudeProvider(this.plugin.settings.aiProviders.claude);
        await claudeProvider.complete("You are a helpful assistant.", "Hi", { maxTokens: 1 });
        break;
      }
      case "openai": {
        const openaiProvider = new OpenAIProvider(this.plugin.settings.aiProviders.openai);
        await openaiProvider.getAvailableModels();
        break;
      }
      case "google": {
        const googleProvider = new GoogleProvider(this.plugin.settings.aiProviders.google);
        await googleProvider.getAvailableModels();
        break;
      }
      case "ollama": {
        const ollamaProvider = new OllamaProvider(this.plugin.settings.aiProviders.ollama);
        const isAvailable = await ollamaProvider.isAvailable();
        if (!isAvailable) {
          throw new Error("Ollama connection failed");
        }
        break;
      }
    }
    console.log(`Connection test successful for ${provider}`);
  }
  setConnectionStatus(container, type, message) {
    container.empty();
    if (type === "none") return;
    const statusEl = container.createDiv({ cls: `nova-status-indicator ${type}` });
    statusEl.textContent = message;
  }
  updateConnectionStatus(container, provider) {
    const hasConfig = this.hasProviderConfig(provider);
    if (!hasConfig) {
      this.setConnectionStatus(container, "none", "");
    } else {
      this.setConnectionStatus(container, "none", "");
    }
  }
  hasProviderConfig(provider) {
    switch (provider) {
      case "claude":
        return !!this.plugin.settings.aiProviders.claude.apiKey;
      case "openai":
        return !!this.plugin.settings.aiProviders.openai.apiKey;
      case "google":
        return !!this.plugin.settings.aiProviders.google.apiKey;
      case "ollama":
        return !!this.plugin.settings.aiProviders.ollama.baseUrl;
      default:
        return false;
    }
  }
  createLicenseSettings(containerEl = this.containerEl) {
    var _a, _b;
    const licenseContainer = containerEl.createDiv({ cls: "nova-license-section" });
    licenseContainer.createEl("h3", { text: "Supernova Supporter Status" });
    const infoEl = licenseContainer.createDiv({ cls: "nova-model-info" });
    infoEl.innerHTML = `
			<div class="nova-info-card compact">
				<p>Nova provides all features for free when you use your own AI provider API keys. 
				Supernova supporters get early access to new features.</p>
			</div>
		`;
    const isSupernova = ((_a = this.plugin.featureManager) == null ? void 0 : _a.isSupernovaSupporter()) || false;
    const supernovaLicense = (_b = this.plugin.featureManager) == null ? void 0 : _b.getSupernovaLicense();
    const statusDisplay = licenseContainer.createDiv({ cls: "nova-supernova-status" });
    const statusText = isSupernova ? "Supernova Supporter" : "Nova User";
    const statusIcon = isSupernova ? `<svg viewBox="0 0 24 24" style="width: 14px; height: 14px; color: #9333ea; filter: drop-shadow(0 0 4px rgba(147, 51, 234, 0.6));">
			<circle cx="12" cy="12" r="2.5" fill="currentColor"/>
			<path d="M12 1L12 6" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M12 18L12 23" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M23 12L18 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M6 12L1 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M18.364 5.636L15.536 8.464" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M8.464 15.536L5.636 18.364" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M18.364 18.364L15.536 15.536" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M8.464 8.464L5.636 5.636" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
		</svg>` : `<svg viewBox="0 0 24 24" style="width: 14px; height: 14px; color: var(--text-normal);">
			${NOVA_ICON_SVG}
		</svg>`;
    statusDisplay.innerHTML = `
			<div class="nova-status-badge ${isSupernova ? "supernova" : "nova"}">
				<span class="status-icon">${statusIcon}</span>
				<span class="status-name">${statusText}</span>
			</div>
		`;
    if (supernovaLicense) {
      const statusEl = licenseContainer.createDiv({ cls: "nova-license-status" });
      const expiryText = supernovaLicense.expiresAt ? `Expires: ${supernovaLicense.expiresAt.toLocaleDateString()}` : "Lifetime Support";
      statusEl.innerHTML = `
				<div class="license-info">
					<span class="license-email">${supernovaLicense.email}</span>
					<span class="license-expiry">${expiryText}</span>
				</div>
			`;
    }
    new import_obsidian13.Setting(licenseContainer).setName("Supernova License Key (Optional)").setDesc("Enter your Supernova supporter license key for early access to new features").addText((text) => {
      var _a2;
      text.inputEl.type = "password";
      text.setPlaceholder("Enter Supernova license key...").setValue(this.plugin.settings.licensing.supernovaLicenseKey || "").onChange(async (value) => {
        this.plugin.settings.licensing.supernovaLicenseKey = value;
        await this.plugin.saveSettings();
        if (this.plugin.featureManager) {
          await this.plugin.featureManager.updateSupernovaLicense(value || null);
          const leaves = this.plugin.app.workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
          if (leaves.length > 0) {
            const sidebarView = leaves[0].view;
            sidebarView.refreshSupernovaUI();
          }
          this.display();
        }
      });
      const validateButton = (_a2 = text.inputEl.parentElement) == null ? void 0 : _a2.createEl("button", {
        text: "Validate",
        cls: "nova-validate-btn"
      });
      if (validateButton) {
        validateButton.addEventListener("click", async () => {
          const licenseKey = text.inputEl.value;
          if (!licenseKey) {
            this.showLicenseMessage("Please enter a Supernova license key first.", "error");
            return;
          }
          validateButton.textContent = "Validating...";
          validateButton.disabled = true;
          try {
            if (this.plugin.featureManager) {
              await this.plugin.featureManager.updateSupernovaLicense(licenseKey);
              const isSupernova2 = this.plugin.featureManager.isSupernovaSupporter();
              if (isSupernova2) {
                this.showLicenseMessage("Valid Supernova license! You now have early access to new features.", "success");
                this.showConfetti();
              } else {
                this.showLicenseMessage("Invalid or expired Supernova license key.", "error");
              }
              const leaves = this.plugin.app.workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
              if (leaves.length > 0) {
                const sidebarView = leaves[0].view;
                sidebarView.refreshSupernovaUI();
              }
              this.display();
            }
          } catch (error) {
            this.showLicenseMessage("Error validating Supernova license.", "error");
          } finally {
            validateButton.textContent = "Validate";
            validateButton.disabled = false;
          }
        });
      }
    });
    this.createSupernovaInfo(licenseContainer);
    if (true) {
      this.createDebugSettings(licenseContainer);
    }
  }
  createSupernovaInfo(container) {
    const supernovaInfo = container.createDiv({ cls: "nova-supernova-info" });
    supernovaInfo.innerHTML = `
			<div class="nova-info-card">
				<h5>Become a Supernova Supporter</h5>
				<p>Support Nova development and get early access to new features. All features eventually become free for everyone.</p>
				<ul>
					<li>Early access to new features (3-6 months before general release)</li>
					<li>Priority support and feature requests</li>
					<li>Supporter badge and recognition</li>
					<li>Directly support open-source development</li>
				</ul>
			</div>
		`;
  }
  createDebugSettings(container) {
    const debugContainer = container.createDiv({ cls: "nova-debug-section" });
    debugContainer.createEl("h4", { text: "Development Settings" });
    new import_obsidian13.Setting(debugContainer).setName("Debug Mode").setDesc("Enable development testing features").addToggle((toggle) => toggle.setValue(this.plugin.settings.licensing.debugSettings.enabled).onChange(async (value) => {
      this.plugin.settings.licensing.debugSettings.enabled = value;
      await this.plugin.saveSettings();
      if (this.plugin.featureManager) {
        this.plugin.featureManager.updateDebugSettings(this.plugin.settings.licensing.debugSettings);
      }
      this.display();
    }));
    if (this.plugin.settings.licensing.debugSettings.enabled) {
      new import_obsidian13.Setting(debugContainer).setName("Override Date").setDesc("Override current date for testing time-gated features (YYYY-MM-DD)").addText((text) => text.setPlaceholder("2025-12-01").setValue(this.plugin.settings.licensing.debugSettings.overrideDate || "").onChange(async (value) => {
        this.plugin.settings.licensing.debugSettings.overrideDate = value || void 0;
        await this.plugin.saveSettings();
        if (this.plugin.featureManager) {
          this.plugin.featureManager.updateDebugSettings(this.plugin.settings.licensing.debugSettings);
        }
      }));
      new import_obsidian13.Setting(debugContainer).setName("Force Supernova Status").setDesc("Override Supernova supporter status for testing").addToggle((toggle) => toggle.setValue(this.plugin.settings.licensing.debugSettings.forceSupernova || false).onChange(async (value) => {
        this.plugin.settings.licensing.debugSettings.forceSupernova = value;
        await this.plugin.saveSettings();
        if (this.plugin.featureManager) {
          this.plugin.featureManager.updateDebugSettings(this.plugin.settings.licensing.debugSettings);
        }
        if (value) {
          this.showConfetti();
        }
        const leaves = this.plugin.app.workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
        if (leaves.length > 0) {
          const sidebarView = leaves[0].view;
          sidebarView.refreshSupernovaUI();
        }
        this.display();
      }));
      new import_obsidian13.Setting(debugContainer).setName("Clear All Licenses").setDesc("Remove all applied licenses (for testing)").addButton((button) => button.setButtonText("Clear Licenses").setWarning().onClick(async () => {
        const confirmed = confirm("Are you sure you want to clear all licenses? This will remove any applied Supernova license.");
        if (!confirmed) return;
        this.plugin.settings.licensing.supernovaLicenseKey = "";
        if (this.plugin.settings.licensing.debugSettings.forceSupernova) {
          this.plugin.settings.licensing.debugSettings.forceSupernova = false;
        }
        await this.plugin.saveSettings();
        if (this.plugin.featureManager) {
          await this.plugin.featureManager.updateSupernovaLicense(null);
          this.plugin.featureManager.updateDebugSettings(this.plugin.settings.licensing.debugSettings);
        }
        const leaves = this.plugin.app.workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
        if (leaves.length > 0) {
          const sidebarView = leaves[0].view;
          sidebarView.refreshSupernovaUI();
        }
        this.showLicenseMessage("All licenses cleared successfully.", "success");
        this.display();
      }));
    }
  }
  showLicenseMessage(message, type) {
    const existingMessage = this.containerEl.querySelector(".nova-license-message");
    if (existingMessage) {
      existingMessage.remove();
    }
    const messageEl = this.containerEl.createDiv({
      cls: `nova-license-message ${type}`,
      text: message
    });
    setTimeout(() => {
      messageEl.remove();
    }, 5e3);
  }
  showConfetti() {
    const confettiContainer = document.createElement("div");
    confettiContainer.className = "nova-confetti-container";
    document.body.appendChild(confettiContainer);
    const rect = this.containerEl.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + Math.min(rect.height / 2, 300);
    const colors = ["gold", "blue", "pink", "green", "red", ""];
    for (let i = 0; i < 150; i++) {
      const confetti = document.createElement("div");
      confetti.className = `nova-confetti-piece ${colors[Math.floor(Math.random() * colors.length)]}`;
      confetti.style.left = `${centerX}px`;
      confetti.style.top = `${centerY}px`;
      const angle = Math.PI * 2 * i / 150 + (Math.random() * 0.2 - 0.1);
      const velocity = 250 + Math.random() * 350;
      const explodeX = Math.cos(angle) * velocity;
      const explodeY = Math.sin(angle) * velocity - 150;
      confetti.style.setProperty("--explode-x", `${explodeX}px`);
      confetti.style.setProperty("--explode-y", `${explodeY}px`);
      confetti.style.animationDelay = `${Math.random() * 0.2}s`;
      const size = 6 + Math.random() * 14;
      confetti.style.width = `${size}px`;
      confetti.style.height = `${size}px`;
      if (Math.random() > 0.5) {
        confetti.style.height = `${size * 0.4}px`;
      }
      confettiContainer.appendChild(confetti);
    }
    setTimeout(() => {
      confettiContainer.remove();
    }, 4e3);
  }
  createGeneralSettings(containerEl = this.containerEl) {
    containerEl.createEl("h3", { text: "General Settings" });
    new import_obsidian13.Setting(containerEl).setName("Default Temperature").setDesc("Controls randomness in AI responses (0.0 - 1.0)").addSlider((slider) => slider.setLimits(0, 1, 0.1).setValue(this.plugin.settings.general.defaultTemperature).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.general.defaultTemperature = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian13.Setting(containerEl).setName("Default Max Tokens").setDesc("Maximum length of AI responses").addText((text) => {
      text.inputEl.type = "number";
      text.inputEl.style.width = "150px";
      text.inputEl.style.height = "40px";
      return text.setPlaceholder("1000").setValue(this.plugin.settings.general.defaultMaxTokens.toString()).onChange(async (value) => {
        const numValue = parseInt(value);
        if (!isNaN(numValue) && numValue > 0) {
          this.plugin.settings.general.defaultMaxTokens = numValue;
          await this.plugin.saveSettings();
        }
      });
    });
    new import_obsidian13.Setting(containerEl).setName("Auto-save settings").setDesc("Automatically save settings when changed").addToggle((toggle) => toggle.setValue(this.plugin.settings.general.autoSave).onChange(async (value) => {
      this.plugin.settings.general.autoSave = value;
      await this.plugin.saveSettings();
    }));
  }
  createProviderSettings(containerEl = this.containerEl) {
    containerEl.createEl("h3", { text: "AI Provider Settings" });
    const infoEl = containerEl.createDiv({ cls: "nova-provider-info" });
    infoEl.innerHTML = `
			<div class="nova-info-card">
				<h4>Configure Your API Keys</h4>
				<p>Nova connects to AI providers using your own API keys. All providers are available to all users - 
				just add your API keys below to get started.</p>
			</div>
			<div class="nova-info-card nova-model-guidance">
				<h4>Recommended Defaults</h4>
				<ul class="nova-model-recommendations">
					<li><strong>Claude Sonnet 4</strong> - Latest generation with excellent instruction following for collaborative editing</li>
					<li><strong>GPT-4.1 Mini</strong> - Current-generation model that outperforms GPT-4o while remaining cost-effective</li>
					<li><strong>Gemini 2.5 Flash</strong> - Best price/performance with "thinking" capabilities and strong coding support</li>
				</ul>
				<p class="nova-guidance-note">These defaults offer modern AI capabilities without premium pricing.</p>
			</div>
		`;
    this.createOllamaSettings(containerEl);
    this.createClaudeSettings(containerEl);
    this.createGoogleSettings(containerEl);
    this.createOpenAISettings(containerEl);
  }
  createClaudeSettings(containerEl = this.containerEl) {
    const claudeContainer = containerEl.createDiv({ cls: "nova-provider-section" });
    claudeContainer.createEl("h4", { text: "Claude (Anthropic)" });
    this.createSecureApiKeyInput(claudeContainer, {
      name: "API Key",
      desc: "Your Anthropic API key",
      placeholder: "sk-ant-...",
      value: this.plugin.settings.aiProviders.claude.apiKey || "",
      onChange: async (value) => {
        this.plugin.settings.aiProviders.claude.apiKey = value;
        await this.plugin.saveSettings();
      }
    });
    this.createTestConnectionButton(claudeContainer, "claude");
    const modelSetting = new import_obsidian13.Setting(claudeContainer).setName("Model").setDesc("Claude model to use");
    let modelDropdown;
    modelSetting.addDropdown((dropdown) => {
      modelDropdown = dropdown;
      dropdown.selectEl.style.width = "200px";
      dropdown.selectEl.style.height = "40px";
      this.populateClaudeModels(dropdown);
      return dropdown.setValue(this.plugin.settings.aiProviders.claude.model || "claude-sonnet-4-20250514").onChange(async (value) => {
        this.plugin.settings.aiProviders.claude.model = value;
        await this.plugin.saveSettings();
      });
    });
  }
  populateClaudeModels(dropdown) {
    dropdown.selectEl.empty();
    const currentModels = getAvailableModels("claude");
    currentModels.forEach((model) => {
      dropdown.addOption(model.value, model.label);
    });
  }
  createOpenAISettings(containerEl = this.containerEl) {
    const openaiContainer = containerEl.createDiv({ cls: "nova-provider-section" });
    openaiContainer.createEl("h4", { text: "ChatGPT (OpenAI)" });
    this.createSecureApiKeyInput(openaiContainer, {
      name: "API Key",
      desc: "Your OpenAI API key",
      placeholder: "sk-...",
      value: this.plugin.settings.aiProviders.openai.apiKey || "",
      onChange: async (value) => {
        this.plugin.settings.aiProviders.openai.apiKey = value;
        await this.plugin.saveSettings();
      }
    });
    this.createTestConnectionButton(openaiContainer, "openai");
    const modelSetting = new import_obsidian13.Setting(openaiContainer).setName("Model").setDesc("OpenAI model to use");
    let modelDropdown;
    modelSetting.addDropdown((dropdown) => {
      modelDropdown = dropdown;
      dropdown.selectEl.style.width = "200px";
      dropdown.selectEl.style.height = "40px";
      this.populateOpenAIModels(dropdown);
      return dropdown.setValue(this.plugin.settings.aiProviders.openai.model || "gpt-4.1-mini-2025-04-14").onChange(async (value) => {
        this.plugin.settings.aiProviders.openai.model = value;
        await this.plugin.saveSettings();
      });
    });
  }
  populateOpenAIModels(dropdown) {
    dropdown.selectEl.empty();
    const currentModels = getAvailableModels("openai");
    currentModels.forEach((model) => {
      dropdown.addOption(model.value, model.label);
    });
  }
  createGoogleSettings(containerEl = this.containerEl) {
    const googleContainer = containerEl.createDiv({ cls: "nova-provider-section" });
    googleContainer.createEl("h4", { text: "Google (Gemini)" });
    this.createSecureApiKeyInput(googleContainer, {
      name: "API Key",
      desc: "Your Google AI API key",
      placeholder: "AI...",
      value: this.plugin.settings.aiProviders.google.apiKey || "",
      onChange: async (value) => {
        this.plugin.settings.aiProviders.google.apiKey = value;
        await this.plugin.saveSettings();
      }
    });
    this.createTestConnectionButton(googleContainer, "google");
    const modelSetting = new import_obsidian13.Setting(googleContainer).setName("Model").setDesc("Gemini model to use");
    let modelDropdown;
    modelSetting.addDropdown((dropdown) => {
      modelDropdown = dropdown;
      dropdown.selectEl.style.width = "200px";
      dropdown.selectEl.style.height = "40px";
      this.populateGoogleModels(dropdown);
      return dropdown.setValue(this.plugin.settings.aiProviders.google.model || "gemini-2.5-flash-preview-04-17").onChange(async (value) => {
        this.plugin.settings.aiProviders.google.model = value;
        await this.plugin.saveSettings();
      });
    });
  }
  populateGoogleModels(dropdown) {
    dropdown.selectEl.empty();
    const currentModels = getAvailableModels("google");
    currentModels.forEach((model) => {
      dropdown.addOption(model.value, model.label);
    });
  }
  createOllamaSettings(containerEl = this.containerEl) {
    const ollamaContainer = containerEl.createDiv({ cls: "nova-provider-section" });
    ollamaContainer.createEl("h4", { text: "Ollama (Local)" });
    new import_obsidian13.Setting(ollamaContainer).setName("Base URL").setDesc("Ollama server URL").addText((text) => {
      text.inputEl.style.width = "350px";
      text.inputEl.style.height = "40px";
      return text.setPlaceholder("http://localhost:11434").setValue(this.plugin.settings.aiProviders.ollama.baseUrl || "").onChange(async (value) => {
        this.plugin.settings.aiProviders.ollama.baseUrl = value;
        await this.plugin.saveSettings();
      });
    });
    this.createTestConnectionButton(ollamaContainer, "ollama");
    new import_obsidian13.Setting(ollamaContainer).setName("Model").setDesc("Ollama model to use").addText((text) => {
      text.inputEl.style.width = "200px";
      text.inputEl.style.height = "40px";
      return text.setPlaceholder("llama2").setValue(this.plugin.settings.aiProviders.ollama.model || "").onChange(async (value) => {
        this.plugin.settings.aiProviders.ollama.model = value;
        await this.plugin.saveSettings();
      });
    });
  }
  createPlatformSettings(containerEl = this.containerEl) {
    containerEl.createEl("h3", { text: "Platform Settings" });
    const infoEl = containerEl.createDiv({ cls: "nova-platform-info" });
    infoEl.innerHTML = `
			<div class="nova-info-card">
				<h4>\u{1F5A5}\uFE0F Platform Configuration</h4>
				<p>Configure which AI provider to use as your primary provider on different platforms. 
				Nova works seamlessly across desktop and mobile with all providers.</p>
			</div>
		`;
    containerEl.createEl("h4", { text: "Desktop" });
    const desktopDropdown = new import_obsidian13.Setting(containerEl).setName("Primary Provider").setDesc("Primary AI provider for desktop").addDropdown((dropdown) => {
      const allowedProviders = this.getAllowedProvidersForPlatform("desktop");
      allowedProviders.forEach((provider) => {
        const label = this.getProviderDisplayName(provider);
        dropdown.addOption(provider, label);
      });
      return dropdown.setValue(this.plugin.settings.platformSettings.desktop.primaryProvider).onChange(async (value) => {
        this.plugin.settings.platformSettings.desktop.primaryProvider = value;
        await this.plugin.saveSettings();
        if (this.plugin.aiProviderManager) {
          this.plugin.aiProviderManager.updateSettings(this.plugin.settings);
        }
      });
    });
    containerEl.createEl("h4", { text: "Mobile" });
    const mobileSetting = new import_obsidian13.Setting(containerEl).setName("Primary Provider").setDesc("Primary AI provider for mobile devices");
    mobileSetting.addDropdown((dropdown) => dropdown.addOption("none", "None (Disabled)").addOption("claude", "Claude").addOption("openai", "OpenAI").addOption("google", "Google").setValue(this.plugin.settings.platformSettings.mobile.primaryProvider).onChange(async (value) => {
      this.plugin.settings.platformSettings.mobile.primaryProvider = value;
      await this.plugin.saveSettings();
      if (this.plugin.aiProviderManager) {
        this.plugin.aiProviderManager.updateSettings(this.plugin.settings);
      }
    }));
  }
  getAllowedProvidersForPlatform(platform) {
    return platform === "desktop" ? ["claude", "openai", "google", "ollama"] : ["claude", "openai", "google"];
  }
  getProviderDisplayName(provider) {
    const names = {
      "claude": "Claude (Anthropic)",
      "openai": "ChatGPT (OpenAI)",
      "google": "Google (Gemini)",
      "ollama": "Ollama (Local)",
      "none": "None (Disabled)"
    };
    return names[provider] || provider;
  }
  async setCurrentProvider(providerId) {
    const platform = import_obsidian13.Platform.isMobile ? "mobile" : "desktop";
    this.plugin.settings.platformSettings[platform].primaryProvider = providerId;
    if (this.plugin.aiProviderManager) {
      this.plugin.aiProviderManager.updateSettings(this.plugin.settings);
    }
  }
  createCommandSettings(containerEl = this.containerEl) {
    containerEl.createEl("h3", { text: "Custom Commands" });
    if (!this.plugin.featureManager.isFeatureEnabled("commands")) {
      const noticeEl = containerEl.createDiv({ cls: "nova-feature-notice" });
      noticeEl.innerHTML = `
				<div style="padding: 16px; background: var(--background-modifier-hover); border-radius: 8px; border: 1px solid var(--background-modifier-border);">
					<h4 style="margin: 0 0 8px 0; color: var(--text-normal);">Supernova Supporter Feature</h4>
					<p style="margin: 0; color: var(--text-muted); font-size: 0.9em;">
						Custom commands are currently available to Supernova supporters. 
						They will be available to all users on <strong>October 1, 2025</strong>.
					</p>
				</div>
			`;
      return;
    }
    const descEl = containerEl.createDiv({ cls: "nova-command-description" });
    descEl.innerHTML = `
			<p style="color: var(--text-muted); margin-bottom: 16px;">
				Create custom command shortcuts that insert predefined text templates when triggered with <code>:trigger</code>.
			</p>
		`;
    new import_obsidian13.Setting(containerEl).setName("Show Command Button in Chat (Mobile)").setDesc("Show the Commands button beside the Send button for mobile quick access to Nova commands and selection actions").addToggle((toggle) => toggle.setValue(this.plugin.settings.showCommandButton).onChange(async (value) => {
      this.plugin.settings.showCommandButton = value;
      await this.plugin.saveSettings();
      const leaves = this.plugin.app.workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
      if (leaves.length > 0) {
        const sidebarView = leaves[0].view;
        sidebarView.refreshCommandButton();
      }
    }));
    const buttonEl = containerEl.createDiv({ cls: "nova-add-command" });
    buttonEl.style.cssText = "margin-bottom: 16px;";
    new import_obsidian13.Setting(buttonEl).addButton(
      (button) => button.setButtonText("+ Add Custom Command").setCta().onClick(() => this.showAddCommandDialog())
    );
    this.renderCustomCommandsList(containerEl);
  }
  renderCustomCommandsList(container) {
    const existingList = container.querySelector(".nova-commands-list");
    if (existingList) existingList.remove();
    const commandsList = container.createDiv({ cls: "nova-commands-list" });
    const commands = this.plugin.settings.customCommands || [];
    if (commands.length === 0) {
      const emptyEl = commandsList.createDiv({ cls: "nova-commands-empty" });
      emptyEl.innerHTML = `
				<div style="text-align: center; padding: 24px; color: var(--text-muted);">
					<p>No custom commands yet.</p>
					<p style="font-size: 0.9em;">Create your first command to get started!</p>
				</div>
			`;
      return;
    }
    commands.forEach((command, index) => {
      const commandEl = commandsList.createDiv({ cls: "nova-command-item" });
      commandEl.style.cssText = `
				border: 1px solid var(--background-modifier-border);
				border-radius: 8px;
				padding: 16px;
				margin-bottom: 12px;
				background: var(--background-primary);
			`;
      const headerEl = commandEl.createDiv({ cls: "nova-command-header" });
      headerEl.style.cssText = "display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 8px;";
      const infoEl = headerEl.createDiv({ cls: "nova-command-info" });
      const nameEl = infoEl.createDiv({ cls: "nova-command-name" });
      nameEl.textContent = command.name;
      nameEl.style.cssText = "font-weight: 600; margin-bottom: 4px;";
      const triggerEl = infoEl.createDiv({ cls: "nova-command-trigger" });
      triggerEl.innerHTML = `<code>:${command.trigger}</code>`;
      triggerEl.style.cssText = "font-family: var(--font-monospace); color: var(--interactive-accent); font-size: 0.9em;";
      const actionsEl = headerEl.createDiv({ cls: "nova-command-actions" });
      actionsEl.style.cssText = "display: flex; gap: 8px;";
      const editBtn = actionsEl.createEl("button", { text: "Edit" });
      editBtn.style.cssText = "padding: 4px 8px; font-size: 0.8em; border-radius: 4px;";
      editBtn.onclick = () => this.showEditCommandDialog(index);
      const deleteBtn = actionsEl.createEl("button", { text: "Delete" });
      deleteBtn.style.cssText = "padding: 4px 8px; font-size: 0.8em; border-radius: 4px; background: var(--background-modifier-error); color: var(--text-on-accent);";
      deleteBtn.onclick = () => this.deleteCommand(index);
      if (command.description) {
        const descEl = commandEl.createDiv({ cls: "nova-command-desc" });
        descEl.textContent = command.description;
        descEl.style.cssText = "color: var(--text-muted); font-size: 0.9em; margin-bottom: 8px;";
      }
      const templateEl = commandEl.createDiv({ cls: "nova-command-template" });
      templateEl.innerHTML = `
				<div style="background: var(--background-modifier-hover); padding: 8px; border-radius: 4px; font-family: var(--font-monospace); font-size: 0.8em; white-space: pre-wrap; max-height: 60px; overflow-y: auto;">
					${command.template}
				</div>
			`;
    });
  }
  showAddCommandDialog() {
    this.showCommandDialog();
  }
  showEditCommandDialog(index) {
    var _a;
    const command = (_a = this.plugin.settings.customCommands) == null ? void 0 : _a[index];
    if (command) {
      this.showCommandDialog(command, index);
    }
  }
  showCommandDialog(existingCommand, editIndex) {
    const name = prompt("Command name:", (existingCommand == null ? void 0 : existingCommand.name) || "");
    if (!name) return;
    const trigger = prompt("Command trigger (without :):", (existingCommand == null ? void 0 : existingCommand.trigger) || "");
    if (!trigger) return;
    const description = prompt("Description (optional):", (existingCommand == null ? void 0 : existingCommand.description) || "");
    const template = prompt("Template content:", (existingCommand == null ? void 0 : existingCommand.template) || "");
    if (!template) return;
    const result = {
      id: (existingCommand == null ? void 0 : existingCommand.id) || "cmd_" + Math.random().toString(36).substr(2, 9),
      name,
      trigger: trigger.toLowerCase(),
      template,
      description: description || void 0
    };
    if (editIndex !== void 0) {
      if (!this.plugin.settings.customCommands) this.plugin.settings.customCommands = [];
      this.plugin.settings.customCommands[editIndex] = result;
    } else {
      if (!this.plugin.settings.customCommands) this.plugin.settings.customCommands = [];
      this.plugin.settings.customCommands.push(result);
    }
    this.plugin.saveSettings();
    this.renderCustomCommandsList(this.containerEl.querySelector(".nova-command-section"));
  }
  deleteCommand(index) {
    if (!this.plugin.settings.customCommands) return;
    const command = this.plugin.settings.customCommands[index];
    const confirmed = confirm(`Delete command "${command.name}" (${command.trigger})?`);
    if (confirmed) {
      this.plugin.settings.customCommands.splice(index, 1);
      this.plugin.saveSettings();
      this.renderCustomCommandsList(this.containerEl.querySelector(".nova-command-section"));
    }
  }
};

// src/ai/provider-manager.ts
var import_obsidian14 = require("obsidian");
var AIProviderManager = class {
  constructor(settings, featureManager) {
    this.providers = /* @__PURE__ */ new Map();
    this.settings = settings;
    this.featureManager = featureManager;
  }
  async initialize() {
    this.providers.set("claude", new ClaudeProvider(this.settings.aiProviders.claude));
    this.providers.set("openai", new OpenAIProvider(this.settings.aiProviders.openai));
    this.providers.set("google", new GoogleProvider(this.settings.aiProviders.google));
    this.providers.set("ollama", new OllamaProvider(this.settings.aiProviders.ollama));
  }
  updateSettings(settings) {
    this.settings = settings;
    this.providers.forEach((provider, type) => {
      var _a;
      if (type !== "none" && type in this.settings.aiProviders) {
        (_a = provider.updateConfig) == null ? void 0 : _a.call(provider, this.settings.aiProviders[type]);
      }
    });
  }
  getPlatformProviders() {
    const platform = import_obsidian14.Platform.isMobile ? "mobile" : "desktop";
    const platformSettings = this.settings.platformSettings[platform];
    const providers = [platformSettings.primaryProvider, ...platformSettings.fallbackProviders];
    return providers;
  }
  async getAvailableProvider() {
    const orderedProviders = this.getPlatformProviders();
    if (orderedProviders[0] === "none") {
      return null;
    }
    for (const providerType of orderedProviders) {
      if (providerType === "none") continue;
      const provider = this.providers.get(providerType);
      const isAvailable = provider ? await provider.isAvailable() : false;
      if (provider && isAvailable) {
        return provider;
      }
    }
    return null;
  }
  async generateText(prompt2, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    return provider.generateText(prompt2, options);
  }
  async *generateTextStream(prompt2, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    yield* provider.generateTextStream(prompt2, options);
  }
  async chatCompletion(messages, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    return provider.chatCompletion(messages, options);
  }
  async *chatCompletionStream(messages, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    yield* provider.chatCompletionStream(messages, options);
  }
  getProviderNames() {
    return Array.from(this.providers.values()).map((p) => p.name);
  }
  async getCurrentProviderName() {
    const provider = await this.getAvailableProvider();
    return provider ? provider.name : "None";
  }
  async getCurrentProviderType() {
    const orderedProviders = this.getPlatformProviders();
    if (orderedProviders[0] === "none") {
      return null;
    }
    for (const providerType of orderedProviders) {
      if (providerType === "none") continue;
      const provider = this.providers.get(providerType);
      if (provider && await provider.isAvailable()) {
        return providerType;
      }
    }
    return null;
  }
  async complete(systemPrompt, userPrompt, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    return provider.complete(systemPrompt, userPrompt, options);
  }
  getAllowedProviders() {
    if (import_obsidian14.Platform.isMobile) {
      return ["claude", "openai", "google"];
    }
    return ["claude", "openai", "google", "ollama"];
  }
  isProviderAllowed(providerType) {
    return true;
  }
  getProviderLimits() {
    return { local: Infinity, cloud: Infinity };
  }
  /**
   * Get available models for a specific provider
   */
  async getProviderModels(providerType) {
    const provider = this.providers.get(providerType);
    if (!provider) {
      throw new Error(`Provider ${providerType} not found`);
    }
    if ("getAvailableModels" in provider && typeof provider.getAvailableModels === "function") {
      return await provider.getAvailableModels();
    }
    return [];
  }
  /**
   * Clear model cache for a specific provider
   */
  clearProviderModelCache(providerType) {
    const provider = this.providers.get(providerType);
    if (!provider) {
      return;
    }
    if ("clearModelCache" in provider && typeof provider.clearModelCache === "function") {
      provider.clearModelCache();
    }
  }
  cleanup() {
    this.providers.clear();
  }
  /**
   * Get the default max tokens from settings
   */
  getDefaultMaxTokens() {
    return this.settings.general.defaultMaxTokens;
  }
};

// src/core/document-engine.ts
var import_obsidian15 = require("obsidian");

// src/core/conversation-manager.ts
var ConversationManager = class {
  constructor(dataStore) {
    this.dataStore = dataStore;
    this.conversations = /* @__PURE__ */ new Map();
    this.maxMessagesPerFile = 100;
    // Limit conversation history
    this.storageKey = "nova-conversations";
    this.cleanupInterval = null;
    this.loadConversations();
    this.startPeriodicCleanup();
  }
  /**
   * Load conversations from plugin data
   */
  async loadConversations() {
    try {
      const data = await this.dataStore.loadData(this.storageKey);
      if (data && Array.isArray(data)) {
        for (const conversation of data) {
          this.conversations.set(conversation.filePath, conversation);
        }
      }
    } catch (error) {
    }
  }
  /**
   * Save conversations to plugin data
   */
  async saveConversations() {
    try {
      const conversationsArray = Array.from(this.conversations.values());
      await this.dataStore.saveData(this.storageKey, conversationsArray);
    } catch (error) {
    }
  }
  /**
   * Get conversation for a specific file
   */
  getConversation(file) {
    const filePath = file.path;
    if (!this.conversations.has(filePath)) {
      const newConversation = {
        filePath,
        messages: [],
        lastUpdated: Date.now(),
        metadata: {
          editCount: 0,
          commandFrequency: {
            add: 0,
            edit: 0,
            delete: 0,
            grammar: 0,
            rewrite: 0,
            metadata: 0
          }
        }
      };
      this.conversations.set(filePath, newConversation);
    }
    return this.conversations.get(filePath);
  }
  /**
   * Add a user message to the conversation
   */
  async addUserMessage(file, content, command) {
    const conversation = this.getConversation(file);
    const message = {
      id: this.generateMessageId(),
      role: "user",
      content,
      timestamp: Date.now(),
      command
    };
    conversation.messages.push(message);
    conversation.lastUpdated = Date.now();
    if (command && conversation.metadata) {
      conversation.metadata.commandFrequency[command.action]++;
    }
    await this.trimAndSave(conversation);
    return message;
  }
  /**
   * Add an assistant response to the conversation
   */
  async addAssistantMessage(file, content, result) {
    const conversation = this.getConversation(file);
    const message = {
      id: this.generateMessageId(),
      role: "assistant",
      content,
      timestamp: Date.now(),
      result
    };
    conversation.messages.push(message);
    conversation.lastUpdated = Date.now();
    if ((result == null ? void 0 : result.success) && conversation.metadata) {
      conversation.metadata.editCount++;
    }
    await this.trimAndSave(conversation);
    return message;
  }
  /**
   * Add a system message to the conversation
   */
  async addSystemMessage(file, content, metadata) {
    const conversation = this.getConversation(file);
    const message = {
      id: this.generateMessageId(),
      role: "system",
      content,
      timestamp: Date.now(),
      metadata
    };
    conversation.messages.push(message);
    conversation.lastUpdated = Date.now();
    await this.trimAndSave(conversation);
    return message;
  }
  /**
   * Get recent messages for context
   */
  getRecentMessages(file, count = 10) {
    const conversation = this.getConversation(file);
    return conversation.messages.slice(-count);
  }
  /**
   * Get messages by role
   */
  getMessagesByRole(file, role) {
    const conversation = this.getConversation(file);
    return conversation.messages.filter((msg) => msg.role === role);
  }
  /**
   * Get conversation context for AI prompts
   */
  getConversationContext(file, maxMessages = 6) {
    const messages = this.getRecentMessages(file, maxMessages);
    if (messages.length === 0) {
      return "";
    }
    const contextLines = messages.map((msg) => {
      const timestamp = new Date(msg.timestamp).toLocaleTimeString();
      let line = `[${timestamp}] ${msg.role.toUpperCase()}: ${msg.content}`;
      if (msg.command) {
        line += ` (Command: ${msg.command.action} ${msg.command.target})`;
      }
      if (msg.result) {
        line += ` (Result: ${msg.result.success ? "success" : "failed"})`;
      }
      return line;
    });
    return `Previous conversation:
${contextLines.join("\n")}
`;
  }
  /**
   * Clear conversation for a file
   */
  async clearConversation(file) {
    const conversation = this.getConversation(file);
    conversation.messages = [];
    conversation.lastUpdated = Date.now();
    if (conversation.metadata) {
      conversation.metadata.editCount = 0;
      conversation.metadata.commandFrequency = {
        add: 0,
        edit: 0,
        delete: 0,
        grammar: 0,
        rewrite: 0,
        metadata: 0
      };
    }
    await this.saveConversations();
  }
  /**
   * Get conversation statistics
   */
  getStats(file) {
    var _a;
    const conversation = this.getConversation(file);
    let mostUsedCommand = null;
    let maxCount = 0;
    if (conversation.metadata) {
      for (const [action, count] of Object.entries(conversation.metadata.commandFrequency)) {
        if (count > maxCount) {
          maxCount = count;
          mostUsedCommand = action;
        }
      }
    }
    const conversationAge = conversation.messages.length > 0 ? Date.now() - conversation.messages[0].timestamp : 0;
    return {
      messageCount: conversation.messages.length,
      editCount: ((_a = conversation.metadata) == null ? void 0 : _a.editCount) || 0,
      mostUsedCommand,
      conversationAge
    };
  }
  /**
   * Export conversation for a file
   */
  exportConversation(file) {
    const conversation = this.getConversation(file);
    const lines = [`# Conversation History for ${file.name}`, ""];
    for (const message of conversation.messages) {
      const timestamp = new Date(message.timestamp).toLocaleString();
      lines.push(`## ${message.role.toUpperCase()} (${timestamp})`);
      lines.push(message.content);
      if (message.command) {
        lines.push(`*Command: ${message.command.action} ${message.command.target}*`);
      }
      if (message.result) {
        lines.push(`*Result: ${message.result.success ? "Success" : "Failed"}*`);
        if (message.result.error) {
          lines.push(`*Error: ${message.result.error}*`);
        }
      }
      lines.push("");
    }
    return lines.join("\n");
  }
  /**
   * Generate unique message ID
   */
  generateMessageId() {
    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
   * Trim conversation to max length and save
   */
  async trimAndSave(conversation) {
    if (conversation.messages.length > this.maxMessagesPerFile) {
      conversation.messages = conversation.messages.slice(-this.maxMessagesPerFile);
    }
    await this.saveConversations();
  }
  /**
   * Get all conversation file paths
   */
  getAllConversationFiles() {
    return Array.from(this.conversations.keys());
  }
  /**
   * Check if file has active conversation
   */
  hasConversation(file) {
    const conversation = this.conversations.get(file.path);
    return conversation ? conversation.messages.length > 0 : false;
  }
  /**
   * Update conversation file path (for file renames)
   */
  async updateFilePath(oldPath, newPath) {
    const conversation = this.conversations.get(oldPath);
    if (conversation) {
      conversation.filePath = newPath;
      this.conversations.delete(oldPath);
      this.conversations.set(newPath, conversation);
      await this.saveConversations();
    }
  }
  /**
   * Start periodic cleanup of old conversations
   */
  startPeriodicCleanup() {
    this.cleanupInterval = window.setInterval(() => {
      this.cleanupOldConversations(7 * 24 * 60 * 60 * 1e3);
    }, 24 * 60 * 60 * 1e3);
  }
  /**
   * Clean up conversations older than the specified age
   */
  async cleanupOldConversations(maxAge) {
    const now = Date.now();
    let cleaned = false;
    for (const [filePath, conversation] of this.conversations.entries()) {
      if (conversation.messages.length > 0) {
        const lastMessage = conversation.messages[conversation.messages.length - 1];
        const age = now - lastMessage.timestamp;
        if (age > maxAge) {
          this.conversations.delete(filePath);
          cleaned = true;
        }
      }
    }
    if (cleaned) {
      await this.saveConversations();
    }
  }
  /**
   * Cleanup method to call when plugin is disabled
   */
  cleanup() {
    if (this.cleanupInterval !== null) {
      clearInterval(this.cleanupInterval);
      this.cleanupInterval = null;
    }
  }
};

// src/core/document-engine.ts
var DocumentEngine = class {
  constructor(app, dataStore) {
    this.app = app;
    this.conversationManager = null;
    if (dataStore) {
      this.conversationManager = new ConversationManager(dataStore);
    }
  }
  /**
   * Set conversation manager (for dependency injection)
   */
  setConversationManager(conversationManager) {
    this.conversationManager = conversationManager;
  }
  /**
   * Get the active editor instance - ensures we get the editor for the active file
   */
  getActiveEditor() {
    const activeFile = this.getActiveFile();
    if (!activeFile) {
      return null;
    }
    const leaves = this.app.workspace.getLeavesOfType("markdown");
    for (const leaf of leaves) {
      const view2 = leaf.view;
      if (view2 instanceof import_obsidian15.MarkdownView && view2.file === activeFile) {
        return view2.editor;
      }
    }
    const activeEditor = this.app.workspace.activeEditor;
    if ((activeEditor == null ? void 0 : activeEditor.editor) && activeEditor.file === activeFile) {
      return activeEditor.editor;
    }
    const view = this.app.workspace.getActiveViewOfType(import_obsidian15.MarkdownView);
    if (view && view.file === activeFile) {
      return view.editor;
    }
    return null;
  }
  /**
   * Get the active file
   */
  getActiveFile() {
    return this.app.workspace.getActiveFile();
  }
  /**
   * Get the currently selected text
   */
  getSelectedText() {
    const editor = this.getActiveEditor();
    if (!editor) return "";
    return editor.getSelection();
  }
  /**
   * Get the current cursor position
   */
  getCursorPosition() {
    const editor = this.getActiveEditor();
    if (!editor) return null;
    return editor.getCursor();
  }
  /**
   * Set the cursor position (optionally focus the editor)
   */
  setCursorPosition(position, shouldFocus = false) {
    const editor = this.getActiveEditor();
    if (!editor) return;
    editor.setCursor(position);
    if (shouldFocus) {
      editor.focus();
    }
  }
  /**
   * Extract comprehensive document context
   */
  async getDocumentContext() {
    const file = this.getActiveFile();
    const editor = this.getActiveEditor();
    if (!file || !editor) {
      return null;
    }
    const content = editor.getValue();
    const selectedText = this.getSelectedText();
    const cursorPosition = this.getCursorPosition();
    const headings = this.extractHeadings(content);
    const surroundingLines = cursorPosition ? this.getSurroundingLines(content, cursorPosition.line) : void 0;
    return {
      file,
      filename: file.basename,
      content,
      headings,
      selectedText: selectedText || void 0,
      cursorPosition: cursorPosition || void 0,
      surroundingLines
    };
  }
  /**
   * Extract headings from document content
   */
  extractHeadings(content) {
    const lines = content.split("\n");
    const headings = [];
    let charCount = 0;
    lines.forEach((line, index) => {
      const headingMatch = line.match(/^(#{1,6})\s+(.+)$/);
      if (headingMatch) {
        const level = headingMatch[1].length;
        const text = headingMatch[2];
        headings.push({
          text,
          level,
          line: index,
          position: {
            start: charCount,
            end: charCount + line.length
          }
        });
      }
      charCount += line.length + 1;
    });
    return headings;
  }
  /**
   * Get lines surrounding the cursor position
   */
  getSurroundingLines(content, currentLine, contextSize = 5) {
    const lines = content.split("\n");
    const startLine = Math.max(0, currentLine - contextSize);
    const endLine = Math.min(lines.length - 1, currentLine + contextSize);
    return {
      before: lines.slice(startLine, currentLine),
      after: lines.slice(currentLine + 1, endLine + 1)
    };
  }
  /**
   * Apply an edit to the document
   */
  async applyEdit(content, position, options = {}) {
    const editor = this.getActiveEditor();
    const file = this.getActiveFile();
    if (!editor || !file) {
      return {
        success: false,
        error: "No active editor or file",
        editType: "insert"
      };
    }
    try {
      let appliedAt;
      if (position === "cursor") {
        appliedAt = editor.getCursor();
        editor.replaceRange(content, appliedAt);
      } else if (position === "selection") {
        const selection = editor.getSelection();
        if (!selection) {
          return {
            success: false,
            error: "No text selected",
            editType: "replace"
          };
        }
        appliedAt = editor.getCursor("from");
        editor.replaceSelection(content);
      } else if (position === "end") {
        const lastLine = editor.lastLine();
        const lastLineLength = editor.getLine(lastLine).length;
        appliedAt = { line: lastLine, ch: lastLineLength };
        const currentContent = editor.getValue();
        const newContent = currentContent + (currentContent.endsWith("\n") ? "" : "\n") + content;
        await this.app.vault.modify(file, newContent);
      } else {
        appliedAt = position;
        editor.replaceRange(content, appliedAt);
      }
      if (options.selectNewText) {
        const endPos = {
          line: appliedAt.line + content.split("\n").length - 1,
          ch: content.includes("\n") ? content.split("\n").pop().length : appliedAt.ch + content.length
        };
        editor.setSelection(appliedAt, endPos);
      }
      if (options.scrollToEdit) {
        editor.scrollIntoView({
          from: appliedAt,
          to: appliedAt
        }, true);
      }
      return {
        success: true,
        content,
        editType: position === "selection" ? "replace" : position === "end" ? "append" : "insert",
        appliedAt
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "insert"
      };
    }
  }
  /**
   * Delete content at cursor location
   */
  async deleteContent(target) {
    const editor = this.getActiveEditor();
    const file = this.getActiveFile();
    if (!editor || !file) {
      return {
        success: false,
        error: "No active editor or file",
        editType: "delete"
      };
    }
    try {
      if (target === "selection") {
        const selection = editor.getSelection();
        if (!selection) {
          return {
            success: false,
            error: "No text selected",
            editType: "delete"
          };
        }
        editor.replaceSelection("");
        return {
          success: true,
          editType: "delete"
        };
      } else if (target === "line") {
        const cursor = editor.getCursor();
        const line = cursor.line;
        editor.replaceRange(
          "",
          { line, ch: 0 },
          { line: line + 1, ch: 0 }
        );
        return {
          success: true,
          editType: "delete",
          appliedAt: { line, ch: 0 }
        };
      }
      return {
        success: false,
        error: "Invalid delete target",
        editType: "delete"
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "delete"
      };
    }
  }
  /**
   * Get the full document content
   */
  async getDocumentContent() {
    const editor = this.getActiveEditor();
    if (!editor) return null;
    return editor.getValue();
  }
  /**
   * Replace the entire document content
   */
  async setDocumentContent(content) {
    const file = this.getActiveFile();
    if (!file) {
      return {
        success: false,
        error: "No active file",
        editType: "replace"
      };
    }
    try {
      await this.app.vault.modify(file, content);
      return {
        success: true,
        content,
        editType: "replace"
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
  // Conversation management methods
  /**
   * Add user message to conversation
   */
  async addUserMessage(content, command) {
    if (!this.conversationManager) return;
    const file = this.getActiveFile();
    if (file) {
      await this.conversationManager.addUserMessage(file, content, command);
    }
  }
  /**
   * Add assistant response to conversation
   */
  async addAssistantMessage(content, result) {
    if (!this.conversationManager) return;
    const file = this.getActiveFile();
    if (file) {
      await this.conversationManager.addAssistantMessage(file, content, result);
    }
  }
  /**
   * Add system message to conversation
   */
  async addSystemMessage(content) {
    if (!this.conversationManager) return;
    const file = this.getActiveFile();
    if (file) {
      await this.conversationManager.addSystemMessage(file, content);
    }
  }
  /**
   * Get conversation context for AI prompts
   */
  getConversationContext(maxMessages = 6) {
    if (!this.conversationManager) return "";
    const file = this.getActiveFile();
    if (!file) return "";
    return this.conversationManager.getConversationContext(file, maxMessages);
  }
  /**
   * Clear conversation for current file
   */
  async clearConversation() {
    if (!this.conversationManager) return;
    const file = this.getActiveFile();
    if (file) {
      await this.conversationManager.clearConversation(file);
    }
  }
  /**
   * Get conversation statistics for current file
   */
  getConversationStats() {
    if (!this.conversationManager) return null;
    const file = this.getActiveFile();
    if (!file) return null;
    return this.conversationManager.getStats(file);
  }
  /**
   * Check if current file has an active conversation
   */
  hasConversation() {
    if (!this.conversationManager) return false;
    const file = this.getActiveFile();
    if (!file) return false;
    return this.conversationManager.hasConversation(file);
  }
  /**
   * Export conversation for current file
   */
  exportConversation() {
    if (!this.conversationManager) return null;
    const file = this.getActiveFile();
    if (!file) return null;
    return this.conversationManager.exportConversation(file);
  }
  /**
   * Replace selected text with new content
   * Handles undo/redo properly and preserves cursor position
   */
  async replaceSelection(newText, from, to) {
    const editor = this.getActiveEditor();
    const file = this.getActiveFile();
    if (!editor || !file) {
      return {
        success: false,
        error: "No active editor or file",
        editType: "replace"
      };
    }
    try {
      const fromPos = from || editor.getCursor("from");
      const toPos = to || editor.getCursor("to");
      editor.replaceRange(newText, fromPos, toPos);
      const newCursorPos = {
        line: fromPos.line + (newText.split("\n").length - 1),
        ch: newText.includes("\n") ? newText.split("\n").pop().length : fromPos.ch + newText.length
      };
      editor.setCursor(newCursorPos);
      editor.focus();
      return {
        success: true,
        content: newText,
        appliedAt: fromPos,
        editType: "replace"
      };
    } catch (error) {
      console.error("Error replacing selection:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
};

// src/core/context-builder.ts
var ContextBuilder = class {
  constructor(settings) {
    var _a, _b, _c, _d;
    this.defaultConfig = {
      maxContextLines: 20,
      includeStructure: true,
      includeHistory: false,
      temperature: (_b = (_a = settings == null ? void 0 : settings.general) == null ? void 0 : _a.defaultTemperature) != null ? _b : 0.7,
      maxTokens: (_d = (_c = settings == null ? void 0 : settings.general) == null ? void 0 : _c.defaultMaxTokens) != null ? _d : 1e3
    };
  }
  /**
   * Build prompt for a specific command
   */
  buildPrompt(command, documentContext, options = {}, conversationContext) {
    const config = { ...this.defaultConfig, ...options };
    const systemPrompt = this.buildSystemPrompt(command.action, config);
    const contextInfo = this.buildContextInfo(documentContext, command, config, conversationContext);
    const userPrompt = this.buildUserPrompt(command, contextInfo);
    return {
      systemPrompt,
      userPrompt,
      context: contextInfo,
      config: {
        temperature: config.temperature || 0.7,
        maxTokens: config.maxTokens || 1e3
      }
    };
  }
  /**
   * Build system prompt based on action type
   */
  buildSystemPrompt(action, config) {
    const basePrompt = `You are Nova, an AI writing partner that helps users edit documents at their cursor position. You work with Markdown documents in Obsidian.

IMPORTANT GUIDELINES:
- Provide ONLY the content to be inserted/modified, no explanations or meta-text
- Maintain the document's existing style and tone unless specifically asked to change it
- Preserve formatting, structure, and markdown syntax
- Work at the user's cursor position - every edit happens where they are focused
- Do not add headers unless specifically requested
- Focus on the user's immediate editing context`;
    const actionSpecificPrompts = {
      "add": `

ACTION: ADD CONTENT
- Generate EXACTLY what the user requested - follow their instruction literally
- Do NOT create content related to the document theme unless specifically asked
- Focus on the user's specific request, not the document's existing content
- Match basic formatting style but prioritize the user's exact request`,
      "edit": `

ACTION: EDIT CONTENT  
- Improve, modify, or enhance the specified content
- Preserve the original intent while following user instructions
- Apply style, tone, or structural changes as requested`,
      "delete": `

ACTION: DELETE CONTENT
- Confirm what should be deleted by providing the exact text to remove
- Be precise about deletion boundaries
- Respond "CONFIRMED" if the deletion is clear`,
      "grammar": `

ACTION: GRAMMAR & SPELLING
- Fix grammar, spelling, and punctuation errors
- Improve clarity while preserving meaning
- Maintain the original tone and style`,
      "rewrite": `

ACTION: REWRITE CONTENT
- Generate alternative content that serves the same purpose
- Apply requested style, tone, or structural changes
- Create fresh content while maintaining core meaning`,
      "metadata": `

ACTION: UPDATE METADATA
- Modify frontmatter properties, tags, or document metadata
- Return ONLY a JSON object with the properties to update
- For tags, return as an array: {"tags": ["tag1", "tag2"]}
- For other properties: {"title": "New Title", "author": "Name"}
- Do NOT include properties that shouldn't be changed
- Do NOT return any explanatory text, ONLY the JSON object`
    };
    return basePrompt + (actionSpecificPrompts[action] || "");
  }
  /**
   * Build context information for the prompt
   */
  buildContextInfo(documentContext, command, config, conversationContext) {
    let context = `DOCUMENT: ${documentContext.filename}
`;
    if (config.includeStructure && documentContext.headings.length > 0) {
      context += `DOCUMENT STRUCTURE:
`;
      const structure = this.buildDocumentStructure(documentContext.headings);
      context += structure + "\n";
    }
    context += this.buildTargetContext(command, documentContext);
    if (conversationContext && config.includeHistory) {
      context += `
CONVERSATION CONTEXT:
${conversationContext}
`;
    }
    if (command.action === "add" && command.target === "cursor") {
      if (documentContext.surroundingLines) {
        const before = documentContext.surroundingLines.before.slice(-3).join("\n");
        const after = documentContext.surroundingLines.after.slice(0, 3).join("\n");
        context += `
LOCAL CONTEXT (for style reference only):
Before cursor:
${before}

After cursor:
${after}
`;
      }
    } else {
      context += `
FULL DOCUMENT:
${documentContext.content}
`;
    }
    return context;
  }
  /**
   * Build target-specific context
   */
  buildTargetContext(command, documentContext) {
    switch (command.target) {
      case "selection":
        if (documentContext.selectedText) {
          return `
SELECTED TEXT:
${documentContext.selectedText}
`;
        }
        return `
No text currently selected.
`;
      case "cursor":
        if (documentContext.surroundingLines) {
          const context = `
CURSOR CONTEXT:
`;
          const before = documentContext.surroundingLines.before.join("\n");
          const after = documentContext.surroundingLines.after.join("\n");
          return context + `Before cursor:
${before}

After cursor:
${after}
`;
        }
        return `
Cursor position context not available.
`;
      case "document":
        return `
Targeting entire document.
`;
      case "end":
        return `
Targeting end of document.
`;
      default:
        return `
Working at cursor position.
`;
    }
  }
  /**
   * Build user prompt with instructions
   */
  buildUserPrompt(command, contextInfo) {
    let prompt2 = contextInfo;
    prompt2 += `
USER REQUEST: ${command.instruction}
`;
    if (command.context) {
      prompt2 += `ADDITIONAL REQUIREMENTS: ${command.context}
`;
    }
    prompt2 += this.getFocusInstructions(command);
    prompt2 += this.getOutputInstructions(command);
    return prompt2;
  }
  /**
   * Get focus instructions based on target
   */
  getFocusInstructions(command) {
    const actionGuidance = {
      "add": "Add new content",
      "edit": "Modify existing content",
      "delete": "Remove specified content",
      "rewrite": "Generate alternative content",
      "grammar": "Fix grammar and spelling",
      "metadata": "Update document metadata"
    };
    switch (command.target) {
      case "selection":
        return `
FOCUS: ${actionGuidance[command.action]} in the selected text.
`;
      case "cursor":
        return `
FOCUS: ${actionGuidance[command.action]} at the current cursor position.
`;
      case "document":
        return `
FOCUS: ${actionGuidance[command.action]} for the entire document.
`;
      case "end":
        return `
FOCUS: Add content at the very end of the document, after all existing content. Ensure it flows naturally.
`;
      default:
        return `
FOCUS: ${actionGuidance[command.action]} at the cursor position.
`;
    }
  }
  /**
   * Get output instructions based on action
   */
  getOutputInstructions(command) {
    switch (command.action) {
      case "add":
        return "OUTPUT: Provide only the new content to be added.";
      case "edit":
        return "OUTPUT: Provide only the improved version of the content.";
      case "delete":
        return 'OUTPUT: Confirm what should be deleted by providing the exact text to remove, or respond "CONFIRMED" if the deletion is clear.';
      case "grammar":
        return "OUTPUT: Provide the corrected version with proper grammar and spelling.";
      case "rewrite":
        return "OUTPUT: Provide the completely rewritten content that serves the same purpose.";
      case "metadata":
        return "OUTPUT: Provide the updated metadata in proper YAML format.";
      default:
        return "OUTPUT: Provide only the requested content changes.";
    }
  }
  /**
   * Build document structure from headings
   */
  buildDocumentStructure(headings) {
    return headings.map((heading) => {
      const indent = "  ".repeat(heading.level - 1);
      return `${indent}- ${heading.text}`;
    }).join("\n");
  }
  /**
   * Validate generated prompt
   */
  validatePrompt(prompt2) {
    const issues = [];
    if (!prompt2.systemPrompt || prompt2.systemPrompt.trim().length === 0) {
      issues.push("System prompt is empty");
    }
    if (!prompt2.userPrompt || prompt2.userPrompt.trim().length === 0) {
      issues.push("User prompt is empty");
    }
    if (prompt2.userPrompt.length > 1e4) {
      issues.push("User prompt is too long (>10000 characters)");
    }
    return {
      valid: issues.length === 0,
      issues
    };
  }
};

// src/core/command-parser.ts
var COMMAND_PATTERNS = [
  {
    action: "grammar",
    patterns: [
      /\b(grammar|spell|spelling|proofread|polish)\b/i,
      /\bcheck\b.*\b(grammar|spelling|errors)\b/i,
      /\bmake\s+.*\b(grammatical|correct|proper)\b/i,
      /\bfix\s+.*\b(grammar|errors|mistakes|typos)\b/i,
      /\bcorrect\b.*\b(grammar|spelling|errors)\b/i
    ],
    targets: ["selection", "document"]
  },
  {
    action: "metadata",
    patterns: [
      // Tag-specific patterns with colon format (highest priority)
      /^(add|set|update|remove)\s+tags?:/i,
      // Tag optimization patterns
      /\b(clean up|cleanup|optimize|improve|review|analyze)\s+.*\btags?\b/i,
      /\b(suggest|recommend)\s+.*\btags?\b/i,
      /^add suggested tags$/i,
      /^add tags$/i,
      // Simple "add tags" for AI suggestions
      // General metadata patterns
      /\b(update|set|change|modify)\s+.*\b(property|properties|metadata|frontmatter|tag|tags)\b/i,
      /\b(set|update|change|add)\s+.*\b(title|author|date|status)\b/i,
      /\bupdate\s+.*\bfrontmatter\b/i,
      // Tag-specific patterns that exclude content/text/section
      /\b(add|remove|update)\s+(?!.*\b(content|text|section|paragraph|about)\b).*\btag[s]?\b/i,
      /\bset\s+.*\bproperty\b/i
    ],
    targets: ["document"]
  },
  {
    action: "rewrite",
    patterns: [
      /\b(rewrite|reword|rephrase|restructure|reorganize)\b/i,
      /\bwrite\s+.*\b(new|different|alternative)\b/i,
      /\bgenerate\s+.*\b(sections|parts|multiple)\b/i,
      /\bmake\s+.*\b(sections|parts|multiple)\b/i
    ],
    targets: ["document", "end"]
  },
  {
    action: "delete",
    patterns: [
      /\b(delete|remove|eliminate|cut|erase)\b/i,
      /\bget\s+rid\s+of\b/i,
      /\btake\s+out\b/i,
      /\bdrop\b.*\b(section|paragraph|part)\b/i
    ],
    targets: ["selection"]
  },
  {
    action: "add",
    patterns: [
      /\b(add|create|write|insert|include|append|prepend)\b.*\b(section|paragraph|heading|content|text|part)\b/i,
      /\b(add|create|write|insert|append|prepend)\b(?!\s+.*\b(better|clearer|more|less|tags?|property|properties|metadata|frontmatter)\b)/i,
      /\bmake\s+.*\b(section|part)\b/i,
      /\bgenerate\b.*\b(section|content|text)\b/i,
      // Specific patterns for append/prepend with location
      /\b(append|add)\b.*\b(after|following)\b/i,
      /\b(prepend|add)\b.*\b(before|preceding)\b/i
    ],
    targets: ["end"]
  },
  {
    action: "edit",
    patterns: [
      /\b(edit|modify|change|update|revise|improve|enhance)\b/i,
      /\bmake\s+.*\b(better|clearer|more|less|formal|professional|detailed|comprehensive)\b/i,
      /\b(fix|correct|adjust)\b(?!.*\b(grammar|spelling|errors)\b)/i,
      /\b(expand|shorten|condense)\b/i
    ],
    targets: ["selection"]
  }
];
var TARGET_PATTERNS = [
  { pattern: /\b(?:selected|highlighted|chosen)\s+(?:text|content)/i, target: "selection" },
  { pattern: /\b(?:entire|whole|full)\s+(?:document|file|note)/i, target: "document" },
  { pattern: /\b(?:end|bottom|conclusion)/i, target: "end" }
];
var CommandParser = class {
  /**
   * Parse natural language input into an EditCommand
   */
  parseCommand(input, hasSelection = false) {
    const normalizedInput = input.trim().toLowerCase();
    const action = this.detectAction(normalizedInput);
    const target = this.detectTarget(normalizedInput, hasSelection, action);
    const context = this.extractContext(input);
    return {
      action,
      target,
      instruction: input,
      // Keep original input for display
      context
    };
  }
  /**
   * Detect the action type from the input
   */
  detectAction(input) {
    for (const commandPattern of COMMAND_PATTERNS) {
      for (const pattern of commandPattern.patterns) {
        if (pattern.test(input)) {
          return commandPattern.action;
        }
      }
    }
    if (/\b(add|create|write|insert|include|generate.*section)\b/i.test(input)) {
      return "add";
    }
    if (/\b(fix|correct|grammar|spell|proofread|polish)\b/i.test(input)) {
      return "grammar";
    }
    if (/\b(delete|remove|eliminate)\b/i.test(input)) {
      return "delete";
    }
    if (/\b(rewrite|rephrase|restructure|generate.*new)\b/i.test(input)) {
      return "rewrite";
    }
    if (/\b(update|set|change|modify|add).*\b(property|properties|metadata|frontmatter|tag|tags|title|author|date|status)\b/i.test(input)) {
      return "metadata";
    }
    return "edit";
  }
  /**
   * Detect the target type from the input (simplified for cursor-only editing)
   */
  detectTarget(input, hasSelection, action) {
    for (const targetPattern of TARGET_PATTERNS) {
      if (targetPattern.pattern.test(input)) {
        return targetPattern.target;
      }
    }
    if (hasSelection && (action === "edit" || action === "grammar" || action === "delete")) {
      return "selection";
    }
    switch (action) {
      case "add":
        return "cursor";
      // Changed from 'end' to 'cursor' for cursor-only editing
      case "edit":
        return hasSelection ? "selection" : "cursor";
      case "delete":
        return hasSelection ? "selection" : "cursor";
      case "grammar":
        return hasSelection ? "selection" : "document";
      case "rewrite":
        return hasSelection ? "selection" : "cursor";
      // Changed from 'end' to support cursor-only
      case "metadata":
        return "document";
      default:
        return "cursor";
    }
  }
  /**
   * Extract additional context from the input
   */
  extractContext(input) {
    const styleIndicators = [
      "formal",
      "informal",
      "casual",
      "professional",
      "academic",
      "technical",
      "simple",
      "complex",
      "detailed",
      "brief",
      "concise",
      "verbose",
      "friendly",
      "serious",
      "humorous",
      "creative",
      "analytical"
    ];
    const foundStyles = styleIndicators.filter(
      (style) => input.toLowerCase().includes(style)
    );
    let context = "";
    if (foundStyles.length > 0) {
      context += `Style: ${foundStyles.join(", ")}. `;
    }
    if (input.includes("short") || input.includes("brief") || input.includes("concise")) {
      context += "Keep it brief. ";
    }
    if (input.includes("long") || input.includes("detailed") || input.includes("comprehensive")) {
      context += "Provide detailed content. ";
    }
    if (input.includes("bullet") || input.includes("list")) {
      context += "Use bullet points or lists. ";
    }
    if (input.includes("example") || input.includes("examples")) {
      context += "Include examples. ";
    }
    if (input.includes("number") || input.includes("numbered")) {
      context += "Use numbered lists. ";
    }
    return context.trim();
  }
  /**
   * Validate if a command can be executed
   */
  validateCommand(command, hasSelection) {
    if (command.target === "selection" && !hasSelection) {
      return {
        valid: false,
        error: "This command requires text to be selected first"
      };
    }
    if (command.action === "add" && command.target === "selection") {
      return {
        valid: false,
        error: 'Cannot add content to a selection. Use "edit" to modify selected text'
      };
    }
    return { valid: true };
  }
  /**
   * Get suggested commands based on context
   */
  getSuggestions(hasSelection) {
    const suggestions = [];
    if (hasSelection) {
      suggestions.push(
        "Make this more concise",
        "Fix grammar in this text",
        "Make this more professional",
        "Expand on this point"
      );
    } else {
      suggestions.push(
        "Add content at cursor",
        "Fix grammar in this document",
        "Add conclusion at end",
        "Create a summary"
      );
    }
    return suggestions;
  }
  /**
   * Parse multiple commands from a single input
   */
  parseMultipleCommands(input) {
    const separators = /\b(?:then|also|and then|after that|next|additionally)\b/i;
    const parts = input.split(separators);
    if (parts.length === 1) {
      return [this.parseCommand(input)];
    }
    return parts.map((part) => part.trim()).filter((part) => part.length > 0).map((part) => this.parseCommand(part));
  }
  /**
   * Get command description for display
   */
  getCommandDescription(command) {
    const { action, target } = command;
    let description = "";
    switch (action) {
      case "add":
        description = "Add new content";
        break;
      case "edit":
        description = "Edit existing content";
        break;
      case "delete":
        description = "Remove content";
        break;
      case "grammar":
        description = "Fix grammar and spelling";
        break;
      case "rewrite":
        description = "Generate new content";
        break;
      case "metadata":
        description = "Update document metadata";
        break;
    }
    switch (target) {
      case "selection":
        description += " in selected text";
        break;
      case "cursor":
        description += " at cursor position";
        break;
      case "document":
        description += " in entire document";
        break;
      case "end":
        description += " at end of document";
        break;
    }
    return description;
  }
};

// src/core/prompt-builder.ts
var PromptBuilder = class {
  constructor(documentEngine, conversationManager) {
    this.contextBuilder = new ContextBuilder();
    this.documentEngine = documentEngine;
    this.conversationManager = conversationManager;
    this.commandParser = new CommandParser();
  }
  /**
   * Build prompt for a user message - determines if it's a command or conversation
   */
  async buildPromptForMessage(message, file, options = {}) {
    const isLikelyCommand = this.isLikelyCommand(message);
    if (isLikelyCommand && file) {
      const parsedCommand = this.commandParser.parseCommand(message);
      return this.buildCommandPrompt(parsedCommand, file, options);
    } else {
      return this.buildConversationPrompt(message, file, options);
    }
  }
  /**
   * Check if a message is likely a command vs conversation
   */
  isLikelyCommand(message) {
    const lowerMessage = message.toLowerCase().trim();
    if (lowerMessage.startsWith(":")) {
      return true;
    }
    const actionVerbs = [
      "add",
      "insert",
      "append",
      "prepend",
      "include",
      "create",
      "write",
      "generate",
      "edit",
      "modify",
      "change",
      "update",
      "revise",
      "improve",
      "enhance",
      "replace",
      "delete",
      "remove",
      "eliminate",
      "cut",
      "erase",
      "drop",
      "fix",
      "correct",
      "proofread",
      "polish",
      "check",
      "rewrite",
      "reword",
      "rephrase",
      "restructure",
      "reorganize"
    ];
    const startsWithAction = actionVerbs.some((verb) => {
      const verbPattern = new RegExp(`^${verb}\\b`, "i");
      return verbPattern.test(lowerMessage);
    });
    if (startsWithAction) {
      const questionIndicators = [
        /^(how|what|why|when|where|which|who|can|could|should|would|will|is|are|am|do|does|did)/i,
        /\?/,
        // Contains question mark
        /\b(help|advice|suggest|recommend|think|opinion)\b/i
      ];
      const isQuestion = questionIndicators.some((pattern) => pattern.test(lowerMessage));
      if (isQuestion) {
        return false;
      }
      return true;
    }
    const explicitCommandPatterns = [
      // Grammar/spelling commands that don't start with action verbs
      /\b(grammar|spell|spelling|proofread|polish)\b.*\b(check|fix|correct)\b/i,
      // Metadata commands with different structures
      /\bset\s+(the\s+)?(title|tags|metadata|properties)/i,
      /\bupdate\s+(the\s+)?(title|tags|metadata|properties)/i,
      // Tag-specific patterns
      /^(add|set|update|remove)\s+tags?:/i,
      /\b(clean up|cleanup|optimize|improve|review|analyze)\s+.*\btags?\b/i,
      /\b(suggest|recommend)\s+.*\btags?\b/i,
      /^add suggested tags$/i
    ];
    for (const pattern of explicitCommandPatterns) {
      if (pattern.test(lowerMessage)) {
        return true;
      }
    }
    return false;
  }
  /**
   * Build prompt for a specific command
   */
  async buildCommandPrompt(command, file, options = {}) {
    if (!file) {
      throw new Error("File is required for command prompts");
    }
    const documentContext = await this.getDocumentContext(file);
    let conversationContext;
    if (options.includeHistory) {
      const recentMessages = await this.conversationManager.getRecentMessages(file, 5);
      conversationContext = this.formatConversationHistory(recentMessages);
    }
    return this.contextBuilder.buildPrompt(command, documentContext, options, conversationContext);
  }
  /**
   * Build prompt for conversation (non-command messages)
   */
  async buildConversationPrompt(message, file, options = {}) {
    let documentContext;
    let recentHistory = [];
    if (file) {
      documentContext = await this.getDocumentContext(file);
      recentHistory = await this.conversationManager.getRecentMessages(file, 5);
    }
    const systemPrompt = `You are Nova, an AI writing partner that helps users with their documents and writing tasks.

Key capabilities:
- Answer questions about documents and content
- Provide writing assistance and suggestions
- Help with research and analysis
- Engage in natural conversation about the user's work

Guidelines:
- Provide helpful, accurate responses
- Stay focused on the user's needs
- Be conversational but professional
- Reference document context when relevant`;
    let userPrompt = `USER REQUEST: ${message}`;
    if (documentContext && file) {
      userPrompt = `Current document: ${documentContext.filename}

${userPrompt}`;
    }
    if (recentHistory.length > 0) {
      const historyString = this.formatConversationHistory(recentHistory);
      userPrompt = `RECENT CONVERSATION:
${historyString}

${userPrompt}`;
    }
    return {
      systemPrompt,
      userPrompt,
      context: (documentContext == null ? void 0 : documentContext.content) || "",
      config: {
        temperature: options.temperature || 0.7,
        maxTokens: options.maxTokens || 2e3
      }
    };
  }
  /**
   * Build simple prompt for basic operations
   */
  buildSimplePrompt(instruction, context) {
    const systemPrompt = `You are Nova, an AI writing partner that helps users with their documents and writing tasks.

Guidelines:
- Provide helpful, accurate responses
- Stay focused on the user's needs
- Be conversational but professional`;
    let userPrompt = `USER REQUEST: ${instruction}`;
    if (context) {
      userPrompt = `Context: ${context}

${userPrompt}`;
    }
    return {
      systemPrompt,
      userPrompt,
      context: context || "",
      config: {
        temperature: 0.7,
        maxTokens: 2e3
      }
    };
  }
  /**
   * Get document context for a file
   */
  async getDocumentContext(file) {
    const context = await this.documentEngine.getDocumentContext();
    if (!context) {
      const content = await this.documentEngine.getDocumentContent() || "";
      return {
        file,
        filename: file.basename,
        content,
        headings: [],
        selectedText: void 0,
        surroundingLines: void 0
      };
    }
    return context;
  }
  /**
   * Format conversation history for context
   */
  formatConversationHistory(messages) {
    if (messages.length === 0) return "";
    let formatted = "RECENT CONVERSATION:\n";
    messages.forEach((msg) => {
      const role = msg.role === "user" ? "You" : "Nova";
      formatted += `${role}: ${msg.content}
`;
    });
    return formatted;
  }
  /**
   * Validate and optimize prompt before sending to AI
   */
  validateAndOptimizePrompt(prompt2) {
    const validation = this.contextBuilder.validatePrompt(prompt2);
    if (!validation.valid) {
      let optimizedPrompt = { ...prompt2 };
      const tokenCount = this.estimateTokenCount(prompt2);
      if (tokenCount > 8e3) {
        const maxContextLength = Math.floor(prompt2.context.length * 0.6);
        optimizedPrompt.context = prompt2.context.substring(0, maxContextLength) + "\n[Context truncated...]";
      }
      if (prompt2.config.temperature < 0 || prompt2.config.temperature > 1) {
        optimizedPrompt.config.temperature = Math.max(0, Math.min(1, prompt2.config.temperature));
      }
      if (prompt2.config.maxTokens < 10 || prompt2.config.maxTokens > 4e3) {
        optimizedPrompt.config.maxTokens = Math.max(10, Math.min(4e3, prompt2.config.maxTokens));
      }
      return optimizedPrompt;
    }
    return prompt2;
  }
  /**
   * Get token count estimate for a prompt
   */
  getTokenCount(prompt2) {
    return this.estimateTokenCount(prompt2);
  }
  /**
   * Create prompt for a specific action with minimal context
   */
  async buildQuickPrompt(action, instruction, file) {
    const command = {
      action,
      target: "document",
      instruction,
      context: void 0
    };
    if (file) {
      return this.buildCommandPrompt(command, file, {
        maxContextLines: 10,
        includeStructure: false,
        includeHistory: false
      });
    } else {
      return this.buildSimplePrompt(instruction);
    }
  }
  /**
   * Simple token count estimation
   */
  estimateTokenCount(prompt2) {
    const totalText = prompt2.systemPrompt + prompt2.userPrompt + prompt2.context;
    return Math.ceil(totalText.length / 4);
  }
  /**
   * Build prompt with custom system prompt override
   */
  async buildCustomPrompt(systemPrompt, userMessage, file) {
    let context = "";
    if (file) {
      const documentContext = await this.getDocumentContext(file);
      context = `Document: ${documentContext.filename}
${documentContext.content}`;
    }
    return {
      systemPrompt,
      userPrompt: userMessage,
      context,
      config: {
        temperature: 0.7,
        maxTokens: 1e3
      }
    };
  }
};

// src/core/commands/add-command.ts
var AddCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute add command
   */
  async execute(command, streamingCallback) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "insert"
        };
      }
      const validation = this.validateCommand(command);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "insert"
        };
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt2 = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const promptValidation = this.contextBuilder.validatePrompt(prompt2);
      if (!promptValidation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${promptValidation.issues.join(", ")}`,
          editType: "insert"
        };
      }
      try {
        let content;
        let result;
        if (streamingCallback) {
          result = await this.executeWithStreaming(command, documentContext, prompt2, streamingCallback);
        } else {
          content = await this.providerManager.generateText(
            prompt2.userPrompt,
            {
              systemPrompt: prompt2.systemPrompt,
              temperature: prompt2.config.temperature,
              maxTokens: prompt2.config.maxTokens
            }
          );
          if (!content || content.trim().length === 0) {
            return {
              success: false,
              error: "AI provider returned empty content",
              editType: "insert"
            };
          }
          result = await this.applyAddition(command, documentContext, content);
        }
        return result;
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : "AI generation failed",
          editType: "insert"
        };
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "insert"
      };
    }
  }
  /**
   * Apply addition based on command target
   */
  async applyAddition(command, documentContext, content) {
    switch (command.target) {
      case "cursor":
        return await this.documentEngine.applyEdit(
          content,
          "cursor",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "end":
        return await this.documentEngine.applyEdit(
          content,
          "end",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "document":
        return await this.documentEngine.applyEdit(
          content,
          "end",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "selection":
        if (documentContext.selectedText) {
          return await this.documentEngine.applyEdit(
            content,
            "selection",
            {
              scrollToEdit: true,
              selectNewText: true
            }
          );
        } else {
          return await this.documentEngine.applyEdit(
            content,
            "cursor",
            {
              scrollToEdit: true,
              selectNewText: true
            }
          );
        }
      default:
        return {
          success: false,
          error: `Invalid add target: ${command.target}`,
          editType: "insert"
        };
    }
  }
  /**
   * Validate add command
   */
  validateCommand(command) {
    if (command.action !== "add") {
      return {
        valid: false,
        error: "Command action must be add"
      };
    }
    if (!command.instruction || command.instruction.trim().length === 0) {
      return {
        valid: false,
        error: "Add instruction is required"
      };
    }
    return { valid: true };
  }
  /**
   * Execute add command with streaming support
   */
  async executeWithStreaming(command, documentContext, prompt2, streamingCallback) {
    try {
      let fullContent = "";
      const stream = this.providerManager.generateTextStream(
        prompt2.userPrompt,
        {
          systemPrompt: prompt2.systemPrompt,
          temperature: prompt2.config.temperature,
          maxTokens: prompt2.config.maxTokens
        }
      );
      for await (const chunk of stream) {
        if (chunk.content) {
          fullContent += chunk.content;
          streamingCallback(fullContent, false);
        }
      }
      streamingCallback(fullContent, true);
      if (!fullContent || fullContent.trim().length === 0) {
        return {
          success: false,
          error: "AI provider returned empty content",
          editType: "insert"
        };
      }
      return {
        success: true,
        content: fullContent,
        editType: "insert",
        appliedAt: documentContext.cursorPosition || { line: 0, ch: 0 }
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Streaming failed",
        editType: "insert"
      };
    }
  }
};

// src/core/commands/edit-command.ts
var EditCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute edit command
   */
  async execute(command, streamingCallback) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "replace"
        };
      }
      const validation = this.validateCommand(command, !!documentContext.selectedText);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "replace"
        };
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt2 = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const promptValidation = this.contextBuilder.validatePrompt(prompt2);
      if (!promptValidation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${promptValidation.issues.join(", ")}`,
          editType: "replace"
        };
      }
      try {
        let content;
        let result;
        if (streamingCallback) {
          result = await this.executeWithStreaming(command, documentContext, prompt2, streamingCallback);
        } else {
          content = await this.providerManager.generateText(
            prompt2.userPrompt,
            {
              systemPrompt: prompt2.systemPrompt,
              temperature: prompt2.config.temperature,
              maxTokens: prompt2.config.maxTokens
            }
          );
          if (!content || content.trim().length === 0) {
            return {
              success: false,
              error: "AI provider returned empty content",
              editType: "replace"
            };
          }
          result = await this.applyEdit(command, documentContext, content);
        }
        return result;
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : "AI generation failed",
          editType: "replace"
        };
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
  /**
   * Apply edit based on command target
   */
  async applyEdit(command, documentContext, content) {
    switch (command.target) {
      case "selection":
        if (documentContext.selectedText) {
          return await this.documentEngine.applyEdit(
            content,
            "selection",
            {
              scrollToEdit: true,
              selectNewText: true
            }
          );
        } else {
          return {
            success: false,
            error: "No text selected for editing",
            editType: "replace"
          };
        }
      case "cursor":
        return await this.documentEngine.applyEdit(
          content,
          "cursor",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "document":
        return await this.documentEngine.setDocumentContent(content);
      case "end":
        return await this.documentEngine.applyEdit(
          content,
          "end",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      default:
        return {
          success: false,
          error: `Invalid edit target: ${command.target}`,
          editType: "replace"
        };
    }
  }
  /**
   * Validate edit command
   */
  validateCommand(command, hasSelection) {
    if (command.target === "selection" && !hasSelection) {
      return {
        valid: false,
        error: "Please select text to edit"
      };
    }
    if (command.action !== "edit") {
      return {
        valid: false,
        error: "Command action must be edit"
      };
    }
    if (!command.instruction || command.instruction.trim().length === 0) {
      return {
        valid: false,
        error: "Edit instruction is required"
      };
    }
    return { valid: true };
  }
  /**
   * Execute edit command with streaming support
   */
  async executeWithStreaming(command, documentContext, prompt2, streamingCallback) {
    try {
      let fullContent = "";
      const stream = this.providerManager.generateTextStream(
        prompt2.userPrompt,
        {
          systemPrompt: prompt2.systemPrompt,
          temperature: prompt2.config.temperature,
          maxTokens: prompt2.config.maxTokens
        }
      );
      for await (const chunk of stream) {
        if (chunk.content) {
          fullContent += chunk.content;
          streamingCallback(fullContent, false);
        }
      }
      streamingCallback(fullContent, true);
      if (!fullContent || fullContent.trim().length === 0) {
        return {
          success: false,
          error: "AI provider returned empty content",
          editType: "replace"
        };
      }
      return {
        success: true,
        content: fullContent,
        editType: "replace",
        appliedAt: documentContext.cursorPosition || { line: 0, ch: 0 }
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Streaming failed",
        editType: "replace"
      };
    }
  }
};

// src/core/commands/delete-command.ts
var DeleteCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute delete command
   */
  async execute(command) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "delete"
        };
      }
      const validation = this.validateCommand(command, !!documentContext.selectedText);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "delete"
        };
      }
      const result = await this.applyDeletion(command, documentContext);
      return result;
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "delete"
      };
    }
  }
  /**
   * Apply deletion based on command target
   */
  async applyDeletion(command, documentContext) {
    switch (command.target) {
      case "selection":
        if (documentContext.selectedText) {
          return await this.documentEngine.applyEdit(
            "",
            "selection",
            {
              scrollToEdit: true,
              selectNewText: false
            }
          );
        } else {
          return {
            success: false,
            error: "No text selected for deletion",
            editType: "delete"
          };
        }
      case "cursor":
        return await this.documentEngine.deleteContent("line");
      case "document":
        return await this.documentEngine.setDocumentContent("");
      case "end":
        return {
          success: false,
          error: "Cannot delete from end - use cursor or selection instead",
          editType: "delete"
        };
      default:
        return {
          success: false,
          error: `Invalid delete target: ${command.target}`,
          editType: "delete"
        };
    }
  }
  /**
   * Validate delete command
   */
  validateCommand(command, hasSelection) {
    if (command.target === "selection" && !hasSelection) {
      return {
        valid: false,
        error: "Please select text to delete"
      };
    }
    if (command.action !== "delete") {
      return {
        valid: false,
        error: "Command action must be delete"
      };
    }
    return { valid: true };
  }
};

// src/core/commands/grammar-command.ts
var GrammarCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute grammar command
   */
  async execute(command, streamingCallback) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "replace"
        };
      }
      const validation = this.validateCommand(command, !!documentContext.selectedText);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "replace"
        };
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt2 = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const promptValidation = this.contextBuilder.validatePrompt(prompt2);
      if (!promptValidation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${promptValidation.issues.join(", ")}`,
          editType: "replace"
        };
      }
      try {
        let content;
        let result;
        if (streamingCallback) {
          result = await this.executeWithStreaming(command, documentContext, prompt2, streamingCallback);
        } else {
          content = await this.providerManager.generateText(
            prompt2.userPrompt,
            {
              systemPrompt: prompt2.systemPrompt,
              temperature: prompt2.config.temperature,
              maxTokens: prompt2.config.maxTokens
            }
          );
          if (!content || content.trim().length === 0) {
            return {
              success: false,
              error: "AI provider returned empty content",
              editType: "replace"
            };
          }
          result = await this.applyGrammarFix(command, documentContext, content);
        }
        return result;
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : "AI generation failed",
          editType: "replace"
        };
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
  /**
   * Apply grammar fix based on command target
   */
  async applyGrammarFix(command, documentContext, content) {
    switch (command.target) {
      case "selection":
        if (documentContext.selectedText) {
          return await this.documentEngine.applyEdit(
            content,
            "selection",
            {
              scrollToEdit: true,
              selectNewText: true
            }
          );
        } else {
          return {
            success: false,
            error: "No text selected for grammar correction",
            editType: "replace"
          };
        }
      case "document":
        return await this.documentEngine.setDocumentContent(content);
      case "cursor":
        return {
          success: false,
          error: 'Please select text to correct grammar, or use "document" to fix entire document',
          editType: "replace"
        };
      case "end":
        return {
          success: false,
          error: 'Grammar correction requires selecting text or specifying "document"',
          editType: "replace"
        };
      default:
        return {
          success: false,
          error: `Invalid grammar target: ${command.target}`,
          editType: "replace"
        };
    }
  }
  /**
   * Validate grammar command
   */
  validateCommand(command, hasSelection) {
    if (command.action !== "grammar") {
      return {
        valid: false,
        error: "Command action must be grammar"
      };
    }
    if (command.target === "selection" && !hasSelection) {
      return {
        valid: false,
        error: "Please select text to correct grammar"
      };
    }
    if (command.target !== "selection" && command.target !== "document") {
      return {
        valid: false,
        error: "Grammar correction requires selecting text or targeting entire document"
      };
    }
    return { valid: true };
  }
  /**
   * Execute grammar command with streaming support
   */
  async executeWithStreaming(command, documentContext, prompt2, streamingCallback) {
    try {
      let fullContent = "";
      const stream = this.providerManager.generateTextStream(
        prompt2.userPrompt,
        {
          systemPrompt: prompt2.systemPrompt,
          temperature: prompt2.config.temperature,
          maxTokens: prompt2.config.maxTokens
        }
      );
      for await (const chunk of stream) {
        if (chunk.content) {
          fullContent += chunk.content;
          streamingCallback(fullContent, false);
        }
      }
      streamingCallback(fullContent, true);
      if (!fullContent || fullContent.trim().length === 0) {
        return {
          success: false,
          error: "AI provider returned empty content",
          editType: "replace"
        };
      }
      return {
        success: true,
        content: fullContent,
        editType: "replace",
        appliedAt: documentContext.cursorPosition || { line: 0, ch: 0 }
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Streaming failed",
        editType: "replace"
      };
    }
  }
};

// src/core/commands/rewrite-command.ts
var RewriteCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute rewrite command
   */
  async execute(command, streamingCallback) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "replace"
        };
      }
      const validation = this.validateCommand(command);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "replace"
        };
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt2 = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const promptValidation = this.contextBuilder.validatePrompt(prompt2);
      if (!promptValidation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${promptValidation.issues.join(", ")}`,
          editType: "replace"
        };
      }
      try {
        let content;
        let result;
        if (streamingCallback) {
          result = await this.executeWithStreaming(command, documentContext, prompt2, streamingCallback);
        } else {
          content = await this.providerManager.generateText(
            prompt2.userPrompt,
            {
              systemPrompt: prompt2.systemPrompt,
              temperature: prompt2.config.temperature,
              maxTokens: prompt2.config.maxTokens
            }
          );
          if (!content || content.trim().length === 0) {
            return {
              success: false,
              error: "AI provider returned empty content",
              editType: "replace"
            };
          }
          result = await this.applyRewrite(command, documentContext, content);
        }
        return result;
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : "AI generation failed",
          editType: "replace"
        };
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
  /**
   * Apply rewrite based on command target
   */
  async applyRewrite(command, documentContext, content) {
    switch (command.target) {
      case "document":
        return await this.documentEngine.setDocumentContent(content);
      case "end":
        return await this.documentEngine.applyEdit(
          content,
          "end",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "selection":
        if (documentContext.selectedText) {
          return await this.documentEngine.applyEdit(
            content,
            "selection",
            {
              scrollToEdit: true,
              selectNewText: true
            }
          );
        } else {
          return {
            success: false,
            error: "No text selected for rewriting",
            editType: "replace"
          };
        }
      case "cursor":
        return await this.documentEngine.applyEdit(
          content,
          "cursor",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      default:
        return {
          success: false,
          error: `Invalid rewrite target: ${command.target}`,
          editType: "replace"
        };
    }
  }
  /**
   * Validate rewrite command
   */
  validateCommand(command) {
    if (command.action !== "rewrite") {
      return {
        valid: false,
        error: "Command action must be rewrite"
      };
    }
    if (!command.instruction || command.instruction.trim().length === 0) {
      return {
        valid: false,
        error: "Rewrite instruction is required"
      };
    }
    return { valid: true };
  }
  /**
   * Execute rewrite command with streaming support
   */
  async executeWithStreaming(command, documentContext, prompt2, streamingCallback) {
    try {
      let fullContent = "";
      const stream = this.providerManager.generateTextStream(
        prompt2.userPrompt,
        {
          systemPrompt: prompt2.systemPrompt,
          temperature: prompt2.config.temperature,
          maxTokens: prompt2.config.maxTokens
        }
      );
      for await (const chunk of stream) {
        if (chunk.content) {
          fullContent += chunk.content;
          streamingCallback(fullContent, false);
        }
      }
      streamingCallback(fullContent, true);
      if (!fullContent || fullContent.trim().length === 0) {
        return {
          success: false,
          error: "AI provider returned empty content",
          editType: "replace"
        };
      }
      return {
        success: true,
        content: fullContent,
        editType: "replace",
        appliedAt: documentContext.cursorPosition || { line: 0, ch: 0 }
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Streaming failed",
        editType: "replace"
      };
    }
  }
};

// src/core/commands/metadata-command.ts
var MetadataCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute a metadata update command
   */
  async execute(command) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "replace"
        };
      }
      const tagResult = await this.handleDirectTagOperation(command.instruction, documentContext);
      if (tagResult) {
        return tagResult;
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt2 = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const validation = this.contextBuilder.validatePrompt(prompt2);
      if (!validation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${validation.issues.join(", ")}`,
          editType: "replace"
        };
      }
      const aiResponse = await this.providerManager.complete(
        prompt2.systemPrompt,
        prompt2.userPrompt,
        {
          temperature: prompt2.config.temperature,
          maxTokens: prompt2.config.maxTokens
        }
      );
      const updates = this.parsePropertyUpdates(aiResponse);
      if (!updates || Object.keys(updates).length === 0) {
        console.error("Failed to parse metadata updates. AI response:", aiResponse);
        return {
          success: false,
          error: "No property updates found in AI response",
          editType: "replace"
        };
      }
      console.log("Metadata updates:", updates);
      const updatedContent = this.updateFrontmatter(documentContext.content, updates);
      await this.app.vault.modify(documentContext.file, updatedContent);
      const successMessage = this.generateSuccessMessage(updates);
      return {
        success: true,
        content: updatedContent,
        appliedAt: { line: 0, ch: 0 },
        editType: "replace",
        successMessage
      };
    } catch (error) {
      return {
        success: false,
        error: `Failed to update metadata: ${error.message}`,
        editType: "replace"
      };
    }
  }
  /**
   * Parse AI response to extract property updates
   */
  parsePropertyUpdates(response) {
    try {
      const jsonMatch = response.match(/```json\s*([\s\S]*?)\s*```/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[1]);
      }
      const updates = {};
      const lines = response.split("\n");
      for (const line of lines) {
        const match = line.match(/^[-\s]*([^:]+):\s*(.+)$/);
        if (match) {
          const key = match[1].trim();
          let value = match[2].trim();
          try {
            value = JSON.parse(value);
          } catch (e) {
            if (value.startsWith('"') && value.endsWith('"') || value.startsWith("'") && value.endsWith("'")) {
              value = value.slice(1, -1);
            }
          }
          updates[key] = value;
        }
      }
      return Object.keys(updates).length > 0 ? updates : null;
    } catch (error) {
      return null;
    }
  }
  /**
   * Update or create frontmatter in document content
   */
  updateFrontmatter(content, updates) {
    const lines = content.split("\n");
    if (lines[0] === "---") {
      let endIndex = -1;
      for (let i = 1; i < lines.length; i++) {
        if (lines[i] === "---") {
          endIndex = i;
          break;
        }
      }
      if (endIndex > 0) {
        const existingProps = {};
        for (let i = 1; i < endIndex; i++) {
          const match = lines[i].match(/^([^:]+):\s*(.*)$/);
          if (match) {
            const key = match[1].trim();
            let value = match[2].trim();
            try {
              value = JSON.parse(value);
            } catch (e) {
            }
            existingProps[key] = value;
          }
        }
        const mergedProps = { ...existingProps, ...updates };
        const newFrontmatter2 = ["---"];
        for (const [key, value] of Object.entries(mergedProps)) {
          if (value === null || value === void 0) {
            continue;
          }
          const formattedValue = typeof value === "object" ? JSON.stringify(value) : String(value);
          newFrontmatter2.push(`${key}: ${formattedValue}`);
        }
        newFrontmatter2.push("---");
        return [
          ...newFrontmatter2,
          ...lines.slice(endIndex + 1)
        ].join("\n");
      }
    }
    const newFrontmatter = ["---"];
    for (const [key, value] of Object.entries(updates)) {
      if (value === null || value === void 0) {
        continue;
      }
      const formattedValue = typeof value === "object" ? JSON.stringify(value) : String(value);
      newFrontmatter.push(`${key}: ${formattedValue}`);
    }
    newFrontmatter.push("---", "");
    return newFrontmatter.join("\n") + content;
  }
  /**
   * Handle direct tag operations (add, remove, set tags)
   */
  async handleDirectTagOperation(instruction, documentContext) {
    const lowerInstruction = instruction.toLowerCase().trim();
    const colonMatch = lowerInstruction.match(/^(add|set|update|remove)\s+tags?:\s*(.*)$/);
    if (colonMatch) {
      const action = colonMatch[1];
      const tagString = colonMatch[2];
      const newTags = tagString ? tagString.split(",").map((t) => t.trim()).filter((t) => t) : [];
      if (action === "add" && newTags.length === 0) {
        return await this.handleAITagOperation("add suggested tags", documentContext);
      }
      const currentTags = this.getCurrentTags(documentContext.content);
      let updatedTags = [];
      let message = "";
      switch (action) {
        case "add":
          const tagsToAdd = newTags.filter(
            (tag) => !currentTags.some((existing) => existing.toLowerCase() === tag.toLowerCase())
          );
          updatedTags = [...currentTags, ...tagsToAdd];
          message = tagsToAdd.length > 0 ? `Added ${tagsToAdd.length} tag${tagsToAdd.length !== 1 ? "s" : ""}: ${tagsToAdd.join(", ")}` : "No new tags to add (duplicates filtered)";
          break;
        case "remove":
          const lowerNewTags = newTags.map((t) => t.toLowerCase());
          const beforeCount = currentTags.length;
          updatedTags = currentTags.filter(
            (tag) => !lowerNewTags.includes(tag.toLowerCase())
          );
          const removedCount = beforeCount - updatedTags.length;
          message = removedCount > 0 ? `Removed ${removedCount} tag${removedCount !== 1 ? "s" : ""}` : "No tags found to remove";
          break;
        case "set":
        case "update":
          updatedTags = [...new Set(newTags.map((t) => t.toLowerCase()))];
          message = `Set ${updatedTags.length} tag${updatedTags.length !== 1 ? "s" : ""}`;
          break;
      }
      const updates = { tags: updatedTags };
      const updatedContent = this.updateFrontmatter(documentContext.content, updates);
      await this.app.vault.modify(documentContext.file, updatedContent);
      return {
        success: true,
        content: updatedContent,
        appliedAt: { line: 0, ch: 0 },
        editType: "replace",
        successMessage: message
      };
    }
    if (/\b(clean up|cleanup|optimize|improve|review|analyze)\s+.*\btags?\b/i.test(lowerInstruction) || /\b(suggest|recommend)\s+.*\btags?\b/i.test(lowerInstruction) || /^add suggested tags$/i.test(lowerInstruction) || /^add tags$/i.test(lowerInstruction) || // Handle simple "add tags" as AI suggestion
    /^update tags$/i.test(lowerInstruction)) {
      return await this.handleAITagOperation(instruction, documentContext);
    }
    return null;
  }
  /**
   * Handle AI-powered tag operations (suggest, optimize, clean up)
   */
  async handleAITagOperation(instruction, documentContext) {
    const currentTags = this.getCurrentTags(documentContext.content);
    const systemPrompt = `You are an expert at document tagging and metadata organization. Your task is to analyze documents and provide optimal tags.

Rules for tags:
- Tags should be lowercase
- Use hyphens for multi-word tags (e.g., "machine-learning")
- Be specific but not overly granular
- Aim for 5-10 tags per document
- Focus on key concepts, topics, and themes FROM THE ACTUAL DOCUMENT CONTENT
- Tags must be directly relevant to the document's subject matter
- Avoid generic tags like "document" or "text"
- Consider the document's purpose, audience, and main topics
- Extract tags based on the document's actual content, not random topics

IMPORTANT: Base your tag suggestions ONLY on the content provided. Do not invent unrelated tags.

Return ONLY a JSON object with a "tags" array and a "reasoning" field explaining your choices.`;
    let userPrompt = "";
    if (/add suggested/i.test(instruction) || /^add tags$/i.test(instruction)) {
      userPrompt = `Carefully analyze the following document and suggest relevant tags based on its actual content.

Current tags: ${currentTags.length > 0 ? currentTags.join(", ") : "none"}

DOCUMENT TO ANALYZE:
===START OF DOCUMENT===
${documentContext.content}
===END OF DOCUMENT===

Based on the above document content, suggest additional tags that:
1. Reflect the actual topics discussed in the document
2. Capture key concepts, technologies, or themes mentioned
3. Would help with discoverability and organization
4. Are directly relevant to what this document is about

DO NOT suggest tags about topics not mentioned in the document.`;
    } else if (/clean up|cleanup/i.test(instruction)) {
      userPrompt = `Clean up and optimize the tags for this document by analyzing both the current tags and the document content.

Current tags: ${currentTags.join(", ")}

DOCUMENT CONTENT:
===START OF DOCUMENT===
${documentContext.content}
===END OF DOCUMENT===

Tasks:
1. Remove duplicate or redundant tags
2. Consolidate similar tags (e.g., "js" and "javascript")
3. Remove tags that aren't relevant to the document content
4. Standardize tag format (lowercase, hyphenated)
5. Ensure remaining tags accurately reflect the document

Provide a cleaned-up tag list based on the actual document content.`;
    } else if (/optimize|improve|review|analyze|update/i.test(instruction)) {
      userPrompt = `Analyze this document thoroughly and provide an optimized set of tags that accurately represents its content.

Current tags: ${currentTags.length > 0 ? currentTags.join(", ") : "none"}

DOCUMENT TO ANALYZE:
===START OF DOCUMENT===
${documentContext.content}
===END OF DOCUMENT===

Tasks:
1. Review the document content carefully
2. Remove any tags that aren't relevant to the actual content
3. Add tags for important concepts, topics, or themes that are missing
4. Ensure all tags directly relate to what's discussed in the document
5. Aim for 5-10 highly relevant tags

Provide an optimized tag list that best represents THIS SPECIFIC document's content.`;
    }
    try {
      const defaultMaxTokens = this.providerManager.getDefaultMaxTokens();
      const aiResponse = await this.providerManager.complete(systemPrompt, userPrompt, {
        temperature: 0.3,
        maxTokens: defaultMaxTokens
      });
      const parsed = this.parseAITagResponse(aiResponse);
      if (!parsed || !parsed.tags || parsed.tags.length === 0) {
        const preview = aiResponse.length > 100 ? aiResponse.substring(0, 100) + "..." : aiResponse;
        return {
          success: false,
          error: `Could not parse AI tag suggestions. AI response: "${preview}"`,
          editType: "replace"
        };
      }
      const updates = { tags: parsed.tags };
      const updatedContent = this.updateFrontmatter(documentContext.content, updates);
      await this.app.vault.modify(documentContext.file, updatedContent);
      let message = "";
      if (/add suggested/i.test(instruction) || /^add tags$/i.test(instruction)) {
        const addedTags = parsed.tags.filter(
          (tag) => !currentTags.some((existing) => existing.toLowerCase() === tag.toLowerCase())
        );
        message = `Added ${addedTags.length} suggested tag${addedTags.length !== 1 ? "s" : ""}: ${addedTags.join(", ")}`;
      } else if (/clean up|cleanup/i.test(instruction)) {
        message = `Cleaned up tags: ${currentTags.length} \u2192 ${parsed.tags.length} tags`;
      } else {
        message = `Optimized tags: ${parsed.tags.length} tag${parsed.tags.length !== 1 ? "s" : ""} (was ${currentTags.length})`;
      }
      return {
        success: true,
        content: updatedContent,
        appliedAt: { line: 0, ch: 0 },
        editType: "replace",
        successMessage: message
      };
    } catch (error) {
      return {
        success: false,
        error: `Failed to process tag operation: ${error.message}`,
        editType: "replace"
      };
    }
  }
  /**
   * Get current tags from document content
   */
  getCurrentTags(content) {
    if (!content) return [];
    const lines = content.split("\n");
    if (lines.length > 0 && lines[0] === "---") {
      let inFrontmatter = true;
      for (let i = 1; i < lines.length && inFrontmatter; i++) {
        if (lines[i] === "---") {
          break;
        }
        const tagMatch = lines[i].match(/^tags:\s*(.*)$/);
        if (tagMatch) {
          const tagValue = tagMatch[1].trim();
          if (!tagValue) return [];
          try {
            const parsed = JSON.parse(tagValue);
            if (Array.isArray(parsed)) {
              return parsed.filter((t) => t);
            }
          } catch (e) {
            return tagValue.split(",").map((t) => t.trim()).filter((t) => t);
          }
        }
      }
    }
    return [];
  }
  /**
   * Parse AI response for tag operations
   */
  parseAITagResponse(response) {
    try {
      const cleanResponse = response.trim();
      const jsonMatch = cleanResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        try {
          const parsed = JSON.parse(jsonMatch[0]);
          if (parsed.tags && Array.isArray(parsed.tags)) {
            return {
              tags: parsed.tags.map((t) => String(t).toLowerCase().trim().replace(/\s+/g, "-")).filter((t) => t),
              reasoning: parsed.reasoning
            };
          }
        } catch (e) {
        }
      }
      const patterns = [
        // JSON array: tags: ["tag1", "tag2"]
        /tags?:\s*\[([^\]]+)\]/i,
        // Comma list: Tags: tag1, tag2, tag3
        /tags?:\s*([^\n]+?)(?:\n|$)/i,
        // Bullet list: - tag1\n- tag2
        /(?:tags?:)?\s*(?:\n)?(\s*[-•*]\s*.+(?:\n\s*[-•*]\s*.+)*)/i
      ];
      for (const pattern of patterns) {
        const match = cleanResponse.match(pattern);
        if (match) {
          let tagString = match[1];
          let tags = [];
          if (tagString.includes("-") || tagString.includes("\u2022") || tagString.includes("*")) {
            tags = tagString.split(/\n/).map((line) => line.replace(/^\s*[-•*]\s*/, "").trim()).filter((t) => t);
          } else {
            tags = tagString.split(",").map((t) => t.trim().replace(/["']/g, "")).filter((t) => t);
          }
          if (tags.length > 0) {
            return {
              tags: tags.map((t) => t.toLowerCase().trim().replace(/\s+/g, "-")).filter((t) => t)
            };
          }
        }
      }
      const suggestMatch = cleanResponse.match(/(?:suggest|recommend|propose|here are|tags are)[:\s]+([^.]+)/i);
      if (suggestMatch) {
        const tags = suggestMatch[1].split(/[,\n]/).map((t) => t.trim().replace(/["']/g, "").replace(/^and\s+/i, "")).filter((t) => t);
        if (tags.length > 0) {
          return {
            tags: tags.map((t) => t.toLowerCase().trim()).filter((t) => t)
          };
        }
      }
      const lines = cleanResponse.split("\n").map((line) => line.trim()).filter((line) => line);
      const validTags = lines.filter((line) => {
        return line.length > 0 && line.length < 50 && !line.includes(":") && !line.toLowerCase().includes("tag") && !line.toLowerCase().includes("here") && !line.toLowerCase().includes("suggest");
      }).map((line) => {
        return line.toLowerCase().replace(/^[-•*#]\s*/, "").replace(/^\d+\.\s*/, "").trim().replace(/\s+/g, "-");
      }).filter((tag) => tag);
      if (validTags.length > 0) {
        return { tags: validTags };
      }
      console.error("Failed to parse AI tag response:", cleanResponse);
      return null;
    } catch (error) {
      console.error("Error parsing AI tag response:", error, "Response was:", response);
      return null;
    }
  }
  /**
   * Generate success message based on updates
   */
  generateSuccessMessage(updates) {
    const keys = Object.keys(updates);
    if (keys.length === 0) return "Metadata updated";
    if (keys.length === 1) {
      const key = keys[0];
      if (key === "tags") {
        const count = Array.isArray(updates.tags) ? updates.tags.length : 0;
        return `Updated tags (${count} tag${count !== 1 ? "s" : ""})`;
      }
      return `Updated ${key}`;
    }
    return `Updated ${keys.length} properties`;
  }
};

// src/licensing/feature-config.ts
var SUPERNOVA_FEATURES = {
  // Commands (unified) - 2 month early access
  "commands": {
    supernovaDate: "2025-07-31",
    // Supernova early access
    generalDate: "2025-09-30",
    // General availability 
    description: "Command system with : triggers, command button, and custom commands"
  },
  // Auto-growing input - 1 month early access
  "auto-input": {
    supernovaDate: "2025-06-15",
    // Launch day
    generalDate: "2025-07-15",
    // 1 month later
    description: "Auto-growing input area with smooth transitions"
  },
  // Enhanced provider management - 2 month early access
  "enhanced-providers": {
    supernovaDate: "2025-06-15",
    // Launch day
    generalDate: "2025-08-15",
    // 2 months later
    description: "Advanced provider configuration and switching"
  }
};
var CORE_FEATURES = [
  "basic_editing",
  // Add, edit, delete, grammar, rewrite commands
  "all_ai_providers",
  // Claude, OpenAI, Google, Ollama
  "file_conversations",
  // File-scoped conversation history
  "provider_switching",
  // Switch providers in chat
  "mobile_access",
  // Full mobile support
  "api_key_config",
  // Configure own API keys
  "sidebar_chat",
  // Chat interface in sidebar
  "document_context",
  // Current document context
  "multi-doc-context"
  // Reference other documents with [[doc]] syntax
];

// src/licensing/feature-manager.ts
var FeatureManager = class {
  constructor(licenseValidator, debugSettings) {
    this.licenseValidator = licenseValidator;
    this.features = /* @__PURE__ */ new Map();
    this.supernovaLicense = null;
    this.isSupernova = false;
    this.debugSettings = { enabled: false };
    if (debugSettings) {
      this.debugSettings = debugSettings;
    }
    this.initializeFeatureFlags();
  }
  /**
   * Initialize all feature flags
   * Core features are always enabled
   * Time-gated features depend on current date and Supernova status
   */
  initializeFeatureFlags() {
    CORE_FEATURES.forEach((featureKey) => {
      this.registerFeature({
        key: featureKey,
        enabled: true,
        description: this.getCoreFeatureDescription(featureKey)
      });
    });
    Object.entries(SUPERNOVA_FEATURES).forEach(([key, config]) => {
      const enabled = this.isTimeGatedFeatureEnabled(key, config);
      this.registerFeature({
        key,
        enabled,
        description: config.description,
        isTimeGated: true,
        earlyAccessOnly: !this.isGenerallyAvailable(config)
      });
    });
  }
  /**
   * Get description for core features
   */
  getCoreFeatureDescription(key) {
    const descriptions = {
      "basic_editing": "Basic document editing commands (add, edit, delete, grammar, rewrite)",
      "all_ai_providers": "Access to all AI providers (Claude, OpenAI, Google, Ollama)",
      "file_conversations": "File-scoped conversation history",
      "provider_switching": "Switch AI providers directly in chat interface",
      "mobile_access": "Full mobile device support",
      "api_key_config": "Configure your own API keys",
      "sidebar_chat": "Chat interface in sidebar",
      "document_context": "Current document context in conversations"
    };
    return descriptions[key] || key;
  }
  /**
   * Check if a time-gated feature should be enabled
   */
  isTimeGatedFeatureEnabled(featureKey, config) {
    const now = this.getCurrentDate();
    const supernovaDate = new Date(config.supernovaDate);
    const generalDate = new Date(config.generalDate);
    if (now >= generalDate) {
      return true;
    }
    if (this.getIsSupernova() && now >= supernovaDate) {
      return true;
    }
    return false;
  }
  /**
   * Check if feature is generally available (past general date)
   */
  isGenerallyAvailable(config) {
    const now = this.getCurrentDate();
    const generalDate = new Date(config.generalDate);
    return now >= generalDate;
  }
  /**
   * Get current date (can be overridden in debug mode)
   */
  getCurrentDate() {
    if (this.debugSettings.enabled && this.debugSettings.overrideDate) {
      return new Date(this.debugSettings.overrideDate);
    }
    return /* @__PURE__ */ new Date();
  }
  /**
   * Get Supernova status (can be overridden in debug mode)
   */
  getIsSupernova() {
    if (this.debugSettings.enabled && this.debugSettings.forceSupernova !== void 0) {
      return this.debugSettings.forceSupernova;
    }
    return this.isSupernova;
  }
  /**
   * Register a new feature flag
   */
  registerFeature(flag) {
    this.features.set(flag.key, flag);
  }
  /**
   * Update Supernova license and recalculate feature availability
   */
  async updateSupernovaLicense(licenseKey) {
    if (!licenseKey) {
      this.supernovaLicense = null;
      this.isSupernova = false;
    } else {
      const validation = await this.licenseValidator.validateSupernovaLicense(licenseKey);
      if (validation.valid && validation.license) {
        this.supernovaLicense = validation.license;
        this.isSupernova = true;
      } else {
        this.supernovaLicense = null;
        this.isSupernova = false;
      }
    }
    this.initializeFeatureFlags();
  }
  /**
   * Get current Supernova status
   */
  isSupernovaSupporter() {
    return this.getIsSupernova();
  }
  /**
   * Get current Supernova license
   */
  getSupernovaLicense() {
    return this.supernovaLicense;
  }
  /**
   * Check if a feature is enabled
   */
  isFeatureEnabled(featureKey) {
    var _a;
    if (this.isLegacyFeatureKey(featureKey)) {
      return true;
    }
    const feature = this.features.get(featureKey);
    return (_a = feature == null ? void 0 : feature.enabled) != null ? _a : false;
  }
  /**
   * Check if this is a legacy feature key that should always be enabled
   */
  isLegacyFeatureKey(key) {
    const legacyKeys = [
      "basic_editing",
      "local_ai_providers",
      "file_conversations",
      "single_cloud_provider",
      "unlimited_cloud_ai",
      "provider_switching",
      "mobile_access",
      "advanced_templates",
      "batch_operations",
      "cross_document_context",
      "priority_support"
    ];
    return legacyKeys.includes(key);
  }
  /**
   * Check feature access with detailed result
   */
  checkFeatureAccess(featureKey) {
    if (this.isLegacyFeatureKey(featureKey)) {
      return { allowed: true };
    }
    const feature = this.features.get(featureKey);
    if (!feature) {
      return {
        allowed: false,
        reason: `Feature '${featureKey}' not found`
      };
    }
    if (feature.enabled) {
      return { allowed: true };
    }
    if (feature.isTimeGated) {
      const config = SUPERNOVA_FEATURES[featureKey];
      if (config) {
        const now = this.getCurrentDate();
        const generalDate = new Date(config.generalDate);
        const supernovaDate = new Date(config.supernovaDate);
        if (this.getIsSupernova() && now < supernovaDate) {
          return {
            allowed: false,
            reason: `This feature will be available to Supernova supporters on ${config.supernovaDate}`,
            isSupernovaFeature: true,
            availableDate: supernovaDate
          };
        } else if (!this.getIsSupernova() && now < generalDate) {
          return {
            allowed: false,
            reason: `This feature is currently in early access for Supernova supporters. It will be available to all users on ${config.generalDate}`,
            isSupernovaFeature: true,
            availableDate: generalDate
          };
        }
      }
    }
    return {
      allowed: false,
      reason: "Feature is not available"
    };
  }
  /**
   * Get all enabled features
   */
  getEnabledFeatures() {
    return Array.from(this.features.values()).filter((feature) => feature.enabled);
  }
  /**
   * Get all Supernova early access features
   */
  getSupernovaFeatures() {
    return Array.from(this.features.values()).filter(
      (feature) => feature.isTimeGated && feature.earlyAccessOnly
    );
  }
  /**
   * Update debug settings for development testing
   */
  updateDebugSettings(settings) {
    this.debugSettings = settings;
    this.initializeFeatureFlags();
  }
  /**
   * Get debug settings
   */
  getDebugSettings() {
    return { ...this.debugSettings };
  }
  /**
   * Get feature summary
   */
  getFeatureSummary() {
    const enabled = [];
    const comingSoon = [];
    for (const [key, feature] of this.features) {
      if (feature.enabled) {
        enabled.push(key);
      } else if (feature.isTimeGated) {
        const config = SUPERNOVA_FEATURES[key];
        if (config) {
          const isSupernovaUser = this.getIsSupernova();
          comingSoon.push({
            key,
            availableDate: isSupernovaUser ? config.supernovaDate : config.generalDate,
            isSupernova: isSupernovaUser
          });
        }
      }
    }
    return {
      isSupernova: this.getIsSupernova(),
      enabled,
      comingSoon
    };
  }
};

// src/licensing/license-validator.ts
var LicenseValidator = class {
  constructor() {
    // Embedded signing key - in production this would be obfuscated
    this.SECRET_KEY = "nova-license-signing-key-2025";
  }
  /**
   * Validates a license key and returns validation result
   */
  async validateLicense(licenseKey) {
    try {
      const license = this.parseLicenseKey(licenseKey);
      if (!license) {
        return {
          valid: false,
          error: "INVALID_FORMAT" /* INVALID_FORMAT */
        };
      }
      const validationError = await this.validateLicenseObject(license);
      if (validationError) {
        return {
          valid: false,
          license,
          error: validationError
        };
      }
      return {
        valid: true,
        license
      };
    } catch (error) {
      return {
        valid: false,
        error: "MALFORMED_DATA" /* MALFORMED_DATA */
      };
    }
  }
  /**
   * Parses a license key string into a License object
   */
  parseLicenseKey(licenseKey) {
    try {
      const decoded = this.base64Decode(licenseKey);
      const parts = decoded.split("|");
      if (parts.length !== 5) {
        return null;
      }
      const [email, tier, expiresAtStr, issuedAtStr, signature] = parts;
      const expiresAt = expiresAtStr === "lifetime" ? null : new Date(expiresAtStr);
      const issuedAt = new Date(issuedAtStr);
      if (isNaN(issuedAt.getTime())) {
        return null;
      }
      if (expiresAt && isNaN(expiresAt.getTime())) {
        return null;
      }
      return {
        email,
        expiresAt,
        issuedAt,
        signature,
        licenseKey
      };
    } catch (error) {
      return null;
    }
  }
  /**
   * Safe base64 decode that handles both browser and Node.js environments
   */
  base64Decode(str) {
    if (typeof atob !== "undefined") {
      return atob(str);
    }
    return Buffer.from(str, "base64").toString("utf8");
  }
  /**
   * Safe base64 encode that handles both browser and Node.js environments
   */
  base64Encode(str) {
    if (typeof btoa !== "undefined") {
      return btoa(str);
    }
    return Buffer.from(str, "utf8").toString("base64");
  }
  /**
   * Validates a license object
   */
  async validateLicenseObject(license) {
    const expectedSignature = await this.generateSignature(
      license.email,
      "legacy",
      // Use legacy for old licenses
      license.expiresAt,
      license.issuedAt
    );
    if (license.signature !== expectedSignature) {
      return "INVALID_SIGNATURE" /* INVALID_SIGNATURE */;
    }
    if (license.expiresAt && /* @__PURE__ */ new Date() > license.expiresAt) {
      return "EXPIRED" /* EXPIRED */;
    }
    if (license.issuedAt > /* @__PURE__ */ new Date()) {
      return "FUTURE_DATED" /* FUTURE_DATED */;
    }
    return null;
  }
  /**
   * Generates HMAC-SHA256 signature for license data
   */
  async generateSignature(email, tier, expiresAt, issuedAt) {
    const data = `${email}|${tier}|${(expiresAt == null ? void 0 : expiresAt.toISOString()) || "lifetime"}|${issuedAt.toISOString()}`;
    const encoder = new TextEncoder();
    const keyData = encoder.encode(this.SECRET_KEY);
    const messageData = encoder.encode(data);
    const cryptoKey = await crypto.subtle.importKey(
      "raw",
      keyData,
      { name: "HMAC", hash: "SHA-256" },
      false,
      ["sign"]
    );
    const signature = await crypto.subtle.sign("HMAC", cryptoKey, messageData);
    return Array.from(new Uint8Array(signature)).map((b) => b.toString(16).padStart(2, "0")).join("");
  }
  /**
   * Creates a test license for development purposes
   */
  async createTestLicense(email, tier, lifetimeMode = true) {
    const issuedAt = /* @__PURE__ */ new Date();
    const expiresAt = lifetimeMode ? null : new Date(Date.now() + 365 * 24 * 60 * 60 * 1e3);
    const signature = await this.generateSignature(email, tier, expiresAt, issuedAt);
    const licenseData = `${email}|${tier}|${(expiresAt == null ? void 0 : expiresAt.toISOString()) || "lifetime"}|${issuedAt.toISOString()}|${signature}`;
    return this.base64Encode(licenseData);
  }
  /**
   * Validates a Supernova license key
   */
  async validateSupernovaLicense(licenseKey) {
    try {
      const license = this.parseSupernovaLicenseKey(licenseKey);
      if (!license) {
        return {
          valid: false,
          error: "INVALID_FORMAT" /* INVALID_FORMAT */
        };
      }
      const validationError = await this.validateSupernovaLicenseObject(license);
      if (validationError) {
        return {
          valid: false,
          license,
          error: validationError
        };
      }
      return {
        valid: true,
        license
      };
    } catch (error) {
      return {
        valid: false,
        error: "MALFORMED_DATA" /* MALFORMED_DATA */
      };
    }
  }
  /**
   * Parses a Supernova license key string
   */
  parseSupernovaLicenseKey(licenseKey) {
    try {
      const decoded = this.base64Decode(licenseKey);
      const parts = decoded.split("|");
      if (parts.length !== 5) {
        return null;
      }
      const [email, type, expiresAtStr, issuedAtStr, signature] = parts;
      if (type !== "annual" && type !== "lifetime") {
        return null;
      }
      const expiresAt = expiresAtStr === "lifetime" ? null : new Date(expiresAtStr);
      const issuedAt = new Date(issuedAtStr);
      if (isNaN(issuedAt.getTime())) {
        return null;
      }
      if (expiresAt && isNaN(expiresAt.getTime())) {
        return null;
      }
      return {
        email,
        type,
        expiresAt,
        issuedAt,
        signature,
        licenseKey
      };
    } catch (error) {
      return null;
    }
  }
  /**
   * Validates a Supernova license object
   */
  async validateSupernovaLicenseObject(license) {
    const expectedSignature = await this.generateSupernovaSignature(
      license.email,
      license.type,
      license.expiresAt,
      license.issuedAt
    );
    if (license.signature !== expectedSignature) {
      return "INVALID_SIGNATURE" /* INVALID_SIGNATURE */;
    }
    if (license.expiresAt && /* @__PURE__ */ new Date() > license.expiresAt) {
      return "EXPIRED" /* EXPIRED */;
    }
    if (license.issuedAt > /* @__PURE__ */ new Date()) {
      return "FUTURE_DATED" /* FUTURE_DATED */;
    }
    return null;
  }
  /**
   * Generates HMAC-SHA256 signature for Supernova license
   */
  async generateSupernovaSignature(email, type, expiresAt, issuedAt) {
    const data = `${email}|${type}|${(expiresAt == null ? void 0 : expiresAt.toISOString()) || "lifetime"}|${issuedAt.toISOString()}`;
    const encoder = new TextEncoder();
    const keyData = encoder.encode(this.SECRET_KEY);
    const messageData = encoder.encode(data);
    const cryptoKey = await crypto.subtle.importKey(
      "raw",
      keyData,
      { name: "HMAC", hash: "SHA-256" },
      false,
      ["sign"]
    );
    const signature = await crypto.subtle.sign("HMAC", cryptoKey, messageData);
    return Array.from(new Uint8Array(signature)).map((b) => b.toString(16).padStart(2, "0")).join("");
  }
  /**
   * Creates a test Supernova license for development
   */
  async createTestSupernovaLicense(email, type) {
    const issuedAt = /* @__PURE__ */ new Date();
    const expiresAt = type === "lifetime" ? null : new Date(Date.now() + 365 * 24 * 60 * 60 * 1e3);
    const signature = await this.generateSupernovaSignature(email, type, expiresAt, issuedAt);
    const licenseData = `${email}|${type}|${(expiresAt == null ? void 0 : expiresAt.toISOString()) || "lifetime"}|${issuedAt.toISOString()}|${signature}`;
    return this.base64Encode(licenseData);
  }
};

// src/core/ai-intent-classifier.ts
var AIIntentClassifier = class {
  constructor(providerManager) {
    this.providerManager = providerManager;
  }
  /**
   * Classify user input into one of three intents
   */
  async classifyIntent(userInput, hasSelection = false) {
    if (userInput.startsWith(":")) {
      return "CHAT";
    }
    return this.fallbackClassification(userInput);
  }
  /**
   * Simple heuristic fallback for when AI classification fails
   */
  fallbackClassification(userInput) {
    const lowerInput = userInput.toLowerCase().trim();
    if (lowerInput.includes("?") || lowerInput.startsWith("what") || lowerInput.startsWith("why") || lowerInput.startsWith("how") || lowerInput.startsWith("when") || lowerInput.startsWith("where") || lowerInput.startsWith("who") || lowerInput.startsWith("can you") || lowerInput.startsWith("could you") || lowerInput.includes("explain") || lowerInput.includes("help me understand")) {
      return "CHAT";
    }
    if (
      // Tag-specific patterns
      /\btags?\b/i.test(lowerInput) || /\btagging\b/i.test(lowerInput) || // Property patterns
      /\b(title|author|date|status|category|categories)\b/i.test(lowerInput) || // Metadata/frontmatter patterns
      /\b(metadata|frontmatter|properties|property)\b/i.test(lowerInput) || // Common metadata actions
      /^(add|update|set|remove|clean|optimize)\s+(tags?|title|author|metadata)/i.test(lowerInput)
    ) {
      return "METADATA";
    }
    if (/^(add|write|create|insert)\s+(a\s+)?(section|paragraph|conclusion|introduction|summary)/i.test(lowerInput) || /^(fix|correct|improve)\s+(grammar|spelling|writing)/i.test(lowerInput) || /^(make|rewrite|edit|modify|change)/i.test(lowerInput) || /^(delete|remove)\s+(the\s+)?(section|paragraph|sentence)/i.test(lowerInput)) {
      return "CONTENT";
    }
    return "CONTENT";
  }
};

// main.ts
var NOVA_ICON_SVG2 = `
<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <!-- Central star core -->
  <circle cx="12" cy="12" r="2.5" fill="currentColor"/>
  
  <!-- Primary rays (4 main directions) -->
  <path d="M12 1L12 6" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M12 18L12 23" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M23 12L18 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M6 12L1 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  
  <!-- Secondary rays (diagonals) -->
  <path d="M18.364 5.636L15.536 8.464" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M8.464 15.536L5.636 18.364" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M18.364 18.364L15.536 15.536" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M8.464 8.464L5.636 5.636" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
</svg>`;
var NovaPlugin = class extends import_obsidian16.Plugin {
  async onload() {
    try {
      await this.loadSettings();
      this.licenseValidator = new LicenseValidator();
      this.featureManager = new FeatureManager(
        this.licenseValidator,
        this.settings.licensing.debugSettings
      );
      if (this.settings.licensing.licenseKey) {
        await this.featureManager.updateSupernovaLicense(this.settings.licensing.licenseKey);
      }
      this.app.workspace.onLayoutReady(() => {
        const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
        if (leaves.length > 0) {
          const sidebarView = leaves[0].view;
          sidebarView.refreshSupernovaUI();
        }
      });
      (0, import_obsidian16.addIcon)("nova-star", NOVA_ICON_SVG2);
      this.aiProviderManager = new AIProviderManager(this.settings, this.featureManager);
      await this.aiProviderManager.initialize();
      const dataStore = {
        loadData: (key) => this.loadDataWithKey(key),
        saveData: (key, data) => this.saveDataWithKey(key, data)
      };
      this.conversationManager = new ConversationManager(dataStore);
      this.documentEngine = new DocumentEngine(this.app, dataStore);
      this.documentEngine.setConversationManager(this.conversationManager);
      this.contextBuilder = new ContextBuilder(this.settings);
      this.commandParser = new CommandParser();
      this.promptBuilder = new PromptBuilder(this.documentEngine, this.conversationManager);
      this.aiIntentClassifier = new AIIntentClassifier(this.aiProviderManager);
      this.addCommandHandler = new AddCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.editCommandHandler = new EditCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.deleteCommandHandler = new DeleteCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.grammarCommandHandler = new GrammarCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.rewriteCommandHandler = new RewriteCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.metadataCommandHandler = new MetadataCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.registerView(
        VIEW_TYPE_NOVA_SIDEBAR,
        (leaf) => new NovaSidebarView(leaf, this)
      );
      const ribbonIcon = this.addRibbonIcon("nova-star", "Nova AI", (evt) => {
        this.activateView();
      });
      this.addCommand({
        id: "nova-improve-writing",
        name: "Improve Writing",
        editorCallback: async (editor) => {
          await this.handleSelectionCommand("improve", editor);
        }
      });
      this.addCommand({
        id: "nova-make-longer",
        name: "Make Longer",
        editorCallback: async (editor) => {
          await this.handleSelectionCommand("longer", editor);
        }
      });
      this.addCommand({
        id: "nova-make-shorter",
        name: "Make Shorter",
        editorCallback: async (editor) => {
          await this.handleSelectionCommand("shorter", editor);
        }
      });
      TONE_OPTIONS.forEach((tone) => {
        this.addCommand({
          id: `nova-make-${tone.id}`,
          name: `Make ${tone.label}`,
          editorCallback: async (editor) => {
            await this.handleToneCommand(tone.id, editor);
          }
        });
      });
      this.addCommand({
        id: "nova-tell-nova",
        name: "Tell Nova...",
        editorCallback: async (editor) => {
          await this.handleSelectionCommand("custom", editor);
        }
      });
      this.addCommand({
        id: "open-nova-sidebar",
        name: "Open sidebar",
        callback: () => {
          this.activateView();
        }
      });
      this.selectionContextMenu = new SelectionContextMenu(this.app, this);
      this.selectionContextMenu.register();
      this.settingTab = new NovaSettingTab(this.app, this);
      this.addSettingTab(this.settingTab);
    } catch (error) {
    }
  }
  onunload() {
    var _a, _b;
    (_a = this.aiProviderManager) == null ? void 0 : _a.cleanup();
    (_b = this.conversationManager) == null ? void 0 : _b.cleanup();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    var _a;
    await this.saveData(this.settings);
    (_a = this.aiProviderManager) == null ? void 0 : _a.updateSettings(this.settings);
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await (leaf == null ? void 0 : leaf.setViewState({ type: VIEW_TYPE_NOVA_SIDEBAR, active: true }));
    }
    workspace.revealLeaf(leaf);
    if ((leaf == null ? void 0 : leaf.view) instanceof NovaSidebarView) {
      this.sidebarView = leaf.view;
    }
  }
  /**
   * Handle selection-based commands
   */
  async handleSelectionCommand(actionId, editor) {
    try {
      const selectedText = editor.getSelection();
      if (!selectedText || selectedText.trim().length === 0) {
        new import_obsidian16.Notice("Please select some text first");
        return;
      }
      await this.selectionContextMenu.handleSelectionAction(actionId, editor, selectedText);
    } catch (error) {
      console.error("Error executing Nova selection command:", error);
      new import_obsidian16.Notice("Failed to execute Nova action. Please try again.", 3e3);
    }
  }
  /**
   * Handle tone-specific commands
   */
  async handleToneCommand(toneId, editor) {
    try {
      const selectedText = editor.getSelection();
      if (!selectedText || selectedText.trim().length === 0) {
        new import_obsidian16.Notice("Please select some text first");
        return;
      }
      await this.selectionContextMenu.handleSelectionAction("tone", editor, selectedText, toneId);
    } catch (error) {
      console.error("Error executing Nova tone command:", error);
      new import_obsidian16.Notice("Failed to execute Nova action. Please try again.", 3e3);
    }
  }
  /**
   * Show upgrade prompt for Core tier mobile users
   */
  showMobileUpgradePrompt() {
    const modal = document.createElement("div");
    modal.className = "modal nova-mobile-upgrade-modal";
    modal.innerHTML = `
			<div class="modal-container">
				<div class="modal-bg"></div>
				<div class="modal-content">
					<div class="modal-header">
						<h3>Nova SuperNova Required</h3>
					</div>
					<div class="modal-body">
						<div class="nova-tier-badge core" style="margin-bottom: 1em;">
							<span class="tier-icon">FREE</span>
							<span class="tier-name">Core (Free)</span>
						</div>
						<p>Mobile access is available with Nova SuperNova.</p>
						<p>Core tier is limited to desktop use only.</p>
						<div class="nova-feature-list">
							<h4>SuperNova includes:</h4>
							<ul>
								<li>Mobile device support</li>
								<li>Multiple AI providers</li>
								<li>In-chat provider switching</li>
								<li>Advanced templates</li>
								<li>Priority support</li>
							</ul>
						</div>
					</div>
					<div class="modal-footer">
						<button class="mod-cta nova-upgrade-btn">Upgrade to SuperNova</button>
						<button class="nova-close-btn">Close</button>
					</div>
				</div>
			</div>
		`;
    const upgradeBtn = modal.querySelector(".nova-upgrade-btn");
    const closeBtn = modal.querySelector(".nova-close-btn");
    const modalBg = modal.querySelector(".modal-bg");
    const closeModal = () => {
      modal.remove();
    };
    upgradeBtn.addEventListener("click", () => {
      window.open("https://novawriter.ai/upgrade", "_blank");
      closeModal();
    });
    closeBtn.addEventListener("click", closeModal);
    modalBg.addEventListener("click", closeModal);
    document.body.appendChild(modal);
    new import_obsidian16.Notice("Nova mobile access requires SuperNova license", 8e3);
  }
  // DataStore interface implementation for ConversationManager
  async loadDataWithKey(key) {
    const allData = await this.loadData();
    return allData ? allData[key] : void 0;
  }
  async saveDataWithKey(key, data) {
    const allData = await this.loadData() || {};
    allData[key] = data;
    return await this.saveData(allData);
  }
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyIsICJzcmMvc2V0dGluZ3MudHMiLCAic3JjL3VpL3NpZGViYXItdmlldy50cyIsICJzcmMvY29yZS9kb2N1bWVudC1hbmFseXNpcy50cyIsICJzcmMvY29yZS9tdWx0aS1kb2MtY29udGV4dC50cyIsICJzcmMvYWkvbW9kZWxzLnRzIiwgInNyYy91aS9pbnB1dC1oYW5kbGVyLnRzIiwgInNyYy91aS93aWtpbGluay1zdWdnZXN0LnRzIiwgInNyYy91aS9jb21tYW5kLXN5c3RlbS50cyIsICJzcmMvdWkvY29udGV4dC1tYW5hZ2VyLnRzIiwgInNyYy91aS9jaGF0LXJlbmRlcmVyLnRzIiwgInNyYy91aS9zdHJlYW1pbmctbWFuYWdlci50cyIsICJzcmMvdWkvc2VsZWN0aW9uLWNvbnRleHQtbWVudS50cyIsICJzcmMvY29yZS9jb21tYW5kcy9zZWxlY3Rpb24tZWRpdC1jb21tYW5kLnRzIiwgInNyYy91aS90b25lLXNlbGVjdGlvbi1tb2RhbC50cyIsICJzcmMvdWkvY3VzdG9tLWluc3RydWN0aW9uLW1vZGFsLnRzIiwgInNyYy9haS9wcm92aWRlcnMvY2xhdWRlLnRzIiwgInNyYy9haS9wcm92aWRlcnMvb3BlbmFpLnRzIiwgInNyYy9haS9wcm92aWRlcnMvZ29vZ2xlLnRzIiwgInNyYy9haS9wcm92aWRlcnMvb2xsYW1hLnRzIiwgInNyYy9haS9wcm92aWRlci1tYW5hZ2VyLnRzIiwgInNyYy9jb3JlL2RvY3VtZW50LWVuZ2luZS50cyIsICJzcmMvY29yZS9jb252ZXJzYXRpb24tbWFuYWdlci50cyIsICJzcmMvY29yZS9jb250ZXh0LWJ1aWxkZXIudHMiLCAic3JjL2NvcmUvY29tbWFuZC1wYXJzZXIudHMiLCAic3JjL2NvcmUvcHJvbXB0LWJ1aWxkZXIudHMiLCAic3JjL2NvcmUvY29tbWFuZHMvYWRkLWNvbW1hbmQudHMiLCAic3JjL2NvcmUvY29tbWFuZHMvZWRpdC1jb21tYW5kLnRzIiwgInNyYy9jb3JlL2NvbW1hbmRzL2RlbGV0ZS1jb21tYW5kLnRzIiwgInNyYy9jb3JlL2NvbW1hbmRzL2dyYW1tYXItY29tbWFuZC50cyIsICJzcmMvY29yZS9jb21tYW5kcy9yZXdyaXRlLWNvbW1hbmQudHMiLCAic3JjL2NvcmUvY29tbWFuZHMvbWV0YWRhdGEtY29tbWFuZC50cyIsICJzcmMvbGljZW5zaW5nL2ZlYXR1cmUtY29uZmlnLnRzIiwgInNyYy9saWNlbnNpbmcvZmVhdHVyZS1tYW5hZ2VyLnRzIiwgInNyYy9saWNlbnNpbmcvbGljZW5zZS12YWxpZGF0b3IudHMiLCAic3JjL2NvcmUvYWktaW50ZW50LWNsYXNzaWZpZXIudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB7IFBsdWdpbiwgV29ya3NwYWNlTGVhZiwgSXRlbVZpZXcsIGFkZEljb24sIE5vdGljZSwgRWRpdG9yLCBNYXJrZG93blZpZXcsIE1hcmtkb3duRmlsZUluZm8sIFBsYXRmb3JtIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgTm92YVNldHRpbmdzLCBOb3ZhU2V0dGluZ1RhYiwgREVGQVVMVF9TRVRUSU5HUyB9IGZyb20gJy4vc3JjL3NldHRpbmdzJztcbmltcG9ydCB7IEFJUHJvdmlkZXJNYW5hZ2VyIH0gZnJvbSAnLi9zcmMvYWkvcHJvdmlkZXItbWFuYWdlcic7XG5pbXBvcnQgeyBOb3ZhU2lkZWJhclZpZXcsIFZJRVdfVFlQRV9OT1ZBX1NJREVCQVIgfSBmcm9tICcuL3NyYy91aS9zaWRlYmFyLXZpZXcnO1xuaW1wb3J0IHsgRG9jdW1lbnRFbmdpbmUgfSBmcm9tICcuL3NyYy9jb3JlL2RvY3VtZW50LWVuZ2luZSc7XG5pbXBvcnQgeyBDb250ZXh0QnVpbGRlciB9IGZyb20gJy4vc3JjL2NvcmUvY29udGV4dC1idWlsZGVyJztcbmltcG9ydCB7IENvbW1hbmRQYXJzZXIgfSBmcm9tICcuL3NyYy9jb3JlL2NvbW1hbmQtcGFyc2VyJztcbmltcG9ydCB7IFByb21wdEJ1aWxkZXIgfSBmcm9tICcuL3NyYy9jb3JlL3Byb21wdC1idWlsZGVyJztcbmltcG9ydCB7IENvbnZlcnNhdGlvbk1hbmFnZXIgfSBmcm9tICcuL3NyYy9jb3JlL2NvbnZlcnNhdGlvbi1tYW5hZ2VyJztcbmltcG9ydCB7IEFkZENvbW1hbmQgfSBmcm9tICcuL3NyYy9jb3JlL2NvbW1hbmRzL2FkZC1jb21tYW5kJztcbmltcG9ydCB7IEVkaXRDb21tYW5kIH0gZnJvbSAnLi9zcmMvY29yZS9jb21tYW5kcy9lZGl0LWNvbW1hbmQnO1xuaW1wb3J0IHsgRGVsZXRlQ29tbWFuZCB9IGZyb20gJy4vc3JjL2NvcmUvY29tbWFuZHMvZGVsZXRlLWNvbW1hbmQnO1xuaW1wb3J0IHsgR3JhbW1hckNvbW1hbmQgfSBmcm9tICcuL3NyYy9jb3JlL2NvbW1hbmRzL2dyYW1tYXItY29tbWFuZCc7XG5pbXBvcnQgeyBSZXdyaXRlQ29tbWFuZCB9IGZyb20gJy4vc3JjL2NvcmUvY29tbWFuZHMvcmV3cml0ZS1jb21tYW5kJztcbmltcG9ydCB7IE1ldGFkYXRhQ29tbWFuZCB9IGZyb20gJy4vc3JjL2NvcmUvY29tbWFuZHMvbWV0YWRhdGEtY29tbWFuZCc7XG5pbXBvcnQgeyBGZWF0dXJlTWFuYWdlciB9IGZyb20gJy4vc3JjL2xpY2Vuc2luZy9mZWF0dXJlLW1hbmFnZXInO1xuaW1wb3J0IHsgTGljZW5zZVZhbGlkYXRvciB9IGZyb20gJy4vc3JjL2xpY2Vuc2luZy9saWNlbnNlLXZhbGlkYXRvcic7XG5pbXBvcnQgeyBOb3ZhV2lraWxpbmtBdXRvY29tcGxldGUgfSBmcm9tICcuL3NyYy91aS93aWtpbGluay1zdWdnZXN0JztcbmltcG9ydCB7IFNlbGVjdGlvbkNvbnRleHRNZW51IH0gZnJvbSAnLi9zcmMvdWkvc2VsZWN0aW9uLWNvbnRleHQtbWVudSc7XG5pbXBvcnQgeyBUT05FX09QVElPTlMgfSBmcm9tICcuL3NyYy91aS90b25lLXNlbGVjdGlvbi1tb2RhbCc7XG5pbXBvcnQgeyBBSUludGVudENsYXNzaWZpZXIgfSBmcm9tICcuL3NyYy9jb3JlL2FpLWludGVudC1jbGFzc2lmaWVyJztcblxuY29uc3QgTk9WQV9JQ09OX1NWRyA9IGBcbjxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICA8IS0tIENlbnRyYWwgc3RhciBjb3JlIC0tPlxuICA8Y2lyY2xlIGN4PVwiMTJcIiBjeT1cIjEyXCIgcj1cIjIuNVwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIi8+XG4gIFxuICA8IS0tIFByaW1hcnkgcmF5cyAoNCBtYWluIGRpcmVjdGlvbnMpIC0tPlxuICA8cGF0aCBkPVwiTTEyIDFMMTIgNlwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjNcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIvPlxuICA8cGF0aCBkPVwiTTEyIDE4TDEyIDIzXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIi8+XG4gIDxwYXRoIGQ9XCJNMjMgMTJMMTggMTJcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cbiAgPHBhdGggZD1cIk02IDEyTDEgMTJcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cbiAgXG4gIDwhLS0gU2Vjb25kYXJ5IHJheXMgKGRpYWdvbmFscykgLS0+XG4gIDxwYXRoIGQ9XCJNMTguMzY0IDUuNjM2TDE1LjUzNiA4LjQ2NFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjIuNVwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIi8+XG4gIDxwYXRoIGQ9XCJNOC40NjQgMTUuNTM2TDUuNjM2IDE4LjM2NFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjIuNVwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIi8+XG4gIDxwYXRoIGQ9XCJNMTguMzY0IDE4LjM2NEwxNS41MzYgMTUuNTM2XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMi41XCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cbiAgPHBhdGggZD1cIk04LjQ2NCA4LjQ2NEw1LjYzNiA1LjYzNlwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjIuNVwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIi8+XG48L3N2Zz5gO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBOb3ZhUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblx0c2V0dGluZ3MhOiBOb3ZhU2V0dGluZ3M7XG5cdGFpUHJvdmlkZXJNYW5hZ2VyITogQUlQcm92aWRlck1hbmFnZXI7XG5cdGRvY3VtZW50RW5naW5lITogRG9jdW1lbnRFbmdpbmU7XG5cdGNvbnRleHRCdWlsZGVyITogQ29udGV4dEJ1aWxkZXI7XG5cdGNvbW1hbmRQYXJzZXIhOiBDb21tYW5kUGFyc2VyO1xuXHRwcm9tcHRCdWlsZGVyITogUHJvbXB0QnVpbGRlcjtcblx0Y29udmVyc2F0aW9uTWFuYWdlciE6IENvbnZlcnNhdGlvbk1hbmFnZXI7XG5cdGFpSW50ZW50Q2xhc3NpZmllciE6IEFJSW50ZW50Q2xhc3NpZmllcjtcblx0YWRkQ29tbWFuZEhhbmRsZXIhOiBBZGRDb21tYW5kO1xuXHRlZGl0Q29tbWFuZEhhbmRsZXIhOiBFZGl0Q29tbWFuZDtcblx0ZGVsZXRlQ29tbWFuZEhhbmRsZXIhOiBEZWxldGVDb21tYW5kO1xuXHRncmFtbWFyQ29tbWFuZEhhbmRsZXIhOiBHcmFtbWFyQ29tbWFuZDtcblx0cmV3cml0ZUNvbW1hbmRIYW5kbGVyITogUmV3cml0ZUNvbW1hbmQ7XG5cdG1ldGFkYXRhQ29tbWFuZEhhbmRsZXIhOiBNZXRhZGF0YUNvbW1hbmQ7XG5cdGZlYXR1cmVNYW5hZ2VyITogRmVhdHVyZU1hbmFnZXI7XG5cdGxpY2Vuc2VWYWxpZGF0b3IhOiBMaWNlbnNlVmFsaWRhdG9yO1xuXHRzZXR0aW5nVGFiITogTm92YVNldHRpbmdUYWI7XG5cdHNpZGViYXJWaWV3ITogTm92YVNpZGViYXJWaWV3O1xuXHRzZWxlY3Rpb25Db250ZXh0TWVudSE6IFNlbGVjdGlvbkNvbnRleHRNZW51O1xuXG5cdGFzeW5jIG9ubG9hZCgpIHtcblx0XHR0cnkge1xuXHRcdFx0YXdhaXQgdGhpcy5sb2FkU2V0dGluZ3MoKTtcblxuXG5cdFx0XHQvLyBJbml0aWFsaXplIGxpY2Vuc2luZyBzeXN0ZW1cblx0XHRcdHRoaXMubGljZW5zZVZhbGlkYXRvciA9IG5ldyBMaWNlbnNlVmFsaWRhdG9yKCk7XG5cdFx0XHR0aGlzLmZlYXR1cmVNYW5hZ2VyID0gbmV3IEZlYXR1cmVNYW5hZ2VyKFxuXHRcdFx0XHR0aGlzLmxpY2Vuc2VWYWxpZGF0b3IsXG5cdFx0XHRcdHRoaXMuc2V0dGluZ3MubGljZW5zaW5nLmRlYnVnU2V0dGluZ3Ncblx0XHRcdCk7XG5cdFx0XHRcblx0XHRcdC8vIFVwZGF0ZSBsaWNlbnNlIGZyb20gc2V0dGluZ3Ncblx0XHRcdGlmICh0aGlzLnNldHRpbmdzLmxpY2Vuc2luZy5saWNlbnNlS2V5KSB7XG5cdFx0XHRcdGF3YWl0IHRoaXMuZmVhdHVyZU1hbmFnZXIudXBkYXRlU3VwZXJub3ZhTGljZW5zZSh0aGlzLnNldHRpbmdzLmxpY2Vuc2luZy5saWNlbnNlS2V5KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVmcmVzaCBTdXBlcm5vdmEgVUkgYWZ0ZXIgbGljZW5zZSB2YWxpZGF0aW9uIHRvIGhhbmRsZSBleHBpcmVkIGxpY2Vuc2VzXG5cdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uub25MYXlvdXRSZWFkeSgoKSA9PiB7XG5cdFx0XHRcdGNvbnN0IGxlYXZlcyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoVklFV19UWVBFX05PVkFfU0lERUJBUik7XG5cdFx0XHRcdGlmIChsZWF2ZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdGNvbnN0IHNpZGViYXJWaWV3ID0gbGVhdmVzWzBdLnZpZXcgYXMgTm92YVNpZGViYXJWaWV3O1xuXHRcdFx0XHRcdHNpZGViYXJWaWV3LnJlZnJlc2hTdXBlcm5vdmFVSSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gTm90ZTogTW9iaWxlIGFjY2VzcyByZXN0cmljdGlvbnMgYXJlIG5vdyBoYW5kbGVkIGluIHNpZGViYXIgVUlcblx0XHRcdC8vIFRoaXMgYWxsb3dzIENvcmUgbW9iaWxlIHVzZXJzIHRvIHNlZSB0aGUgdXBncmFkZSBpbnRlcmZhY2UgcmF0aGVyIHRoYW4gYSBicm9rZW4gcGx1Z2luXG5cblx0XHRcdC8vIFJlZ2lzdGVyIGN1c3RvbSBpY29uXG5cdFx0XHRhZGRJY29uKCdub3ZhLXN0YXInLCBOT1ZBX0lDT05fU1ZHKTtcblxuXHRcdFx0dGhpcy5haVByb3ZpZGVyTWFuYWdlciA9IG5ldyBBSVByb3ZpZGVyTWFuYWdlcih0aGlzLnNldHRpbmdzLCB0aGlzLmZlYXR1cmVNYW5hZ2VyKTtcblx0XHRcdGF3YWl0IHRoaXMuYWlQcm92aWRlck1hbmFnZXIuaW5pdGlhbGl6ZSgpO1xuXG5cdFx0XHQvLyBJbml0aWFsaXplIGNvbnZlcnNhdGlvbiBtYW5hZ2VyIGFuZCBkb2N1bWVudCBlbmdpbmVcblx0XHRcdGNvbnN0IGRhdGFTdG9yZSA9IHtcblx0XHRcdFx0bG9hZERhdGE6IChrZXk6IHN0cmluZykgPT4gdGhpcy5sb2FkRGF0YVdpdGhLZXkoa2V5KSxcblx0XHRcdFx0c2F2ZURhdGE6IChrZXk6IHN0cmluZywgZGF0YTogYW55KSA9PiB0aGlzLnNhdmVEYXRhV2l0aEtleShrZXksIGRhdGEpXG5cdFx0XHR9O1xuXHRcdFx0dGhpcy5jb252ZXJzYXRpb25NYW5hZ2VyID0gbmV3IENvbnZlcnNhdGlvbk1hbmFnZXIoZGF0YVN0b3JlKTtcblx0XHRcdHRoaXMuZG9jdW1lbnRFbmdpbmUgPSBuZXcgRG9jdW1lbnRFbmdpbmUodGhpcy5hcHAsIGRhdGFTdG9yZSk7XG5cdFx0XHR0aGlzLmRvY3VtZW50RW5naW5lLnNldENvbnZlcnNhdGlvbk1hbmFnZXIodGhpcy5jb252ZXJzYXRpb25NYW5hZ2VyKTtcblx0XHRcdHRoaXMuY29udGV4dEJ1aWxkZXIgPSBuZXcgQ29udGV4dEJ1aWxkZXIodGhpcy5zZXR0aW5ncyk7XG5cdFx0XHR0aGlzLmNvbW1hbmRQYXJzZXIgPSBuZXcgQ29tbWFuZFBhcnNlcigpO1xuXHRcdFx0dGhpcy5wcm9tcHRCdWlsZGVyID0gbmV3IFByb21wdEJ1aWxkZXIodGhpcy5kb2N1bWVudEVuZ2luZSwgdGhpcy5jb252ZXJzYXRpb25NYW5hZ2VyKTtcblx0XHRcdHRoaXMuYWlJbnRlbnRDbGFzc2lmaWVyID0gbmV3IEFJSW50ZW50Q2xhc3NpZmllcih0aGlzLmFpUHJvdmlkZXJNYW5hZ2VyKTtcblx0XHRcdFxuXHRcdFx0Ly8gSW5pdGlhbGl6ZSBjb21tYW5kIGltcGxlbWVudGF0aW9uc1xuXHRcdFx0dGhpcy5hZGRDb21tYW5kSGFuZGxlciA9IG5ldyBBZGRDb21tYW5kKHRoaXMuYXBwLCB0aGlzLmRvY3VtZW50RW5naW5lLCB0aGlzLmNvbnRleHRCdWlsZGVyLCB0aGlzLmFpUHJvdmlkZXJNYW5hZ2VyKTtcblx0XHRcdHRoaXMuZWRpdENvbW1hbmRIYW5kbGVyID0gbmV3IEVkaXRDb21tYW5kKHRoaXMuYXBwLCB0aGlzLmRvY3VtZW50RW5naW5lLCB0aGlzLmNvbnRleHRCdWlsZGVyLCB0aGlzLmFpUHJvdmlkZXJNYW5hZ2VyKTtcblx0XHRcdHRoaXMuZGVsZXRlQ29tbWFuZEhhbmRsZXIgPSBuZXcgRGVsZXRlQ29tbWFuZCh0aGlzLmFwcCwgdGhpcy5kb2N1bWVudEVuZ2luZSwgdGhpcy5jb250ZXh0QnVpbGRlciwgdGhpcy5haVByb3ZpZGVyTWFuYWdlcik7XG5cdFx0XHR0aGlzLmdyYW1tYXJDb21tYW5kSGFuZGxlciA9IG5ldyBHcmFtbWFyQ29tbWFuZCh0aGlzLmFwcCwgdGhpcy5kb2N1bWVudEVuZ2luZSwgdGhpcy5jb250ZXh0QnVpbGRlciwgdGhpcy5haVByb3ZpZGVyTWFuYWdlcik7XG5cdFx0XHR0aGlzLnJld3JpdGVDb21tYW5kSGFuZGxlciA9IG5ldyBSZXdyaXRlQ29tbWFuZCh0aGlzLmFwcCwgdGhpcy5kb2N1bWVudEVuZ2luZSwgdGhpcy5jb250ZXh0QnVpbGRlciwgdGhpcy5haVByb3ZpZGVyTWFuYWdlcik7XG5cdFx0XHR0aGlzLm1ldGFkYXRhQ29tbWFuZEhhbmRsZXIgPSBuZXcgTWV0YWRhdGFDb21tYW5kKHRoaXMuYXBwLCB0aGlzLmRvY3VtZW50RW5naW5lLCB0aGlzLmNvbnRleHRCdWlsZGVyLCB0aGlzLmFpUHJvdmlkZXJNYW5hZ2VyKTtcblxuXHRcdFx0dGhpcy5yZWdpc3RlclZpZXcoXG5cdFx0XHRcdFZJRVdfVFlQRV9OT1ZBX1NJREVCQVIsXG5cdFx0XHRcdChsZWFmKSA9PiBuZXcgTm92YVNpZGViYXJWaWV3KGxlYWYsIHRoaXMpXG5cdFx0XHQpO1xuXG5cdFx0XHQvLyBOb3RlOiBXaWtpbGluayBhdXRvY29tcGxldGUgaXMgbm93IGhhbmRsZWQgZGlyZWN0bHkgaW4gc2lkZWJhciB2aWV3XG5cblx0XHRcdGNvbnN0IHJpYmJvbkljb24gPSB0aGlzLmFkZFJpYmJvbkljb24oJ25vdmEtc3RhcicsICdOb3ZhIEFJJywgKGV2dDogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0XHR0aGlzLmFjdGl2YXRlVmlldygpO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIFJlZ2lzdGVyIHNlbGVjdGlvbi1iYXNlZCBjb21tYW5kc1xuXHRcdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdFx0aWQ6ICdub3ZhLWltcHJvdmUtd3JpdGluZycsXG5cdFx0XHRcdG5hbWU6ICdJbXByb3ZlIFdyaXRpbmcnLFxuXHRcdFx0XHRlZGl0b3JDYWxsYmFjazogYXN5bmMgKGVkaXRvcjogRWRpdG9yKSA9PiB7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5oYW5kbGVTZWxlY3Rpb25Db21tYW5kKCdpbXByb3ZlJywgZWRpdG9yKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuYWRkQ29tbWFuZCh7XG5cdFx0XHRcdGlkOiAnbm92YS1tYWtlLWxvbmdlcicsXG5cdFx0XHRcdG5hbWU6ICdNYWtlIExvbmdlcicsXG5cdFx0XHRcdGVkaXRvckNhbGxiYWNrOiBhc3luYyAoZWRpdG9yOiBFZGl0b3IpID0+IHtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLmhhbmRsZVNlbGVjdGlvbkNvbW1hbmQoJ2xvbmdlcicsIGVkaXRvcik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0XHRpZDogJ25vdmEtbWFrZS1zaG9ydGVyJyxcblx0XHRcdFx0bmFtZTogJ01ha2UgU2hvcnRlcicsXG5cdFx0XHRcdGVkaXRvckNhbGxiYWNrOiBhc3luYyAoZWRpdG9yOiBFZGl0b3IpID0+IHtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLmhhbmRsZVNlbGVjdGlvbkNvbW1hbmQoJ3Nob3J0ZXInLCBlZGl0b3IpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gSW5kaXZpZHVhbCB0b25lIGNvbW1hbmRzXG5cdFx0XHRUT05FX09QVElPTlMuZm9yRWFjaCh0b25lID0+IHtcblx0XHRcdFx0dGhpcy5hZGRDb21tYW5kKHtcblx0XHRcdFx0XHRpZDogYG5vdmEtbWFrZS0ke3RvbmUuaWR9YCxcblx0XHRcdFx0XHRuYW1lOiBgTWFrZSAke3RvbmUubGFiZWx9YCxcblx0XHRcdFx0XHRlZGl0b3JDYWxsYmFjazogYXN5bmMgKGVkaXRvcjogRWRpdG9yKSA9PiB7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLmhhbmRsZVRvbmVDb21tYW5kKHRvbmUuaWQsIGVkaXRvcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0XHRpZDogJ25vdmEtdGVsbC1ub3ZhJyxcblx0XHRcdFx0bmFtZTogJ1RlbGwgTm92YS4uLicsXG5cdFx0XHRcdGVkaXRvckNhbGxiYWNrOiBhc3luYyAoZWRpdG9yOiBFZGl0b3IpID0+IHtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLmhhbmRsZVNlbGVjdGlvbkNvbW1hbmQoJ2N1c3RvbScsIGVkaXRvcik7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmFkZENvbW1hbmQoe1xuXHRcdFx0XHRpZDogJ29wZW4tbm92YS1zaWRlYmFyJyxcblx0XHRcdFx0bmFtZTogJ09wZW4gc2lkZWJhcicsXG5cdFx0XHRcdGNhbGxiYWNrOiAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5hY3RpdmF0ZVZpZXcoKTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEluaXRpYWxpemUgc2VsZWN0aW9uIGNvbnRleHQgbWVudVxuXHRcdFx0dGhpcy5zZWxlY3Rpb25Db250ZXh0TWVudSA9IG5ldyBTZWxlY3Rpb25Db250ZXh0TWVudSh0aGlzLmFwcCwgdGhpcyk7XG5cdFx0XHR0aGlzLnNlbGVjdGlvbkNvbnRleHRNZW51LnJlZ2lzdGVyKCk7XG5cblx0XHRcdHRoaXMuc2V0dGluZ1RhYiA9IG5ldyBOb3ZhU2V0dGluZ1RhYih0aGlzLmFwcCwgdGhpcyk7XG5cdFx0dGhpcy5hZGRTZXR0aW5nVGFiKHRoaXMuc2V0dGluZ1RhYik7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHR9XG5cdH1cblxuXHRvbnVubG9hZCgpIHtcblx0XHR0aGlzLmFpUHJvdmlkZXJNYW5hZ2VyPy5jbGVhbnVwKCk7XG5cdFx0dGhpcy5jb252ZXJzYXRpb25NYW5hZ2VyPy5jbGVhbnVwKCk7XG5cdH1cblxuXHRhc3luYyBsb2FkU2V0dGluZ3MoKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfU0VUVElOR1MsIGF3YWl0IHRoaXMubG9hZERhdGEoKSk7XG5cdH1cblxuXHRhc3luYyBzYXZlU2V0dGluZ3MoKSB7XG5cdFx0YXdhaXQgdGhpcy5zYXZlRGF0YSh0aGlzLnNldHRpbmdzKTtcblx0XHR0aGlzLmFpUHJvdmlkZXJNYW5hZ2VyPy51cGRhdGVTZXR0aW5ncyh0aGlzLnNldHRpbmdzKTtcblx0fVxuXG5cdGFzeW5jIGFjdGl2YXRlVmlldygpIHtcblx0XHRjb25zdCB7IHdvcmtzcGFjZSB9ID0gdGhpcy5hcHA7XG5cblx0XHRsZXQgbGVhZjogV29ya3NwYWNlTGVhZiB8IG51bGw7XG5cdFx0Y29uc3QgbGVhdmVzID0gd29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfTk9WQV9TSURFQkFSKTtcblxuXHRcdGlmIChsZWF2ZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0bGVhZiA9IGxlYXZlc1swXTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bGVhZiA9IHdvcmtzcGFjZS5nZXRSaWdodExlYWYoZmFsc2UpO1xuXHRcdFx0YXdhaXQgbGVhZj8uc2V0Vmlld1N0YXRlKHsgdHlwZTogVklFV19UWVBFX05PVkFfU0lERUJBUiwgYWN0aXZlOiB0cnVlIH0pO1xuXHRcdH1cblxuXHRcdHdvcmtzcGFjZS5yZXZlYWxMZWFmKGxlYWYhKTtcblx0XHRcblx0XHQvLyBTdG9yZSByZWZlcmVuY2UgdG8gc2lkZWJhciB2aWV3XG5cdFx0aWYgKGxlYWY/LnZpZXcgaW5zdGFuY2VvZiBOb3ZhU2lkZWJhclZpZXcpIHtcblx0XHRcdHRoaXMuc2lkZWJhclZpZXcgPSBsZWFmLnZpZXc7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEhhbmRsZSBzZWxlY3Rpb24tYmFzZWQgY29tbWFuZHNcblx0ICovXG5cdHByaXZhdGUgYXN5bmMgaGFuZGxlU2VsZWN0aW9uQ29tbWFuZChhY3Rpb25JZDogc3RyaW5nLCBlZGl0b3I6IEVkaXRvcik6IFByb21pc2U8dm9pZD4ge1xuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBzZWxlY3RlZFRleHQgPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XG5cdFx0XHRpZiAoIXNlbGVjdGVkVGV4dCB8fCBzZWxlY3RlZFRleHQudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0XHRuZXcgTm90aWNlKCdQbGVhc2Ugc2VsZWN0IHNvbWUgdGV4dCBmaXJzdCcpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGF3YWl0IHRoaXMuc2VsZWN0aW9uQ29udGV4dE1lbnUuaGFuZGxlU2VsZWN0aW9uQWN0aW9uKGFjdGlvbklkLCBlZGl0b3IsIHNlbGVjdGVkVGV4dCk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGV4ZWN1dGluZyBOb3ZhIHNlbGVjdGlvbiBjb21tYW5kOicsIGVycm9yKTtcblx0XHRcdG5ldyBOb3RpY2UoJ0ZhaWxlZCB0byBleGVjdXRlIE5vdmEgYWN0aW9uLiBQbGVhc2UgdHJ5IGFnYWluLicsIDMwMDApO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBIYW5kbGUgdG9uZS1zcGVjaWZpYyBjb21tYW5kc1xuXHQgKi9cblx0cHJpdmF0ZSBhc3luYyBoYW5kbGVUb25lQ29tbWFuZCh0b25lSWQ6IHN0cmluZywgZWRpdG9yOiBFZGl0b3IpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3Qgc2VsZWN0ZWRUZXh0ID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuXHRcdFx0aWYgKCFzZWxlY3RlZFRleHQgfHwgc2VsZWN0ZWRUZXh0LnRyaW0oKS5sZW5ndGggPT09IDApIHtcblx0XHRcdFx0bmV3IE5vdGljZSgnUGxlYXNlIHNlbGVjdCBzb21lIHRleHQgZmlyc3QnKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGhhbmRsZVNlbGVjdGlvbkFjdGlvbiB3aXRoIHRvbmUgYWN0aW9uIGFuZCB0aGUgc3BlY2lmaWMgdG9uZVxuXHRcdFx0YXdhaXQgdGhpcy5zZWxlY3Rpb25Db250ZXh0TWVudS5oYW5kbGVTZWxlY3Rpb25BY3Rpb24oJ3RvbmUnLCBlZGl0b3IsIHNlbGVjdGVkVGV4dCwgdG9uZUlkKTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcignRXJyb3IgZXhlY3V0aW5nIE5vdmEgdG9uZSBjb21tYW5kOicsIGVycm9yKTtcblx0XHRcdG5ldyBOb3RpY2UoJ0ZhaWxlZCB0byBleGVjdXRlIE5vdmEgYWN0aW9uLiBQbGVhc2UgdHJ5IGFnYWluLicsIDMwMDApO1xuXHRcdH1cblx0fVxuXG5cblx0LyoqXG5cdCAqIFNob3cgdXBncmFkZSBwcm9tcHQgZm9yIENvcmUgdGllciBtb2JpbGUgdXNlcnNcblx0ICovXG5cdHByaXZhdGUgc2hvd01vYmlsZVVwZ3JhZGVQcm9tcHQoKTogdm9pZCB7XG5cdFx0Y29uc3QgbW9kYWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRtb2RhbC5jbGFzc05hbWUgPSAnbW9kYWwgbm92YS1tb2JpbGUtdXBncmFkZS1tb2RhbCc7XG5cdFx0bW9kYWwuaW5uZXJIVE1MID0gYFxuXHRcdFx0PGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRhaW5lclwiPlxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwibW9kYWwtYmdcIj48L2Rpdj5cblx0XHRcdFx0PGRpdiBjbGFzcz1cIm1vZGFsLWNvbnRlbnRcIj5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+XG5cdFx0XHRcdFx0XHQ8aDM+Tm92YSBTdXBlck5vdmEgUmVxdWlyZWQ8L2gzPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+XG5cdFx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwibm92YS10aWVyLWJhZGdlIGNvcmVcIiBzdHlsZT1cIm1hcmdpbi1ib3R0b206IDFlbTtcIj5cblx0XHRcdFx0XHRcdFx0PHNwYW4gY2xhc3M9XCJ0aWVyLWljb25cIj5GUkVFPC9zcGFuPlxuXHRcdFx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cInRpZXItbmFtZVwiPkNvcmUgKEZyZWUpPC9zcGFuPlxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0XHQ8cD5Nb2JpbGUgYWNjZXNzIGlzIGF2YWlsYWJsZSB3aXRoIE5vdmEgU3VwZXJOb3ZhLjwvcD5cblx0XHRcdFx0XHRcdDxwPkNvcmUgdGllciBpcyBsaW1pdGVkIHRvIGRlc2t0b3AgdXNlIG9ubHkuPC9wPlxuXHRcdFx0XHRcdFx0PGRpdiBjbGFzcz1cIm5vdmEtZmVhdHVyZS1saXN0XCI+XG5cdFx0XHRcdFx0XHRcdDxoND5TdXBlck5vdmEgaW5jbHVkZXM6PC9oND5cblx0XHRcdFx0XHRcdFx0PHVsPlxuXHRcdFx0XHRcdFx0XHRcdDxsaT5Nb2JpbGUgZGV2aWNlIHN1cHBvcnQ8L2xpPlxuXHRcdFx0XHRcdFx0XHRcdDxsaT5NdWx0aXBsZSBBSSBwcm92aWRlcnM8L2xpPlxuXHRcdFx0XHRcdFx0XHRcdDxsaT5Jbi1jaGF0IHByb3ZpZGVyIHN3aXRjaGluZzwvbGk+XG5cdFx0XHRcdFx0XHRcdFx0PGxpPkFkdmFuY2VkIHRlbXBsYXRlczwvbGk+XG5cdFx0XHRcdFx0XHRcdFx0PGxpPlByaW9yaXR5IHN1cHBvcnQ8L2xpPlxuXHRcdFx0XHRcdFx0XHQ8L3VsPlxuXHRcdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPlxuXHRcdFx0XHRcdFx0PGJ1dHRvbiBjbGFzcz1cIm1vZC1jdGEgbm92YS11cGdyYWRlLWJ0blwiPlVwZ3JhZGUgdG8gU3VwZXJOb3ZhPC9idXR0b24+XG5cdFx0XHRcdFx0XHQ8YnV0dG9uIGNsYXNzPVwibm92YS1jbG9zZS1idG5cIj5DbG9zZTwvYnV0dG9uPlxuXHRcdFx0XHRcdDwvZGl2PlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdDwvZGl2PlxuXHRcdGA7XG5cblx0XHRjb25zdCB1cGdyYWRlQnRuID0gbW9kYWwucXVlcnlTZWxlY3RvcignLm5vdmEtdXBncmFkZS1idG4nKSBhcyBIVE1MQnV0dG9uRWxlbWVudDtcblx0XHRjb25zdCBjbG9zZUJ0biA9IG1vZGFsLnF1ZXJ5U2VsZWN0b3IoJy5ub3ZhLWNsb3NlLWJ0bicpIGFzIEhUTUxCdXR0b25FbGVtZW50O1xuXHRcdGNvbnN0IG1vZGFsQmcgPSBtb2RhbC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtYmcnKSBhcyBIVE1MRWxlbWVudDtcblxuXHRcdGNvbnN0IGNsb3NlTW9kYWwgPSAoKSA9PiB7XG5cdFx0XHRtb2RhbC5yZW1vdmUoKTtcblx0XHR9O1xuXG5cdFx0dXBncmFkZUJ0bi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcblx0XHRcdHdpbmRvdy5vcGVuKCdodHRwczovL25vdmF3cml0ZXIuYWkvdXBncmFkZScsICdfYmxhbmsnKTtcblx0XHRcdGNsb3NlTW9kYWwoKTtcblx0XHR9KTtcblxuXHRcdGNsb3NlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgY2xvc2VNb2RhbCk7XG5cdFx0bW9kYWxCZy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGNsb3NlTW9kYWwpO1xuXG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChtb2RhbCk7XG5cblx0XHQvLyBTaG93IG5vdGljZSBhcyB3ZWxsXG5cdFx0bmV3IE5vdGljZSgnTm92YSBtb2JpbGUgYWNjZXNzIHJlcXVpcmVzIFN1cGVyTm92YSBsaWNlbnNlJywgODAwMCk7XG5cdH1cblxuXHQvLyBEYXRhU3RvcmUgaW50ZXJmYWNlIGltcGxlbWVudGF0aW9uIGZvciBDb252ZXJzYXRpb25NYW5hZ2VyXG5cdGFzeW5jIGxvYWREYXRhV2l0aEtleShrZXk6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG5cdFx0Y29uc3QgYWxsRGF0YSA9IGF3YWl0IHRoaXMubG9hZERhdGEoKTtcblx0XHRyZXR1cm4gYWxsRGF0YSA/IGFsbERhdGFba2V5XSA6IHVuZGVmaW5lZDtcblx0fVxuXG5cdGFzeW5jIHNhdmVEYXRhV2l0aEtleShrZXk6IHN0cmluZywgZGF0YTogYW55KTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgYWxsRGF0YSA9IGF3YWl0IHRoaXMubG9hZERhdGEoKSB8fCB7fTtcblx0XHRhbGxEYXRhW2tleV0gPSBkYXRhO1xuXHRcdHJldHVybiBhd2FpdCB0aGlzLnNhdmVEYXRhKGFsbERhdGEpO1xuXHR9XG59IiwgImltcG9ydCB7IEFwcCwgUGx1Z2luU2V0dGluZ1RhYiwgU2V0dGluZywgUGxhdGZvcm0gfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgTm92YVBsdWdpbiBmcm9tICcuLi9tYWluJztcbmltcG9ydCB7IEFJUHJvdmlkZXJTZXR0aW5ncywgUGxhdGZvcm1TZXR0aW5ncywgUHJvdmlkZXJUeXBlIH0gZnJvbSAnLi9haS90eXBlcyc7XG5pbXBvcnQgeyBEZWJ1Z1NldHRpbmdzIH0gZnJvbSAnLi9saWNlbnNpbmcvdHlwZXMnO1xuaW1wb3J0IHsgVklFV19UWVBFX05PVkFfU0lERUJBUiwgTm92YVNpZGViYXJWaWV3IH0gZnJvbSAnLi91aS9zaWRlYmFyLXZpZXcnO1xuaW1wb3J0IHsgZ2V0QXZhaWxhYmxlTW9kZWxzIH0gZnJvbSAnLi9haS9tb2RlbHMnO1xuaW1wb3J0IHsgQ2xhdWRlUHJvdmlkZXIgfSBmcm9tICcuL2FpL3Byb3ZpZGVycy9jbGF1ZGUnO1xuaW1wb3J0IHsgT3BlbkFJUHJvdmlkZXIgfSBmcm9tICcuL2FpL3Byb3ZpZGVycy9vcGVuYWknO1xuaW1wb3J0IHsgR29vZ2xlUHJvdmlkZXIgfSBmcm9tICcuL2FpL3Byb3ZpZGVycy9nb29nbGUnO1xuaW1wb3J0IHsgT2xsYW1hUHJvdmlkZXIgfSBmcm9tICcuL2FpL3Byb3ZpZGVycy9vbGxhbWEnO1xuXG5jb25zdCBOT1ZBX0lDT05fU1ZHID0gYFxuPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+XG4gIDwhLS0gQ2VudHJhbCBzdGFyIGNvcmUgLS0+XG4gIDxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiMTJcIiByPVwiMi41XCIgZmlsbD1cImN1cnJlbnRDb2xvclwiLz5cbiAgXG4gIDwhLS0gUHJpbWFyeSByYXlzICg0IG1haW4gZGlyZWN0aW9ucykgLS0+XG4gIDxwYXRoIGQ9XCJNMTIgMUwxMiA2XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIi8+XG4gIDxwYXRoIGQ9XCJNMTIgMThMMTIgMjNcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cbiAgPHBhdGggZD1cIk0yMyAxMkwxOCAxMlwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjNcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIvPlxuICA8cGF0aCBkPVwiTTYgMTJMMSAxMlwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjNcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIvPlxuICBcbiAgPCEtLSBTZWNvbmRhcnkgcmF5cyAoZGlhZ29uYWxzKSAtLT5cbiAgPHBhdGggZD1cIk0xOC4zNjQgNS42MzZMMTUuNTM2IDguNDY0XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMi41XCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cbiAgPHBhdGggZD1cIk04LjQ2NCAxNS41MzZMNS42MzYgMTguMzY0XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMi41XCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cbiAgPHBhdGggZD1cIk0xOC4zNjQgMTguMzY0TDE1LjUzNiAxNS41MzZcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyLjVcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIvPlxuICA8cGF0aCBkPVwiTTguNDY0IDguNDY0TDUuNjM2IDUuNjM2XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMi41XCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cbjwvc3ZnPmA7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ3VzdG9tQ29tbWFuZCB7XG5cdGlkOiBzdHJpbmc7XG5cdG5hbWU6IHN0cmluZztcblx0dHJpZ2dlcjogc3RyaW5nO1xuXHR0ZW1wbGF0ZTogc3RyaW5nO1xuXHRkZXNjcmlwdGlvbj86IHN0cmluZztcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOb3ZhU2V0dGluZ3Mge1xuXHRhaVByb3ZpZGVyczogQUlQcm92aWRlclNldHRpbmdzO1xuXHRwbGF0Zm9ybVNldHRpbmdzOiBQbGF0Zm9ybVNldHRpbmdzO1xuXHRjdXN0b21Db21tYW5kcz86IEN1c3RvbUNvbW1hbmRbXTtcblx0Z2VuZXJhbDoge1xuXHRcdGRlZmF1bHRUZW1wZXJhdHVyZTogbnVtYmVyO1xuXHRcdGRlZmF1bHRNYXhUb2tlbnM6IG51bWJlcjtcblx0XHRhdXRvU2F2ZTogYm9vbGVhbjtcblx0fTtcblx0c2hvd0NvbW1hbmRCdXR0b246IGJvb2xlYW47XG5cdGxpY2Vuc2luZzoge1xuXHRcdGxpY2Vuc2VLZXk6IHN0cmluZztcblx0XHRzdXBlcm5vdmFMaWNlbnNlS2V5Pzogc3RyaW5nO1xuXHRcdGlzU3VwZXJub3ZhPzogYm9vbGVhbjtcblx0XHRkZWJ1Z1NldHRpbmdzOiBEZWJ1Z1NldHRpbmdzO1xuXHR9O1xufVxuXG5leHBvcnQgY29uc3QgREVGQVVMVF9TRVRUSU5HUzogTm92YVNldHRpbmdzID0ge1xuXHRhaVByb3ZpZGVyczoge1xuXHRcdGNsYXVkZToge1xuXHRcdFx0YXBpS2V5OiAnJyxcblx0XHRcdG1vZGVsOiAnY2xhdWRlLTMtNS1zb25uZXQtMjAyNDEwMjInLFxuXHRcdFx0dGVtcGVyYXR1cmU6IDAuNyxcblx0XHRcdG1heFRva2VuczogMTAwMFxuXHRcdH0sXG5cdFx0b3BlbmFpOiB7XG5cdFx0XHRhcGlLZXk6ICcnLFxuXHRcdFx0YmFzZVVybDogJ2h0dHBzOi8vYXBpLm9wZW5haS5jb20vdjEnLFxuXHRcdFx0bW9kZWw6ICdncHQtNG8nLFxuXHRcdFx0dGVtcGVyYXR1cmU6IDAuNyxcblx0XHRcdG1heFRva2VuczogMTAwMFxuXHRcdH0sXG5cdFx0Z29vZ2xlOiB7XG5cdFx0XHRhcGlLZXk6ICcnLFxuXHRcdFx0bW9kZWw6ICdnZW1pbmktMS41LWZsYXNoJyxcblx0XHRcdHRlbXBlcmF0dXJlOiAwLjcsXG5cdFx0XHRtYXhUb2tlbnM6IDEwMDBcblx0XHR9LFxuXHRcdG9sbGFtYToge1xuXHRcdFx0YmFzZVVybDogJ2h0dHA6Ly9sb2NhbGhvc3Q6MTE0MzQnLFxuXHRcdFx0bW9kZWw6ICcnLFxuXHRcdFx0dGVtcGVyYXR1cmU6IDAuNyxcblx0XHRcdG1heFRva2VuczogMTAwMFxuXHRcdH1cblx0fSxcblx0cGxhdGZvcm1TZXR0aW5nczoge1xuXHRcdGRlc2t0b3A6IHtcblx0XHRcdHByaW1hcnlQcm92aWRlcjogJ29sbGFtYScsXG5cdFx0XHRmYWxsYmFja1Byb3ZpZGVyczogWydvcGVuYWknLCAnZ29vZ2xlJywgJ29sbGFtYSddXG5cdFx0fSxcblx0XHRtb2JpbGU6IHtcblx0XHRcdHByaW1hcnlQcm92aWRlcjogJ25vbmUnLFxuXHRcdFx0ZmFsbGJhY2tQcm92aWRlcnM6IFsnb3BlbmFpJywgJ2dvb2dsZSddXG5cdFx0fVxuXHR9LFxuXHRjdXN0b21Db21tYW5kczogW10sXG5cdGdlbmVyYWw6IHtcblx0XHRkZWZhdWx0VGVtcGVyYXR1cmU6IDAuNyxcblx0XHRkZWZhdWx0TWF4VG9rZW5zOiAxMDAwLFxuXHRcdGF1dG9TYXZlOiB0cnVlXG5cdH0sXG5cdHNob3dDb21tYW5kQnV0dG9uOiB0cnVlLFxuXHRsaWNlbnNpbmc6IHtcblx0XHRsaWNlbnNlS2V5OiAnJyxcblx0XHRzdXBlcm5vdmFMaWNlbnNlS2V5OiAnJyxcblx0XHRpc1N1cGVybm92YTogZmFsc2UsXG5cdFx0ZGVidWdTZXR0aW5nczoge1xuXHRcdFx0ZW5hYmxlZDogZmFsc2UsXG5cdFx0XHRvdmVycmlkZURhdGU6IHVuZGVmaW5lZCxcblx0XHRcdGZvcmNlU3VwZXJub3ZhOiBmYWxzZVxuXHRcdH1cblx0fVxufTtcblxuZXhwb3J0IGNsYXNzIE5vdmFTZXR0aW5nVGFiIGV4dGVuZHMgUGx1Z2luU2V0dGluZ1RhYiB7XG5cdHBsdWdpbjogTm92YVBsdWdpbjtcblx0cHJpdmF0ZSBhY3RpdmVUYWI6ICdnZW5lcmFsJyB8ICdwcm92aWRlcnMnIHwgJ2FkdmFuY2VkJyA9ICdnZW5lcmFsJztcblxuXHRjb25zdHJ1Y3RvcihhcHA6IEFwcCwgcGx1Z2luOiBOb3ZhUGx1Z2luKSB7XG5cdFx0c3VwZXIoYXBwLCBwbHVnaW4pO1xuXHRcdHRoaXMucGx1Z2luID0gcGx1Z2luO1xuXHR9XG5cblx0ZGlzcGxheSgpOiB2b2lkIHtcblx0XHRjb25zdCB7IGNvbnRhaW5lckVsIH0gPSB0aGlzO1xuXHRcdGNvbnRhaW5lckVsLmVtcHR5KCk7XG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gyJywgeyB0ZXh0OiAnTm92YSBBSSBTZXR0aW5ncycgfSk7XG5cblx0XHR0aGlzLmNyZWF0ZVRhYk5hdmlnYXRpb24oKTtcblx0XHR0aGlzLmNyZWF0ZVRhYkNvbnRlbnQoKTtcblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlVGFiTmF2aWdhdGlvbigpOiB2b2lkIHtcblx0XHRjb25zdCB0YWJDb250YWluZXIgPSB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogJ25vdmEtdGFiLWNvbnRhaW5lcicgfSk7XG5cdFx0XG5cdFx0Y29uc3QgdGFicyA9IFtcblx0XHRcdHsgaWQ6ICdnZW5lcmFsJywgbGFiZWw6ICdHZW5lcmFsJyB9LFxuXHRcdFx0eyBpZDogJ3Byb3ZpZGVycycsIGxhYmVsOiAnQUkgUHJvdmlkZXJzJyB9LFxuXHRcdFx0eyBpZDogJ2FkdmFuY2VkJywgbGFiZWw6ICdBZHZhbmNlZCcgfVxuXHRcdF07XG5cblx0XHR0YWJzLmZvckVhY2godGFiID0+IHtcblx0XHRcdGNvbnN0IHRhYkVsID0gdGFiQ29udGFpbmVyLmNyZWF0ZURpdih7IFxuXHRcdFx0XHRjbHM6IGBub3ZhLXRhYiAke3RoaXMuYWN0aXZlVGFiID09PSB0YWIuaWQgPyAnYWN0aXZlJyA6ICcnfWAsXG5cdFx0XHRcdHRleHQ6IHRhYi5sYWJlbFxuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdHRhYkVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnN3aXRjaFRhYih0YWIuaWQgYXMgJ2dlbmVyYWwnIHwgJ3Byb3ZpZGVycycgfCAnYWR2YW5jZWQnKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBzd2l0Y2hUYWIodGFiSWQ6ICdnZW5lcmFsJyB8ICdwcm92aWRlcnMnIHwgJ2FkdmFuY2VkJyk6IHZvaWQge1xuXHRcdHRoaXMuYWN0aXZlVGFiID0gdGFiSWQ7XG5cdFx0dGhpcy5kaXNwbGF5KCk7IC8vIFJlLXJlbmRlciB3aXRoIG5ldyBhY3RpdmUgdGFiXG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZVRhYkNvbnRlbnQoKTogdm9pZCB7XG5cdFx0Y29uc3QgY29udGVudENvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS10YWItY29udGVudCcgfSk7XG5cdFx0XG5cdFx0c3dpdGNoICh0aGlzLmFjdGl2ZVRhYikge1xuXHRcdFx0Y2FzZSAnZ2VuZXJhbCc6XG5cdFx0XHRcdHRoaXMuY3JlYXRlR2VuZXJhbFRhYkNvbnRlbnQoY29udGVudENvbnRhaW5lcik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0Y2FzZSAncHJvdmlkZXJzJzpcblx0XHRcdFx0dGhpcy5jcmVhdGVQcm92aWRlcnNUYWJDb250ZW50KGNvbnRlbnRDb250YWluZXIpO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ2FkdmFuY2VkJzpcblx0XHRcdFx0dGhpcy5jcmVhdGVBZHZhbmNlZFRhYkNvbnRlbnQoY29udGVudENvbnRhaW5lcik7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlR2VuZXJhbFRhYkNvbnRlbnQoY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuXHRcdHRoaXMuY3JlYXRlTGljZW5zZVNldHRpbmdzKGNvbnRhaW5lcik7XG5cdFx0dGhpcy5jcmVhdGVHZW5lcmFsU2V0dGluZ3MoY29udGFpbmVyKTtcblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlUHJvdmlkZXJzVGFiQ29udGVudChjb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZCB7XG5cdFx0dGhpcy5jcmVhdGVQcm92aWRlclNldHRpbmdzKGNvbnRhaW5lcik7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZUFkdmFuY2VkVGFiQ29udGVudChjb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZCB7XG5cdFx0dGhpcy5jcmVhdGVQbGF0Zm9ybVNldHRpbmdzKGNvbnRhaW5lcik7XG5cdFx0dGhpcy5jcmVhdGVDb21tYW5kU2V0dGluZ3MoY29udGFpbmVyKTtcblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlU2VjdXJlQXBpS2V5SW5wdXQoY29udGFpbmVyOiBIVE1MRWxlbWVudCwgb3B0aW9uczoge1xuXHRcdG5hbWU6IHN0cmluZztcblx0XHRkZXNjOiBzdHJpbmc7XG5cdFx0cGxhY2Vob2xkZXI6IHN0cmluZztcblx0XHR2YWx1ZTogc3RyaW5nO1xuXHRcdG9uQ2hhbmdlOiAodmFsdWU6IHN0cmluZykgPT4gUHJvbWlzZTx2b2lkPjtcblx0fSk6IHZvaWQge1xuXHRcdGNvbnN0IHNldHRpbmcgPSBuZXcgU2V0dGluZyhjb250YWluZXIpXG5cdFx0XHQuc2V0TmFtZShvcHRpb25zLm5hbWUpXG5cdFx0XHQuc2V0RGVzYyhvcHRpb25zLmRlc2MpO1xuXG5cdFx0bGV0IGFjdHVhbFZhbHVlID0gb3B0aW9ucy52YWx1ZTtcblx0XHRsZXQgaXNWaXNpYmxlID0gZmFsc2U7XG5cblx0XHRzZXR0aW5nLmFkZFRleHQodGV4dCA9PiB7XG5cdFx0XHR0ZXh0LmlucHV0RWwudHlwZSA9ICdwYXNzd29yZCc7XG5cdFx0XHR0ZXh0LmlucHV0RWwuc3R5bGUuZm9udEZhbWlseSA9ICd2YXIoLS1mb250LW1vbm9zcGFjZSknO1xuXHRcdFx0dGV4dC5pbnB1dEVsLnN0eWxlLndpZHRoID0gJzQwMHB4Jztcblx0XHRcdHRleHQuaW5wdXRFbC5zdHlsZS5oZWlnaHQgPSAnNDBweCc7XG5cdFx0XHR0ZXh0LmlucHV0RWwuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuXHRcdFx0dGV4dC5zZXRQbGFjZWhvbGRlcihvcHRpb25zLnBsYWNlaG9sZGVyKTtcblxuXHRcdFx0Ly8gU2V0IGluaXRpYWwgZGlzcGxheSB2YWx1ZVxuXHRcdFx0aWYgKGFjdHVhbFZhbHVlICYmIGFjdHVhbFZhbHVlLmxlbmd0aCA+IDEyKSB7XG5cdFx0XHRcdGNvbnN0IG1hc2tlZCA9IGFjdHVhbFZhbHVlLnNsaWNlKDAsIDgpICsgJ1x1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMlx1MjAyMicgKyBhY3R1YWxWYWx1ZS5zbGljZSgtNCk7XG5cdFx0XHRcdHRleHQuc2V0VmFsdWUobWFza2VkKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRleHQuc2V0VmFsdWUoYWN0dWFsVmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDcmVhdGUgdG9nZ2xlIGJ1dHRvblxuXHRcdFx0Y29uc3QgaW5wdXRDb250YWluZXIgPSB0ZXh0LmlucHV0RWwucGFyZW50RWxlbWVudDtcblx0XHRcdGlmIChpbnB1dENvbnRhaW5lcikge1xuXHRcdFx0XHRpbnB1dENvbnRhaW5lci5zdHlsZS5wb3NpdGlvbiA9ICdyZWxhdGl2ZSc7XG5cdFx0XHRcdFxuXHRcdFx0XHRjb25zdCB0b2dnbGVCdG4gPSBpbnB1dENvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyBjbHM6ICdub3ZhLXRvZ2dsZS1idG4nIH0pO1xuXHRcdFx0XHR0b2dnbGVCdG4uaW5uZXJIVE1MID0gYDxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiPlxuXHRcdFx0XHRcdDxwYXRoIGQ9XCJNMSAxMnM0LTggMTEtOCAxMSA4IDExIDgtNCA4LTExIDgtMTEtOC0xMS04elwiLz5cblx0XHRcdFx0XHQ8Y2lyY2xlIGN4PVwiMTJcIiBjeT1cIjEyXCIgcj1cIjNcIi8+XG5cdFx0XHRcdDwvc3ZnPmA7XG5cblx0XHRcdFx0dG9nZ2xlQnRuLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcblx0XHRcdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdFx0aXNWaXNpYmxlID0gIWlzVmlzaWJsZTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZiAoaXNWaXNpYmxlKSB7XG5cdFx0XHRcdFx0XHR0ZXh0LmlucHV0RWwudHlwZSA9ICd0ZXh0Jztcblx0XHRcdFx0XHRcdHRleHQuc2V0VmFsdWUoYWN0dWFsVmFsdWUpO1xuXHRcdFx0XHRcdFx0dG9nZ2xlQnRuLmlubmVySFRNTCA9IGA8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIj5cblx0XHRcdFx0XHRcdFx0PHBhdGggZD1cIm05Ljg4IDkuODhhMyAzIDAgMSAwIDQuMjQgNC4yNFwiLz5cblx0XHRcdFx0XHRcdFx0PHBhdGggZD1cIm0xMC43MyA1LjA4YTEwLjQzIDEwLjQzIDAgMCAxIDEuMjctLjA4YzcgMCAxMSA4IDExIDhhMTMuMTYgMTMuMTYgMCAwIDEtMS42NyAyLjY4XCIvPlxuXHRcdFx0XHRcdFx0XHQ8cGF0aCBkPVwiTTYuNjEgNi42MUExMy41MjYgMTMuNTI2IDAgMCAwIDEgMTJzNCA4IDExIDhhOS43NCA5Ljc0IDAgMCAwIDUuMzktMS42MVwiLz5cblx0XHRcdFx0XHRcdFx0PGxpbmUgeDE9XCIyXCIgeTE9XCIyXCIgeDI9XCIyMlwiIHkyPVwiMjJcIi8+XG5cdFx0XHRcdFx0XHQ8L3N2Zz5gO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHR0ZXh0LmlucHV0RWwudHlwZSA9ICdwYXNzd29yZCc7XG5cdFx0XHRcdFx0XHRpZiAoYWN0dWFsVmFsdWUgJiYgYWN0dWFsVmFsdWUubGVuZ3RoID4gMTIpIHtcblx0XHRcdFx0XHRcdFx0Y29uc3QgbWFza2VkID0gYWN0dWFsVmFsdWUuc2xpY2UoMCwgOCkgKyAnXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyXHUyMDIyJyArIGFjdHVhbFZhbHVlLnNsaWNlKC00KTtcblx0XHRcdFx0XHRcdFx0dGV4dC5zZXRWYWx1ZShtYXNrZWQpO1xuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0dGV4dC5zZXRWYWx1ZShhY3R1YWxWYWx1ZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR0b2dnbGVCdG4uaW5uZXJIVE1MID0gYDxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiPlxuXHRcdFx0XHRcdFx0XHQ8cGF0aCBkPVwiTTEgMTJzNC04IDExLTggMTEgOCAxMSA4LTQgOC0xMSA4LTExLTgtMTEtOHpcIi8+XG5cdFx0XHRcdFx0XHRcdDxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiMTJcIiByPVwiM1wiLz5cblx0XHRcdFx0XHRcdDwvc3ZnPmA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSGFuZGxlIHZhbHVlIGNoYW5nZXNcblx0XHRcdHRleHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdGFjdHVhbFZhbHVlID0gdmFsdWU7XG5cdFx0XHRcdGF3YWl0IG9wdGlvbnMub25DaGFuZ2UodmFsdWUpO1xuXHRcdFx0fSk7XG5cblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBjcmVhdGVUZXN0Q29ubmVjdGlvbkJ1dHRvbihjb250YWluZXI6IEhUTUxFbGVtZW50LCBwcm92aWRlcjogJ2NsYXVkZScgfCAnb3BlbmFpJyB8ICdnb29nbGUnIHwgJ29sbGFtYScpOiB2b2lkIHtcblx0XHRjb25zdCBzZXR0aW5nID0gbmV3IFNldHRpbmcoY29udGFpbmVyKVxuXHRcdFx0LnNldE5hbWUoJ0Nvbm5lY3Rpb24gU3RhdHVzJylcblx0XHRcdC5zZXREZXNjKCdUZXN0IHlvdXIgQVBJIGNvbm5lY3Rpb24nKTtcblxuXHRcdC8vIENyZWF0ZSBzdGF0dXMgaW5kaWNhdG9yIGZpcnN0ICh0byB0aGUgbGVmdClcblx0XHRjb25zdCBzdGF0dXNDb250YWluZXIgPSBzZXR0aW5nLmNvbnRyb2xFbC5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbm5lY3Rpb24tc3RhdHVzLWNvbnRhaW5lcicgfSk7XG5cdFx0XG5cdFx0c2V0dGluZy5hZGRCdXR0b24oYnV0dG9uID0+IHtcblx0XHRcdGJ1dHRvbi5zZXRCdXR0b25UZXh0KCdUZXN0IENvbm5lY3Rpb24nKVxuXHRcdFx0XHQub25DbGljayhhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy50ZXN0UHJvdmlkZXJDb25uZWN0aW9uKHByb3ZpZGVyLCBidXR0b24uYnV0dG9uRWwsIHN0YXR1c0NvbnRhaW5lcik7XG5cdFx0XHRcdH0pO1xuXHRcdFx0cmV0dXJuIGJ1dHRvbjtcblx0XHR9KTtcblx0XHRcblx0XHQvLyBTaG93IGluaXRpYWwgc3RhdHVzIGlmIHdlIGhhdmUgaXRcblx0XHR0aGlzLnVwZGF0ZUNvbm5lY3Rpb25TdGF0dXMoc3RhdHVzQ29udGFpbmVyLCBwcm92aWRlcik7XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIHRlc3RQcm92aWRlckNvbm5lY3Rpb24ocHJvdmlkZXI6ICdjbGF1ZGUnIHwgJ29wZW5haScgfCAnZ29vZ2xlJyB8ICdvbGxhbWEnLCBidXR0b25FbDogSFRNTEVsZW1lbnQsIHN0YXR1c0NvbnRhaW5lcjogSFRNTEVsZW1lbnQpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRjb25zdCBvcmlnaW5hbFRleHQgPSBidXR0b25FbC50ZXh0Q29udGVudCB8fCAnVGVzdCBDb25uZWN0aW9uJztcblx0XHRjb25zdCBidXR0b24gPSBidXR0b25FbCBhcyBIVE1MQnV0dG9uRWxlbWVudDtcblx0XHRcblx0XHRjb25zb2xlLmxvZyhgU3RhcnRpbmcgY29ubmVjdGlvbiB0ZXN0IGZvciAke3Byb3ZpZGVyfSwgYnV0dG9uIGRpc2FibGVkOiAke2J1dHRvbi5kaXNhYmxlZH1gKTtcblx0XHRcblx0XHQvLyBGb3JjZSBlbmFibGUgYW5kIHNldCBpbml0aWFsIHN0YXRlXG5cdFx0YnV0dG9uLmRpc2FibGVkID0gZmFsc2U7XG5cdFx0YnV0dG9uLnRleHRDb250ZW50ID0gJ1Rlc3RpbmcuLi4nO1xuXHRcdGJ1dHRvbi5zdHlsZS5vcGFjaXR5ID0gJzAuNic7XG5cdFx0XG5cdFx0Ly8gU2hvdyB0ZXN0aW5nIHN0YXR1c1xuXHRcdHRoaXMuc2V0Q29ubmVjdGlvblN0YXR1cyhzdGF0dXNDb250YWluZXIsICd0ZXN0aW5nJywgJ1Rlc3RpbmcuLi4nKTtcblx0XHRcblx0XHQvLyBVc2UgYSBiYWNrdXAgdGltZXIgdG8gZW5zdXJlIGJ1dHRvbiBnZXRzIHJlc3RvcmVkXG5cdFx0Y29uc3QgcmVzdG9yZUJ1dHRvbiA9ICgpID0+IHtcblx0XHRcdGJ1dHRvbi5kaXNhYmxlZCA9IGZhbHNlO1xuXHRcdFx0YnV0dG9uLnRleHRDb250ZW50ID0gb3JpZ2luYWxUZXh0O1xuXHRcdFx0YnV0dG9uLnN0eWxlLm9wYWNpdHkgPSAnMSc7XG5cdFx0XHRjb25zb2xlLmxvZyhgQnV0dG9uIGZvcmNlLXJlc3RvcmVkIGZvciAke3Byb3ZpZGVyfWApO1xuXHRcdH07XG5cdFx0XG5cdFx0Y29uc3QgYmFja3VwVGltZXIgPSBzZXRUaW1lb3V0KHJlc3RvcmVCdXR0b24sIDEyMDAwKTsgLy8gMTIgc2Vjb25kIGJhY2t1cFxuXHRcdFxuXHRcdHRyeSB7XG5cdFx0XHQvLyBDaGVjayBiYXNpYyBjb25maWd1cmF0aW9uIGZpcnN0XG5cdFx0XHRjb25zdCBoYXNDb25maWcgPSB0aGlzLmhhc1Byb3ZpZGVyQ29uZmlnKHByb3ZpZGVyKTtcblx0XHRcdGlmICghaGFzQ29uZmlnKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignUHJvdmlkZXIgbm90IGNvbmZpZ3VyZWQgLSBtaXNzaW5nIEFQSSBrZXkgb3Igc2V0dGluZ3MnKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRpbWVvdXQgZm9yIDEwIHNlY29uZHNcblx0XHRcdGNvbnN0IHRpbWVvdXRQcm9taXNlID0gbmV3IFByb21pc2U8bmV2ZXI+KChfLCByZWplY3QpID0+IHtcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiByZWplY3QobmV3IEVycm9yKCdDb25uZWN0aW9uIHRpbWVvdXQnKSksIDEwMDAwKTtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBUZXN0IHRoZSBjb25uZWN0aW9uIHVzaW5nIHRoZSBwbHVnaW4ncyBwcm92aWRlciBzeXN0ZW1cblx0XHRcdGNvbnN0IHRlc3RQcm9taXNlID0gdGhpcy5wZXJmb3JtUmVhbENvbm5lY3Rpb25UZXN0KHByb3ZpZGVyKTtcblx0XHRcdFxuXHRcdFx0YXdhaXQgUHJvbWlzZS5yYWNlKFt0ZXN0UHJvbWlzZSwgdGltZW91dFByb21pc2VdKTtcblx0XHRcdHRoaXMuc2V0Q29ubmVjdGlvblN0YXR1cyhzdGF0dXNDb250YWluZXIsICdzdWNjZXNzJywgJ1x1MjVDRiBDb25uZWN0ZWQnKTtcblx0XHRcdGNvbnNvbGUubG9nKGBDb25uZWN0aW9uIHRlc3Qgc3VjY2Vzc2Z1bCBmb3IgJHtwcm92aWRlcn1gKTtcblx0XHRcdFxuXHRcdH0gY2F0Y2ggKGVycm9yOiBhbnkpIHtcblx0XHRcdGNvbnNvbGUubG9nKGBDb25uZWN0aW9uIHRlc3QgZmFpbGVkIGZvciAke3Byb3ZpZGVyfTpgLCBlcnJvcik7XG5cdFx0XHRsZXQgZXJyb3JNZXNzYWdlID0gJ0Nvbm5lY3Rpb24gZmFpbGVkJztcblx0XHRcdFxuXHRcdFx0aWYgKGVycm9yLm1lc3NhZ2UgPT09ICdDb25uZWN0aW9uIHRpbWVvdXQnKSB7XG5cdFx0XHRcdGVycm9yTWVzc2FnZSA9ICdUaW1lb3V0Jztcblx0XHRcdH0gZWxzZSBpZiAocHJvdmlkZXIgPT09ICdvbGxhbWEnKSB7XG5cdFx0XHRcdC8vIENoZWNrIGlmIFVSTCBpcyBhY3R1YWxseSBjb25maWd1cmVkXG5cdFx0XHRcdGNvbnN0IG9sbGFtYVVybCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmFpUHJvdmlkZXJzLm9sbGFtYS5iYXNlVXJsO1xuXHRcdFx0XHRpZiAoIW9sbGFtYVVybCB8fCBvbGxhbWFVcmwudHJpbSgpID09PSAnJykge1xuXHRcdFx0XHRcdGVycm9yTWVzc2FnZSA9ICdObyBVUkwgY29uZmlndXJlZCc7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gJ0Nvbm5lY3Rpb24gZmFpbGVkJztcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChlcnJvci5tZXNzYWdlPy5pbmNsdWRlcygnNDAxJykgfHwgZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoJ3VuYXV0aG9yaXplZCcpIHx8IGVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKCdBUEkga2V5JykpIHtcblx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gJ0ludmFsaWQgQVBJIGtleSc7XG5cdFx0XHR9IGVsc2UgaWYgKGVycm9yLm1lc3NhZ2U/LmluY2x1ZGVzKCc0MjknKSkge1xuXHRcdFx0XHRlcnJvck1lc3NhZ2UgPSAnUmF0ZSBsaW1pdGVkJztcblx0XHRcdH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoJ3F1b3RhJykpIHtcblx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gJ1F1b3RhIGV4Y2VlZGVkJztcblx0XHRcdH0gZWxzZSBpZiAoZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoJ25vdCBjb25maWd1cmVkJykgfHwgZXJyb3IubWVzc2FnZT8uaW5jbHVkZXMoJ21pc3NpbmcnKSkge1xuXHRcdFx0XHRlcnJvck1lc3NhZ2UgPSAnTm90IGNvbmZpZ3VyZWQnO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gJ0Nvbm5lY3Rpb24gZmFpbGVkJztcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5zZXRDb25uZWN0aW9uU3RhdHVzKHN0YXR1c0NvbnRhaW5lciwgJ2Vycm9yJywgYFx1MjVDRiAke2Vycm9yTWVzc2FnZX1gKTtcblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0Ly8gQ2xlYXIgYmFja3VwIHRpbWVyIGFuZCByZXN0b3JlIGJ1dHRvblxuXHRcdFx0Y2xlYXJUaW1lb3V0KGJhY2t1cFRpbWVyKTtcblx0XHRcdHJlc3RvcmVCdXR0b24oKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIHBlcmZvcm1SZWFsQ29ubmVjdGlvblRlc3QocHJvdmlkZXI6ICdjbGF1ZGUnIHwgJ29wZW5haScgfCAnZ29vZ2xlJyB8ICdvbGxhbWEnKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc29sZS5sb2coYFN0YXJ0aW5nIHJlYWwgY29ubmVjdGlvbiB0ZXN0IGZvciAke3Byb3ZpZGVyfWApO1xuXHRcdFxuXHRcdC8vIFRlc3QgdGhlIHByb3ZpZGVyIGNsYXNzZXMgZGlyZWN0bHlcblx0XHRzd2l0Y2ggKHByb3ZpZGVyKSB7XG5cdFx0XHRjYXNlICdjbGF1ZGUnOiB7XG5cdFx0XHRcdGNvbnN0IGNsYXVkZVByb3ZpZGVyID0gbmV3IENsYXVkZVByb3ZpZGVyKHRoaXMucGx1Z2luLnNldHRpbmdzLmFpUHJvdmlkZXJzLmNsYXVkZSk7XG5cdFx0XHRcdC8vIEZvciBDbGF1ZGUsIGp1c3QgdGVzdCBhIG1pbmltYWwgY29tcGxldGlvbiBpbnN0ZWFkIG9mIGdldEF2YWlsYWJsZU1vZGVsc1xuXHRcdFx0XHRhd2FpdCBjbGF1ZGVQcm92aWRlci5jb21wbGV0ZSgnWW91IGFyZSBhIGhlbHBmdWwgYXNzaXN0YW50LicsICdIaScsIHsgbWF4VG9rZW5zOiAxIH0pO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGNhc2UgJ29wZW5haSc6IHtcblx0XHRcdFx0Y29uc3Qgb3BlbmFpUHJvdmlkZXIgPSBuZXcgT3BlbkFJUHJvdmlkZXIodGhpcy5wbHVnaW4uc2V0dGluZ3MuYWlQcm92aWRlcnMub3BlbmFpKTtcblx0XHRcdFx0YXdhaXQgb3BlbmFpUHJvdmlkZXIuZ2V0QXZhaWxhYmxlTW9kZWxzKCk7XG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXHRcdFx0Y2FzZSAnZ29vZ2xlJzoge1xuXHRcdFx0XHRjb25zdCBnb29nbGVQcm92aWRlciA9IG5ldyBHb29nbGVQcm92aWRlcih0aGlzLnBsdWdpbi5zZXR0aW5ncy5haVByb3ZpZGVycy5nb29nbGUpO1xuXHRcdFx0XHRhd2FpdCBnb29nbGVQcm92aWRlci5nZXRBdmFpbGFibGVNb2RlbHMoKTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRjYXNlICdvbGxhbWEnOiB7XG5cdFx0XHRcdGNvbnN0IG9sbGFtYVByb3ZpZGVyID0gbmV3IE9sbGFtYVByb3ZpZGVyKHRoaXMucGx1Z2luLnNldHRpbmdzLmFpUHJvdmlkZXJzLm9sbGFtYSk7XG5cdFx0XHRcdC8vIE9sbGFtYSBkb2Vzbid0IGhhdmUgZ2V0QXZhaWxhYmxlTW9kZWxzLCBjaGVjayBjb25uZWN0aW9uIHdpdGggaXNBdmFpbGFibGVcblx0XHRcdFx0Y29uc3QgaXNBdmFpbGFibGUgPSBhd2FpdCBvbGxhbWFQcm92aWRlci5pc0F2YWlsYWJsZSgpO1xuXHRcdFx0XHRpZiAoIWlzQXZhaWxhYmxlKSB7XG5cdFx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKCdPbGxhbWEgY29ubmVjdGlvbiBmYWlsZWQnKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdFx0Y29uc29sZS5sb2coYENvbm5lY3Rpb24gdGVzdCBzdWNjZXNzZnVsIGZvciAke3Byb3ZpZGVyfWApO1xuXHR9XG5cblx0cHJpdmF0ZSBzZXRDb25uZWN0aW9uU3RhdHVzKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHR5cGU6ICdzdWNjZXNzJyB8ICdlcnJvcicgfCAndGVzdGluZycgfCAnbm9uZScsIG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuXHRcdGNvbnRhaW5lci5lbXB0eSgpO1xuXHRcdFxuXHRcdGlmICh0eXBlID09PSAnbm9uZScpIHJldHVybjtcblx0XHRcblx0XHRjb25zdCBzdGF0dXNFbCA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6IGBub3ZhLXN0YXR1cy1pbmRpY2F0b3IgJHt0eXBlfWAgfSk7XG5cdFx0c3RhdHVzRWwudGV4dENvbnRlbnQgPSBtZXNzYWdlO1xuXHR9XG5cblx0cHJpdmF0ZSB1cGRhdGVDb25uZWN0aW9uU3RhdHVzKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsIHByb3ZpZGVyOiAnY2xhdWRlJyB8ICdvcGVuYWknIHwgJ2dvb2dsZScgfCAnb2xsYW1hJyk6IHZvaWQge1xuXHRcdC8vIENoZWNrIGlmIHByb3ZpZGVyIGhhcyByZXF1aXJlZCBjb25maWd1cmF0aW9uXG5cdFx0Y29uc3QgaGFzQ29uZmlnID0gdGhpcy5oYXNQcm92aWRlckNvbmZpZyhwcm92aWRlcik7XG5cdFx0XG5cdFx0aWYgKCFoYXNDb25maWcpIHtcblx0XHRcdHRoaXMuc2V0Q29ubmVjdGlvblN0YXR1cyhjb250YWluZXIsICdub25lJywgJycpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBEb24ndCBzaG93IGFueXRoaW5nIGluaXRpYWxseSAtIGxldCB1c2VyIHRlc3Qgd2hlbiByZWFkeVxuXHRcdFx0dGhpcy5zZXRDb25uZWN0aW9uU3RhdHVzKGNvbnRhaW5lciwgJ25vbmUnLCAnJyk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBoYXNQcm92aWRlckNvbmZpZyhwcm92aWRlcjogJ2NsYXVkZScgfCAnb3BlbmFpJyB8ICdnb29nbGUnIHwgJ29sbGFtYScpOiBib29sZWFuIHtcblx0XHRzd2l0Y2ggKHByb3ZpZGVyKSB7XG5cdFx0XHRjYXNlICdjbGF1ZGUnOiBcblx0XHRcdFx0cmV0dXJuICEhdGhpcy5wbHVnaW4uc2V0dGluZ3MuYWlQcm92aWRlcnMuY2xhdWRlLmFwaUtleTtcblx0XHRcdGNhc2UgJ29wZW5haSc6IFxuXHRcdFx0XHRyZXR1cm4gISF0aGlzLnBsdWdpbi5zZXR0aW5ncy5haVByb3ZpZGVycy5vcGVuYWkuYXBpS2V5O1xuXHRcdFx0Y2FzZSAnZ29vZ2xlJzogXG5cdFx0XHRcdHJldHVybiAhIXRoaXMucGx1Z2luLnNldHRpbmdzLmFpUHJvdmlkZXJzLmdvb2dsZS5hcGlLZXk7XG5cdFx0XHRjYXNlICdvbGxhbWEnOiBcblx0XHRcdFx0cmV0dXJuICEhdGhpcy5wbHVnaW4uc2V0dGluZ3MuYWlQcm92aWRlcnMub2xsYW1hLmJhc2VVcmw7XG5cdFx0XHRkZWZhdWx0OiBcblx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlTGljZW5zZVNldHRpbmdzKGNvbnRhaW5lckVsID0gdGhpcy5jb250YWluZXJFbCkge1xuXHRcdGNvbnN0IGxpY2Vuc2VDb250YWluZXIgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWxpY2Vuc2Utc2VjdGlvbicgfSk7XG5cdFx0bGljZW5zZUNvbnRhaW5lci5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdTdXBlcm5vdmEgU3VwcG9ydGVyIFN0YXR1cycgfSk7XG5cblx0XHQvLyBJbmZvIGFib3V0IHRoZSBuZXcgbW9kZWxcblx0XHRjb25zdCBpbmZvRWwgPSBsaWNlbnNlQ29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ25vdmEtbW9kZWwtaW5mbycgfSk7XG5cdFx0aW5mb0VsLmlubmVySFRNTCA9IGBcblx0XHRcdDxkaXYgY2xhc3M9XCJub3ZhLWluZm8tY2FyZCBjb21wYWN0XCI+XG5cdFx0XHRcdDxwPk5vdmEgcHJvdmlkZXMgYWxsIGZlYXR1cmVzIGZvciBmcmVlIHdoZW4geW91IHVzZSB5b3VyIG93biBBSSBwcm92aWRlciBBUEkga2V5cy4gXG5cdFx0XHRcdFN1cGVybm92YSBzdXBwb3J0ZXJzIGdldCBlYXJseSBhY2Nlc3MgdG8gbmV3IGZlYXR1cmVzLjwvcD5cblx0XHRcdDwvZGl2PlxuXHRcdGA7XG5cblx0XHQvLyBDdXJyZW50IFN1cGVybm92YSBzdGF0dXNcblx0XHRjb25zdCBpc1N1cGVybm92YSA9IHRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyPy5pc1N1cGVybm92YVN1cHBvcnRlcigpIHx8IGZhbHNlO1xuXHRcdGNvbnN0IHN1cGVybm92YUxpY2Vuc2UgPSB0aGlzLnBsdWdpbi5mZWF0dXJlTWFuYWdlcj8uZ2V0U3VwZXJub3ZhTGljZW5zZSgpO1xuXHRcdFxuXHRcdGNvbnN0IHN0YXR1c0Rpc3BsYXkgPSBsaWNlbnNlQ29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ25vdmEtc3VwZXJub3ZhLXN0YXR1cycgfSk7XG5cdFx0Y29uc3Qgc3RhdHVzVGV4dCA9IGlzU3VwZXJub3ZhID8gJ1N1cGVybm92YSBTdXBwb3J0ZXInIDogJ05vdmEgVXNlcic7XG5cdFx0Y29uc3Qgc3RhdHVzSWNvbiA9IGlzU3VwZXJub3ZhID8gYDxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiIHN0eWxlPVwid2lkdGg6IDE0cHg7IGhlaWdodDogMTRweDsgY29sb3I6ICM5MzMzZWE7IGZpbHRlcjogZHJvcC1zaGFkb3coMCAwIDRweCByZ2JhKDE0NywgNTEsIDIzNCwgMC42KSk7XCI+XG5cdFx0XHQ8Y2lyY2xlIGN4PVwiMTJcIiBjeT1cIjEyXCIgcj1cIjIuNVwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIi8+XG5cdFx0XHQ8cGF0aCBkPVwiTTEyIDFMMTIgNlwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjNcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIvPlxuXHRcdFx0PHBhdGggZD1cIk0xMiAxOEwxMiAyM1wiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjNcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIvPlxuXHRcdFx0PHBhdGggZD1cIk0yMyAxMkwxOCAxMlwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjNcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIvPlxuXHRcdFx0PHBhdGggZD1cIk02IDEyTDEgMTJcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cblx0XHRcdDxwYXRoIGQ9XCJNMTguMzY0IDUuNjM2TDE1LjUzNiA4LjQ2NFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjIuNVwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIi8+XG5cdFx0XHQ8cGF0aCBkPVwiTTguNDY0IDE1LjUzNkw1LjYzNiAxOC4zNjRcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyLjVcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIvPlxuXHRcdFx0PHBhdGggZD1cIk0xOC4zNjQgMTguMzY0TDE1LjUzNiAxNS41MzZcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyLjVcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIvPlxuXHRcdFx0PHBhdGggZD1cIk04LjQ2NCA4LjQ2NEw1LjYzNiA1LjYzNlwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjIuNVwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIi8+XG5cdFx0PC9zdmc+YCA6IGA8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBzdHlsZT1cIndpZHRoOiAxNHB4OyBoZWlnaHQ6IDE0cHg7IGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XCI+XG5cdFx0XHQke05PVkFfSUNPTl9TVkd9XG5cdFx0PC9zdmc+YDtcblx0XHRzdGF0dXNEaXNwbGF5LmlubmVySFRNTCA9IGBcblx0XHRcdDxkaXYgY2xhc3M9XCJub3ZhLXN0YXR1cy1iYWRnZSAke2lzU3VwZXJub3ZhID8gJ3N1cGVybm92YScgOiAnbm92YSd9XCI+XG5cdFx0XHRcdDxzcGFuIGNsYXNzPVwic3RhdHVzLWljb25cIj4ke3N0YXR1c0ljb259PC9zcGFuPlxuXHRcdFx0XHQ8c3BhbiBjbGFzcz1cInN0YXR1cy1uYW1lXCI+JHtzdGF0dXNUZXh0fTwvc3Bhbj5cblx0XHRcdDwvZGl2PlxuXHRcdGA7XG5cblx0XHQvLyBTdXBlcm5vdmEgbGljZW5zZSBzdGF0dXNcblx0XHRpZiAoc3VwZXJub3ZhTGljZW5zZSkge1xuXHRcdFx0Y29uc3Qgc3RhdHVzRWwgPSBsaWNlbnNlQ29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ25vdmEtbGljZW5zZS1zdGF0dXMnIH0pO1xuXHRcdFx0Y29uc3QgZXhwaXJ5VGV4dCA9IHN1cGVybm92YUxpY2Vuc2UuZXhwaXJlc0F0IFxuXHRcdFx0XHQ/IGBFeHBpcmVzOiAke3N1cGVybm92YUxpY2Vuc2UuZXhwaXJlc0F0LnRvTG9jYWxlRGF0ZVN0cmluZygpfWBcblx0XHRcdFx0OiAnTGlmZXRpbWUgU3VwcG9ydCc7XG5cdFx0XHRzdGF0dXNFbC5pbm5lckhUTUwgPSBgXG5cdFx0XHRcdDxkaXYgY2xhc3M9XCJsaWNlbnNlLWluZm9cIj5cblx0XHRcdFx0XHQ8c3BhbiBjbGFzcz1cImxpY2Vuc2UtZW1haWxcIj4ke3N1cGVybm92YUxpY2Vuc2UuZW1haWx9PC9zcGFuPlxuXHRcdFx0XHRcdDxzcGFuIGNsYXNzPVwibGljZW5zZS1leHBpcnlcIj4ke2V4cGlyeVRleHR9PC9zcGFuPlxuXHRcdFx0XHQ8L2Rpdj5cblx0XHRcdGA7XG5cdFx0fVxuXG5cdFx0Ly8gU3VwZXJub3ZhIGxpY2Vuc2Uga2V5IGlucHV0XG5cdFx0bmV3IFNldHRpbmcobGljZW5zZUNvbnRhaW5lcilcblx0XHRcdC5zZXROYW1lKCdTdXBlcm5vdmEgTGljZW5zZSBLZXkgKE9wdGlvbmFsKScpXG5cdFx0XHQuc2V0RGVzYygnRW50ZXIgeW91ciBTdXBlcm5vdmEgc3VwcG9ydGVyIGxpY2Vuc2Uga2V5IGZvciBlYXJseSBhY2Nlc3MgdG8gbmV3IGZlYXR1cmVzJylcblx0XHRcdC5hZGRUZXh0KHRleHQgPT4ge1xuXHRcdFx0XHR0ZXh0LmlucHV0RWwudHlwZSA9ICdwYXNzd29yZCc7XG5cdFx0XHRcdHRleHQuc2V0UGxhY2Vob2xkZXIoJ0VudGVyIFN1cGVybm92YSBsaWNlbnNlIGtleS4uLicpXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmxpY2Vuc2luZy5zdXBlcm5vdmFMaWNlbnNlS2V5IHx8ICcnKVxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmxpY2Vuc2luZy5zdXBlcm5vdmFMaWNlbnNlS2V5ID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Ly8gVXBkYXRlIFN1cGVybm92YSBsaWNlbnNlIGluIGZlYXR1cmUgbWFuYWdlclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyKSB7XG5cdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyLnVwZGF0ZVN1cGVybm92YUxpY2Vuc2UodmFsdWUgfHwgbnVsbCk7XG5cdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHQvLyBSZWZyZXNoIHNpZGViYXIgdG8gdXBkYXRlIGZlYXR1cmUgYXZhaWxhYmlsaXR5XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGxlYXZlcyA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9OT1ZBX1NJREVCQVIpO1xuXHRcdFx0XHRcdFx0XHRpZiAobGVhdmVzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBzaWRlYmFyVmlldyA9IGxlYXZlc1swXS52aWV3IGFzIE5vdmFTaWRlYmFyVmlldztcblx0XHRcdFx0XHRcdFx0XHRzaWRlYmFyVmlldy5yZWZyZXNoU3VwZXJub3ZhVUkoKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdFx0Ly8gUmVmcmVzaCB0aGUgZGlzcGxheSB0byBzaG93IHVwZGF0ZWQgc3RhdHVzXG5cdFx0XHRcdFx0XHRcdHRoaXMuZGlzcGxheSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdC8vIEFkZCB2YWxpZGF0aW9uIGJ1dHRvblxuXHRcdFx0XHRjb25zdCB2YWxpZGF0ZUJ1dHRvbiA9IHRleHQuaW5wdXRFbC5wYXJlbnRFbGVtZW50Py5jcmVhdGVFbCgnYnV0dG9uJywge1xuXHRcdFx0XHRcdHRleHQ6ICdWYWxpZGF0ZScsXG5cdFx0XHRcdFx0Y2xzOiAnbm92YS12YWxpZGF0ZS1idG4nXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYgKHZhbGlkYXRlQnV0dG9uKSB7XG5cdFx0XHRcdFx0dmFsaWRhdGVCdXR0b24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoKSA9PiB7XG5cdFx0XHRcdFx0XHRjb25zdCBsaWNlbnNlS2V5ID0gdGV4dC5pbnB1dEVsLnZhbHVlO1xuXHRcdFx0XHRcdFx0aWYgKCFsaWNlbnNlS2V5KSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuc2hvd0xpY2Vuc2VNZXNzYWdlKCdQbGVhc2UgZW50ZXIgYSBTdXBlcm5vdmEgbGljZW5zZSBrZXkgZmlyc3QuJywgJ2Vycm9yJyk7XG5cdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0dmFsaWRhdGVCdXR0b24udGV4dENvbnRlbnQgPSAnVmFsaWRhdGluZy4uLic7XG5cdFx0XHRcdFx0XHR2YWxpZGF0ZUJ1dHRvbi5kaXNhYmxlZCA9IHRydWU7XG5cblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGlmICh0aGlzLnBsdWdpbi5mZWF0dXJlTWFuYWdlcikge1xuXHRcdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyLnVwZGF0ZVN1cGVybm92YUxpY2Vuc2UobGljZW5zZUtleSk7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgaXNTdXBlcm5vdmEgPSB0aGlzLnBsdWdpbi5mZWF0dXJlTWFuYWdlci5pc1N1cGVybm92YVN1cHBvcnRlcigpO1xuXHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdGlmIChpc1N1cGVybm92YSkge1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5zaG93TGljZW5zZU1lc3NhZ2UoJ1ZhbGlkIFN1cGVybm92YSBsaWNlbnNlISBZb3Ugbm93IGhhdmUgZWFybHkgYWNjZXNzIHRvIG5ldyBmZWF0dXJlcy4nLCAnc3VjY2VzcycpO1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5zaG93Q29uZmV0dGkoKTtcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRcdFx0dGhpcy5zaG93TGljZW5zZU1lc3NhZ2UoJ0ludmFsaWQgb3IgZXhwaXJlZCBTdXBlcm5vdmEgbGljZW5zZSBrZXkuJywgJ2Vycm9yJyk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdC8vIFJlZnJlc2ggc2lkZWJhciB0byB1cGRhdGUgZmVhdHVyZSBhdmFpbGFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBsZWF2ZXMgPSB0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZShWSUVXX1RZUEVfTk9WQV9TSURFQkFSKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAobGVhdmVzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IHNpZGViYXJWaWV3ID0gbGVhdmVzWzBdLnZpZXcgYXMgTm92YVNpZGViYXJWaWV3O1xuXHRcdFx0XHRcdFx0XHRcdFx0c2lkZWJhclZpZXcucmVmcmVzaFN1cGVybm92YVVJKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0XHRcdC8vIFJlZnJlc2ggZGlzcGxheVxuXHRcdFx0XHRcdFx0XHRcdHRoaXMuZGlzcGxheSgpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnNob3dMaWNlbnNlTWVzc2FnZSgnRXJyb3IgdmFsaWRhdGluZyBTdXBlcm5vdmEgbGljZW5zZS4nLCAnZXJyb3InKTtcblx0XHRcdFx0XHRcdH0gZmluYWxseSB7XG5cdFx0XHRcdFx0XHRcdHZhbGlkYXRlQnV0dG9uLnRleHRDb250ZW50ID0gJ1ZhbGlkYXRlJztcblx0XHRcdFx0XHRcdFx0dmFsaWRhdGVCdXR0b24uZGlzYWJsZWQgPSBmYWxzZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHQvLyBTdXBlcm5vdmEgc3VwcG9ydGVyIGluZm9ybWF0aW9uIG9ubHlcblx0XHR0aGlzLmNyZWF0ZVN1cGVybm92YUluZm8obGljZW5zZUNvbnRhaW5lcik7XG5cblx0XHQvLyBEZWJ1ZyBzZXR0aW5ncyAoZGV2ZWxvcG1lbnQgb25seSlcblx0XHRpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdkZXZlbG9wbWVudCcgfHwgdGhpcy5wbHVnaW4uc2V0dGluZ3MubGljZW5zaW5nLmRlYnVnU2V0dGluZ3MuZW5hYmxlZCkge1xuXHRcdFx0dGhpcy5jcmVhdGVEZWJ1Z1NldHRpbmdzKGxpY2Vuc2VDb250YWluZXIpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlU3VwZXJub3ZhSW5mbyhjb250YWluZXI6IEhUTUxFbGVtZW50KSB7XG5cdFx0Ly8gU3VwZXJub3ZhIHN1cHBvcnRlciBpbmZvcm1hdGlvblxuXHRcdGNvbnN0IHN1cGVybm92YUluZm8gPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1zdXBlcm5vdmEtaW5mbycgfSk7XG5cdFx0c3VwZXJub3ZhSW5mby5pbm5lckhUTUwgPSBgXG5cdFx0XHQ8ZGl2IGNsYXNzPVwibm92YS1pbmZvLWNhcmRcIj5cblx0XHRcdFx0PGg1PkJlY29tZSBhIFN1cGVybm92YSBTdXBwb3J0ZXI8L2g1PlxuXHRcdFx0XHQ8cD5TdXBwb3J0IE5vdmEgZGV2ZWxvcG1lbnQgYW5kIGdldCBlYXJseSBhY2Nlc3MgdG8gbmV3IGZlYXR1cmVzLiBBbGwgZmVhdHVyZXMgZXZlbnR1YWxseSBiZWNvbWUgZnJlZSBmb3IgZXZlcnlvbmUuPC9wPlxuXHRcdFx0XHQ8dWw+XG5cdFx0XHRcdFx0PGxpPkVhcmx5IGFjY2VzcyB0byBuZXcgZmVhdHVyZXMgKDMtNiBtb250aHMgYmVmb3JlIGdlbmVyYWwgcmVsZWFzZSk8L2xpPlxuXHRcdFx0XHRcdDxsaT5Qcmlvcml0eSBzdXBwb3J0IGFuZCBmZWF0dXJlIHJlcXVlc3RzPC9saT5cblx0XHRcdFx0XHQ8bGk+U3VwcG9ydGVyIGJhZGdlIGFuZCByZWNvZ25pdGlvbjwvbGk+XG5cdFx0XHRcdFx0PGxpPkRpcmVjdGx5IHN1cHBvcnQgb3Blbi1zb3VyY2UgZGV2ZWxvcG1lbnQ8L2xpPlxuXHRcdFx0XHQ8L3VsPlxuXHRcdFx0PC9kaXY+XG5cdFx0YDtcblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlRGVidWdTZXR0aW5ncyhjb250YWluZXI6IEhUTUxFbGVtZW50KSB7XG5cdFx0Y29uc3QgZGVidWdDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1kZWJ1Zy1zZWN0aW9uJyB9KTtcblx0XHRkZWJ1Z0NvbnRhaW5lci5jcmVhdGVFbCgnaDQnLCB7IHRleHQ6ICdEZXZlbG9wbWVudCBTZXR0aW5ncycgfSk7XG5cblx0XHRuZXcgU2V0dGluZyhkZWJ1Z0NvbnRhaW5lcilcblx0XHRcdC5zZXROYW1lKCdEZWJ1ZyBNb2RlJylcblx0XHRcdC5zZXREZXNjKCdFbmFibGUgZGV2ZWxvcG1lbnQgdGVzdGluZyBmZWF0dXJlcycpXG5cdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmxpY2Vuc2luZy5kZWJ1Z1NldHRpbmdzLmVuYWJsZWQpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5saWNlbnNpbmcuZGVidWdTZXR0aW5ncy5lbmFibGVkID0gdmFsdWU7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0aWYgKHRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5mZWF0dXJlTWFuYWdlci51cGRhdGVEZWJ1Z1NldHRpbmdzKHRoaXMucGx1Z2luLnNldHRpbmdzLmxpY2Vuc2luZy5kZWJ1Z1NldHRpbmdzKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gUmVmcmVzaCBkaXNwbGF5IHRvIHNob3cvaGlkZSBkZWJ1ZyBvcHRpb25zXG5cdFx0XHRcdFx0dGhpcy5kaXNwbGF5KCk7XG5cdFx0XHRcdH0pKTtcblxuXHRcdGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5saWNlbnNpbmcuZGVidWdTZXR0aW5ncy5lbmFibGVkKSB7XG5cdFx0XHRuZXcgU2V0dGluZyhkZWJ1Z0NvbnRhaW5lcilcblx0XHRcdFx0LnNldE5hbWUoJ092ZXJyaWRlIERhdGUnKVxuXHRcdFx0XHQuc2V0RGVzYygnT3ZlcnJpZGUgY3VycmVudCBkYXRlIGZvciB0ZXN0aW5nIHRpbWUtZ2F0ZWQgZmVhdHVyZXMgKFlZWVktTU0tREQpJylcblx0XHRcdFx0LmFkZFRleHQodGV4dCA9PiB0ZXh0XG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCcyMDI1LTEyLTAxJylcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubGljZW5zaW5nLmRlYnVnU2V0dGluZ3Mub3ZlcnJpZGVEYXRlIHx8ICcnKVxuXHRcdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmxpY2Vuc2luZy5kZWJ1Z1NldHRpbmdzLm92ZXJyaWRlRGF0ZSA9IHZhbHVlIHx8IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5wbHVnaW4uZmVhdHVyZU1hbmFnZXIpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uZmVhdHVyZU1hbmFnZXIudXBkYXRlRGVidWdTZXR0aW5ncyh0aGlzLnBsdWdpbi5zZXR0aW5ncy5saWNlbnNpbmcuZGVidWdTZXR0aW5ncyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdC8vIERvbid0IHJlZnJlc2ggZGlzcGxheSBvbiBldmVyeSBrZXlzdHJva2UgLSBqdXN0IHVwZGF0ZSB0aGUgZmVhdHVyZSBtYW5hZ2VyXG5cdFx0XHRcdFx0fSkpO1xuXG5cdFx0XHRuZXcgU2V0dGluZyhkZWJ1Z0NvbnRhaW5lcilcblx0XHRcdFx0LnNldE5hbWUoJ0ZvcmNlIFN1cGVybm92YSBTdGF0dXMnKVxuXHRcdFx0XHQuc2V0RGVzYygnT3ZlcnJpZGUgU3VwZXJub3ZhIHN1cHBvcnRlciBzdGF0dXMgZm9yIHRlc3RpbmcnKVxuXHRcdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MubGljZW5zaW5nLmRlYnVnU2V0dGluZ3MuZm9yY2VTdXBlcm5vdmEgfHwgZmFsc2UpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubGljZW5zaW5nLmRlYnVnU2V0dGluZ3MuZm9yY2VTdXBlcm5vdmEgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZiAodGhpcy5wbHVnaW4uZmVhdHVyZU1hbmFnZXIpIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uZmVhdHVyZU1hbmFnZXIudXBkYXRlRGVidWdTZXR0aW5ncyh0aGlzLnBsdWdpbi5zZXR0aW5ncy5saWNlbnNpbmcuZGVidWdTZXR0aW5ncyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdC8vIFNob3cgY29uZmV0dGkgd2hlbiB0dXJuaW5nIE9OIEZvcmNlIFN1cGVybm92YVxuXHRcdFx0XHRcdFx0aWYgKHZhbHVlKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuc2hvd0NvbmZldHRpKCk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdC8vIFJlZnJlc2ggc2lkZWJhciB0byB1cGRhdGUgZmVhdHVyZSBhdmFpbGFiaWxpdHlcblx0XHRcdFx0XHRcdGNvbnN0IGxlYXZlcyA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9OT1ZBX1NJREVCQVIpO1xuXHRcdFx0XHRcdFx0aWYgKGxlYXZlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHNpZGViYXJWaWV3ID0gbGVhdmVzWzBdLnZpZXcgYXMgTm92YVNpZGViYXJWaWV3O1xuXHRcdFx0XHRcdFx0XHRzaWRlYmFyVmlldy5yZWZyZXNoU3VwZXJub3ZhVUkoKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Ly8gUmVmcmVzaCBkaXNwbGF5IHRvIHNob3cgdXBkYXRlZCBmZWF0dXJlIHN0YXR1c1xuXHRcdFx0XHRcdFx0dGhpcy5kaXNwbGF5KCk7XG5cdFx0XHRcdFx0fSkpO1xuXG5cdFx0XHQvLyBDbGVhciBsaWNlbnNlcyBidXR0b25cblx0XHRcdG5ldyBTZXR0aW5nKGRlYnVnQ29udGFpbmVyKVxuXHRcdFx0XHQuc2V0TmFtZSgnQ2xlYXIgQWxsIExpY2Vuc2VzJylcblx0XHRcdFx0LnNldERlc2MoJ1JlbW92ZSBhbGwgYXBwbGllZCBsaWNlbnNlcyAoZm9yIHRlc3RpbmcpJylcblx0XHRcdFx0LmFkZEJ1dHRvbihidXR0b24gPT4gYnV0dG9uXG5cdFx0XHRcdFx0LnNldEJ1dHRvblRleHQoJ0NsZWFyIExpY2Vuc2VzJylcblx0XHRcdFx0XHQuc2V0V2FybmluZygpXG5cdFx0XHRcdFx0Lm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRcdFx0Ly8gQ29uZmlybSBhY3Rpb25cblx0XHRcdFx0XHRcdGNvbnN0IGNvbmZpcm1lZCA9IGNvbmZpcm0oJ0FyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBjbGVhciBhbGwgbGljZW5zZXM/IFRoaXMgd2lsbCByZW1vdmUgYW55IGFwcGxpZWQgU3VwZXJub3ZhIGxpY2Vuc2UuJyk7XG5cdFx0XHRcdFx0XHRpZiAoIWNvbmZpcm1lZCkgcmV0dXJuO1xuXG5cdFx0XHRcdFx0XHQvLyBDbGVhciBsaWNlbnNlIGtleVxuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MubGljZW5zaW5nLnN1cGVybm92YUxpY2Vuc2VLZXkgPSAnJztcblx0XHRcdFx0XHRcdFxuXHRcdFx0XHRcdFx0Ly8gQ2xlYXIgRm9yY2UgU3VwZXJub3ZhIGlmIGVuYWJsZWRcblx0XHRcdFx0XHRcdGlmICh0aGlzLnBsdWdpbi5zZXR0aW5ncy5saWNlbnNpbmcuZGVidWdTZXR0aW5ncy5mb3JjZVN1cGVybm92YSkge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5saWNlbnNpbmcuZGVidWdTZXR0aW5ncy5mb3JjZVN1cGVybm92YSA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblxuXHRcdFx0XHRcdFx0Ly8gVXBkYXRlIGZlYXR1cmUgbWFuYWdlclxuXHRcdFx0XHRcdFx0aWYgKHRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyKSB7XG5cdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyLnVwZGF0ZVN1cGVybm92YUxpY2Vuc2UobnVsbCk7XG5cdFx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyLnVwZGF0ZURlYnVnU2V0dGluZ3ModGhpcy5wbHVnaW4uc2V0dGluZ3MubGljZW5zaW5nLmRlYnVnU2V0dGluZ3MpO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBSZWZyZXNoIHNpZGViYXJcblx0XHRcdFx0XHRcdGNvbnN0IGxlYXZlcyA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9OT1ZBX1NJREVCQVIpO1xuXHRcdFx0XHRcdFx0aWYgKGxlYXZlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHNpZGViYXJWaWV3ID0gbGVhdmVzWzBdLnZpZXcgYXMgTm92YVNpZGViYXJWaWV3O1xuXHRcdFx0XHRcdFx0XHRzaWRlYmFyVmlldy5yZWZyZXNoU3VwZXJub3ZhVUkoKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0Ly8gU2hvdyBzdWNjZXNzIG1lc3NhZ2Vcblx0XHRcdFx0XHRcdHRoaXMuc2hvd0xpY2Vuc2VNZXNzYWdlKCdBbGwgbGljZW5zZXMgY2xlYXJlZCBzdWNjZXNzZnVsbHkuJywgJ3N1Y2Nlc3MnKTtcblxuXHRcdFx0XHRcdFx0Ly8gUmVmcmVzaCBkaXNwbGF5XG5cdFx0XHRcdFx0XHR0aGlzLmRpc3BsYXkoKTtcblx0XHRcdFx0XHR9KSk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBzaG93TGljZW5zZU1lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCB0eXBlOiAnc3VjY2VzcycgfCAnZXJyb3InKSB7XG5cdFx0Ly8gQ3JlYXRlIG9yIHVwZGF0ZSBtZXNzYWdlIGVsZW1lbnRcblx0XHRjb25zdCBleGlzdGluZ01lc3NhZ2UgPSB0aGlzLmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoJy5ub3ZhLWxpY2Vuc2UtbWVzc2FnZScpO1xuXHRcdGlmIChleGlzdGluZ01lc3NhZ2UpIHtcblx0XHRcdGV4aXN0aW5nTWVzc2FnZS5yZW1vdmUoKTtcblx0XHR9XG5cblx0XHRjb25zdCBtZXNzYWdlRWwgPSB0aGlzLmNvbnRhaW5lckVsLmNyZWF0ZURpdih7IFxuXHRcdFx0Y2xzOiBgbm92YS1saWNlbnNlLW1lc3NhZ2UgJHt0eXBlfWAsXG5cdFx0XHR0ZXh0OiBtZXNzYWdlXG5cdFx0fSk7XG5cblx0XHQvLyBBdXRvLXJlbW92ZSBhZnRlciA1IHNlY29uZHNcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdG1lc3NhZ2VFbC5yZW1vdmUoKTtcblx0XHR9LCA1MDAwKTtcblx0fVxuXG5cdHByaXZhdGUgc2hvd0NvbmZldHRpKCkge1xuXHRcdC8vIENyZWF0ZSBjb25mZXR0aSBjb250YWluZXJcblx0XHRjb25zdCBjb25mZXR0aUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdGNvbmZldHRpQ29udGFpbmVyLmNsYXNzTmFtZSA9ICdub3ZhLWNvbmZldHRpLWNvbnRhaW5lcic7XG5cdFx0ZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb25mZXR0aUNvbnRhaW5lcik7XG5cblx0XHQvLyBHZXQgc2V0dGluZ3MgY29udGFpbmVyIHBvc2l0aW9uIGZvciBleHBsb3Npb24gY2VudGVyXG5cdFx0Y29uc3QgcmVjdCA9IHRoaXMuY29udGFpbmVyRWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cdFx0Y29uc3QgY2VudGVyWCA9IHJlY3QubGVmdCArIHJlY3Qud2lkdGggLyAyO1xuXHRcdGNvbnN0IGNlbnRlclkgPSByZWN0LnRvcCArIE1hdGgubWluKHJlY3QuaGVpZ2h0IC8gMiwgMzAwKTtcblxuXHRcdC8vIENvbG9ycyBmb3IgY29uZmV0dGlcblx0XHRjb25zdCBjb2xvcnMgPSBbJ2dvbGQnLCAnYmx1ZScsICdwaW5rJywgJ2dyZWVuJywgJ3JlZCcsICcnXTsgIC8vIGVtcHR5IHN0cmluZyA9IGRlZmF1bHQgcHVycGxlXG5cblx0XHQvLyBDcmVhdGUgY29uZmV0dGkgcGllY2VzXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCAxNTA7IGkrKykge1xuXHRcdFx0Y29uc3QgY29uZmV0dGkgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRcdGNvbmZldHRpLmNsYXNzTmFtZSA9IGBub3ZhLWNvbmZldHRpLXBpZWNlICR7Y29sb3JzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNvbG9ycy5sZW5ndGgpXX1gO1xuXHRcdFx0XG5cdFx0XHQvLyBQb3NpdGlvbiBhdCBleHBsb3Npb24gY2VudGVyXG5cdFx0XHRjb25mZXR0aS5zdHlsZS5sZWZ0ID0gYCR7Y2VudGVyWH1weGA7XG5cdFx0XHRjb25mZXR0aS5zdHlsZS50b3AgPSBgJHtjZW50ZXJZfXB4YDtcblx0XHRcdFxuXHRcdFx0Ly8gQ2FsY3VsYXRlIGV4cGxvc2lvbiB0cmFqZWN0b3J5XG5cdFx0XHRjb25zdCBhbmdsZSA9IChNYXRoLlBJICogMiAqIGkpIC8gMTUwICsgKE1hdGgucmFuZG9tKCkgKiAwLjIgLSAwLjEpO1xuXHRcdFx0Y29uc3QgdmVsb2NpdHkgPSAyNTAgKyBNYXRoLnJhbmRvbSgpICogMzUwOyAvLyBwaXhlbHNcblx0XHRcdGNvbnN0IGV4cGxvZGVYID0gTWF0aC5jb3MoYW5nbGUpICogdmVsb2NpdHk7XG5cdFx0XHRjb25zdCBleHBsb2RlWSA9IE1hdGguc2luKGFuZ2xlKSAqIHZlbG9jaXR5IC0gMTUwOyAvLyBTdHJvbmcgdXB3YXJkIGJpYXNcblx0XHRcdFxuXHRcdFx0Ly8gU2V0IENTUyBjdXN0b20gcHJvcGVydGllcyBmb3IgYW5pbWF0aW9uXG5cdFx0XHRjb25mZXR0aS5zdHlsZS5zZXRQcm9wZXJ0eSgnLS1leHBsb2RlLXgnLCBgJHtleHBsb2RlWH1weGApO1xuXHRcdFx0Y29uZmV0dGkuc3R5bGUuc2V0UHJvcGVydHkoJy0tZXhwbG9kZS15JywgYCR7ZXhwbG9kZVl9cHhgKTtcblx0XHRcdFxuXHRcdFx0Ly8gUmFuZG9tIGRlbGF5IGZvciBzdGFnZ2VyZWQgZXhwbG9zaW9uXG5cdFx0XHRjb25mZXR0aS5zdHlsZS5hbmltYXRpb25EZWxheSA9IGAke01hdGgucmFuZG9tKCkgKiAwLjJ9c2A7XG5cdFx0XHRcblx0XHRcdC8vIFJhbmRvbSBzaXplXG5cdFx0XHRjb25zdCBzaXplID0gNiArIE1hdGgucmFuZG9tKCkgKiAxNDtcblx0XHRcdGNvbmZldHRpLnN0eWxlLndpZHRoID0gYCR7c2l6ZX1weGA7XG5cdFx0XHRjb25mZXR0aS5zdHlsZS5oZWlnaHQgPSBgJHtzaXplfXB4YDtcblx0XHRcdFxuXHRcdFx0Ly8gTWFrZSBzb21lIGNvbmZldHRpIHJlY3Rhbmd1bGFyXG5cdFx0XHRpZiAoTWF0aC5yYW5kb20oKSA+IDAuNSkge1xuXHRcdFx0XHRjb25mZXR0aS5zdHlsZS5oZWlnaHQgPSBgJHtzaXplICogMC40fXB4YDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Y29uZmV0dGlDb250YWluZXIuYXBwZW5kQ2hpbGQoY29uZmV0dGkpO1xuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBjb250YWluZXIgYWZ0ZXIgYW5pbWF0aW9uIGNvbXBsZXRlc1xuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0Y29uZmV0dGlDb250YWluZXIucmVtb3ZlKCk7XG5cdFx0fSwgNDAwMCk7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZUdlbmVyYWxTZXR0aW5ncyhjb250YWluZXJFbCA9IHRoaXMuY29udGFpbmVyRWwpIHtcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdHZW5lcmFsIFNldHRpbmdzJyB9KTtcblxuXHRcdG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ0RlZmF1bHQgVGVtcGVyYXR1cmUnKVxuXHRcdFx0LnNldERlc2MoJ0NvbnRyb2xzIHJhbmRvbW5lc3MgaW4gQUkgcmVzcG9uc2VzICgwLjAgLSAxLjApJylcblx0XHRcdC5hZGRTbGlkZXIoc2xpZGVyID0+IHNsaWRlclxuXHRcdFx0XHQuc2V0TGltaXRzKDAsIDEsIDAuMSlcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmdlbmVyYWwuZGVmYXVsdFRlbXBlcmF0dXJlKVxuXHRcdFx0XHQuc2V0RHluYW1pY1Rvb2x0aXAoKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2VuZXJhbC5kZWZhdWx0VGVtcGVyYXR1cmUgPSB2YWx1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0fSkpO1xuXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnRGVmYXVsdCBNYXggVG9rZW5zJylcblx0XHRcdC5zZXREZXNjKCdNYXhpbXVtIGxlbmd0aCBvZiBBSSByZXNwb25zZXMnKVxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB7XG5cdFx0XHRcdHRleHQuaW5wdXRFbC50eXBlID0gJ251bWJlcic7XG5cdFx0XHRcdHRleHQuaW5wdXRFbC5zdHlsZS53aWR0aCA9ICcxNTBweCc7XG5cdFx0XHRcdHRleHQuaW5wdXRFbC5zdHlsZS5oZWlnaHQgPSAnNDBweCc7XG5cdFx0XHRcdHJldHVybiB0ZXh0XG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCcxMDAwJylcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2VuZXJhbC5kZWZhdWx0TWF4VG9rZW5zLnRvU3RyaW5nKCkpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0Y29uc3QgbnVtVmFsdWUgPSBwYXJzZUludCh2YWx1ZSk7XG5cdFx0XHRcdFx0XHRpZiAoIWlzTmFOKG51bVZhbHVlKSAmJiBudW1WYWx1ZSA+IDApIHtcblx0XHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2VuZXJhbC5kZWZhdWx0TWF4VG9rZW5zID0gbnVtVmFsdWU7XG5cdFx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHRuZXcgU2V0dGluZyhjb250YWluZXJFbClcblx0XHRcdC5zZXROYW1lKCdBdXRvLXNhdmUgc2V0dGluZ3MnKVxuXHRcdFx0LnNldERlc2MoJ0F1dG9tYXRpY2FsbHkgc2F2ZSBzZXR0aW5ncyB3aGVuIGNoYW5nZWQnKVxuXHRcdFx0LmFkZFRvZ2dsZSh0b2dnbGUgPT4gdG9nZ2xlXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5nZW5lcmFsLmF1dG9TYXZlKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuZ2VuZXJhbC5hdXRvU2F2ZSA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KSk7XG5cblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlUHJvdmlkZXJTZXR0aW5ncyhjb250YWluZXJFbCA9IHRoaXMuY29udGFpbmVyRWwpIHtcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdBSSBQcm92aWRlciBTZXR0aW5ncycgfSk7XG5cblx0XHQvLyBJbmZvIGFib3V0IEFQSSBrZXlzIGFuZCBtb2RlbCByZWNvbW1lbmRhdGlvbnNcblx0XHRjb25zdCBpbmZvRWwgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLXByb3ZpZGVyLWluZm8nIH0pO1xuXHRcdGluZm9FbC5pbm5lckhUTUwgPSBgXG5cdFx0XHQ8ZGl2IGNsYXNzPVwibm92YS1pbmZvLWNhcmRcIj5cblx0XHRcdFx0PGg0PkNvbmZpZ3VyZSBZb3VyIEFQSSBLZXlzPC9oND5cblx0XHRcdFx0PHA+Tm92YSBjb25uZWN0cyB0byBBSSBwcm92aWRlcnMgdXNpbmcgeW91ciBvd24gQVBJIGtleXMuIEFsbCBwcm92aWRlcnMgYXJlIGF2YWlsYWJsZSB0byBhbGwgdXNlcnMgLSBcblx0XHRcdFx0anVzdCBhZGQgeW91ciBBUEkga2V5cyBiZWxvdyB0byBnZXQgc3RhcnRlZC48L3A+XG5cdFx0XHQ8L2Rpdj5cblx0XHRcdDxkaXYgY2xhc3M9XCJub3ZhLWluZm8tY2FyZCBub3ZhLW1vZGVsLWd1aWRhbmNlXCI+XG5cdFx0XHRcdDxoND5SZWNvbW1lbmRlZCBEZWZhdWx0czwvaDQ+XG5cdFx0XHRcdDx1bCBjbGFzcz1cIm5vdmEtbW9kZWwtcmVjb21tZW5kYXRpb25zXCI+XG5cdFx0XHRcdFx0PGxpPjxzdHJvbmc+Q2xhdWRlIFNvbm5ldCA0PC9zdHJvbmc+IC0gTGF0ZXN0IGdlbmVyYXRpb24gd2l0aCBleGNlbGxlbnQgaW5zdHJ1Y3Rpb24gZm9sbG93aW5nIGZvciBjb2xsYWJvcmF0aXZlIGVkaXRpbmc8L2xpPlxuXHRcdFx0XHRcdDxsaT48c3Ryb25nPkdQVC00LjEgTWluaTwvc3Ryb25nPiAtIEN1cnJlbnQtZ2VuZXJhdGlvbiBtb2RlbCB0aGF0IG91dHBlcmZvcm1zIEdQVC00byB3aGlsZSByZW1haW5pbmcgY29zdC1lZmZlY3RpdmU8L2xpPlxuXHRcdFx0XHRcdDxsaT48c3Ryb25nPkdlbWluaSAyLjUgRmxhc2g8L3N0cm9uZz4gLSBCZXN0IHByaWNlL3BlcmZvcm1hbmNlIHdpdGggXCJ0aGlua2luZ1wiIGNhcGFiaWxpdGllcyBhbmQgc3Ryb25nIGNvZGluZyBzdXBwb3J0PC9saT5cblx0XHRcdFx0PC91bD5cblx0XHRcdFx0PHAgY2xhc3M9XCJub3ZhLWd1aWRhbmNlLW5vdGVcIj5UaGVzZSBkZWZhdWx0cyBvZmZlciBtb2Rlcm4gQUkgY2FwYWJpbGl0aWVzIHdpdGhvdXQgcHJlbWl1bSBwcmljaW5nLjwvcD5cblx0XHRcdDwvZGl2PlxuXHRcdGA7XG5cblx0XHQvLyBTaG93IGFsbCBwcm92aWRlcnMgLSBubyByZXN0cmljdGlvbnNcblx0XHR0aGlzLmNyZWF0ZU9sbGFtYVNldHRpbmdzKGNvbnRhaW5lckVsKTtcblx0XHR0aGlzLmNyZWF0ZUNsYXVkZVNldHRpbmdzKGNvbnRhaW5lckVsKTtcblx0XHR0aGlzLmNyZWF0ZUdvb2dsZVNldHRpbmdzKGNvbnRhaW5lckVsKTtcblx0XHR0aGlzLmNyZWF0ZU9wZW5BSVNldHRpbmdzKGNvbnRhaW5lckVsKTtcblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlQ2xhdWRlU2V0dGluZ3MoY29udGFpbmVyRWwgPSB0aGlzLmNvbnRhaW5lckVsKSB7XG5cdFx0XG5cdFx0Y29uc3QgY2xhdWRlQ29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1wcm92aWRlci1zZWN0aW9uJyB9KTtcblx0XHRjbGF1ZGVDb250YWluZXIuY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiAnQ2xhdWRlIChBbnRocm9waWMpJyB9KTtcblxuXHRcdHRoaXMuY3JlYXRlU2VjdXJlQXBpS2V5SW5wdXQoY2xhdWRlQ29udGFpbmVyLCB7XG5cdFx0XHRuYW1lOiAnQVBJIEtleScsXG5cdFx0XHRkZXNjOiAnWW91ciBBbnRocm9waWMgQVBJIGtleScsXG5cdFx0XHRwbGFjZWhvbGRlcjogJ3NrLWFudC0uLi4nLFxuXHRcdFx0dmFsdWU6IHRoaXMucGx1Z2luLnNldHRpbmdzLmFpUHJvdmlkZXJzLmNsYXVkZS5hcGlLZXkgfHwgJycsXG5cdFx0XHRvbkNoYW5nZTogYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmFpUHJvdmlkZXJzLmNsYXVkZS5hcGlLZXkgPSB2YWx1ZTtcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBUZXN0IENvbm5lY3Rpb24gYnV0dG9uXG5cdFx0dGhpcy5jcmVhdGVUZXN0Q29ubmVjdGlvbkJ1dHRvbihjbGF1ZGVDb250YWluZXIsICdjbGF1ZGUnKTtcblxuXHRcdC8vIE1vZGVsIHNldHRpbmcgd2l0aCByZWZyZXNoIGJ1dHRvblxuXHRcdGNvbnN0IG1vZGVsU2V0dGluZyA9IG5ldyBTZXR0aW5nKGNsYXVkZUNvbnRhaW5lcilcblx0XHRcdC5zZXROYW1lKCdNb2RlbCcpXG5cdFx0XHQuc2V0RGVzYygnQ2xhdWRlIG1vZGVsIHRvIHVzZScpO1xuXG5cdFx0bGV0IG1vZGVsRHJvcGRvd246IGFueTtcblx0XHRcblx0XHRtb2RlbFNldHRpbmcuYWRkRHJvcGRvd24oZHJvcGRvd24gPT4ge1xuXHRcdFx0bW9kZWxEcm9wZG93biA9IGRyb3Bkb3duO1xuXHRcdFx0ZHJvcGRvd24uc2VsZWN0RWwuc3R5bGUud2lkdGggPSAnMjAwcHgnO1xuXHRcdFx0ZHJvcGRvd24uc2VsZWN0RWwuc3R5bGUuaGVpZ2h0ID0gJzQwcHgnO1xuXHRcdFx0dGhpcy5wb3B1bGF0ZUNsYXVkZU1vZGVscyhkcm9wZG93bik7XG5cdFx0XHRyZXR1cm4gZHJvcGRvd25cblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmFpUHJvdmlkZXJzLmNsYXVkZS5tb2RlbCB8fCAnY2xhdWRlLXNvbm5ldC00LTIwMjUwNTE0Jylcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmFpUHJvdmlkZXJzLmNsYXVkZS5tb2RlbCA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdC8vIENsYXVkZSBtb2RlbHMgYXJlIGhhcmRjb2RlZCAtIG5vIHJlZnJlc2ggbmVlZGVkXG5cdH1cblxuXHRwcml2YXRlIHBvcHVsYXRlQ2xhdWRlTW9kZWxzKGRyb3Bkb3duOiBhbnkpIHtcblx0XHQvLyBDbGVhciBleGlzdGluZyBvcHRpb25zXG5cdFx0ZHJvcGRvd24uc2VsZWN0RWwuZW1wdHkoKTtcblx0XHRcblx0XHQvLyBVc2UgY2VudHJhbGl6ZWQgbW9kZWwgZGVmaW5pdGlvbnNcblx0XHRjb25zdCBjdXJyZW50TW9kZWxzID0gZ2V0QXZhaWxhYmxlTW9kZWxzKCdjbGF1ZGUnKTtcblxuXHRcdGN1cnJlbnRNb2RlbHMuZm9yRWFjaChtb2RlbCA9PiB7XG5cdFx0XHRkcm9wZG93bi5hZGRPcHRpb24obW9kZWwudmFsdWUsIG1vZGVsLmxhYmVsKTtcblx0XHR9KTtcblx0fVxuXG5cblxuXHRwcml2YXRlIGNyZWF0ZU9wZW5BSVNldHRpbmdzKGNvbnRhaW5lckVsID0gdGhpcy5jb250YWluZXJFbCkge1xuXHRcdFxuXHRcdGNvbnN0IG9wZW5haUNvbnRhaW5lciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogJ25vdmEtcHJvdmlkZXItc2VjdGlvbicgfSk7XG5cdFx0b3BlbmFpQ29udGFpbmVyLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ0NoYXRHUFQgKE9wZW5BSSknIH0pO1xuXG5cdFx0dGhpcy5jcmVhdGVTZWN1cmVBcGlLZXlJbnB1dChvcGVuYWlDb250YWluZXIsIHtcblx0XHRcdG5hbWU6ICdBUEkgS2V5Jyxcblx0XHRcdGRlc2M6ICdZb3VyIE9wZW5BSSBBUEkga2V5Jyxcblx0XHRcdHBsYWNlaG9sZGVyOiAnc2stLi4uJyxcblx0XHRcdHZhbHVlOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5haVByb3ZpZGVycy5vcGVuYWkuYXBpS2V5IHx8ICcnLFxuXHRcdFx0b25DaGFuZ2U6IGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5haVByb3ZpZGVycy5vcGVuYWkuYXBpS2V5ID0gdmFsdWU7XG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gVGVzdCBDb25uZWN0aW9uIGJ1dHRvblxuXHRcdHRoaXMuY3JlYXRlVGVzdENvbm5lY3Rpb25CdXR0b24ob3BlbmFpQ29udGFpbmVyLCAnb3BlbmFpJyk7XG5cblx0XHQvLyBNb2RlbCBzZXR0aW5nIHdpdGggcmVmcmVzaCBidXR0b25cblx0XHRjb25zdCBtb2RlbFNldHRpbmcgPSBuZXcgU2V0dGluZyhvcGVuYWlDb250YWluZXIpXG5cdFx0XHQuc2V0TmFtZSgnTW9kZWwnKVxuXHRcdFx0LnNldERlc2MoJ09wZW5BSSBtb2RlbCB0byB1c2UnKTtcblxuXHRcdGxldCBtb2RlbERyb3Bkb3duOiBhbnk7XG5cdFx0XG5cdFx0bW9kZWxTZXR0aW5nLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcblx0XHRcdG1vZGVsRHJvcGRvd24gPSBkcm9wZG93bjtcblx0XHRcdGRyb3Bkb3duLnNlbGVjdEVsLnN0eWxlLndpZHRoID0gJzIwMHB4Jztcblx0XHRcdGRyb3Bkb3duLnNlbGVjdEVsLnN0eWxlLmhlaWdodCA9ICc0MHB4Jztcblx0XHRcdHRoaXMucG9wdWxhdGVPcGVuQUlNb2RlbHMoZHJvcGRvd24pO1xuXHRcdFx0cmV0dXJuIGRyb3Bkb3duXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5haVByb3ZpZGVycy5vcGVuYWkubW9kZWwgfHwgJ2dwdC00LjEtbWluaS0yMDI1LTA0LTE0Jylcblx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLmFpUHJvdmlkZXJzLm9wZW5haS5tb2RlbCA9IHZhbHVlO1xuXHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdC8vIE9wZW5BSSBtb2RlbHMgYXJlIGhhcmRjb2RlZCAtIG5vIHJlZnJlc2ggbmVlZGVkXG5cdH1cblxuXHRwcml2YXRlIHBvcHVsYXRlT3BlbkFJTW9kZWxzKGRyb3Bkb3duOiBhbnkpIHtcblx0XHQvLyBDbGVhciBleGlzdGluZyBvcHRpb25zXG5cdFx0ZHJvcGRvd24uc2VsZWN0RWwuZW1wdHkoKTtcblx0XHRcblx0XHQvLyBVc2UgY2VudHJhbGl6ZWQgbW9kZWwgZGVmaW5pdGlvbnNcblx0XHRjb25zdCBjdXJyZW50TW9kZWxzID0gZ2V0QXZhaWxhYmxlTW9kZWxzKCdvcGVuYWknKTtcblxuXHRcdGN1cnJlbnRNb2RlbHMuZm9yRWFjaChtb2RlbCA9PiB7XG5cdFx0XHRkcm9wZG93bi5hZGRPcHRpb24obW9kZWwudmFsdWUsIG1vZGVsLmxhYmVsKTtcblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlR29vZ2xlU2V0dGluZ3MoY29udGFpbmVyRWwgPSB0aGlzLmNvbnRhaW5lckVsKSB7XG5cdFx0XG5cdFx0Y29uc3QgZ29vZ2xlQ29udGFpbmVyID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1wcm92aWRlci1zZWN0aW9uJyB9KTtcblx0XHRnb29nbGVDb250YWluZXIuY3JlYXRlRWwoJ2g0JywgeyB0ZXh0OiAnR29vZ2xlIChHZW1pbmkpJyB9KTtcblxuXHRcdHRoaXMuY3JlYXRlU2VjdXJlQXBpS2V5SW5wdXQoZ29vZ2xlQ29udGFpbmVyLCB7XG5cdFx0XHRuYW1lOiAnQVBJIEtleScsXG5cdFx0XHRkZXNjOiAnWW91ciBHb29nbGUgQUkgQVBJIGtleScsXG5cdFx0XHRwbGFjZWhvbGRlcjogJ0FJLi4uJyxcblx0XHRcdHZhbHVlOiB0aGlzLnBsdWdpbi5zZXR0aW5ncy5haVByb3ZpZGVycy5nb29nbGUuYXBpS2V5IHx8ICcnLFxuXHRcdFx0b25DaGFuZ2U6IGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5haVByb3ZpZGVycy5nb29nbGUuYXBpS2V5ID0gdmFsdWU7XG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gVGVzdCBDb25uZWN0aW9uIGJ1dHRvblxuXHRcdHRoaXMuY3JlYXRlVGVzdENvbm5lY3Rpb25CdXR0b24oZ29vZ2xlQ29udGFpbmVyLCAnZ29vZ2xlJyk7XG5cblx0XHQvLyBNb2RlbCBzZXR0aW5nIHdpdGggcmVmcmVzaCBidXR0b25cblx0XHRjb25zdCBtb2RlbFNldHRpbmcgPSBuZXcgU2V0dGluZyhnb29nbGVDb250YWluZXIpXG5cdFx0XHQuc2V0TmFtZSgnTW9kZWwnKVxuXHRcdFx0LnNldERlc2MoJ0dlbWluaSBtb2RlbCB0byB1c2UnKTtcblxuXHRcdGxldCBtb2RlbERyb3Bkb3duOiBhbnk7XG5cdFx0XG5cdFx0bW9kZWxTZXR0aW5nLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcblx0XHRcdG1vZGVsRHJvcGRvd24gPSBkcm9wZG93bjtcblx0XHRcdGRyb3Bkb3duLnNlbGVjdEVsLnN0eWxlLndpZHRoID0gJzIwMHB4Jztcblx0XHRcdGRyb3Bkb3duLnNlbGVjdEVsLnN0eWxlLmhlaWdodCA9ICc0MHB4Jztcblx0XHRcdHRoaXMucG9wdWxhdGVHb29nbGVNb2RlbHMoZHJvcGRvd24pO1xuXHRcdFx0cmV0dXJuIGRyb3Bkb3duXG5cdFx0XHRcdC5zZXRWYWx1ZSh0aGlzLnBsdWdpbi5zZXR0aW5ncy5haVByb3ZpZGVycy5nb29nbGUubW9kZWwgfHwgJ2dlbWluaS0yLjUtZmxhc2gtcHJldmlldy0wNC0xNycpXG5cdFx0XHRcdC5vbkNoYW5nZShhc3luYyAodmFsdWUpID0+IHtcblx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5haVByb3ZpZGVycy5nb29nbGUubW9kZWwgPSB2YWx1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHQvLyBHb29nbGUgbW9kZWxzIGFyZSBoYXJkY29kZWQgLSBubyByZWZyZXNoIG5lZWRlZFxuXHR9XG5cblx0cHJpdmF0ZSBwb3B1bGF0ZUdvb2dsZU1vZGVscyhkcm9wZG93bjogYW55KSB7XG5cdFx0Ly8gQ2xlYXIgZXhpc3Rpbmcgb3B0aW9uc1xuXHRcdGRyb3Bkb3duLnNlbGVjdEVsLmVtcHR5KCk7XG5cdFx0XG5cdFx0Ly8gVXNlIGNlbnRyYWxpemVkIG1vZGVsIGRlZmluaXRpb25zXG5cdFx0Y29uc3QgY3VycmVudE1vZGVscyA9IGdldEF2YWlsYWJsZU1vZGVscygnZ29vZ2xlJyk7XG5cblx0XHRjdXJyZW50TW9kZWxzLmZvckVhY2gobW9kZWwgPT4ge1xuXHRcdFx0ZHJvcGRvd24uYWRkT3B0aW9uKG1vZGVsLnZhbHVlLCBtb2RlbC5sYWJlbCk7XG5cdFx0fSk7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZU9sbGFtYVNldHRpbmdzKGNvbnRhaW5lckVsID0gdGhpcy5jb250YWluZXJFbCkge1xuXHRcdGNvbnN0IG9sbGFtYUNvbnRhaW5lciA9IGNvbnRhaW5lckVsLmNyZWF0ZURpdih7IGNsczogJ25vdmEtcHJvdmlkZXItc2VjdGlvbicgfSk7XG5cdFx0b2xsYW1hQ29udGFpbmVyLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ09sbGFtYSAoTG9jYWwpJyB9KTtcblxuXHRcdG5ldyBTZXR0aW5nKG9sbGFtYUNvbnRhaW5lcilcblx0XHRcdC5zZXROYW1lKCdCYXNlIFVSTCcpXG5cdFx0XHQuc2V0RGVzYygnT2xsYW1hIHNlcnZlciBVUkwnKVxuXHRcdFx0LmFkZFRleHQodGV4dCA9PiB7XG5cdFx0XHRcdHRleHQuaW5wdXRFbC5zdHlsZS53aWR0aCA9ICczNTBweCc7XG5cdFx0XHRcdHRleHQuaW5wdXRFbC5zdHlsZS5oZWlnaHQgPSAnNDBweCc7XG5cdFx0XHRcdHJldHVybiB0ZXh0XG5cdFx0XHRcdFx0LnNldFBsYWNlaG9sZGVyKCdodHRwOi8vbG9jYWxob3N0OjExNDM0Jylcblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MuYWlQcm92aWRlcnMub2xsYW1hLmJhc2VVcmwgfHwgJycpXG5cdFx0XHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZSkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuYWlQcm92aWRlcnMub2xsYW1hLmJhc2VVcmwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cblx0XHQvLyBUZXN0IENvbm5lY3Rpb24gYnV0dG9uXG5cdFx0dGhpcy5jcmVhdGVUZXN0Q29ubmVjdGlvbkJ1dHRvbihvbGxhbWFDb250YWluZXIsICdvbGxhbWEnKTtcblxuXHRcdG5ldyBTZXR0aW5nKG9sbGFtYUNvbnRhaW5lcilcblx0XHRcdC5zZXROYW1lKCdNb2RlbCcpXG5cdFx0XHQuc2V0RGVzYygnT2xsYW1hIG1vZGVsIHRvIHVzZScpXG5cdFx0XHQuYWRkVGV4dCh0ZXh0ID0+IHtcblx0XHRcdFx0dGV4dC5pbnB1dEVsLnN0eWxlLndpZHRoID0gJzIwMHB4Jztcblx0XHRcdFx0dGV4dC5pbnB1dEVsLnN0eWxlLmhlaWdodCA9ICc0MHB4Jztcblx0XHRcdFx0cmV0dXJuIHRleHRcblx0XHRcdFx0XHQuc2V0UGxhY2Vob2xkZXIoJ2xsYW1hMicpXG5cdFx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLmFpUHJvdmlkZXJzLm9sbGFtYS5tb2RlbCB8fCAnJylcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5haVByb3ZpZGVycy5vbGxhbWEubW9kZWwgPSB2YWx1ZTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZVBsYXRmb3JtU2V0dGluZ3MoY29udGFpbmVyRWwgPSB0aGlzLmNvbnRhaW5lckVsKSB7XG5cdFx0Y29udGFpbmVyRWwuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnUGxhdGZvcm0gU2V0dGluZ3MnIH0pO1xuXHRcdFxuXHRcdC8vIEluZm8gYWJvdXQgcGxhdGZvcm0gc2V0dGluZ3Ncblx0XHRjb25zdCBpbmZvRWwgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLXBsYXRmb3JtLWluZm8nIH0pO1xuXHRcdGluZm9FbC5pbm5lckhUTUwgPSBgXG5cdFx0XHQ8ZGl2IGNsYXNzPVwibm92YS1pbmZvLWNhcmRcIj5cblx0XHRcdFx0PGg0Plx1RDgzRFx1RERBNVx1RkUwRiBQbGF0Zm9ybSBDb25maWd1cmF0aW9uPC9oND5cblx0XHRcdFx0PHA+Q29uZmlndXJlIHdoaWNoIEFJIHByb3ZpZGVyIHRvIHVzZSBhcyB5b3VyIHByaW1hcnkgcHJvdmlkZXIgb24gZGlmZmVyZW50IHBsYXRmb3Jtcy4gXG5cdFx0XHRcdE5vdmEgd29ya3Mgc2VhbWxlc3NseSBhY3Jvc3MgZGVza3RvcCBhbmQgbW9iaWxlIHdpdGggYWxsIHByb3ZpZGVycy48L3A+XG5cdFx0XHQ8L2Rpdj5cblx0XHRgO1xuXHRcdFxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ0Rlc2t0b3AnIH0pO1xuXHRcdGNvbnN0IGRlc2t0b3BEcm9wZG93biA9IG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ1ByaW1hcnkgUHJvdmlkZXInKVxuXHRcdFx0LnNldERlc2MoJ1ByaW1hcnkgQUkgcHJvdmlkZXIgZm9yIGRlc2t0b3AnKVxuXHRcdFx0LmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IHtcblx0XHRcdFx0Y29uc3QgYWxsb3dlZFByb3ZpZGVycyA9IHRoaXMuZ2V0QWxsb3dlZFByb3ZpZGVyc0ZvclBsYXRmb3JtKCdkZXNrdG9wJyk7XG5cdFx0XHRcdFxuXHRcdFx0XHRhbGxvd2VkUHJvdmlkZXJzLmZvckVhY2gocHJvdmlkZXIgPT4ge1xuXHRcdFx0XHRcdGNvbnN0IGxhYmVsID0gdGhpcy5nZXRQcm92aWRlckRpc3BsYXlOYW1lKHByb3ZpZGVyKTtcblx0XHRcdFx0XHRkcm9wZG93bi5hZGRPcHRpb24ocHJvdmlkZXIsIGxhYmVsKTtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZXR1cm4gZHJvcGRvd25cblx0XHRcdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucGxhdGZvcm1TZXR0aW5ncy5kZXNrdG9wLnByaW1hcnlQcm92aWRlcilcblx0XHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlOiBzdHJpbmcpID0+IHtcblx0XHRcdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnBsYXRmb3JtU2V0dGluZ3MuZGVza3RvcC5wcmltYXJ5UHJvdmlkZXIgPSB2YWx1ZSBhcyBQcm92aWRlclR5cGU7XG5cdFx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHRcdGlmICh0aGlzLnBsdWdpbi5haVByb3ZpZGVyTWFuYWdlcikge1xuXHRcdFx0XHRcdFx0XHR0aGlzLnBsdWdpbi5haVByb3ZpZGVyTWFuYWdlci51cGRhdGVTZXR0aW5ncyh0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXHRcdGNvbnRhaW5lckVsLmNyZWF0ZUVsKCdoNCcsIHsgdGV4dDogJ01vYmlsZScgfSk7XG5cdFx0Y29uc3QgbW9iaWxlU2V0dGluZyA9IG5ldyBTZXR0aW5nKGNvbnRhaW5lckVsKVxuXHRcdFx0LnNldE5hbWUoJ1ByaW1hcnkgUHJvdmlkZXInKVxuXHRcdFx0LnNldERlc2MoJ1ByaW1hcnkgQUkgcHJvdmlkZXIgZm9yIG1vYmlsZSBkZXZpY2VzJyk7XG5cdFx0XHRcblx0XHRtb2JpbGVTZXR0aW5nLmFkZERyb3Bkb3duKGRyb3Bkb3duID0+IGRyb3Bkb3duXG5cdFx0XHQuYWRkT3B0aW9uKCdub25lJywgJ05vbmUgKERpc2FibGVkKScpXG5cdFx0XHQuYWRkT3B0aW9uKCdjbGF1ZGUnLCAnQ2xhdWRlJylcblx0XHRcdC5hZGRPcHRpb24oJ29wZW5haScsICdPcGVuQUknKVxuXHRcdFx0LmFkZE9wdGlvbignZ29vZ2xlJywgJ0dvb2dsZScpXG5cdFx0XHQuc2V0VmFsdWUodGhpcy5wbHVnaW4uc2V0dGluZ3MucGxhdGZvcm1TZXR0aW5ncy5tb2JpbGUucHJpbWFyeVByb3ZpZGVyKVxuXHRcdFx0Lm9uQ2hhbmdlKGFzeW5jICh2YWx1ZTogc3RyaW5nKSA9PiB7XG5cdFx0XHRcdHRoaXMucGx1Z2luLnNldHRpbmdzLnBsYXRmb3JtU2V0dGluZ3MubW9iaWxlLnByaW1hcnlQcm92aWRlciA9IHZhbHVlIGFzIFByb3ZpZGVyVHlwZTtcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHRcdGlmICh0aGlzLnBsdWdpbi5haVByb3ZpZGVyTWFuYWdlcikge1xuXHRcdFx0XHRcdHRoaXMucGx1Z2luLmFpUHJvdmlkZXJNYW5hZ2VyLnVwZGF0ZVNldHRpbmdzKHRoaXMucGx1Z2luLnNldHRpbmdzKTtcblx0XHRcdFx0fVxuXHRcdFx0fSkpO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXRBbGxvd2VkUHJvdmlkZXJzRm9yUGxhdGZvcm0ocGxhdGZvcm06ICdkZXNrdG9wJyB8ICdtb2JpbGUnKTogUHJvdmlkZXJUeXBlW10ge1xuXHRcdC8vIEFsbCBwcm92aWRlcnMgYXJlIGF2YWlsYWJsZSB0byBhbGwgdXNlcnMgaW4gdGhlIFN1cGVybm92YSBtb2RlbFxuXHRcdHJldHVybiBwbGF0Zm9ybSA9PT0gJ2Rlc2t0b3AnIFxuXHRcdFx0PyBbJ2NsYXVkZScsICdvcGVuYWknLCAnZ29vZ2xlJywgJ29sbGFtYSddXG5cdFx0XHQ6IFsnY2xhdWRlJywgJ29wZW5haScsICdnb29nbGUnXTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0UHJvdmlkZXJEaXNwbGF5TmFtZShwcm92aWRlcjogUHJvdmlkZXJUeXBlKTogc3RyaW5nIHtcblx0XHRjb25zdCBuYW1lczogUmVjb3JkPFByb3ZpZGVyVHlwZSwgc3RyaW5nPiA9IHtcblx0XHRcdCdjbGF1ZGUnOiAnQ2xhdWRlIChBbnRocm9waWMpJyxcblx0XHRcdCdvcGVuYWknOiAnQ2hhdEdQVCAoT3BlbkFJKScsXG5cdFx0XHQnZ29vZ2xlJzogJ0dvb2dsZSAoR2VtaW5pKScsIFxuXHRcdFx0J29sbGFtYSc6ICdPbGxhbWEgKExvY2FsKScsXG5cdFx0XHQnbm9uZSc6ICdOb25lIChEaXNhYmxlZCknXG5cdFx0fTtcblx0XHRyZXR1cm4gbmFtZXNbcHJvdmlkZXJdIHx8IHByb3ZpZGVyO1xuXHR9XG5cblx0YXN5bmMgc2V0Q3VycmVudFByb3ZpZGVyKHByb3ZpZGVySWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IHBsYXRmb3JtID0gUGxhdGZvcm0uaXNNb2JpbGUgPyAnbW9iaWxlJyA6ICdkZXNrdG9wJztcblx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5wbGF0Zm9ybVNldHRpbmdzW3BsYXRmb3JtXS5wcmltYXJ5UHJvdmlkZXIgPSBwcm92aWRlcklkIGFzIFByb3ZpZGVyVHlwZTtcblx0XHRcblx0XHQvLyBVcGRhdGUgdGhlIHByb3ZpZGVyIG1hbmFnZXIgd2l0aCBuZXcgc2V0dGluZ3Ncblx0XHRpZiAodGhpcy5wbHVnaW4uYWlQcm92aWRlck1hbmFnZXIpIHtcblx0XHRcdHRoaXMucGx1Z2luLmFpUHJvdmlkZXJNYW5hZ2VyLnVwZGF0ZVNldHRpbmdzKHRoaXMucGx1Z2luLnNldHRpbmdzKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZUNvbW1hbmRTZXR0aW5ncyhjb250YWluZXJFbCA9IHRoaXMuY29udGFpbmVyRWwpIHtcblx0XHRjb250YWluZXJFbC5jcmVhdGVFbCgnaDMnLCB7IHRleHQ6ICdDdXN0b20gQ29tbWFuZHMnIH0pO1xuXG5cdFx0Ly8gRmVhdHVyZSBhdmFpbGFiaWxpdHkgY2hlY2tcblx0XHRpZiAoIXRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyLmlzRmVhdHVyZUVuYWJsZWQoJ2NvbW1hbmRzJykpIHtcblx0XHRcdGNvbnN0IG5vdGljZUVsID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1mZWF0dXJlLW5vdGljZScgfSk7XG5cdFx0XHRub3RpY2VFbC5pbm5lckhUTUwgPSBgXG5cdFx0XHRcdDxkaXYgc3R5bGU9XCJwYWRkaW5nOiAxNnB4OyBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKTsgYm9yZGVyLXJhZGl1czogOHB4OyBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XCI+XG5cdFx0XHRcdFx0PGg0IHN0eWxlPVwibWFyZ2luOiAwIDAgOHB4IDA7IGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XCI+U3VwZXJub3ZhIFN1cHBvcnRlciBGZWF0dXJlPC9oND5cblx0XHRcdFx0XHQ8cCBzdHlsZT1cIm1hcmdpbjogMDsgY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpOyBmb250LXNpemU6IDAuOWVtO1wiPlxuXHRcdFx0XHRcdFx0Q3VzdG9tIGNvbW1hbmRzIGFyZSBjdXJyZW50bHkgYXZhaWxhYmxlIHRvIFN1cGVybm92YSBzdXBwb3J0ZXJzLiBcblx0XHRcdFx0XHRcdFRoZXkgd2lsbCBiZSBhdmFpbGFibGUgdG8gYWxsIHVzZXJzIG9uIDxzdHJvbmc+T2N0b2JlciAxLCAyMDI1PC9zdHJvbmc+LlxuXHRcdFx0XHRcdDwvcD5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRgO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIERlc2NyaXB0aW9uXG5cdFx0Y29uc3QgZGVzY0VsID0gY29udGFpbmVyRWwuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1jb21tYW5kLWRlc2NyaXB0aW9uJyB9KTtcblx0XHRkZXNjRWwuaW5uZXJIVE1MID0gYFxuXHRcdFx0PHAgc3R5bGU9XCJjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7IG1hcmdpbi1ib3R0b206IDE2cHg7XCI+XG5cdFx0XHRcdENyZWF0ZSBjdXN0b20gY29tbWFuZCBzaG9ydGN1dHMgdGhhdCBpbnNlcnQgcHJlZGVmaW5lZCB0ZXh0IHRlbXBsYXRlcyB3aGVuIHRyaWdnZXJlZCB3aXRoIDxjb2RlPjp0cmlnZ2VyPC9jb2RlPi5cblx0XHRcdDwvcD5cblx0XHRgO1xuXG5cdFx0Ly8gU2hvdyBDb21tYW5kIEJ1dHRvbiBzZXR0aW5nIChTdXBlcm5vdmEtb25seSwgTW9iaWxlLW9ubHkpXG5cdFx0bmV3IFNldHRpbmcoY29udGFpbmVyRWwpXG5cdFx0XHQuc2V0TmFtZSgnU2hvdyBDb21tYW5kIEJ1dHRvbiBpbiBDaGF0IChNb2JpbGUpJylcblx0XHRcdC5zZXREZXNjKCdTaG93IHRoZSBDb21tYW5kcyBidXR0b24gYmVzaWRlIHRoZSBTZW5kIGJ1dHRvbiBmb3IgbW9iaWxlIHF1aWNrIGFjY2VzcyB0byBOb3ZhIGNvbW1hbmRzIGFuZCBzZWxlY3Rpb24gYWN0aW9ucycpXG5cdFx0XHQuYWRkVG9nZ2xlKHRvZ2dsZSA9PiB0b2dnbGVcblx0XHRcdFx0LnNldFZhbHVlKHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dDb21tYW5kQnV0dG9uKVxuXHRcdFx0XHQub25DaGFuZ2UoYXN5bmMgKHZhbHVlKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3Muc2hvd0NvbW1hbmRCdXR0b24gPSB2YWx1ZTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBGaW5kIGFuZCByZWZyZXNoIHNpZGViYXIgdmlld1xuXHRcdFx0XHRcdGNvbnN0IGxlYXZlcyA9IHRoaXMucGx1Z2luLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKFZJRVdfVFlQRV9OT1ZBX1NJREVCQVIpO1xuXHRcdFx0XHRcdGlmIChsZWF2ZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdFx0Y29uc3Qgc2lkZWJhclZpZXcgPSBsZWF2ZXNbMF0udmlldyBhcyBOb3ZhU2lkZWJhclZpZXc7XG5cdFx0XHRcdFx0XHRzaWRlYmFyVmlldy5yZWZyZXNoQ29tbWFuZEJ1dHRvbigpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkpO1xuXG5cdFx0Ly8gQWRkIG5ldyBjb21tYW5kIGJ1dHRvbiBhdCB0aGUgdG9wXG5cdFx0Y29uc3QgYnV0dG9uRWwgPSBjb250YWluZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWFkZC1jb21tYW5kJyB9KTtcblx0XHRidXR0b25FbC5zdHlsZS5jc3NUZXh0ID0gJ21hcmdpbi1ib3R0b206IDE2cHg7Jztcblx0XHRcblx0XHRuZXcgU2V0dGluZyhidXR0b25FbClcblx0XHRcdC5hZGRCdXR0b24oYnV0dG9uID0+IFxuXHRcdFx0XHRidXR0b25cblx0XHRcdFx0XHQuc2V0QnV0dG9uVGV4dCgnKyBBZGQgQ3VzdG9tIENvbW1hbmQnKVxuXHRcdFx0XHRcdC5zZXRDdGEoKVxuXHRcdFx0XHRcdC5vbkNsaWNrKCgpID0+IHRoaXMuc2hvd0FkZENvbW1hbmREaWFsb2coKSlcblx0XHRcdCk7XG5cblx0XHQvLyBDb21tYW5kcyBsaXN0XG5cdFx0dGhpcy5yZW5kZXJDdXN0b21Db21tYW5kc0xpc3QoY29udGFpbmVyRWwpO1xuXHR9XG5cblx0cHJpdmF0ZSByZW5kZXJDdXN0b21Db21tYW5kc0xpc3QoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuXHRcdC8vIENsZWFyIGV4aXN0aW5nIGNvbW1hbmRzIGxpc3Rcblx0XHRjb25zdCBleGlzdGluZ0xpc3QgPSBjb250YWluZXIucXVlcnlTZWxlY3RvcignLm5vdmEtY29tbWFuZHMtbGlzdCcpO1xuXHRcdGlmIChleGlzdGluZ0xpc3QpIGV4aXN0aW5nTGlzdC5yZW1vdmUoKTtcblxuXHRcdGNvbnN0IGNvbW1hbmRzTGlzdCA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbW1hbmRzLWxpc3QnIH0pO1xuXHRcdGNvbnN0IGNvbW1hbmRzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuY3VzdG9tQ29tbWFuZHMgfHwgW107XG5cblx0XHRpZiAoY29tbWFuZHMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRjb25zdCBlbXB0eUVsID0gY29tbWFuZHNMaXN0LmNyZWF0ZURpdih7IGNsczogJ25vdmEtY29tbWFuZHMtZW1wdHknIH0pO1xuXHRcdFx0ZW1wdHlFbC5pbm5lckhUTUwgPSBgXG5cdFx0XHRcdDxkaXYgc3R5bGU9XCJ0ZXh0LWFsaWduOiBjZW50ZXI7IHBhZGRpbmc6IDI0cHg7IGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcIj5cblx0XHRcdFx0XHQ8cD5ObyBjdXN0b20gY29tbWFuZHMgeWV0LjwvcD5cblx0XHRcdFx0XHQ8cCBzdHlsZT1cImZvbnQtc2l6ZTogMC45ZW07XCI+Q3JlYXRlIHlvdXIgZmlyc3QgY29tbWFuZCB0byBnZXQgc3RhcnRlZCE8L3A+XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0YDtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb21tYW5kcy5mb3JFYWNoKChjb21tYW5kLCBpbmRleCkgPT4ge1xuXHRcdFx0Y29uc3QgY29tbWFuZEVsID0gY29tbWFuZHNMaXN0LmNyZWF0ZURpdih7IGNsczogJ25vdmEtY29tbWFuZC1pdGVtJyB9KTtcblx0XHRcdGNvbW1hbmRFbC5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0XHRib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG5cdFx0XHRcdGJvcmRlci1yYWRpdXM6IDhweDtcblx0XHRcdFx0cGFkZGluZzogMTZweDtcblx0XHRcdFx0bWFyZ2luLWJvdHRvbTogMTJweDtcblx0XHRcdFx0YmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5KTtcblx0XHRcdGA7XG5cblx0XHRcdC8vIENvbW1hbmQgaGVhZGVyXG5cdFx0XHRjb25zdCBoZWFkZXJFbCA9IGNvbW1hbmRFbC5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbW1hbmQtaGVhZGVyJyB9KTtcblx0XHRcdGhlYWRlckVsLnN0eWxlLmNzc1RleHQgPSAnZGlzcGxheTogZmxleDsganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuOyBhbGlnbi1pdGVtczogZmxleC1zdGFydDsgbWFyZ2luLWJvdHRvbTogOHB4Oyc7XG5cblx0XHRcdGNvbnN0IGluZm9FbCA9IGhlYWRlckVsLmNyZWF0ZURpdih7IGNsczogJ25vdmEtY29tbWFuZC1pbmZvJyB9KTtcblx0XHRcdFxuXHRcdFx0Y29uc3QgbmFtZUVsID0gaW5mb0VsLmNyZWF0ZURpdih7IGNsczogJ25vdmEtY29tbWFuZC1uYW1lJyB9KTtcblx0XHRcdG5hbWVFbC50ZXh0Q29udGVudCA9IGNvbW1hbmQubmFtZTtcblx0XHRcdG5hbWVFbC5zdHlsZS5jc3NUZXh0ID0gJ2ZvbnQtd2VpZ2h0OiA2MDA7IG1hcmdpbi1ib3R0b206IDRweDsnO1xuXG5cdFx0XHRjb25zdCB0cmlnZ2VyRWwgPSBpbmZvRWwuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1jb21tYW5kLXRyaWdnZXInIH0pO1xuXHRcdFx0dHJpZ2dlckVsLmlubmVySFRNTCA9IGA8Y29kZT46JHtjb21tYW5kLnRyaWdnZXJ9PC9jb2RlPmA7XG5cdFx0XHR0cmlnZ2VyRWwuc3R5bGUuY3NzVGV4dCA9ICdmb250LWZhbWlseTogdmFyKC0tZm9udC1tb25vc3BhY2UpOyBjb2xvcjogdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KTsgZm9udC1zaXplOiAwLjllbTsnO1xuXG5cdFx0XHQvLyBBY3Rpb25zXG5cdFx0XHRjb25zdCBhY3Rpb25zRWwgPSBoZWFkZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbW1hbmQtYWN0aW9ucycgfSk7XG5cdFx0XHRhY3Rpb25zRWwuc3R5bGUuY3NzVGV4dCA9ICdkaXNwbGF5OiBmbGV4OyBnYXA6IDhweDsnO1xuXG5cdFx0XHRjb25zdCBlZGl0QnRuID0gYWN0aW9uc0VsLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdFZGl0JyB9KTtcblx0XHRcdGVkaXRCdG4uc3R5bGUuY3NzVGV4dCA9ICdwYWRkaW5nOiA0cHggOHB4OyBmb250LXNpemU6IDAuOGVtOyBib3JkZXItcmFkaXVzOiA0cHg7Jztcblx0XHRcdGVkaXRCdG4ub25jbGljayA9ICgpID0+IHRoaXMuc2hvd0VkaXRDb21tYW5kRGlhbG9nKGluZGV4KTtcblxuXHRcdFx0Y29uc3QgZGVsZXRlQnRuID0gYWN0aW9uc0VsLmNyZWF0ZUVsKCdidXR0b24nLCB7IHRleHQ6ICdEZWxldGUnIH0pO1xuXHRcdFx0ZGVsZXRlQnRuLnN0eWxlLmNzc1RleHQgPSAncGFkZGluZzogNHB4IDhweDsgZm9udC1zaXplOiAwLjhlbTsgYm9yZGVyLXJhZGl1czogNHB4OyBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWVycm9yKTsgY29sb3I6IHZhcigtLXRleHQtb24tYWNjZW50KTsnO1xuXHRcdFx0ZGVsZXRlQnRuLm9uY2xpY2sgPSAoKSA9PiB0aGlzLmRlbGV0ZUNvbW1hbmQoaW5kZXgpO1xuXG5cdFx0XHQvLyBEZXNjcmlwdGlvbiBhbmQgdGVtcGxhdGUgcHJldmlld1xuXHRcdFx0aWYgKGNvbW1hbmQuZGVzY3JpcHRpb24pIHtcblx0XHRcdFx0Y29uc3QgZGVzY0VsID0gY29tbWFuZEVsLmNyZWF0ZURpdih7IGNsczogJ25vdmEtY29tbWFuZC1kZXNjJyB9KTtcblx0XHRcdFx0ZGVzY0VsLnRleHRDb250ZW50ID0gY29tbWFuZC5kZXNjcmlwdGlvbjtcblx0XHRcdFx0ZGVzY0VsLnN0eWxlLmNzc1RleHQgPSAnY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpOyBmb250LXNpemU6IDAuOWVtOyBtYXJnaW4tYm90dG9tOiA4cHg7Jztcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgdGVtcGxhdGVFbCA9IGNvbW1hbmRFbC5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbW1hbmQtdGVtcGxhdGUnIH0pO1xuXHRcdFx0dGVtcGxhdGVFbC5pbm5lckhUTUwgPSBgXG5cdFx0XHRcdDxkaXYgc3R5bGU9XCJiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKTsgcGFkZGluZzogOHB4OyBib3JkZXItcmFkaXVzOiA0cHg7IGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LW1vbm9zcGFjZSk7IGZvbnQtc2l6ZTogMC44ZW07IHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsgbWF4LWhlaWdodDogNjBweDsgb3ZlcmZsb3cteTogYXV0bztcIj5cblx0XHRcdFx0XHQke2NvbW1hbmQudGVtcGxhdGV9XG5cdFx0XHRcdDwvZGl2PlxuXHRcdFx0YDtcblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgc2hvd0FkZENvbW1hbmREaWFsb2coKSB7XG5cdFx0dGhpcy5zaG93Q29tbWFuZERpYWxvZygpO1xuXHR9XG5cblx0cHJpdmF0ZSBzaG93RWRpdENvbW1hbmREaWFsb2coaW5kZXg6IG51bWJlcikge1xuXHRcdGNvbnN0IGNvbW1hbmQgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21Db21tYW5kcz8uW2luZGV4XTtcblx0XHRpZiAoY29tbWFuZCkge1xuXHRcdFx0dGhpcy5zaG93Q29tbWFuZERpYWxvZyhjb21tYW5kLCBpbmRleCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBzaG93Q29tbWFuZERpYWxvZyhleGlzdGluZ0NvbW1hbmQ/OiBDdXN0b21Db21tYW5kLCBlZGl0SW5kZXg/OiBudW1iZXIpIHtcblx0XHQvLyBGb3Igbm93LCB1c2UgYSBzaW1wbGUgcHJvbXB0LWJhc2VkIGFwcHJvYWNoXG5cdFx0Ly8gVE9ETzogSW1wbGVtZW50IHByb3BlciBtb2RhbCB3aGVuIE1vZGFsIGNsYXNzIGlzIHByb3Blcmx5IGF2YWlsYWJsZVxuXHRcdGNvbnN0IG5hbWUgPSBwcm9tcHQoJ0NvbW1hbmQgbmFtZTonLCBleGlzdGluZ0NvbW1hbmQ/Lm5hbWUgfHwgJycpO1xuXHRcdGlmICghbmFtZSkgcmV0dXJuO1xuXHRcdFxuXHRcdGNvbnN0IHRyaWdnZXIgPSBwcm9tcHQoJ0NvbW1hbmQgdHJpZ2dlciAod2l0aG91dCA6KTonLCBleGlzdGluZ0NvbW1hbmQ/LnRyaWdnZXIgfHwgJycpO1xuXHRcdGlmICghdHJpZ2dlcikgcmV0dXJuO1xuXHRcdFxuXHRcdGNvbnN0IGRlc2NyaXB0aW9uID0gcHJvbXB0KCdEZXNjcmlwdGlvbiAob3B0aW9uYWwpOicsIGV4aXN0aW5nQ29tbWFuZD8uZGVzY3JpcHRpb24gfHwgJycpO1xuXHRcdFxuXHRcdGNvbnN0IHRlbXBsYXRlID0gcHJvbXB0KCdUZW1wbGF0ZSBjb250ZW50OicsIGV4aXN0aW5nQ29tbWFuZD8udGVtcGxhdGUgfHwgJycpO1xuXHRcdGlmICghdGVtcGxhdGUpIHJldHVybjtcblx0XHRcblx0XHRjb25zdCByZXN1bHQ6IEN1c3RvbUNvbW1hbmQgPSB7XG5cdFx0XHRpZDogZXhpc3RpbmdDb21tYW5kPy5pZCB8fCAoJ2NtZF8nICsgTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIDkpKSxcblx0XHRcdG5hbWUsXG5cdFx0XHR0cmlnZ2VyOiB0cmlnZ2VyLnRvTG93ZXJDYXNlKCksXG5cdFx0XHR0ZW1wbGF0ZSxcblx0XHRcdGRlc2NyaXB0aW9uOiBkZXNjcmlwdGlvbiB8fCB1bmRlZmluZWRcblx0XHR9O1xuXHRcdFxuXHRcdGlmIChlZGl0SW5kZXggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Ly8gRWRpdCBleGlzdGluZyBjb21tYW5kXG5cdFx0XHRpZiAoIXRoaXMucGx1Z2luLnNldHRpbmdzLmN1c3RvbUNvbW1hbmRzKSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21Db21tYW5kcyA9IFtdO1xuXHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuY3VzdG9tQ29tbWFuZHNbZWRpdEluZGV4XSA9IHJlc3VsdDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gQWRkIG5ldyBjb21tYW5kXG5cdFx0XHRpZiAoIXRoaXMucGx1Z2luLnNldHRpbmdzLmN1c3RvbUNvbW1hbmRzKSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21Db21tYW5kcyA9IFtdO1xuXHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MuY3VzdG9tQ29tbWFuZHMucHVzaChyZXN1bHQpO1xuXHRcdH1cblx0XHRcblx0XHR0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHR0aGlzLnJlbmRlckN1c3RvbUNvbW1hbmRzTGlzdCh0aGlzLmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoJy5ub3ZhLWNvbW1hbmQtc2VjdGlvbicpIGFzIEhUTUxFbGVtZW50KTtcblx0fVxuXG5cdHByaXZhdGUgZGVsZXRlQ29tbWFuZChpbmRleDogbnVtYmVyKSB7XG5cdFx0aWYgKCF0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21Db21tYW5kcykgcmV0dXJuO1xuXHRcdFxuXHRcdGNvbnN0IGNvbW1hbmQgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21Db21tYW5kc1tpbmRleF07XG5cdFx0Y29uc3QgY29uZmlybWVkID0gY29uZmlybShgRGVsZXRlIGNvbW1hbmQgXCIke2NvbW1hbmQubmFtZX1cIiAoJHtjb21tYW5kLnRyaWdnZXJ9KT9gKTtcblx0XHRcblx0XHRpZiAoY29uZmlybWVkKSB7XG5cdFx0XHR0aGlzLnBsdWdpbi5zZXR0aW5ncy5jdXN0b21Db21tYW5kcy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0dGhpcy5wbHVnaW4uc2F2ZVNldHRpbmdzKCk7XG5cdFx0XHR0aGlzLnJlbmRlckN1c3RvbUNvbW1hbmRzTGlzdCh0aGlzLmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoJy5ub3ZhLWNvbW1hbmQtc2VjdGlvbicpIGFzIEhUTUxFbGVtZW50KTtcblx0XHR9XG5cdH1cbn0iLCAiaW1wb3J0IHsgSXRlbVZpZXcsIFdvcmtzcGFjZUxlYWYsIEJ1dHRvbkNvbXBvbmVudCwgVGV4dEFyZWFDb21wb25lbnQsIFRGaWxlLCBOb3RpY2UsIE1hcmtkb3duVmlldywgUGxhdGZvcm0sIHNldEljb24sIEVkaXRvclBvc2l0aW9uIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgRG9jdW1lbnRBbmFseXplciB9IGZyb20gJy4uL2NvcmUvZG9jdW1lbnQtYW5hbHlzaXMnO1xuaW1wb3J0IE5vdmFQbHVnaW4gZnJvbSAnLi4vLi4vbWFpbic7XG5pbXBvcnQgeyBFZGl0Q29tbWFuZCB9IGZyb20gJy4uL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHsgTm92YVdpa2lsaW5rQXV0b2NvbXBsZXRlIH0gZnJvbSAnLi93aWtpbGluay1zdWdnZXN0JztcbmltcG9ydCB7IE11bHRpRG9jQ29udGV4dEhhbmRsZXIsIE11bHRpRG9jQ29udGV4dCB9IGZyb20gJy4uL2NvcmUvbXVsdGktZG9jLWNvbnRleHQnO1xuaW1wb3J0IHsgZ2V0QXZhaWxhYmxlTW9kZWxzIH0gZnJvbSAnLi4vYWkvbW9kZWxzJztcbmltcG9ydCB7IElucHV0SGFuZGxlciB9IGZyb20gJy4vaW5wdXQtaGFuZGxlcic7XG5pbXBvcnQgeyBDb21tYW5kU3lzdGVtIH0gZnJvbSAnLi9jb21tYW5kLXN5c3RlbSc7XG5pbXBvcnQgeyBDb250ZXh0TWFuYWdlciB9IGZyb20gJy4vY29udGV4dC1tYW5hZ2VyJztcbmltcG9ydCB7IENoYXRSZW5kZXJlciB9IGZyb20gJy4vY2hhdC1yZW5kZXJlcic7XG5pbXBvcnQgeyBTdHJlYW1pbmdNYW5hZ2VyIH0gZnJvbSAnLi9zdHJlYW1pbmctbWFuYWdlcic7XG5pbXBvcnQgeyBTZWxlY3Rpb25Db250ZXh0TWVudSwgU0VMRUNUSU9OX0FDVElPTlMgfSBmcm9tICcuL3NlbGVjdGlvbi1jb250ZXh0LW1lbnUnO1xuXG5leHBvcnQgY29uc3QgVklFV19UWVBFX05PVkFfU0lERUJBUiA9ICdub3ZhLXNpZGViYXInO1xuXG5leHBvcnQgY2xhc3MgTm92YVNpZGViYXJWaWV3IGV4dGVuZHMgSXRlbVZpZXcge1xuXHRwbHVnaW46IE5vdmFQbHVnaW47XG5cdHByaXZhdGUgY2hhdENvbnRhaW5lciE6IEhUTUxFbGVtZW50O1xuXHRwcml2YXRlIGlucHV0Q29udGFpbmVyITogSFRNTEVsZW1lbnQ7XG5cdHByaXZhdGUgY3VycmVudEZpbGU6IFRGaWxlIHwgbnVsbCA9IG51bGw7XG5cdHByaXZhdGUgbXVsdGlEb2NIYW5kbGVyITogTXVsdGlEb2NDb250ZXh0SGFuZGxlcjtcblx0cHJpdmF0ZSBjdXJyZW50Q29udGV4dDogTXVsdGlEb2NDb250ZXh0IHwgbnVsbCA9IG51bGw7XG5cdFxuXHQvLyBOZXcgYXJjaGl0ZWN0dXJlIGNvbXBvbmVudHNcblx0cHJpdmF0ZSBpbnB1dEhhbmRsZXIhOiBJbnB1dEhhbmRsZXI7XG5cdHByaXZhdGUgY29tbWFuZFN5c3RlbSE6IENvbW1hbmRTeXN0ZW07XG5cdHByaXZhdGUgY29udGV4dE1hbmFnZXIhOiBDb250ZXh0TWFuYWdlcjtcblx0cHJpdmF0ZSBjaGF0UmVuZGVyZXIhOiBDaGF0UmVuZGVyZXI7XG5cdHByaXZhdGUgc3RyZWFtaW5nTWFuYWdlciE6IFN0cmVhbWluZ01hbmFnZXI7XG5cdHByaXZhdGUgc2VsZWN0aW9uQ29udGV4dE1lbnUhOiBTZWxlY3Rpb25Db250ZXh0TWVudTtcblx0XG5cdC8vIEN1cnNvci1vbmx5IGFyY2hpdGVjdHVyZSAtIGRlbGVnYXRlIHRvIG5ldyBjb21wb25lbnRzXG5cdHByaXZhdGUgZ2V0IHRleHRBcmVhKCkgeyByZXR1cm4gdGhpcy5pbnB1dEhhbmRsZXI/LmdldFRleHRBcmVhKCk7IH1cblx0cHJpdmF0ZSBnZXQgd2lraWxpbmtBdXRvY29tcGxldGUoKSB7IHJldHVybiB0aGlzLmlucHV0SGFuZGxlciA/IHsgZGVzdHJveTogKCkgPT4ge30gfSA6IG51bGw7IH1cblx0cHJpdmF0ZSBnZXQgYXV0b0dyb3dUZXh0YXJlYSgpIHsgcmV0dXJuICgpID0+IHt9OyB9XG5cdFxuXHQvLyBDb21tYW5kIHN5c3RlbSBkZWxlZ2F0aW9uXG5cdHByaXZhdGUgX2NvbW1hbmRQaWNrZXJJdGVtczogYW55W10gPSBbXTtcblx0cHJpdmF0ZSBnZXQgY29tbWFuZFBpY2tlckl0ZW1zKCkgeyByZXR1cm4gdGhpcy5fY29tbWFuZFBpY2tlckl0ZW1zOyB9XG5cdHByaXZhdGUgc2V0IGNvbW1hbmRQaWNrZXJJdGVtcyh2YWx1ZTogYW55W10pIHsgdGhpcy5fY29tbWFuZFBpY2tlckl0ZW1zID0gdmFsdWU7IH1cblx0cHJpdmF0ZSBfc2VsZWN0ZWRDb21tYW5kSW5kZXg6IG51bWJlciA9IC0xO1xuXHRwcml2YXRlIGdldCBzZWxlY3RlZENvbW1hbmRJbmRleCgpIHsgcmV0dXJuIHRoaXMuX3NlbGVjdGVkQ29tbWFuZEluZGV4OyB9XG5cdHByaXZhdGUgc2V0IHNlbGVjdGVkQ29tbWFuZEluZGV4KHZhbHVlOiBudW1iZXIpIHsgdGhpcy5fc2VsZWN0ZWRDb21tYW5kSW5kZXggPSB2YWx1ZTsgfVxuXHRwcml2YXRlIF9pc0NvbW1hbmRNZW51VmlzaWJsZTogYm9vbGVhbiA9IGZhbHNlO1xuXHRwcml2YXRlIGdldCBpc0NvbW1hbmRNZW51VmlzaWJsZSgpIHsgcmV0dXJuIHRoaXMuX2lzQ29tbWFuZE1lbnVWaXNpYmxlOyB9XG5cdHByaXZhdGUgc2V0IGlzQ29tbWFuZE1lbnVWaXNpYmxlKHZhbHVlOiBib29sZWFuKSB7IHRoaXMuX2lzQ29tbWFuZE1lbnVWaXNpYmxlID0gdmFsdWU7IH1cblx0XG5cdC8vIENvbnRleHQgc3lzdGVtIGRlbGVnYXRpb25cblx0cHJpdmF0ZSBnZXQgY29udGV4dFByZXZpZXcoKSB7IHJldHVybiB0aGlzLmNvbnRleHRNYW5hZ2VyPy5jb250ZXh0UHJldmlldzsgfVxuXHRwcml2YXRlIF9jb250ZXh0SW5kaWNhdG9yOiBhbnk7XG5cdHByaXZhdGUgZ2V0IGNvbnRleHRJbmRpY2F0b3IoKSB7IHJldHVybiB0aGlzLl9jb250ZXh0SW5kaWNhdG9yIHx8IHRoaXMuY29udGV4dE1hbmFnZXI/LmNvbnRleHRJbmRpY2F0b3I7IH1cblx0cHJpdmF0ZSBzZXQgY29udGV4dEluZGljYXRvcih2YWx1ZTogYW55KSB7IHRoaXMuX2NvbnRleHRJbmRpY2F0b3IgPSB2YWx1ZTsgfVxuXHRcblx0Ly8gQ29tcG9uZW50IHJlZmVyZW5jZXNcblx0cHJpdmF0ZSBjb21tYW5kUGlja2VyITogSFRNTEVsZW1lbnQ7XG5cdHByaXZhdGUgY29tbWFuZE1lbnUhOiBIVE1MRWxlbWVudDtcblx0cHJpdmF0ZSBjb21tYW5kQnV0dG9uITogQnV0dG9uQ29tcG9uZW50O1xuXHRcblx0Ly8gQ3Vyc29yIHBvc2l0aW9uIHRyYWNraW5nIC0gZmlsZS1zY29wZWQgbGlrZSBjb252ZXJzYXRpb24gaGlzdG9yeVxuXHRwcml2YXRlIGN1cnJlbnRGaWxlQ3Vyc29yUG9zaXRpb246IEVkaXRvclBvc2l0aW9uIHwgbnVsbCA9IG51bGw7XG5cdFxuXHRcblx0Ly8gUGVyZm9ybWFuY2Ugb3B0aW1pemF0aW9uIC0gZGVib3VuY2luZyBhbmQgdGltaW5nIGNvbnN0YW50c1xuXHRwcml2YXRlIGNvbnRleHRQcmV2aWV3RGVib3VuY2VUaW1lb3V0OiBOb2RlSlMuVGltZW91dCB8IG51bGwgPSBudWxsO1xuXHRwcml2YXRlIHN0YXRpYyByZWFkb25seSBDT05URVhUX1BSRVZJRVdfREVCT1VOQ0VfTVMgPSAzMDA7XG5cdHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFNDUk9MTF9ERUxBWV9NUyA9IDUwO1xuXHRwcml2YXRlIHN0YXRpYyByZWFkb25seSBGT0NVU19ERUxBWV9NUyA9IDE1MDtcblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgSE9WRVJfVElNRU9VVF9NUyA9IDE1MDtcblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgTk9USUNFX0RVUkFUSU9OX01TID0gNTAwMDtcblx0XG5cdC8vIEV2ZW50IGxpc3RlbmVyIGNsZWFudXAgdHJhY2tpbmdcblx0cHJpdmF0ZSBkb2N1bWVudEV2ZW50TGlzdGVuZXJzOiBBcnJheTx7ZWxlbWVudDogRXZlbnRUYXJnZXQsIGV2ZW50OiBzdHJpbmcsIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXJ9PiA9IFtdO1xuXHRwcml2YXRlIHRpbWVvdXRzOiBOb2RlSlMuVGltZW91dFtdID0gW107XG5cblx0Y29uc3RydWN0b3IobGVhZjogV29ya3NwYWNlTGVhZiwgcGx1Z2luOiBOb3ZhUGx1Z2luKSB7XG5cdFx0c3VwZXIobGVhZik7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdFx0dGhpcy5tdWx0aURvY0hhbmRsZXIgPSBuZXcgTXVsdGlEb2NDb250ZXh0SGFuZGxlcih0aGlzLmFwcCk7XG5cdH1cblxuXHRnZXRWaWV3VHlwZSgpIHtcblx0XHRyZXR1cm4gVklFV19UWVBFX05PVkFfU0lERUJBUjtcblx0fVxuXG5cdGdldERpc3BsYXlUZXh0KCkge1xuXHRcdHJldHVybiAnTm92YSc7XG5cdH1cblxuXHRnZXRJY29uKCkge1xuXHRcdHJldHVybiAnbm92YS1zdGFyJztcblx0fVxuXG5cdGFzeW5jIG9uT3BlbigpIHtcblx0XHRjb25zdCBjb250YWluZXIgPSB0aGlzLmNvbnRhaW5lckVsLmNoaWxkcmVuWzFdIGFzIEhUTUxFbGVtZW50O1xuXHRcdGNvbnRhaW5lci5lbXB0eSgpO1xuXHRcdGNvbnRhaW5lci5hZGRDbGFzcygnbm92YS1zaWRlYmFyLWNvbnRhaW5lcicpO1xuXHRcdFxuXHRcdC8vIEFkZCBwbGF0Zm9ybS1zcGVjaWZpYyBjbGFzcyBmb3Igc3R5bGluZ1xuXHRcdGlmIChQbGF0Zm9ybS5pc01vYmlsZSkge1xuXHRcdFx0Y29udGFpbmVyLmFkZENsYXNzKCdpcy1tb2JpbGUnKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGFpbmVyLmFkZENsYXNzKCdpcy1kZXNrdG9wJyk7XG5cdFx0fVxuXG5cdFx0Ly8gTW9iaWxlIGFjY2VzcyBpcyBub3cgYXZhaWxhYmxlIHRvIGFsbCB1c2VycyB3aXRoIHRoZWlyIG93biBBUEkga2V5c1xuXHRcdFxuXHRcdC8vIENyZWF0ZSB3cmFwcGVyIHdpdGggcHJvcGVyIGZsZXggbGF5b3V0XG5cdFx0Y29uc3Qgd3JhcHBlckVsID0gY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ25vdmEtd3JhcHBlcicgfSk7XG5cdFx0d3JhcHBlckVsLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0ZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcblx0XHRcdGhlaWdodDogMTAwJTtcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0XHRwYWRkaW5nLWJvdHRvbTogJHtQbGF0Zm9ybS5pc0Rlc2t0b3BBcHAgPyAndmFyKC0tc2l6ZS00LTYpJyA6ICd2YXIoLS1zaXplLTQtNSknfTtcblx0XHRgO1xuXHRcdFxuXHRcdC8vIEhlYWRlciB3aXRoIHByb3ZpZGVyIGluZm9cblx0XHRjb25zdCBoZWFkZXJFbCA9IHdyYXBwZXJFbC5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWhlYWRlcicgfSk7XG5cdFx0aGVhZGVyRWwuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdFx0cGFkZGluZzogdmFyKC0tc2l6ZS00LTIpO1xuXHRcdFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcblx0XHRcdGZsZXgtc2hyaW5rOiAwO1xuXHRcdGA7XG5cdFx0XG5cdFx0Ly8gVG9wIHJvdyBjb250YWluZXIgZm9yIHRpdGxlIGFuZCBjb250cm9sc1xuXHRcdGNvbnN0IHRvcFJvd0VsID0gaGVhZGVyRWwuY3JlYXRlRGl2KCk7XG5cdFx0dG9wUm93RWwuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXHRcdGA7XG5cdFx0XG5cdFx0Ly8gTGVmdCBzaWRlOiBUaXRsZSB3aXRoIE5vdmEgaWNvblxuXHRcdGNvbnN0IHRpdGxlRWwgPSB0b3BSb3dFbC5jcmVhdGVFbCgnaDQnKTtcblx0XHR0aXRsZUVsLnN0eWxlLmNzc1RleHQgPSAnbWFyZ2luOiAwOyBmb250LXNpemU6IHZhcigtLWZvbnQtdWktbWVkaXVtKTsgZGlzcGxheTogZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsgZ2FwOiB2YXIoLS1zaXplLTItMik7IGNvbG9yOiB2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpOyc7XG5cdFx0dGl0bGVFbC5pbm5lckhUTUwgPSBgPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgc3R5bGU9XCJ3aWR0aDogdmFyKC0taWNvbi1zaXplKTsgaGVpZ2h0OiB2YXIoLS1pY29uLXNpemUpO1wiPlxuXHRcdFx0PGNpcmNsZSBjeD1cIjEyXCIgY3k9XCIxMlwiIHI9XCIyLjVcIiBmaWxsPVwiY3VycmVudENvbG9yXCIvPlxuXHRcdFx0PHBhdGggZD1cIk0xMiAxTDEyIDZcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cblx0XHRcdDxwYXRoIGQ9XCJNMTIgMThMMTIgMjNcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cblx0XHRcdDxwYXRoIGQ9XCJNMjMgMTJMMTggMTJcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cblx0XHRcdDxwYXRoIGQ9XCJNNiAxMkwxIDEyXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIi8+XG5cdFx0XHQ8cGF0aCBkPVwiTTE4LjM2NCA1LjYzNkwxNS41MzYgOC40NjRcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyLjVcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIvPlxuXHRcdFx0PHBhdGggZD1cIk04LjQ2NCAxNS41MzZMNS42MzYgMTguMzY0XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMi41XCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cblx0XHRcdDxwYXRoIGQ9XCJNMTguMzY0IDE4LjM2NEwxNS41MzYgMTUuNTM2XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMi41XCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cblx0XHRcdDxwYXRoIGQ9XCJNOC40NjQgOC40NjRMNS42MzYgNS42MzZcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyLjVcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIvPlxuXHRcdDwvc3ZnPk5vdmFgO1xuXHRcdFxuXHRcdC8vIFJpZ2h0IHNpZGU6IFByb3ZpZGVyIHN0YXR1cyBhbmQgQ2xlYXIgYnV0dG9uXG5cdFx0Y29uc3QgcmlnaHRDb250YWluZXIgPSB0b3BSb3dFbC5jcmVhdGVEaXYoKTtcblx0XHRyaWdodENvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gJ2Rpc3BsYXk6IGZsZXg7IGFsaWduLWl0ZW1zOiBjZW50ZXI7IGdhcDogdmFyKC0tc2l6ZS0yLTMpOyc7XG5cdFx0XG5cdFx0Ly8gUHJpdmFjeSBpbmRpY2F0b3IgaWNvblxuXHRcdGNvbnN0IHByaXZhY3lJbmRpY2F0b3IgPSByaWdodENvbnRhaW5lci5jcmVhdGVTcGFuKHsgY2xzOiAnbm92YS1wcml2YWN5LWluZGljYXRvcicgfSk7XG5cdFx0cHJpdmFjeUluZGljYXRvci5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0XHRwYWRkaW5nOiA0cHg7XG5cdFx0XHRjb2xvcjogdmFyKC0taWNvbi1jb2xvcik7XG5cdFx0XHRmb250LXdlaWdodDogdmFyKC0tZm9udC13ZWlnaHQtbWVkaXVtKTtcblx0XHRgO1xuXHRcdHRoaXMudXBkYXRlUHJpdmFjeUluZGljYXRvcihwcml2YWN5SW5kaWNhdG9yKTtcblx0XHRcblx0XHQvLyBTdG9yZSByZWZlcmVuY2UgZm9yIHVwZGF0ZXNcblx0XHQodGhpcyBhcyBhbnkpLnByaXZhY3lJbmRpY2F0b3IgPSBwcml2YWN5SW5kaWNhdG9yO1xuXHRcdFxuXHRcdC8vIEFsbCB1c2VycyBjYW4gc3dpdGNoIHByb3ZpZGVycyBmcmVlbHlcblx0XHR0aGlzLmNyZWF0ZVByb3ZpZGVyRHJvcGRvd24ocmlnaHRDb250YWluZXIpO1xuXHRcdFxuXHRcdC8vIENsZWFyIENoYXQgYnV0dG9uIGluIHJpZ2h0IGNvbnRhaW5lclxuXHRcdGNvbnN0IGNsZWFyQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudChyaWdodENvbnRhaW5lcik7XG5cdFx0Y2xlYXJCdXR0b24uc2V0SWNvbignZXJhc2VyJylcblx0XHRcdC5zZXRUb29sdGlwKCdDbGVhciBjb252ZXJzYXRpb24gaGlzdG9yeScpXG5cdFx0XHQub25DbGljaygoKSA9PiB0aGlzLmNsZWFyQ2hhdCgpKTtcblxuXHRcdHRoaXMuY3JlYXRlQ2hhdEludGVyZmFjZSh3cmFwcGVyRWwpO1xuXHRcdHRoaXMuY3JlYXRlSW5wdXRJbnRlcmZhY2Uod3JhcHBlckVsKTtcblx0XHRcblx0XHQvLyBSZWdpc3RlciBldmVudCBsaXN0ZW5lciBmb3IgYWN0aXZlIGZpbGUgY2hhbmdlc1xuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcblx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbignYWN0aXZlLWxlYWYtY2hhbmdlJywgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmxvYWRDb252ZXJzYXRpb25Gb3JBY3RpdmVGaWxlKCk7XG5cdFx0XHR9KVxuXHRcdCk7XG5cdFx0XG5cdFx0Ly8gUmVnaXN0ZXIgY3Vyc29yIHBvc2l0aW9uIHRyYWNraW5nIGZvciB0aGUgYWN0aXZlIGVkaXRvclxuXHRcdHRoaXMucmVnaXN0ZXJFdmVudChcblx0XHRcdHRoaXMuYXBwLndvcmtzcGFjZS5vbignZWRpdG9yLWNoYW5nZScsIChlZGl0b3IpID0+IHtcblx0XHRcdFx0dGhpcy50cmFja0N1cnNvclBvc2l0aW9uKGVkaXRvcik7XG5cdFx0XHR9KVxuXHRcdCk7XG5cdFx0XG5cdFx0Ly8gTG9hZCBjb252ZXJzYXRpb24gZm9yIGN1cnJlbnQgZmlsZVxuXHRcdHRoaXMubG9hZENvbnZlcnNhdGlvbkZvckFjdGl2ZUZpbGUoKTtcblx0XHRcblx0XHQvLyBJbml0aWFsIHN0YXR1cyByZWZyZXNoIHRvIGVuc3VyZSBhbGwgaW5kaWNhdG9ycyBhcmUgdXAgdG8gZGF0ZVxuXHRcdHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZWZyZXNoUHJvdmlkZXJTdGF0dXMoKSwgMTAwKTtcblx0XHRcblx0XHQvLyBOb3RlOiBBdXRvLWZvY3VzIHJlbW92ZWQgdG8gcHJldmVudCBzdGVhbGluZyBjdXJzb3IgZnJvbSBlZGl0b3Jcblx0fVxuXG5cdC8qKlxuXHQgKiBUcmFjayBjdXJzb3IgcG9zaXRpb24gY2hhbmdlcyBpbiB0aGUgYWN0aXZlIGVkaXRvciAoZmlsZS1zY29wZWQpXG5cdCAqL1xuXHRwcml2YXRlIHRyYWNrQ3Vyc29yUG9zaXRpb24oZWRpdG9yOiBhbnkpIHtcblx0XHRjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcblx0XHRpZiAoIWFjdGl2ZUZpbGUgfHwgIWVkaXRvcikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblx0XHRcblx0XHQvLyBPbmx5IHRyYWNrIGN1cnNvciBwb3NpdGlvbiBpZiB0aGlzIGlzIHRoZSBjdXJyZW50IGZpbGUgd2UncmUgd29ya2luZyB3aXRoXG5cdFx0aWYgKHRoaXMuY3VycmVudEZpbGUgJiYgYWN0aXZlRmlsZS5wYXRoID09PSB0aGlzLmN1cnJlbnRGaWxlLnBhdGgpIHtcblx0XHRcdGNvbnN0IGN1cnNvclBvcyA9IGVkaXRvci5nZXRDdXJzb3IoKTtcblx0XHRcdGlmIChjdXJzb3JQb3MpIHtcblx0XHRcdFx0dGhpcy5jdXJyZW50RmlsZUN1cnNvclBvc2l0aW9uID0gY3Vyc29yUG9zO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXHRcblx0LyoqXG5cdCAqIFJlc3RvcmUgY3Vyc29yIHBvc2l0aW9uIGZvciBjdXJyZW50IGZpbGUgKGZpbGUtc2NvcGVkKVxuXHQgKi9cblx0cHJpdmF0ZSByZXN0b3JlQ3Vyc29yUG9zaXRpb24oKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuY3VycmVudEZpbGVDdXJzb3JQb3NpdGlvbikge1xuXHRcdFx0Ly8gUmVzdG9yZSB3aXRob3V0IHN0ZWFsaW5nIGZvY3VzXG5cdFx0XHRjb25zdCBlZGl0b3IgPSB0aGlzLnBsdWdpbi5kb2N1bWVudEVuZ2luZS5nZXRBY3RpdmVFZGl0b3IoKTtcblx0XHRcdGlmIChlZGl0b3IpIHtcblx0XHRcdFx0ZWRpdG9yLnNldEN1cnNvcih0aGlzLmN1cnJlbnRGaWxlQ3Vyc29yUG9zaXRpb24pO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdGFzeW5jIG9uQ2xvc2UoKSB7XG5cdFx0Ly8gQ2xlYW4gdXAgcHJvdmlkZXIgZHJvcGRvd24gZXZlbnQgbGlzdGVuZXJcblx0XHRpZiAoKHRoaXMgYXMgYW55KS5jdXJyZW50UHJvdmlkZXJEcm9wZG93bj8uY2xlYW51cCkge1xuXHRcdFx0KHRoaXMgYXMgYW55KS5jdXJyZW50UHJvdmlkZXJEcm9wZG93bi5jbGVhbnVwKCk7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIENsZWFuIHVwIHdpa2lsaW5rIGF1dG9jb21wbGV0ZVxuXHRcdGlmICh0aGlzLndpa2lsaW5rQXV0b2NvbXBsZXRlKSB7XG5cdFx0XHR0aGlzLndpa2lsaW5rQXV0b2NvbXBsZXRlLmRlc3Ryb3koKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gQ2xlYXIgZGVib3VuY2UgdGltZW91dFxuXHRcdGlmICh0aGlzLmNvbnRleHRQcmV2aWV3RGVib3VuY2VUaW1lb3V0KSB7XG5cdFx0XHRjbGVhclRpbWVvdXQodGhpcy5jb250ZXh0UHJldmlld0RlYm91bmNlVGltZW91dCk7XG5cdFx0XHR0aGlzLmNvbnRleHRQcmV2aWV3RGVib3VuY2VUaW1lb3V0ID0gbnVsbDtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gQ2xlYW4gdXAgdHJhY2tlZCBldmVudCBsaXN0ZW5lcnNcblx0XHR0aGlzLmNsZWFudXBFdmVudExpc3RlbmVycygpO1xuXHRcdFxuXHRcdC8vIENsZWFyIGFsbCB0aW1lb3V0c1xuXHRcdHRoaXMuY2xlYXJUaW1lb3V0cygpO1xuXHRcdFxuXHRcdC8vIENsZWFuIHVwIERPTSBlbGVtZW50c1xuXHRcdHRoaXMuY2xlYW51cERPTUVsZW1lbnRzKCk7XG5cdH1cblx0XG5cdC8qKlxuXHQgKiBBZGQgZXZlbnQgbGlzdGVuZXIgd2l0aCBhdXRvbWF0aWMgY2xlYW51cCB0cmFja2luZ1xuXHQgKi9cblx0cHJpdmF0ZSBhZGRUcmFja2VkRXZlbnRMaXN0ZW5lcihlbGVtZW50OiBFdmVudFRhcmdldCwgZXZlbnQ6IHN0cmluZywgaGFuZGxlcjogRXZlbnRMaXN0ZW5lcik6IHZvaWQge1xuXHRcdGVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlcik7XG5cdFx0dGhpcy5kb2N1bWVudEV2ZW50TGlzdGVuZXJzLnB1c2goeyBlbGVtZW50LCBldmVudCwgaGFuZGxlciB9KTtcblx0fVxuXHRcblx0LyoqXG5cdCAqIEFkZCB0aW1lb3V0IHdpdGggYXV0b21hdGljIGNsZWFudXAgdHJhY2tpbmdcblx0ICovXG5cdHByaXZhdGUgYWRkVHJhY2tlZFRpbWVvdXQoY2FsbGJhY2s6ICgpID0+IHZvaWQsIGRlbGF5OiBudW1iZXIpOiBOb2RlSlMuVGltZW91dCB7XG5cdFx0Y29uc3QgaWQgPSBzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHR0aGlzLnRpbWVvdXRzID0gdGhpcy50aW1lb3V0cy5maWx0ZXIodCA9PiB0ICE9PSBpZCk7XG5cdFx0fSwgZGVsYXkpO1xuXHRcdHRoaXMudGltZW91dHMucHVzaChpZCk7XG5cdFx0cmV0dXJuIGlkO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQ2xlYW4gdXAgYWxsIHRyYWNrZWQgZXZlbnQgbGlzdGVuZXJzXG5cdCAqL1xuXHRwcml2YXRlIGNsZWFudXBFdmVudExpc3RlbmVycygpOiB2b2lkIHtcblx0XHR0aGlzLmRvY3VtZW50RXZlbnRMaXN0ZW5lcnMuZm9yRWFjaCgoeyBlbGVtZW50LCBldmVudCwgaGFuZGxlciB9KSA9PiB7XG5cdFx0XHRlbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIpO1xuXHRcdH0pO1xuXHRcdHRoaXMuZG9jdW1lbnRFdmVudExpc3RlbmVycyA9IFtdO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQ2xlYXIgYWxsIHRyYWNrZWQgdGltZW91dHNcblx0ICovXG5cdHByaXZhdGUgY2xlYXJUaW1lb3V0cygpOiB2b2lkIHtcblx0XHR0aGlzLnRpbWVvdXRzLmZvckVhY2goaWQgPT4gY2xlYXJUaW1lb3V0KGlkKSk7XG5cdFx0dGhpcy50aW1lb3V0cyA9IFtdO1xuXHR9XG5cdFxuXHQvKipcblx0ICogQ2xlYW4gdXAgRE9NIGVsZW1lbnRzXG5cdCAqL1xuXHRwcml2YXRlIGNsZWFudXBET01FbGVtZW50cygpOiB2b2lkIHtcblx0XHQvLyBDbGVhbnVwIGlzIG5vdyBoYW5kbGVkIGJ5IGluZGl2aWR1YWwgY29tcG9uZW50IGNsZWFudXAgbWV0aG9kc1xuXHR9XG5cblx0cHJpdmF0ZSBjcmVhdGVDaGF0SW50ZXJmYWNlKGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpIHtcblx0XHR0aGlzLmNoYXRDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1jaGF0LWNvbnRhaW5lcicgfSk7XG5cdFx0dGhpcy5jaGF0Q29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRmbGV4OiAxO1xuXHRcdFx0b3ZlcmZsb3cteTogYXV0bztcblx0XHRcdHBhZGRpbmc6IHZhcigtLXNpemUtNC0yKTtcblx0XHRcdGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtc2Vjb25kYXJ5KTtcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xuXHRcdFx0Z2FwOiB2YXIoLS1zaXplLTItMyk7XG5cdFx0YDtcblxuXHRcdC8vIEluaXRpYWxpemUgY2hhdFJlbmRlcmVyIG5vdyB0aGF0IGNoYXRDb250YWluZXIgZXhpc3RzXG5cdFx0dGhpcy5jaGF0UmVuZGVyZXIgPSBuZXcgQ2hhdFJlbmRlcmVyKHRoaXMucGx1Z2luLCB0aGlzLmNoYXRDb250YWluZXIpO1xuXG5cdFx0Ly8gV2VsY29tZSBtZXNzYWdlIHdpdGggTm92YSBicmFuZGluZ1xuXHRcdHRoaXMuYWRkV2VsY29tZU1lc3NhZ2UoKTtcblx0fVxuXG5cdHByaXZhdGUgY3JlYXRlSW5wdXRJbnRlcmZhY2UoY29udGFpbmVyOiBIVE1MRWxlbWVudCkge1xuXHRcdHRoaXMuaW5wdXRDb250YWluZXIgPSBjb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1pbnB1dC1jb250YWluZXInIH0pO1xuXHRcdHRoaXMuY3JlYXRlSW5wdXRBcmVhKCk7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlIHRoZSBpbnB1dCBhcmVhIFVJIGVsZW1lbnRzIHVzaW5nIG5ldyBhcmNoaXRlY3R1cmVcblx0ICovXG5cdHByaXZhdGUgY3JlYXRlSW5wdXRBcmVhKCkge1xuXHRcdC8vIENsZWFyIGV4aXN0aW5nIGlucHV0IGFyZWEgY29udGVudFxuXHRcdHRoaXMuaW5wdXRDb250YWluZXIuZW1wdHkoKTtcblx0XHRcblx0XHQvLyBJbml0aWFsaXplIGNvbnRleHQgbWFuYWdlciwgc3RyZWFtaW5nIG1hbmFnZXIsIGFuZCBzZWxlY3Rpb24gbWVudSBmaXJzdFxuXHRcdHRoaXMuY29udGV4dE1hbmFnZXIgPSBuZXcgQ29udGV4dE1hbmFnZXIodGhpcy5wbHVnaW4sIHRoaXMuYXBwLCB0aGlzLmlucHV0Q29udGFpbmVyKTtcblx0XHR0aGlzLnN0cmVhbWluZ01hbmFnZXIgPSBuZXcgU3RyZWFtaW5nTWFuYWdlcigpO1xuXHRcdHRoaXMuc2VsZWN0aW9uQ29udGV4dE1lbnUgPSBuZXcgU2VsZWN0aW9uQ29udGV4dE1lbnUodGhpcy5hcHAsIHRoaXMucGx1Z2luKTtcblx0XHRcblx0XHQvLyBDcmVhdGUgSW5wdXRIYW5kbGVyIHdoaWNoIHdpbGwgaGFuZGxlIGFsbCBpbnB1dCBVSSBjcmVhdGlvblxuXHRcdHRoaXMuaW5wdXRIYW5kbGVyID0gbmV3IElucHV0SGFuZGxlcih0aGlzLnBsdWdpbiwgdGhpcy5pbnB1dENvbnRhaW5lciwgdGhpcy5jb250ZXh0TWFuYWdlcik7XG5cdFx0XG5cdFx0Ly8gUGFzcyBzaWRlYmFyIHZpZXcgcmVmZXJlbmNlIGZvciBjb250ZXh0IG9wZXJhdGlvbnNcblx0XHR0aGlzLmlucHV0SGFuZGxlci5zZXRTaWRlYmFyVmlldyh0aGlzKTtcblx0XHR0aGlzLmNvbnRleHRNYW5hZ2VyLnNldFNpZGViYXJWaWV3KHRoaXMpO1xuXHRcdFxuXHRcdC8vIENyZWF0ZSB0aGUgaW5wdXQgaW50ZXJmYWNlIHVzaW5nIG5ldyBJbnB1dEhhbmRsZXJcblx0XHR0aGlzLmlucHV0SGFuZGxlci5jcmVhdGVJbnB1dEludGVyZmFjZSh0aGlzLmNoYXRDb250YWluZXIpO1xuXHRcdFxuXHRcdC8vIENyZWF0ZSBDb21tYW5kU3lzdGVtIHdpdGggdGhlIGFjdHVhbCB0ZXh0QXJlYSBmcm9tIElucHV0SGFuZGxlclxuXHRcdHRoaXMuY29tbWFuZFN5c3RlbSA9IG5ldyBDb21tYW5kU3lzdGVtKHRoaXMucGx1Z2luLCB0aGlzLmlucHV0Q29udGFpbmVyLCB0aGlzLmlucHV0SGFuZGxlci5nZXRUZXh0QXJlYSgpKTtcblx0XHRcblx0XHQvLyBDb25uZWN0IHRoZSBDb21tYW5kU3lzdGVtIHRvIHRoZSBJbnB1dEhhbmRsZXJcblx0XHR0aGlzLmlucHV0SGFuZGxlci5zZXRDb21tYW5kU3lzdGVtKHRoaXMuY29tbWFuZFN5c3RlbSk7XG5cdFx0XG5cdFx0Ly8gU2V0IHVwIHNlbmQgbWVzc2FnZSBjYWxsYmFja1xuXHRcdHRoaXMuaW5wdXRIYW5kbGVyLnNldE9uU2VuZE1lc3NhZ2UoKG1lc3NhZ2U6IHN0cmluZykgPT4ge1xuXHRcdFx0dGhpcy5oYW5kbGVTZW5kKG1lc3NhZ2UpO1xuXHRcdH0pO1xuXHRcdFxuXHRcdC8vIENyZWF0ZSBjb250ZXh0IGluZGljYXRvciBhbmQgcHJldmlldyB1c2luZyBDb250ZXh0TWFuYWdlclxuXHRcdHRoaXMuY29udGV4dE1hbmFnZXIuY3JlYXRlQ29udGV4dEluZGljYXRvcigpO1xuXHRcdFxuXHR9XG5cblx0cHJpdmF0ZSBhZGRNZXNzYWdlKHJvbGU6ICd1c2VyJyB8ICdhc3Npc3RhbnQnIHwgJ3N5c3RlbScsIGNvbnRlbnQ6IHN0cmluZykge1xuXHRcdGNvbnN0IG1lc3NhZ2VFbCA9IHRoaXMuY2hhdENvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6IGBub3ZhLW1lc3NhZ2Ugbm92YS1tZXNzYWdlLSR7cm9sZX1gIH0pO1xuXHRcdG1lc3NhZ2VFbC5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0bWFyZ2luLWJvdHRvbTogdmFyKC0tc2l6ZS00LTIpO1xuXHRcdFx0cGFkZGluZzogdmFyKC0tc2l6ZS0yLTMpIHZhcigtLXNpemUtNC0zKTtcblx0XHRcdGJvcmRlci1yYWRpdXM6IHZhcigtLXJhZGl1cy1zKTtcblx0XHRcdG1heC13aWR0aDogODUlO1xuXHRcdFx0JHtyb2xlID09PSAndXNlcicgXG5cdFx0XHRcdD8gJ21hcmdpbi1sZWZ0OiBhdXRvOyBiYWNrZ3JvdW5kOiB2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpOyBjb2xvcjogdmFyKC0tdGV4dC1vbi1hY2NlbnQpOycgXG5cdFx0XHRcdDogcm9sZSA9PT0gJ3N5c3RlbSdcblx0XHRcdFx0PyAnbWFyZ2luOiAwIGF1dG87IGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItaG92ZXIpOyBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7IHRleHQtYWxpZ246IGNlbnRlcjsgZm9udC1zaXplOiB2YXIoLS1mb250LXRleHQtc2l6ZSk7J1xuXHRcdFx0XHQ6ICdiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpOyBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7J1xuXHRcdFx0fVxuXHRcdGA7XG5cblx0XHRjb25zdCByb2xlRWwgPSBtZXNzYWdlRWwuY3JlYXRlRWwoJ2RpdicsIHsgXG5cdFx0XHR0ZXh0OiByb2xlID09PSAndXNlcicgPyAnWW91JyA6IHJvbGUgPT09ICdzeXN0ZW0nID8gJ1N5c3RlbScgOiAnTm92YScsXG5cdFx0XHRjbHM6ICdub3ZhLW1lc3NhZ2Utcm9sZSdcblx0XHR9KTtcblx0XHRyb2xlRWwuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdGZvbnQtc2l6ZTogdmFyKC0tZm9udC11aS1zbWFsbGVyKTtcblx0XHRcdG9wYWNpdHk6IDAuNztcblx0XHRcdG1hcmdpbi1ib3R0b206IHZhcigtLXNpemUtMi0xKTtcblx0XHRcdGZvbnQtd2VpZ2h0OiA2MDA7XG5cdFx0YDtcblxuXHRcdGNvbnN0IGNvbnRlbnRFbCA9IG1lc3NhZ2VFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdub3ZhLW1lc3NhZ2UtY29udGVudCcgfSk7XG5cdFx0Ly8gVXNlIGlubmVySFRNTCBmb3Igc3lzdGVtIG1lc3NhZ2VzIHRvIHN1cHBvcnQgaWNvbnMsIHRleHRDb250ZW50IGZvciBvdGhlcnMgZm9yIHNlY3VyaXR5XG5cdFx0aWYgKHJvbGUgPT09ICdzeXN0ZW0nICYmIGNvbnRlbnQuaW5jbHVkZXMoJzxzdmcnKSkge1xuXHRcdFx0Y29udGVudEVsLmlubmVySFRNTCA9IGNvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRlbnRFbC50ZXh0Q29udGVudCA9IGNvbnRlbnQ7XG5cdFx0fVxuXG5cdFx0Ly8gQXV0by1zY3JvbGwgdG8gYm90dG9tIHdpdGggc21vb3RoIGFuaW1hdGlvblxuXHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0dGhpcy5jaGF0Q29udGFpbmVyLnNjcm9sbFRvKHtcblx0XHRcdFx0dG9wOiB0aGlzLmNoYXRDb250YWluZXIuc2Nyb2xsSGVpZ2h0LFxuXHRcdFx0XHRiZWhhdmlvcjogJ3Ntb290aCdcblx0XHRcdH0pO1xuXHRcdH0sIE5vdmFTaWRlYmFyVmlldy5TQ1JPTExfREVMQVlfTVMpO1xuXHR9XG5cblx0Ly8gUkVQTEFDRSB3aXRoIHNpbXBsZSBkZWxlZ2F0aW9uIHRvIENoYXRSZW5kZXJlcjpcblx0cHJpdmF0ZSBhZGRTdWNjZXNzTWVzc2FnZShjb250ZW50OiBzdHJpbmcpOiB2b2lkIHtcblx0XHR0aGlzLmNoYXRSZW5kZXJlci5hZGRTdWNjZXNzTWVzc2FnZShjb250ZW50LCB0cnVlKTsgLy8gQWx3YXlzIHBlcnNpc3Rcblx0fVxuXG5cdHByaXZhdGUgYWRkRXJyb3JNZXNzYWdlKGNvbnRlbnQ6IHN0cmluZyk6IHZvaWQge1xuXHRcdHRoaXMuY2hhdFJlbmRlcmVyLmFkZEVycm9yTWVzc2FnZShjb250ZW50LCB0cnVlKTsgLy8gQWx3YXlzIHBlcnNpc3QgIFxuXHR9XG5cblx0cHJpdmF0ZSBhZGRXZWxjb21lTWVzc2FnZShtZXNzYWdlPzogc3RyaW5nKTogdm9pZCB7XG5cdFx0dGhpcy5jaGF0UmVuZGVyZXIuYWRkV2VsY29tZU1lc3NhZ2UobWVzc2FnZSk7XG5cdH1cblxuXHRwcml2YXRlIGFkZFN1Y2Nlc3NJbmRpY2F0b3IoYWN0aW9uOiBzdHJpbmcpIHtcblx0XHQvLyBVc2UgdW5pZmllZCBzeXN0ZW0gaW5zdGVhZCBvZiBkeW5hbWljIHN0eWxpbmdcblx0XHRjb25zdCBtZXNzYWdlcyA9IHtcblx0XHRcdCdhZGQnOiAnXHUyNzEzIENvbnRlbnQgYWRkZWQnLFxuXHRcdFx0J2VkaXQnOiAnXHUyNzEzIENvbnRlbnQgZWRpdGVkJywgXG5cdFx0XHQnZGVsZXRlJzogJ1x1MjcxMyBDb250ZW50IGRlbGV0ZWQnLFxuXHRcdFx0J2dyYW1tYXInOiAnXHUyNzEzIEdyYW1tYXIgZml4ZWQnLFxuXHRcdFx0J3Jld3JpdGUnOiAnXHUyNzEzIENvbnRlbnQgcmV3cml0dGVuJ1xuXHRcdH07XG5cdFx0XG5cdFx0Y29uc3QgbWVzc2FnZSA9IG1lc3NhZ2VzW2FjdGlvbiBhcyBrZXlvZiB0eXBlb2YgbWVzc2FnZXNdIHx8ICdcdTI3MTMgQ29tbWFuZCBjb21wbGV0ZWQnO1xuXHRcdHRoaXMuYWRkU3VjY2Vzc01lc3NhZ2UobWVzc2FnZSk7XG5cdH1cblxuXHRwcml2YXRlIGFkZEVycm9ySW5kaWNhdG9yKGFjdGlvbjogc3RyaW5nLCBlcnJvcj86IHN0cmluZykge1xuXHRcdC8vIFVzZSB1bmlmaWVkIHN5c3RlbSBmb3IgZXJyb3IgbWVzc2FnZXMgbWF0Y2hpbmcgc3VjY2VzcyBtZXNzYWdlc1xuXHRcdGNvbnN0IG1lc3NhZ2VzID0ge1xuXHRcdFx0J2FkZCc6ICdcdTI3NEMgRmFpbGVkIHRvIGFkZCBjb250ZW50Jyxcblx0XHRcdCdlZGl0JzogJ1x1Mjc0QyBGYWlsZWQgdG8gZWRpdCBjb250ZW50JywgXG5cdFx0XHQnZGVsZXRlJzogJ1x1Mjc0QyBGYWlsZWQgdG8gZGVsZXRlIGNvbnRlbnQnLFxuXHRcdFx0J2dyYW1tYXInOiAnXHUyNzRDIEZhaWxlZCB0byBmaXggZ3JhbW1hcicsXG5cdFx0XHQncmV3cml0ZSc6ICdcdTI3NEMgRmFpbGVkIHRvIHJld3JpdGUgY29udGVudCcsXG5cdFx0XHQnZXhlY3V0ZSc6ICdcdTI3NEMgQ29tbWFuZCBleGVjdXRpb24gZXJyb3InXG5cdFx0fTtcblx0XHRcblx0XHRsZXQgbWVzc2FnZSA9IG1lc3NhZ2VzW2FjdGlvbiBhcyBrZXlvZiB0eXBlb2YgbWVzc2FnZXNdIHx8ICdcdTI3NEMgQ29tbWFuZCBmYWlsZWQnO1xuXHRcdGlmIChlcnJvcikge1xuXHRcdFx0bWVzc2FnZSArPSBgOiAke2Vycm9yfWA7XG5cdFx0fVxuXHRcdHRoaXMuYWRkRXJyb3JNZXNzYWdlKG1lc3NhZ2UpO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBoYW5kbGVDb2xvbkNvbW1hbmQobWVzc2FnZTogc3RyaW5nKTogUHJvbWlzZTxib29sZWFuPiB7XG5cdFx0Ly8gQ2hlY2sgaWYgY29tbWFuZCBzeXN0ZW0gZmVhdHVyZSBpcyBlbmFibGVkXG5cdFx0aWYgKCF0aGlzLnBsdWdpbi5mZWF0dXJlTWFuYWdlci5pc0ZlYXR1cmVFbmFibGVkKCdjb21tYW5kcycpKSB7XG5cdFx0XHR0aGlzLmFkZEVycm9yTWVzc2FnZSgnQ29tbWFuZHMgYXJlIGN1cnJlbnRseSBpbiBlYXJseSBhY2Nlc3MgZm9yIFN1cGVybm92YSBzdXBwb3J0ZXJzLiBBdmFpbGFibGUgdG8gYWxsIHVzZXJzIFNlcHRlbWJlciAzMCwgMjAyNS4nKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdGNvbnN0IGNvbW1hbmQgPSBtZXNzYWdlLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7IC8vIFJlbW92ZSAnOicgYW5kIG5vcm1hbGl6ZVxuXG5cdFx0Ly8gUHJvdmlkZXIgc3dpdGNoaW5nIGNvbW1hbmRzXG5cdFx0Y29uc3QgcHJvdmlkZXJDb21tYW5kczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcblx0XHRcdCdjbGF1ZGUnOiAnY2xhdWRlJyxcblx0XHRcdCdjaGF0Z3B0JzogJ29wZW5haScsXG5cdFx0XHQnb3BlbmFpJzogJ29wZW5haScsXG5cdFx0XHQnZ2VtaW5pJzogJ2dvb2dsZScsXG5cdFx0XHQnZ29vZ2xlJzogJ2dvb2dsZScsXG5cdFx0XHQnb2xsYW1hJzogJ29sbGFtYSdcblx0XHR9O1xuXG5cdFx0aWYgKHByb3ZpZGVyQ29tbWFuZHNbY29tbWFuZF0pIHtcblx0XHRcdGNvbnN0IHByb3ZpZGVySWQgPSBwcm92aWRlckNvbW1hbmRzW2NvbW1hbmRdO1xuXHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uc2V0dGluZ1RhYi5zZXRDdXJyZW50UHJvdmlkZXIocHJvdmlkZXJJZCk7XG5cdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcdHRoaXMuYWRkU3VjY2Vzc01lc3NhZ2UoYFx1MjcxMyBTd2l0Y2hlZCB0byAke3RoaXMuZ2V0UHJvdmlkZXJXaXRoTW9kZWxEaXNwbGF5TmFtZShwcm92aWRlcklkKX1gKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciBjdXN0b20gY29tbWFuZHMgKGlmIGZlYXR1cmUgZW5hYmxlZClcblx0XHRpZiAodGhpcy5wbHVnaW4uZmVhdHVyZU1hbmFnZXIuaXNGZWF0dXJlRW5hYmxlZCgnY29tbWFuZHMnKSkge1xuXHRcdFx0Y29uc3QgY3VzdG9tQ29tbWFuZCA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmN1c3RvbUNvbW1hbmRzPy5maW5kKGNtZCA9PiBjbWQudHJpZ2dlciA9PT0gY29tbWFuZCk7XG5cdFx0XHRpZiAoY3VzdG9tQ29tbWFuZCkge1xuXHRcdFx0XHQvLyBFeGVjdXRlIGN1c3RvbSBjb21tYW5kXG5cdFx0XHRcdHRoaXMuaW5wdXRIYW5kbGVyLmdldFRleHRBcmVhKCkuc2V0VmFsdWUoY3VzdG9tQ29tbWFuZC50ZW1wbGF0ZSk7XG5cdFx0XHRcdC8vIFRyaWdnZXIgYXV0by1ncm93IGFmdGVyIHNldHRpbmcgdGVtcGxhdGVcblx0XHRcdFx0XHRzZXRUaW1lb3V0KCgpID0+IHRoaXMuYXV0b0dyb3dUZXh0YXJlYSgpLCAwKTtcblx0XHRcdFx0dGhpcy5hZGRTdWNjZXNzTWVzc2FnZShgXHUyNzEzIExvYWRlZCB0ZW1wbGF0ZTogJHtjdXN0b21Db21tYW5kLm5hbWV9YCk7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFVua25vd24gY29tbWFuZFxuXHRcdHRoaXMuYWRkRXJyb3JNZXNzYWdlKGBcdTI3NEMgVW5rbm93biBjb21tYW5kICc6JHtjb21tYW5kfScuIFRyeSA6Y2xhdWRlLCA6Y2hhdGdwdCwgOmdlbWluaSwgb3IgOm9sbGFtYWApO1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0cHJpdmF0ZSBjcmVhdGVDb21tYW5kUGlja2VyKCk6IHZvaWQge1xuXHRcdHRoaXMuY29tbWFuZFBpY2tlciA9IHRoaXMuaW5wdXRDb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1jb21tYW5kLXBpY2tlciBub3ZhLXBhbmVsLWJhc2UnIH0pO1xuXHRcdHRoaXMuY29tbWFuZFBpY2tlci5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0Ym90dG9tOiAxMDAlO1xuXHRcdFx0bGVmdDogMDtcblx0XHRcdHJpZ2h0OiAwO1xuXHRcdFx0Ym9yZGVyLWJvdHRvbTogbm9uZTtcblx0XHRcdGJvcmRlci1yYWRpdXM6IDhweCA4cHggMCAwO1xuXHRcdFx0bWF4LWhlaWdodDogMjAwcHg7XG5cdFx0XHRvdmVyZmxvdy15OiBhdXRvO1xuXHRcdFx0ei1pbmRleDogMTAwMDtcblx0XHRcdGRpc3BsYXk6IG5vbmU7XG5cdFx0XHRib3gtc2hhZG93OiAwIC00cHggMTJweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG5cdFx0YDtcblx0fVxuXG5cdHByaXZhdGUgaGFuZGxlSW5wdXRDaGFuZ2UoKTogdm9pZCB7XG5cdFx0Y29uc3QgdmFsdWUgPSB0aGlzLmlucHV0SGFuZGxlci5nZXRUZXh0QXJlYSgpLmdldFZhbHVlKCk7XG5cdFx0XG5cdFx0aWYgKHZhbHVlLnN0YXJ0c1dpdGgoJzonKSAmJiB0aGlzLnBsdWdpbi5mZWF0dXJlTWFuYWdlci5pc0ZlYXR1cmVFbmFibGVkKCdjb21tYW5kcycpKSB7XG5cdFx0XHRjb25zdCBxdWVyeSA9IHZhbHVlLnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHR0aGlzLnNob3dDb21tYW5kUGlja2VyKHF1ZXJ5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5oaWRlQ29tbWFuZFBpY2tlcigpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgc2hvd0NvbW1hbmRQaWNrZXIocXVlcnk6IHN0cmluZyk6IHZvaWQge1xuXHRcdGNvbnN0IGNvbW1hbmRzID0gdGhpcy5nZXRBdmFpbGFibGVDb21tYW5kcygpLmZpbHRlcihjbWQgPT4gXG5cdFx0XHRjbWQudHJpZ2dlci50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5KSB8fCBjbWQubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHF1ZXJ5KVxuXHRcdCk7XG5cblx0XHR0aGlzLmNvbW1hbmRQaWNrZXIuZW1wdHkoKTtcblx0XHR0aGlzLmNvbW1hbmRQaWNrZXJJdGVtcyA9IFtdO1xuXHRcdHRoaXMuc2VsZWN0ZWRDb21tYW5kSW5kZXggPSAtMTtcblxuXHRcdGlmIChjb21tYW5kcy5sZW5ndGggPT09IDApIHtcblx0XHRcdHRoaXMuaGlkZUNvbW1hbmRQaWNrZXIoKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRjb21tYW5kcy5mb3JFYWNoKChjb21tYW5kLCBpbmRleCkgPT4ge1xuXHRcdFx0Y29uc3QgaXRlbSA9IHRoaXMuY29tbWFuZFBpY2tlci5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbW1hbmQtaXRlbSBub3ZhLXBhbmVsLWl0ZW0nIH0pO1xuXG5cdFx0XHRjb25zdCB0cmlnZ2VyRWwgPSBpdGVtLmNyZWF0ZVNwYW4oeyBjbHM6ICdub3ZhLWNvbW1hbmQtdHJpZ2dlciBub3ZhLXBhbmVsLXRyaWdnZXInIH0pO1xuXHRcdFx0dHJpZ2dlckVsLnRleHRDb250ZW50ID0gYDoke2NvbW1hbmQudHJpZ2dlcn1gO1xuXG5cdFx0XHRjb25zdCBuYW1lRWwgPSBpdGVtLmNyZWF0ZVNwYW4oeyBjbHM6ICdub3ZhLWNvbW1hbmQtbmFtZSBub3ZhLXBhbmVsLXRleHQnIH0pO1xuXHRcdFx0bmFtZUVsLnRleHRDb250ZW50ID0gY29tbWFuZC5uYW1lO1xuXHRcdFx0bmFtZUVsLnN0eWxlLmNzc1RleHQgPSAnZmxleDogMTsnO1xuXG5cdFx0XHRpZiAoY29tbWFuZC5kZXNjcmlwdGlvbikge1xuXHRcdFx0XHRjb25zdCBkZXNjRWwgPSBpdGVtLmNyZWF0ZVNwYW4oeyBjbHM6ICdub3ZhLWNvbW1hbmQtZGVzYyBub3ZhLXBhbmVsLW11dGVkJyB9KTtcblx0XHRcdFx0ZGVzY0VsLnRleHRDb250ZW50ID0gY29tbWFuZC5kZXNjcmlwdGlvbjtcblx0XHRcdH1cblxuXHRcdFx0aXRlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcblx0XHRcdFx0dGhpcy5zZWxlY3RDb21tYW5kKGNvbW1hbmQudHJpZ2dlcik7XG5cdFx0XHR9KTtcblxuXHRcdFx0aXRlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnNldFNlbGVjdGVkQ29tbWFuZChpbmRleCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0dGhpcy5jb21tYW5kUGlja2VySXRlbXMucHVzaChpdGVtKTtcblx0XHR9KTtcblxuXHRcdHRoaXMuY29tbWFuZFBpY2tlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0fVxuXG5cdHByaXZhdGUgaGlkZUNvbW1hbmRQaWNrZXIoKTogdm9pZCB7XG5cdFx0dGhpcy5jb21tYW5kUGlja2VyLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0dGhpcy5zZWxlY3RlZENvbW1hbmRJbmRleCA9IC0xO1xuXHR9XG5cblx0cHJpdmF0ZSBpc0NvbW1hbmRQaWNrZXJWaXNpYmxlKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmNvbW1hbmRQaWNrZXIuc3R5bGUuZGlzcGxheSA9PT0gJ2Jsb2NrJztcblx0fVxuXG5cdHByaXZhdGUgbmF2aWdhdGVDb21tYW5kUGlja2VyKGRpcmVjdGlvbjogbnVtYmVyKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuY29tbWFuZFBpY2tlckl0ZW1zLmxlbmd0aCA9PT0gMCkgcmV0dXJuO1xuXG5cdFx0Y29uc3QgbmV3SW5kZXggPSBNYXRoLm1heCgwLCBNYXRoLm1pbihcblx0XHRcdHRoaXMuY29tbWFuZFBpY2tlckl0ZW1zLmxlbmd0aCAtIDEsXG5cdFx0XHR0aGlzLnNlbGVjdGVkQ29tbWFuZEluZGV4ICsgZGlyZWN0aW9uXG5cdFx0KSk7XG5cblx0XHR0aGlzLnNldFNlbGVjdGVkQ29tbWFuZChuZXdJbmRleCk7XG5cdH1cblxuXHRwcml2YXRlIHNldFNlbGVjdGVkQ29tbWFuZChpbmRleDogbnVtYmVyKTogdm9pZCB7XG5cdFx0Ly8gUmVtb3ZlIHByZXZpb3VzIHNlbGVjdGlvblxuXHRcdHRoaXMuY29tbWFuZFBpY2tlckl0ZW1zLmZvckVhY2goaXRlbSA9PiB7XG5cdFx0XHRpdGVtLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5zZWxlY3RlZENvbW1hbmRJbmRleCA9IGluZGV4O1xuXG5cdFx0aWYgKGluZGV4ID49IDAgJiYgaW5kZXggPCB0aGlzLmNvbW1hbmRQaWNrZXJJdGVtcy5sZW5ndGgpIHtcblx0XHRcdHRoaXMuY29tbWFuZFBpY2tlckl0ZW1zW2luZGV4XS5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcblx0XHRcdHRoaXMuY29tbWFuZFBpY2tlckl0ZW1zW2luZGV4XS5zY3JvbGxJbnRvVmlldyh7IGJsb2NrOiAnbmVhcmVzdCcgfSk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBoYW5kbGVDb21tYW5kUGlja2VyU2VsZWN0aW9uKCk6IGJvb2xlYW4ge1xuXHRcdGlmICghdGhpcy5pc0NvbW1hbmRQaWNrZXJWaXNpYmxlKCkgfHwgdGhpcy5zZWxlY3RlZENvbW1hbmRJbmRleCA9PT0gLTEpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRjb25zdCBjb21tYW5kcyA9IHRoaXMuZ2V0QXZhaWxhYmxlQ29tbWFuZHMoKTtcblx0XHRjb25zdCBzZWxlY3RlZENvbW1hbmQgPSBjb21tYW5kc1t0aGlzLnNlbGVjdGVkQ29tbWFuZEluZGV4XTtcblx0XHRcblx0XHRpZiAoc2VsZWN0ZWRDb21tYW5kKSB7XG5cdFx0XHR0aGlzLnNlbGVjdENvbW1hbmQoc2VsZWN0ZWRDb21tYW5kLnRyaWdnZXIpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cHJpdmF0ZSBzZWxlY3RDb21tYW5kKHRyaWdnZXI6IHN0cmluZyk6IHZvaWQge1xuXHRcdHRoaXMuaW5wdXRIYW5kbGVyLmdldFRleHRBcmVhKCkuc2V0VmFsdWUoYDoke3RyaWdnZXJ9YCk7XG5cdFx0dGhpcy5oaWRlQ29tbWFuZFBpY2tlcigpO1xuXHRcdC8vIFRyaWdnZXIgdGhlIGNvbW1hbmQgaW1tZWRpYXRlbHlcblx0XHR0aGlzLmhhbmRsZVNlbmQoKTtcblx0fVxuXG5cdHByaXZhdGUgZ2V0QXZhaWxhYmxlQ29tbWFuZHMoKTogQXJyYXk8e3RyaWdnZXI6IHN0cmluZywgbmFtZTogc3RyaW5nLCBkZXNjcmlwdGlvbj86IHN0cmluZ30+IHtcblx0XHRjb25zdCBjb21tYW5kczogQXJyYXk8e3RyaWdnZXI6IHN0cmluZywgbmFtZTogc3RyaW5nLCBkZXNjcmlwdGlvbj86IHN0cmluZ30+ID0gW107XG5cblx0XHQvLyBDaGVjayBpZiB1c2VyIGhhcyB0ZXh0IHNlbGVjdGVkIGluIGFjdGl2ZSBlZGl0b3Jcblx0XHRjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHRjb25zdCBzZWxlY3RlZFRleHQgPSBhY3RpdmVWaWV3Py5lZGl0b3I/LmdldFNlbGVjdGlvbigpO1xuXHRcdFxuXHRcdC8vIElmIHRleHQgaXMgc2VsZWN0ZWQsIHByaW9yaXRpemUgTm92YSBzZWxlY3Rpb24gYWN0aW9uc1xuXHRcdGlmIChzZWxlY3RlZFRleHQgJiYgc2VsZWN0ZWRUZXh0LnRyaW0oKS5sZW5ndGggPiAwKSB7XG5cdFx0XHRTRUxFQ1RJT05fQUNUSU9OUy5mb3JFYWNoKGFjdGlvbiA9PiB7XG5cdFx0XHRcdGNvbW1hbmRzLnB1c2goe1xuXHRcdFx0XHRcdHRyaWdnZXI6IGFjdGlvbi5pZCxcblx0XHRcdFx0XHRuYW1lOiBgTm92YTogJHthY3Rpb24ubGFiZWx9YCxcblx0XHRcdFx0XHRkZXNjcmlwdGlvbjogYWN0aW9uLmRlc2NyaXB0aW9uXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0XHRcblx0XHRcdC8vIEFkZCBzZXBhcmF0b3IgY29tbWVudCAobm90IGEgcmVhbCBjb21tYW5kKVxuXHRcdFx0Y29tbWFuZHMucHVzaCh7IHRyaWdnZXI6ICctLS0nLCBuYW1lOiAnXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwXHUyNTAwJywgZGVzY3JpcHRpb246ICdQcm92aWRlciBDb21tYW5kcycgfSk7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHByb3ZpZGVyIHN3aXRjaGluZyBjb21tYW5kc1xuXHRcdGNvbW1hbmRzLnB1c2goXG5cdFx0XHR7IHRyaWdnZXI6ICdjbGF1ZGUnLCBuYW1lOiAnU3dpdGNoIHRvIENsYXVkZScsIGRlc2NyaXB0aW9uOiAnQW50aHJvcGljIENsYXVkZSBBSScgfSxcblx0XHRcdHsgdHJpZ2dlcjogJ2NoYXRncHQnLCBuYW1lOiAnU3dpdGNoIHRvIENoYXRHUFQnLCBkZXNjcmlwdGlvbjogJ09wZW5BSSBHUFQgbW9kZWxzJyB9LFxuXHRcdFx0eyB0cmlnZ2VyOiAnZ2VtaW5pJywgbmFtZTogJ1N3aXRjaCB0byBHZW1pbmknLCBkZXNjcmlwdGlvbjogJ0dvb2dsZSBHZW1pbmkgQUknIH1cblx0XHQpO1xuXG5cdFx0Ly8gT25seSBhZGQgT2xsYW1hIG9uIGRlc2t0b3Bcblx0XHRpZiAoUGxhdGZvcm0uaXNEZXNrdG9wQXBwKSB7XG5cdFx0XHRjb21tYW5kcy5wdXNoKHsgdHJpZ2dlcjogJ29sbGFtYScsIG5hbWU6ICdTd2l0Y2ggdG8gT2xsYW1hJywgZGVzY3JpcHRpb246ICdMb2NhbCBBSSBtb2RlbHMnIH0pO1xuXHRcdH1cblxuXHRcdC8vIEFkZCBjdXN0b20gY29tbWFuZHMgaWYgZmVhdHVyZSBpcyBlbmFibGVkXG5cdFx0aWYgKHRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyLmlzRmVhdHVyZUVuYWJsZWQoJ2NvbW1hbmRzJykpIHtcblx0XHRcdGNvbnN0IGN1c3RvbUNvbW1hbmRzID0gdGhpcy5wbHVnaW4uc2V0dGluZ3MuY3VzdG9tQ29tbWFuZHMgfHwgW107XG5cdFx0XHRpZiAoY3VzdG9tQ29tbWFuZHMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRjb21tYW5kcy5wdXNoKHsgdHJpZ2dlcjogJy0tLScsIG5hbWU6ICdcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDBcdTI1MDAnLCBkZXNjcmlwdGlvbjogJ0N1c3RvbSBDb21tYW5kcycgfSk7XG5cdFx0XHRcdGN1c3RvbUNvbW1hbmRzLmZvckVhY2goY21kID0+IHtcblx0XHRcdFx0XHRjb21tYW5kcy5wdXNoKHtcblx0XHRcdFx0XHRcdHRyaWdnZXI6IGNtZC50cmlnZ2VyLFxuXHRcdFx0XHRcdFx0bmFtZTogY21kLm5hbWUsXG5cdFx0XHRcdFx0XHQuLi4oY21kLmRlc2NyaXB0aW9uICYmIHsgZGVzY3JpcHRpb246IGNtZC5kZXNjcmlwdGlvbiB9KVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY29tbWFuZHM7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZUNvbW1hbmRNZW51KCk6IHZvaWQge1xuXHRcdHRoaXMuY29tbWFuZE1lbnUgPSB0aGlzLmlucHV0Q29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ25vdmEtY29tbWFuZC1tZW51IG5vdmEtcGFuZWwtYmFzZScgfSk7XG5cdFx0dGhpcy5jb21tYW5kTWVudS5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0Ym90dG9tOiAxMDAlO1xuXHRcdFx0cmlnaHQ6IDA7XG5cdFx0XHRib3JkZXItYm90dG9tOiBub25lO1xuXHRcdFx0Ym9yZGVyLXJhZGl1czogOHB4IDhweCAwIDA7XG5cdFx0XHRtaW4td2lkdGg6IDI0MHB4O1xuXHRcdFx0bWF4LWhlaWdodDogMzAwcHg7XG5cdFx0XHRvdmVyZmxvdy15OiBhdXRvO1xuXHRcdFx0ei1pbmRleDogMTAwMDtcblx0XHRcdGRpc3BsYXk6IG5vbmU7XG5cdFx0XHRib3gtc2hhZG93OiAwIC00cHggMTJweCByZ2JhKDAsIDAsIDAsIDAuMSk7XG5cdFx0YDtcblxuXHRcdC8vIENsb3NlIG1lbnUgd2hlbiBjbGlja2luZyBvdXRzaWRlXG5cdFx0Y29uc3QgY29tbWFuZE1lbnVDbGlja0hhbmRsZXI6IEV2ZW50TGlzdGVuZXIgPSAoZXZlbnQ6IEV2ZW50KSA9PiB7XG5cdFx0XHRpZiAoIXRoaXMuY29tbWFuZE1lbnUuY29udGFpbnMoZXZlbnQudGFyZ2V0IGFzIE5vZGUpICYmIFxuXHRcdFx0XHQhdGhpcy5jb21tYW5kQnV0dG9uLmJ1dHRvbkVsLmNvbnRhaW5zKGV2ZW50LnRhcmdldCBhcyBOb2RlKSkge1xuXHRcdFx0XHR0aGlzLmhpZGVDb21tYW5kTWVudSgpO1xuXHRcdFx0fVxuXHRcdH07XG5cdFx0dGhpcy5hZGRUcmFja2VkRXZlbnRMaXN0ZW5lcihkb2N1bWVudCwgJ2NsaWNrJywgY29tbWFuZE1lbnVDbGlja0hhbmRsZXIpO1xuXHR9XG5cblx0cHJpdmF0ZSB0b2dnbGVDb21tYW5kTWVudSgpOiB2b2lkIHtcblx0XHRpZiAoIXRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyLmlzRmVhdHVyZUVuYWJsZWQoJ2NvbW1hbmRzJykpIHtcblx0XHRcdHRoaXMuYWRkRXJyb3JNZXNzYWdlKCdDb21tYW5kcyBhcmUgY3VycmVudGx5IGluIGVhcmx5IGFjY2VzcyBmb3IgU3VwZXJub3ZhIHN1cHBvcnRlcnMuIEF2YWlsYWJsZSB0byBhbGwgdXNlcnMgU2VwdGVtYmVyIDMwLCAyMDI1LicpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICh0aGlzLmlzQ29tbWFuZE1lbnVWaXNpYmxlKSB7XG5cdFx0XHR0aGlzLmhpZGVDb21tYW5kTWVudSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0aGlzLnNob3dDb21tYW5kTWVudSgpO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgc2hvd0NvbW1hbmRNZW51KCk6IHZvaWQge1xuXHRcdGNvbnN0IGNvbW1hbmRzID0gdGhpcy5nZXRBdmFpbGFibGVDb21tYW5kcygpO1xuXHRcdFxuXHRcdHRoaXMuY29tbWFuZE1lbnUuZW1wdHkoKTtcblx0XHRcblx0XHQvLyBIZWFkZXJcblx0XHRjb25zdCBoZWFkZXJFbCA9IHRoaXMuY29tbWFuZE1lbnUuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1jb21tYW5kLW1lbnUtaGVhZGVyIG5vdmEtcGFuZWwtaGVhZGVyJyB9KTtcblx0XHRoZWFkZXJFbC5pbm5lckhUTUwgPSB0aGlzLmNyZWF0ZUlubGluZUljb24oJ3phcCcpICsgJyBDb21tYW5kcyc7XG5cblx0XHQvLyBDb21tYW5kcyBsaXN0XG5cdFx0Y29tbWFuZHMuZm9yRWFjaChjb21tYW5kID0+IHtcblx0XHRcdC8vIEhhbmRsZSBzZXBhcmF0b3IgaXRlbXNcblx0XHRcdGlmIChjb21tYW5kLnRyaWdnZXIgPT09ICctLS0nKSB7XG5cdFx0XHRcdGNvbnN0IHNlcGFyYXRvciA9IHRoaXMuY29tbWFuZE1lbnUuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1jb21tYW5kLW1lbnUtc2VwYXJhdG9yJyB9KTtcblx0XHRcdFx0c2VwYXJhdG9yLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRcdFx0cGFkZGluZzogOHB4IDE2cHggNHB4IDE2cHg7XG5cdFx0XHRcdFx0Zm9udC1zaXplOiAwLjc1ZW07XG5cdFx0XHRcdFx0Y29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xuXHRcdFx0XHRcdGZvbnQtd2VpZ2h0OiA2MDA7XG5cdFx0XHRcdFx0dGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZTtcblx0XHRcdFx0XHRsZXR0ZXItc3BhY2luZzogMC41cHg7XG5cdFx0XHRcdFx0Ym9yZGVyLXRvcDogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcblx0XHRcdFx0XHRtYXJnaW4tdG9wOiA0cHg7XG5cdFx0XHRcdFx0Y3Vyc29yOiBkZWZhdWx0O1xuXHRcdFx0XHRgO1xuXHRcdFx0XHRzZXBhcmF0b3IudGV4dENvbnRlbnQgPSBjb21tYW5kLmRlc2NyaXB0aW9uIHx8ICcnO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbnN0IGl0ZW0gPSB0aGlzLmNvbW1hbmRNZW51LmNyZWF0ZURpdih7IGNsczogJ25vdmEtY29tbWFuZC1tZW51LWl0ZW0gbm92YS1wYW5lbC1pdGVtLXZlcnRpY2FsJyB9KTtcblxuXHRcdFx0Y29uc3QgbmFtZUVsID0gaXRlbS5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbW1hbmQtbWVudS1uYW1lIG5vdmEtcGFuZWwtdGV4dCcgfSk7XG5cdFx0XHRuYW1lRWwudGV4dENvbnRlbnQgPSBjb21tYW5kLm5hbWU7XG5cblx0XHRcdGNvbnN0IHRyaWdnZXJFbCA9IGl0ZW0uY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1jb21tYW5kLW1lbnUtdHJpZ2dlciBub3ZhLXBhbmVsLXRyaWdnZXInIH0pO1xuXHRcdFx0dHJpZ2dlckVsLnRleHRDb250ZW50ID0gYDoke2NvbW1hbmQudHJpZ2dlcn1gO1xuXHRcdFx0dHJpZ2dlckVsLnN0eWxlLm9wYWNpdHkgPSAnMC44JztcblxuXHRcdFx0aWYgKGNvbW1hbmQuZGVzY3JpcHRpb24pIHtcblx0XHRcdFx0Y29uc3QgZGVzY0VsID0gaXRlbS5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbW1hbmQtbWVudS1kZXNjIG5vdmEtcGFuZWwtbXV0ZWQnIH0pO1xuXHRcdFx0XHRkZXNjRWwudGV4dENvbnRlbnQgPSBjb21tYW5kLmRlc2NyaXB0aW9uO1xuXHRcdFx0fVxuXG5cdFx0XHRpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmV4ZWN1dGVDb21tYW5kRnJvbU1lbnUoY29tbWFuZC50cmlnZ2VyKTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5jb21tYW5kTWVudS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0XHR0aGlzLmlzQ29tbWFuZE1lbnVWaXNpYmxlID0gdHJ1ZTtcblx0fVxuXG5cdHByaXZhdGUgaGlkZUNvbW1hbmRNZW51KCk6IHZvaWQge1xuXHRcdHRoaXMuY29tbWFuZE1lbnUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHR0aGlzLmlzQ29tbWFuZE1lbnVWaXNpYmxlID0gZmFsc2U7XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIGV4ZWN1dGVDb21tYW5kRnJvbU1lbnUodHJpZ2dlcjogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0dGhpcy5oaWRlQ29tbWFuZE1lbnUoKTtcblx0XHRcblx0XHQvLyBDaGVjayBpZiB0aGlzIGlzIGEgTm92YSBzZWxlY3Rpb24gYWN0aW9uXG5cdFx0Y29uc3Qgc2VsZWN0aW9uQWN0aW9uID0gU0VMRUNUSU9OX0FDVElPTlMuZmluZChhY3Rpb24gPT4gYWN0aW9uLmlkID09PSB0cmlnZ2VyKTtcblx0XHRpZiAoc2VsZWN0aW9uQWN0aW9uKSB7XG5cdFx0XHQvLyBIYW5kbGUgc2VsZWN0aW9uIGFjdGlvblxuXHRcdFx0Y29uc3QgYWN0aXZlVmlldyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVWaWV3T2ZUeXBlKE1hcmtkb3duVmlldyk7XG5cdFx0XHRjb25zdCBzZWxlY3RlZFRleHQgPSBhY3RpdmVWaWV3Py5lZGl0b3I/LmdldFNlbGVjdGlvbigpO1xuXHRcdFx0XG5cdFx0XHRpZiAoYWN0aXZlVmlldz8uZWRpdG9yICYmIHNlbGVjdGVkVGV4dCAmJiBzZWxlY3RlZFRleHQudHJpbSgpLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0Ly8gVXNlIHRoZSBleGlzdGluZyBzZWxlY3Rpb24gY29udGV4dCBtZW51IGhhbmRsZXJcblx0XHRcdFx0YXdhaXQgdGhpcy5zZWxlY3Rpb25Db250ZXh0TWVudS5oYW5kbGVTZWxlY3Rpb25BY3Rpb24odHJpZ2dlciwgYWN0aXZlVmlldy5lZGl0b3IsIHNlbGVjdGVkVGV4dCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuZXcgTm90aWNlKCdObyB0ZXh0IHNlbGVjdGVkLiBQbGVhc2Ugc2VsZWN0IHRleHQgdG8gdXNlIE5vdmEgZWRpdGluZyBjb21tYW5kcy4nLCAzMDAwKTtcblx0XHRcdH1cblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gU2tpcCBzZXBhcmF0b3IgaXRlbXNcblx0XHRpZiAodHJpZ2dlciA9PT0gJy0tLScpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gRXhlY3V0ZSByZWd1bGFyIGNvbW1hbmQgKHByb3ZpZGVyIHN3aXRjaGluZywgY3VzdG9tIGNvbW1hbmRzKVxuXHRcdHRoaXMuaW5wdXRIYW5kbGVyLmdldFRleHRBcmVhKCkuc2V0VmFsdWUoYDoke3RyaWdnZXJ9YCk7XG5cdFx0dGhpcy5oYW5kbGVTZW5kKCk7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZUNvbnRleHRJbmRpY2F0b3IoKTogdm9pZCB7XG5cdFx0Ly8gQ2hlY2sgaWYgbXVsdGktZG9jIGNvbnRleHQgZmVhdHVyZSBpcyBlbmFibGVkXG5cdFx0aWYgKCF0aGlzLnBsdWdpbi5mZWF0dXJlTWFuYWdlci5pc0ZlYXR1cmVFbmFibGVkKCdtdWx0aS1kb2MtY29udGV4dCcpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dGhpcy5jb250ZXh0SW5kaWNhdG9yID0gdGhpcy5pbnB1dENvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbnRleHQtaW5kaWNhdG9yJyB9KTtcblx0XHR0aGlzLmNvbnRleHRJbmRpY2F0b3Iuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdGRpc3BsYXk6IG5vbmU7XG5cdFx0XHRwYWRkaW5nOiA4cHggMTJweDtcblx0XHRcdG1hcmdpbi1ib3R0b206IDhweDtcblx0XHRcdGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItaG92ZXIpO1xuXHRcdFx0Ym9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuXHRcdFx0Ym9yZGVyLXJhZGl1czogOHB4O1xuXHRcdFx0Zm9udC1zaXplOiAwLjg1ZW07XG5cdFx0XHRjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7XG5cdFx0XHR0cmFuc2l0aW9uOiBhbGwgMC4ycyBlYXNlO1xuXHRcdGA7XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZUNvbnRleHRQcmV2aWV3KCk6IEhUTUxFbGVtZW50IHtcblx0XHQvLyBDaGVjayBpZiBtdWx0aS1kb2MgY29udGV4dCBmZWF0dXJlIGlzIGVuYWJsZWRcblx0XHRpZiAoIXRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyLmlzRmVhdHVyZUVuYWJsZWQoJ211bHRpLWRvYy1jb250ZXh0JykpIHtcblx0XHRcdC8vIFJldHVybiBhIGR1bW15IGVsZW1lbnQgdGhhdCB3b24ndCBiZSB1c2VkXG5cdFx0XHRyZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0fVxuXG5cdFx0Ly8gQ3JlYXRlIGEgcHJldmlldyBhcmVhIHRoYXQgc2hvd3MgbGl2ZSBjb250ZXh0IGFzIHVzZXIgdHlwZXNcblx0XHRjb25zdCBwcmV2aWV3Q29udGFpbmVyID0gdGhpcy5pbnB1dENvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbnRleHQtcHJldmlldycgfSk7XG5cdFx0cHJldmlld0NvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0ZGlzcGxheTogbm9uZTtcblx0XHRcdHBhZGRpbmc6IDhweCAxMnB4O1xuXHRcdFx0bWFyZ2luLWJvdHRvbTogNHB4O1xuXHRcdFx0YmFja2dyb3VuZDogcmdiYSh2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQtcmdiKSwgMC4xKTtcblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkIHJnYmEodmFyKC0taW50ZXJhY3RpdmUtYWNjZW50LXJnYiksIDAuMik7XG5cdFx0XHRib3JkZXItcmFkaXVzOiA2cHg7XG5cdFx0XHRmb250LXNpemU6IDAuOGVtO1xuXHRcdFx0Y29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xuXHRcdFx0dHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTtcblx0XHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0XHRnYXA6IDRweDtcblx0XHRgO1xuXG5cdFx0Y29uc3QgcHJldmlld1RleHQgPSBwcmV2aWV3Q29udGFpbmVyLmNyZWF0ZVNwYW4oeyBjbHM6ICdub3ZhLWNvbnRleHQtcHJldmlldy10ZXh0JyB9KTtcblx0XHRwcmV2aWV3VGV4dC5pbm5lckhUTUwgPSB0aGlzLmNyZWF0ZUlubGluZUljb24oJ2Jvb2stb3BlbicpICsgJyBDb250ZXh0IHdpbGwgaW5jbHVkZTogJztcblx0XHRwcmV2aWV3VGV4dC5zdHlsZS5jc3NUZXh0ID0gJ2ZvbnQtd2VpZ2h0OiA1MDA7IGRpc3BsYXk6IGZsZXg7IGFsaWduLWl0ZW1zOiBjZW50ZXI7IGdhcDogNnB4Oyc7XG5cblx0XHRjb25zdCBwcmV2aWV3TGlzdCA9IHByZXZpZXdDb250YWluZXIuY3JlYXRlU3Bhbih7IGNsczogJ25vdmEtY29udGV4dC1wcmV2aWV3LWxpc3QnIH0pO1xuXHRcdHByZXZpZXdMaXN0LnN0eWxlLmNzc1RleHQgPSAnY29sb3I6IHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7JztcblxuXHRcdHJldHVybiBwcmV2aWV3Q29udGFpbmVyO1xuXHR9XG5cblx0LyoqXG5cdCAqIERlYm91bmNlZCB2ZXJzaW9uIG9mIHVwZGF0ZUxpdmVDb250ZXh0UHJldmlldyBmb3IgcGVyZm9ybWFuY2Vcblx0ICovXG5cdHByaXZhdGUgZGVib3VuY2VkVXBkYXRlQ29udGV4dFByZXZpZXcoKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuY29udGV4dFByZXZpZXdEZWJvdW5jZVRpbWVvdXQpIHtcblx0XHRcdGNsZWFyVGltZW91dCh0aGlzLmNvbnRleHRQcmV2aWV3RGVib3VuY2VUaW1lb3V0KTtcblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5jb250ZXh0UHJldmlld0RlYm91bmNlVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0dGhpcy51cGRhdGVMaXZlQ29udGV4dFByZXZpZXcoKTtcblx0XHRcdHRoaXMuY29udGV4dFByZXZpZXdEZWJvdW5jZVRpbWVvdXQgPSBudWxsO1xuXHRcdH0sIE5vdmFTaWRlYmFyVmlldy5DT05URVhUX1BSRVZJRVdfREVCT1VOQ0VfTVMpO1xuXHR9XG5cblx0cHJpdmF0ZSB1cGRhdGVMaXZlQ29udGV4dFByZXZpZXcoKTogdm9pZCB7XG5cdFx0aWYgKCF0aGlzLmNvbnRleHRQcmV2aWV3IHx8ICF0aGlzLnBsdWdpbi5mZWF0dXJlTWFuYWdlci5pc0ZlYXR1cmVFbmFibGVkKCdtdWx0aS1kb2MtY29udGV4dCcpKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y29uc3QgbWVzc2FnZSA9IHRoaXMuaW5wdXRIYW5kbGVyLmdldFRleHRBcmVhKCkuZ2V0VmFsdWUoKTtcblx0XHRpZiAoIW1lc3NhZ2UpIHtcblx0XHRcdHRoaXMuY29udGV4dFByZXZpZXcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBQYXJzZSBkb2N1bWVudCByZWZlcmVuY2VzIGZyb20gY3VycmVudCBtZXNzYWdlXG5cdFx0Ly8gTm90ZTogQWxsIHJlZmVyZW5jZXMgYXJlIG5vdyBwZXJzaXN0ZW50IGZvciBzaW1wbGlmaWVkIFVYXG5cdFx0Y29uc3QgcmVmUGF0dGVybiA9IC8oXFwrKT9cXFtcXFsoW15cXF1dKz8pKD86IyhbXlxcXV0rPykpP1xcXVxcXS9nO1xuXHRcdGNvbnN0IGZvdW5kUmVmczogQXJyYXk8e25hbWU6IHN0cmluZywgcHJvcGVydHk/OiBzdHJpbmd9PiA9IFtdO1xuXHRcdGxldCBtYXRjaDtcblxuXHRcdHdoaWxlICgobWF0Y2ggPSByZWZQYXR0ZXJuLmV4ZWMobWVzc2FnZSkpICE9PSBudWxsKSB7XG5cdFx0XHRjb25zdCBkb2NOYW1lID0gbWF0Y2hbMl07XG5cdFx0XHRjb25zdCBwcm9wZXJ0eSA9IG1hdGNoWzNdO1xuXHRcdFx0XG5cdFx0XHQvLyBUcnkgdG8gZmluZCB0aGUgZmlsZSB0byB2YWxpZGF0ZSBpdCBleGlzdHNcblx0XHRcdGNvbnN0IGZpbGUgPSB0aGlzLmZpbmRGaWxlQnlOYW1lKGRvY05hbWUpO1xuXHRcdFx0aWYgKGZpbGUpIHtcblx0XHRcdFx0Zm91bmRSZWZzLnB1c2goe1xuXHRcdFx0XHRcdG5hbWU6IGRvY05hbWUsXG5cdFx0XHRcdFx0cHJvcGVydHlcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIGV4aXN0aW5nIHBlcnNpc3RlbnQgY29udGV4dCBmb3IgY3VycmVudCBmaWxlXG5cdFx0Y29uc3QgcGVyc2lzdGVudERvY3MgPSB0aGlzLm11bHRpRG9jSGFuZGxlci5nZXRQZXJzaXN0ZW50Q29udGV4dCh0aGlzLmN1cnJlbnRGaWxlPy5wYXRoIHx8ICcnKTtcblx0XHRwZXJzaXN0ZW50RG9jcy5mb3JFYWNoKGRvYyA9PiB7XG5cdFx0XHQvLyBPbmx5IGFkZCBpZiBub3QgYWxyZWFkeSBpbiBmb3VuZFJlZnMgdG8gYXZvaWQgZHVwbGljYXRlc1xuXHRcdFx0Y29uc3QgZXhpc3RzID0gZm91bmRSZWZzLnNvbWUocmVmID0+IHJlZi5uYW1lID09PSBkb2MuZmlsZS5iYXNlbmFtZSk7XG5cdFx0XHRpZiAoIWV4aXN0cykge1xuXHRcdFx0XHRmb3VuZFJlZnMucHVzaCh7XG5cdFx0XHRcdFx0bmFtZTogZG9jLmZpbGUuYmFzZW5hbWUsXG5cdFx0XHRcdFx0cHJvcGVydHk6IGRvYy5wcm9wZXJ0eVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIFVwZGF0ZSBwcmV2aWV3XG5cdFx0aWYgKGZvdW5kUmVmcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRjb25zdCBwcmV2aWV3TGlzdCA9IHRoaXMuY29udGV4dFByZXZpZXcucXVlcnlTZWxlY3RvcignLm5vdmEtY29udGV4dC1wcmV2aWV3LWxpc3QnKSBhcyBIVE1MRWxlbWVudDtcblx0XHRcdGlmIChwcmV2aWV3TGlzdCkge1xuXHRcdFx0XHRjb25zdCBkb2NOYW1lcyA9IGZvdW5kUmVmcy5tYXAocmVmID0+IHtcblx0XHRcdFx0XHRjb25zdCBzdWZmaXggPSByZWYucHJvcGVydHkgPyBgIyR7cmVmLnByb3BlcnR5fWAgOiAnJztcblx0XHRcdFx0XHRyZXR1cm4gYCR7cmVmLm5hbWV9JHtzdWZmaXh9YDtcblx0XHRcdFx0fSk7XG5cdFx0XHRcdHByZXZpZXdMaXN0LnRleHRDb250ZW50ID0gZG9jTmFtZXMuam9pbignLCAnKTtcblx0XHRcdH1cblx0XHRcdHRoaXMuY29udGV4dFByZXZpZXcuc3R5bGUuZGlzcGxheSA9ICdibG9jayc7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHRoaXMuY29udGV4dFByZXZpZXcuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGZpbmRGaWxlQnlOYW1lKG5hbWVPclBhdGg6IHN0cmluZyk6IFRGaWxlIHwgbnVsbCB7XG5cdFx0Ly8gRmlyc3QgdHJ5IGV4YWN0IHBhdGggbWF0Y2hcblx0XHRsZXQgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChuYW1lT3JQYXRoKTtcblx0XHRcblx0XHRpZiAoIWZpbGUgfHwgIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSB7XG5cdFx0XHQvLyBUcnkgd2l0aCAubWQgZXh0ZW5zaW9uXG5cdFx0XHRmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5hbWVPclBhdGggKyAnLm1kJyk7XG5cdFx0fVxuXHRcdFxuXHRcdGlmICghZmlsZSB8fCAhKGZpbGUgaW5zdGFuY2VvZiBURmlsZSkpIHtcblx0XHRcdC8vIFNlYXJjaCBieSBiYXNlbmFtZVxuXHRcdFx0Y29uc3QgZmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG5cdFx0XHRmaWxlID0gZmlsZXMuZmluZChmID0+IFxuXHRcdFx0XHRmLmJhc2VuYW1lID09PSBuYW1lT3JQYXRoIHx8IFxuXHRcdFx0XHRmLm5hbWUgPT09IG5hbWVPclBhdGggfHxcblx0XHRcdFx0Zi5wYXRoLmVuZHNXaXRoKCcvJyArIG5hbWVPclBhdGgpIHx8XG5cdFx0XHRcdGYucGF0aC5lbmRzV2l0aCgnLycgKyBuYW1lT3JQYXRoICsgJy5tZCcpXG5cdFx0XHQpIHx8IG51bGw7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBmaWxlIGluc3RhbmNlb2YgVEZpbGUgPyBmaWxlIDogbnVsbDtcblx0fVxuXG5cdHByaXZhdGUgdXBkYXRlQ29udGV4dEluZGljYXRvcigpOiB2b2lkIHtcblx0XHRpZiAoIXRoaXMuY29udGV4dEluZGljYXRvcikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHRoaXMuY29udGV4dEluZGljYXRvci5lbXB0eSgpO1xuXHRcdFxuXHRcdGlmICghdGhpcy5jdXJyZW50Q29udGV4dCB8fCAhdGhpcy5jdXJyZW50Q29udGV4dC5wZXJzaXN0ZW50RG9jcykge1xuXHRcdFx0dGhpcy5jb250ZXh0SW5kaWNhdG9yLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHQvLyBVcGRhdGUgaW5wdXQgY29udGFpbmVyIHN0YXRlIGZvciBtb2JpbGUgc3BhY2luZ1xuXHRcdFx0aWYgKHRoaXMuaW5wdXRIYW5kbGVyKSB7XG5cdFx0XHRcdHRoaXMuaW5wdXRIYW5kbGVyLnVwZGF0ZUNvbnRleHRTdGF0ZShmYWxzZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdGNvbnN0IGFsbERvY3MgPSB0aGlzLmN1cnJlbnRDb250ZXh0LnBlcnNpc3RlbnREb2NzO1xuXHRcdFxuXHRcdGlmICghYWxsRG9jcyB8fCBhbGxEb2NzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0dGhpcy5jb250ZXh0SW5kaWNhdG9yLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHQvLyBVcGRhdGUgaW5wdXQgY29udGFpbmVyIHN0YXRlIGZvciBtb2JpbGUgc3BhY2luZ1xuXHRcdFx0aWYgKHRoaXMuaW5wdXRIYW5kbGVyKSB7XG5cdFx0XHRcdHRoaXMuaW5wdXRIYW5kbGVyLnVwZGF0ZUNvbnRleHRTdGF0ZShmYWxzZSk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gVXBkYXRlIGlucHV0IGNvbnRhaW5lciBzdGF0ZSBmb3IgbW9iaWxlIHNwYWNpbmdcblx0XHRpZiAodGhpcy5pbnB1dEhhbmRsZXIpIHtcblx0XHRcdHRoaXMuaW5wdXRIYW5kbGVyLnVwZGF0ZUNvbnRleHRTdGF0ZSh0cnVlKTtcblx0XHR9XG5cblx0XHQvLyBTaG93IGFzIHRoaW4gbGluZSB3aXRoIG1vYmlsZS1vcHRpbWl6ZWQgc2l6aW5nXG5cdFx0Y29uc3QgaXNNb2JpbGUgPSBQbGF0Zm9ybS5pc01vYmlsZTtcblx0XHR0aGlzLmNvbnRleHRJbmRpY2F0b3Iuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0XHRwYWRkaW5nOiAke2lzTW9iaWxlID8gJzEycHggMTZweCcgOiAnOHB4IDEycHgnfTtcblx0XHRcdG1hcmdpbi1ib3R0b206IDRweDtcblx0XHRcdGJhY2tncm91bmQ6IHJnYmEodmFyKC0taW50ZXJhY3RpdmUtYWNjZW50LXJnYiksIDAuMSk7XG5cdFx0XHRib3JkZXI6IDFweCBzb2xpZCByZ2JhKHZhcigtLWludGVyYWN0aXZlLWFjY2VudC1yZ2IpLCAwLjIpO1xuXHRcdFx0Ym9yZGVyLXJhZGl1czogNnB4O1xuXHRcdFx0Zm9udC1zaXplOiAke2lzTW9iaWxlID8gJzAuOWVtJyA6ICcwLjhlbSd9O1xuXHRcdFx0Y29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xuXHRcdFx0dHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTtcblx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHRcdG1pbi1oZWlnaHQ6ICR7aXNNb2JpbGUgPyAnNDRweCcgOiAnYXV0byd9O1xuXHRcdGA7XG5cdFx0Ly8gU2luZ2xlIGxpbmUgc3VtbWFyeSAoc2FtZSBzdHlsZSBhcyBsaXZlIHByZXZpZXcpXG5cdFx0Y29uc3Qgc3VtbWFyeUVsID0gdGhpcy5jb250ZXh0SW5kaWNhdG9yLmNyZWF0ZURpdih7IGNsczogJ25vdmEtY29udGV4dC1zdW1tYXJ5JyB9KTtcblx0XHRzdW1tYXJ5RWwuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXHRcdFx0d2lkdGg6IDEwMCU7XG5cdFx0XHRoZWlnaHQ6IDEwMCU7XG5cdFx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0XHRwb2ludGVyLWV2ZW50czogYXV0bztcblx0XHRgO1xuXHRcdFxuXHRcdGNvbnN0IHN1bW1hcnlUZXh0RWwgPSBzdW1tYXJ5RWwuY3JlYXRlU3Bhbih7IGNsczogJ25vdmEtY29udGV4dC1zdW1tYXJ5LXRleHQnIH0pO1xuXHRcdFxuXHRcdGNvbnN0IHRva2VuUGVyY2VudCA9IE1hdGgucm91bmQoKHRoaXMuY3VycmVudENvbnRleHQudG9rZW5Db3VudCAvIDgwMDApICogMTAwKTtcblx0XHRjb25zdCBkb2NOYW1lcyA9IGFsbERvY3MuZmlsdGVyKGRvYyA9PiBkb2M/LmZpbGU/LmJhc2VuYW1lKS5tYXAoZG9jID0+IGRvYy5maWxlLmJhc2VuYW1lKS5zbGljZSgwLCBpc01vYmlsZSA/IDEgOiAyKTtcblx0XHRjb25zdCBtb3JlQ291bnQgPSBhbGxEb2NzLmxlbmd0aCA+IChpc01vYmlsZSA/IDEgOiAyKSA/IGAgKyR7YWxsRG9jcy5sZW5ndGggLSAoaXNNb2JpbGUgPyAxIDogMil9YCA6ICcnO1xuXHRcdFxuXHRcdC8vIFNwbGl0IGludG8gZmlsZW5hbWUgcGFydCBhbmQgdG9rZW4gcGFydCB0byBlbnN1cmUgdG9rZW5zIGFyZSBhbHdheXMgdmlzaWJsZVxuXHRcdHN1bW1hcnlUZXh0RWwuc3R5bGUuY3NzVGV4dCA9ICdmb250LXdlaWdodDogNTAwOyBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7IGZsZXg6IDE7IHBvaW50ZXItZXZlbnRzOiBub25lOyBkaXNwbGF5OiBmbGV4OyBhbGlnbi1pdGVtczogY2VudGVyOyBnYXA6IDZweDsgbWluLXdpZHRoOiAwOyc7XG5cdFx0XG5cdFx0Ly8gQ3JlYXRlIGZpbGVuYW1lIHBhcnQgdGhhdCBjYW4gdHJ1bmNhdGVcblx0XHRjb25zdCBmaWxlbmFtZVBhcnRFbCA9IHN1bW1hcnlUZXh0RWwuY3JlYXRlU3BhbigpO1xuXHRcdGZpbGVuYW1lUGFydEVsLnN0eWxlLmNzc1RleHQgPSAnZGlzcGxheTogZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsgZ2FwOiA0cHg7IHdoaXRlLXNwYWNlOiBub3dyYXA7IG92ZXJmbG93OiBoaWRkZW47IHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzOyBtaW4td2lkdGg6IDA7IGZsZXg6IDE7Jztcblx0XHQvLyBDcmVhdGUgaWNvbiBhbmQgdGV4dCBhcyBzZXBhcmF0ZSBlbGVtZW50cyBmb3IgcHJvcGVyIGZsZXggYWxpZ25tZW50XG5cdFx0Y29uc3QgaWNvblNwYW4gPSBmaWxlbmFtZVBhcnRFbC5jcmVhdGVTcGFuKCk7XG5cdFx0aWNvblNwYW4uaW5uZXJIVE1MID0gdGhpcy5jcmVhdGVJbmxpbmVJY29uKCdib29rLW9wZW4nKTtcblx0XHRpY29uU3Bhbi5zdHlsZS5jc3NUZXh0ID0gJ2ZsZXgtc2hyaW5rOiAwOyBkaXNwbGF5OiBmbGV4OyBhbGlnbi1pdGVtczogY2VudGVyOyc7XG5cdFx0XG5cdFx0Y29uc3QgdGV4dFNwYW4gPSBmaWxlbmFtZVBhcnRFbC5jcmVhdGVTcGFuKCk7XG5cdFx0dGV4dFNwYW4udGV4dENvbnRlbnQgPSBgJHtkb2NOYW1lcy5qb2luKCcsICcpfSR7bW9yZUNvdW50fWA7XG5cdFx0dGV4dFNwYW4uc3R5bGUuY3NzVGV4dCA9ICdvdmVyZmxvdzogaGlkZGVuOyB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpczsgbWluLXdpZHRoOiAwOyc7XG5cdFx0XG5cdFx0Ly8gQ3JlYXRlIHRva2VuIHBhcnQgdGhhdCBhbHdheXMgc3RheXMgdmlzaWJsZVxuXHRcdGNvbnN0IHRva2VuUGFydEVsID0gc3VtbWFyeVRleHRFbC5jcmVhdGVTcGFuKCk7XG5cdFx0dG9rZW5QYXJ0RWwuc3R5bGUuY3NzVGV4dCA9ICd3aGl0ZS1zcGFjZTogbm93cmFwOyBmbGV4LXNocmluazogMDsgbWFyZ2luLWxlZnQ6IDhweDsnO1xuXHRcdGlmIChpc01vYmlsZSkge1xuXHRcdFx0dG9rZW5QYXJ0RWwudGV4dENvbnRlbnQgPSBgKCR7dG9rZW5QZXJjZW50fSUpYDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dG9rZW5QYXJ0RWwudGV4dENvbnRlbnQgPSBgKCR7dG9rZW5QZXJjZW50fSUgdG9rZW5zKWA7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIE1vYmlsZS1mcmllbmRseSBtb3JlIG1lbnUgaW5kaWNhdG9yXG5cdFx0Y29uc3QgZXhwYW5kSW5kaWNhdG9yRWwgPSBzdW1tYXJ5RWwuY3JlYXRlU3Bhbih7IGNsczogJ25vdmEtY29udGV4dC1leHBhbmQtaW5kaWNhdG9yJyB9KTtcblx0XHRleHBhbmRJbmRpY2F0b3JFbC5pbm5lckhUTUwgPSB0aGlzLmNyZWF0ZUlubGluZUljb24oJ21vcmUtaG9yaXpvbnRhbCcsIGlzTW9iaWxlID8gJzE2cHgnIDogJzE0cHgnKTsgLy8gTW9yZSBtZW51IGluZGljYXRvclxuXHRcdGV4cGFuZEluZGljYXRvckVsLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRjb2xvcjogdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KTtcblx0XHRcdGZvbnQtc2l6ZTogJHtpc01vYmlsZSA/ICcxNnB4JyA6ICcxNHB4J307XG5cdFx0XHRvcGFjaXR5OiAwLjg7XG5cdFx0XHRwYWRkaW5nOiAke2lzTW9iaWxlID8gJzhweCcgOiAnNHB4J307XG5cdFx0XHRtaW4td2lkdGg6ICR7aXNNb2JpbGUgPyAnNDRweCcgOiAnYXV0byd9O1xuXHRcdFx0dGV4dC1hbGlnbjogY2VudGVyO1xuXHRcdFx0Ym9yZGVyLXJhZGl1czogNHB4O1xuXHRcdFx0dHJhbnNpdGlvbjogYWxsIDAuMnM7XG5cdFx0XHRwb2ludGVyLWV2ZW50czogbm9uZTtcblx0XHRgO1xuXHRcdGV4cGFuZEluZGljYXRvckVsLnNldEF0dHIoJ3RpdGxlJywgJ1RhcCB0byBtYW5hZ2UgZG9jdW1lbnRzJyk7XG5cdFx0XG5cdFx0Ly8gVmlzdWFsIGZlZWRiYWNrIG9uIHRoZSB3aG9sZSBzdW1tYXJ5IGxpbmUgaW5zdGVhZCBvZiBqdXN0IHRoZSBpbmRpY2F0b3Jcblx0XHRpZiAoaXNNb2JpbGUpIHtcblx0XHRcdHN1bW1hcnlFbC5hZGRFdmVudExpc3RlbmVyKCd0b3VjaHN0YXJ0JywgKCkgPT4ge1xuXHRcdFx0XHRleHBhbmRJbmRpY2F0b3JFbC5zdHlsZS5iYWNrZ3JvdW5kID0gJ3JnYmEodmFyKC0taW50ZXJhY3RpdmUtYWNjZW50LXJnYiksIDAuMiknO1xuXHRcdFx0fSk7XG5cdFx0XHRzdW1tYXJ5RWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoKSA9PiB7XG5cdFx0XHRcdHRoaXMuYWRkVHJhY2tlZFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdGV4cGFuZEluZGljYXRvckVsLnN0eWxlLmJhY2tncm91bmQgPSAnbm9uZSc7XG5cdFx0XHRcdH0sIE5vdmFTaWRlYmFyVmlldy5IT1ZFUl9USU1FT1VUX01TKTtcblx0XHRcdH0pO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRzdW1tYXJ5RWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcblx0XHRcdFx0ZXhwYW5kSW5kaWNhdG9yRWwuc3R5bGUuYmFja2dyb3VuZCA9ICdyZ2JhKHZhcigtLWludGVyYWN0aXZlLWFjY2VudC1yZ2IpLCAwLjIpJztcblx0XHRcdH0pO1xuXHRcdFx0c3VtbWFyeUVsLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlbGVhdmUnLCAoKSA9PiB7XG5cdFx0XHRcdGV4cGFuZEluZGljYXRvckVsLnN0eWxlLmJhY2tncm91bmQgPSAnbm9uZSc7XG5cdFx0XHR9KTtcblx0XHR9XG5cblx0XHQvLyBFeHBhbmRlZCBzdGF0ZSAtIG1vYmlsZS1yZXNwb25zaXZlIG92ZXJsYXlcblx0XHRjb25zdCBleHBhbmRlZEVsID0gdGhpcy5jb250ZXh0SW5kaWNhdG9yLmNyZWF0ZURpdih7IGNsczogJ25vdmEtY29udGV4dC1leHBhbmRlZCcgfSk7XG5cdFx0ZXhwYW5kZWRFbC5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0ZGlzcGxheTogbm9uZTtcblx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRcdGJvdHRvbTogMTAwJTtcblx0XHRcdGxlZnQ6ICR7aXNNb2JpbGUgPyAnLThweCcgOiAnMCd9O1xuXHRcdFx0cmlnaHQ6ICR7aXNNb2JpbGUgPyAnLThweCcgOiAnMCd9O1xuXHRcdFx0YmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5KTtcblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkIHJnYmEodmFyKC0taW50ZXJhY3RpdmUtYWNjZW50LXJnYiksIDAuMik7XG5cdFx0XHRib3JkZXItcmFkaXVzOiA2cHg7XG5cdFx0XHRib3gtc2hhZG93OiAwICR7aXNNb2JpbGUgPyAnLTRweCAxNnB4JyA6ICctMnB4IDhweCd9IHJnYmEoMCwgMCwgMCwgJHtpc01vYmlsZSA/ICcwLjE1JyA6ICcwLjEnfSk7XG5cdFx0XHR6LWluZGV4OiAxMDAwO1xuXHRcdFx0bWFyZ2luLWJvdHRvbTogMnB4O1xuXHRcdFx0bWF4LWhlaWdodDogJHtpc01vYmlsZSA/ICc2MHZoJyA6ICcyMDBweCd9O1xuXHRcdFx0b3ZlcmZsb3cteTogYXV0bztcblx0XHRcdG1pbi13aWR0aDogJHtpc01vYmlsZSA/ICcxMDAlJyA6ICdhdXRvJ307XG5cdFx0YDtcblx0XHRcblx0XHQvLyBIZWFkZXIgZm9yIGV4cGFuZGVkIHN0YXRlIHdpdGggbW9iaWxlLW9wdGltaXplZCBjbGVhciBidXR0b25cblx0XHRjb25zdCBleHBhbmRlZEhlYWRlckVsID0gZXhwYW5kZWRFbC5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbnRleHQtZXhwYW5kZWQtaGVhZGVyJyB9KTtcblx0XHRleHBhbmRlZEhlYWRlckVsLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRcdGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2Vlbjtcblx0XHRcdHBhZGRpbmc6ICR7aXNNb2JpbGUgPyAnMTJweCAxNnB4JyA6ICc4cHggMTJweCd9O1xuXHRcdFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcblx0XHRcdGZvbnQtd2VpZ2h0OiA1MDA7XG5cdFx0XHRjb2xvcjogdmFyKC0tdGV4dC1ub3JtYWwpO1xuXHRcdFx0Zm9udC1zaXplOiAxZW07XG5cdFx0XHRtaW4taGVpZ2h0OiAke2lzTW9iaWxlID8gJzQ0cHgnIDogJ2F1dG8nfTtcblx0XHRgO1xuXHRcdFxuXHRcdGNvbnN0IGhlYWRlclRpdGxlRWwgPSBleHBhbmRlZEhlYWRlckVsLmNyZWF0ZVNwYW4oKTtcblx0XHRoZWFkZXJUaXRsZUVsLmlubmVySFRNTCA9IHRoaXMuY3JlYXRlSW5saW5lSWNvbignYm9vay1vcGVuJykgKyBgIERvY3VtZW50cyAoJHthbGxEb2NzLmxlbmd0aH0pYDtcblx0XHRoZWFkZXJUaXRsZUVsLnN0eWxlLmNzc1RleHQgPSAnZGlzcGxheTogZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsgZ2FwOiA2cHg7Jztcblx0XHRcblx0XHQvLyBDbGVhciBhbGwgYnV0dG9uIHVzaW5nIE9ic2lkaWFuIHRyYXNoIGljb25cblx0XHRjb25zdCBjbGVhckFsbEJ0bkNvbXBvbmVudCA9IG5ldyBCdXR0b25Db21wb25lbnQoZXhwYW5kZWRIZWFkZXJFbCk7XG5cdFx0Y2xlYXJBbGxCdG5Db21wb25lbnQuc2V0SWNvbigndHJhc2gtMicpXG5cdFx0XHQuc2V0VG9vbHRpcCgnQ2xlYXIgYWxsIGRvY3VtZW50cyBmcm9tIGNvbnRleHQnKVxuXHRcdFx0Lm9uQ2xpY2soYXN5bmMgKCkgPT4ge1xuXHRcdFx0XHRpZiAodGhpcy5jdXJyZW50RmlsZSkge1xuXHRcdFx0XHRcdHRoaXMubXVsdGlEb2NIYW5kbGVyLmNsZWFyUGVyc2lzdGVudENvbnRleHQodGhpcy5jdXJyZW50RmlsZS5wYXRoKTtcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnJlZnJlc2hDb250ZXh0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFxuXHRcdGNvbnN0IGNsZWFyQWxsQnRuID0gY2xlYXJBbGxCdG5Db21wb25lbnQuYnV0dG9uRWw7XG5cdFx0Y2xlYXJBbGxCdG4uYWRkQ2xhc3MoJ25vdmEtY29udGV4dC1jbGVhci1hbGwtYnRuJyk7XG5cdFx0Y2xlYXJBbGxCdG4uc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdGJhY2tncm91bmQ6IG5vbmU7XG5cdFx0XHRib3JkZXI6IDFweCBzb2xpZCB2YXIoLS10ZXh0LWZhaW50KTtcblx0XHRcdGNvbG9yOiB2YXIoLS10ZXh0LWZhaW50KTtcblx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHRcdHBhZGRpbmc6ICR7aXNNb2JpbGUgPyAnOHB4IDEycHgnIDogJzRweCA4cHgnfTtcblx0XHRcdGJvcmRlci1yYWRpdXM6IDRweDtcblx0XHRcdGZvbnQtc2l6ZTogMWVtO1xuXHRcdFx0dHJhbnNpdGlvbjogYWxsIDAuMnM7XG5cdFx0XHRtaW4td2lkdGg6ICR7aXNNb2JpbGUgPyAnNDRweCcgOiAnYXV0byd9O1xuXHRcdFx0bWluLWhlaWdodDogJHtpc01vYmlsZSA/ICc0NHB4JyA6ICdhdXRvJ307XG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdGA7XG5cdFx0XG5cdFx0Ly8gVG91Y2gtZnJpZW5kbHkgZmVlZGJhY2sgZm9yIGNsZWFyIGJ1dHRvblxuXHRcdGlmIChpc01vYmlsZSkge1xuXHRcdFx0Y2xlYXJBbGxCdG4uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsICgpID0+IHtcblx0XHRcdFx0Y2xlYXJBbGxCdG4uc3R5bGUuYmFja2dyb3VuZCA9ICd2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWVycm9yKSc7XG5cdFx0XHRcdGNsZWFyQWxsQnRuLnN0eWxlLmJvcmRlckNvbG9yID0gJ3ZhcigtLXRleHQtZXJyb3IpJztcblx0XHRcdFx0Y2xlYXJBbGxCdG4uc3R5bGUuY29sb3IgPSAndmFyKC0tdGV4dC1lcnJvciknO1xuXHRcdFx0fSk7XG5cdFx0XHRjbGVhckFsbEJ0bi5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsICgpID0+IHtcblx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0Y2xlYXJBbGxCdG4uc3R5bGUuYmFja2dyb3VuZCA9ICdub25lJztcblx0XHRcdFx0XHRjbGVhckFsbEJ0bi5zdHlsZS5ib3JkZXJDb2xvciA9ICd2YXIoLS10ZXh0LWZhaW50KSc7XG5cdFx0XHRcdFx0Y2xlYXJBbGxCdG4uc3R5bGUuY29sb3IgPSAndmFyKC0tdGV4dC1mYWludCknO1xuXHRcdFx0XHR9LCBOb3ZhU2lkZWJhclZpZXcuSE9WRVJfVElNRU9VVF9NUyk7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y2xlYXJBbGxCdG4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcblx0XHRcdFx0Y2xlYXJBbGxCdG4uc3R5bGUuYmFja2dyb3VuZCA9ICd2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWVycm9yKSc7XG5cdFx0XHRcdGNsZWFyQWxsQnRuLnN0eWxlLmJvcmRlckNvbG9yID0gJ3ZhcigtLXRleHQtZXJyb3IpJztcblx0XHRcdFx0Y2xlYXJBbGxCdG4uc3R5bGUuY29sb3IgPSAndmFyKC0tdGV4dC1lcnJvciknO1xuXHRcdFx0fSk7XG5cdFx0XHRjbGVhckFsbEJ0bi5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xuXHRcdFx0XHRjbGVhckFsbEJ0bi5zdHlsZS5iYWNrZ3JvdW5kID0gJ25vbmUnO1xuXHRcdFx0XHRjbGVhckFsbEJ0bi5zdHlsZS5ib3JkZXJDb2xvciA9ICd2YXIoLS10ZXh0LWZhaW50KSc7XG5cdFx0XHRcdGNsZWFyQWxsQnRuLnN0eWxlLmNvbG9yID0gJ3ZhcigtLXRleHQtZmFpbnQpJztcblx0XHRcdH0pO1xuXHRcdH1cblx0XHRcblx0XHQvLyBEb2N1bWVudCBsaXN0IGZvciBleHBhbmRlZCBzdGF0ZVxuXHRcdGNvbnN0IGRvY0xpc3RFbCA9IGV4cGFuZGVkRWwuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1jb250ZXh0LWRvYy1saXN0JyB9KTtcblx0XHRcblx0XHRhbGxEb2NzLmZpbHRlcihkb2MgPT4gZG9jPy5maWxlPy5iYXNlbmFtZSkuZm9yRWFjaCgoZG9jLCBpbmRleCkgPT4ge1xuXHRcdFx0Y29uc3QgZG9jSXRlbUVsID0gZG9jTGlzdEVsLmNyZWF0ZURpdih7IGNsczogJ25vdmEtY29udGV4dC1kb2MtaXRlbScgfSk7XG5cdFx0XHRkb2NJdGVtRWwuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRcdFx0anVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xuXHRcdFx0XHRwYWRkaW5nOiAke2lzTW9iaWxlID8gJzEycHggMTZweCcgOiAnOHB4IDEycHgnfTtcblx0XHRcdFx0Ym9yZGVyLWJvdHRvbTogJHtpbmRleCA8IGFsbERvY3MubGVuZ3RoIC0gMSA/ICcxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpJyA6ICdub25lJ307XG5cdFx0XHRcdHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4ycztcblx0XHRcdFx0bWluLWhlaWdodDogJHtpc01vYmlsZSA/ICc1NnB4JyA6ICdhdXRvJ307XG5cdFx0XHRgO1xuXHRcdFx0XG5cdFx0XHRjb25zdCBkb2NJbmZvRWwgPSBkb2NJdGVtRWwuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1jb250ZXh0LWRvYy1pbmZvJyB9KTtcblx0XHRcdGRvY0luZm9FbC5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdFx0XHRnYXA6ICR7aXNNb2JpbGUgPyAnMTJweCcgOiAnOHB4J307XG5cdFx0XHRcdGZsZXg6IDE7XG5cdFx0XHRcdG1pbi13aWR0aDogMDtcblx0XHRcdGA7XG5cdFx0XHRcblx0XHRcdGNvbnN0IGljb25FbCA9IGRvY0luZm9FbC5jcmVhdGVTcGFuKCk7XG5cdFx0XHRpY29uRWwuaW5uZXJIVE1MID0gdGhpcy5jcmVhdGVJbmxpbmVJY29uKCdmaWxlLXRleHQnKTtcblx0XHRcdGljb25FbC5zdHlsZS5jc3NUZXh0ID0gJ2Rpc3BsYXk6IGZsZXg7IGFsaWduLWl0ZW1zOiBjZW50ZXI7IGZvbnQtc2l6ZTogMWVtOyBmbGV4LXNocmluazogMDsnO1xuXHRcdFx0XG5cdFx0XHRjb25zdCBuYW1lRWwgPSBkb2NJbmZvRWwuY3JlYXRlU3Bhbih7IGNsczogJ25vdmEtY29udGV4dC1kb2MtbmFtZScgfSk7XG5cdFx0XHRjb25zdCBzdWZmaXggPSBkb2MucHJvcGVydHkgPyBgIyR7ZG9jLnByb3BlcnR5fWAgOiAnJztcblx0XHRcdG5hbWVFbC50ZXh0Q29udGVudCA9IGAke2RvYy5maWxlLmJhc2VuYW1lfSR7c3VmZml4fWA7XG5cdFx0XHRuYW1lRWwuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdFx0Zm9udC13ZWlnaHQ6IDQwMDtcblx0XHRcdFx0Y29sb3I6IHZhcigtLXRleHQtbm9ybWFsKTtcblx0XHRcdFx0dGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XG5cdFx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0XHRcdHdoaXRlLXNwYWNlOiBub3dyYXA7XG5cdFx0XHRcdGZvbnQtc2l6ZTogMWVtO1xuXHRcdFx0XHRsaW5lLWhlaWdodDogMS40O1xuXHRcdFx0XHRmbGV4OiAxO1xuXHRcdFx0XHRtaW4td2lkdGg6IDA7XG5cdFx0XHRcdG1hcmdpbi1yaWdodDogOHB4O1xuXHRcdFx0YDtcblx0XHRcdG5hbWVFbC5zZXRBdHRyKCd0aXRsZScsIGAke2RvYy5maWxlLnBhdGh9IChyZWFkLW9ubHkgZm9yIGVkaXRpbmcpYCk7XG5cdFx0XHRcblx0XHRcdC8vIEFkZCByZWFkLW9ubHkgaW5kaWNhdG9yXG5cdFx0XHRjb25zdCByZWFkT25seUVsID0gZG9jSW5mb0VsLmNyZWF0ZVNwYW4oeyBjbHM6ICdub3ZhLWNvbnRleHQtcmVhZG9ubHknIH0pO1xuXHRcdFx0cmVhZE9ubHlFbC50ZXh0Q29udGVudCA9ICdyZWFkLW9ubHknO1xuXHRcdFx0cmVhZE9ubHlFbC5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0XHRmb250LXNpemU6IDAuNzVlbTtcblx0XHRcdFx0Y29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xuXHRcdFx0XHRiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKTtcblx0XHRcdFx0cGFkZGluZzogMXB4IDRweDtcblx0XHRcdFx0Ym9yZGVyLXJhZGl1czogM3B4O1xuXHRcdFx0XHRmb250LXdlaWdodDogNTAwO1xuXHRcdFx0XHR0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlO1xuXHRcdFx0XHRsZXR0ZXItc3BhY2luZzogMC41cHg7XG5cdFx0XHRcdGZsZXgtc2hyaW5rOiAwO1xuXHRcdFx0XHRtYXJnaW4tcmlnaHQ6IDhweDtcblx0XHRcdGA7XG5cdFx0XHRcblx0XHRcdC8vIE1vYmlsZS1vcHRpbWl6ZWQgcmVtb3ZlIGJ1dHRvbiB3aXRoIHNpbXBsZSByZWxpYWJsZSBpY29uXG5cdFx0XHRjb25zdCByZW1vdmVCdG4gPSBkb2NJdGVtRWwuY3JlYXRlRWwoJ2J1dHRvbicsIHsgY2xzOiAnbm92YS1jb250ZXh0LWRvYy1yZW1vdmUnIH0pO1xuXHRcdFx0cmVtb3ZlQnRuLnRleHRDb250ZW50ID0gJ1x1MDBENyc7XG5cdFx0XHRyZW1vdmVCdG4uc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdFx0YmFja2dyb3VuZDogbm9uZTtcblx0XHRcdFx0Ym9yZGVyOiBub25lO1xuXHRcdFx0XHRjb2xvcjogdmFyKC0tdGV4dC1mYWludCk7XG5cdFx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHRcdFx0d2lkdGg6ICR7aXNNb2JpbGUgPyAnNDRweCcgOiAnMjBweCd9O1xuXHRcdFx0XHRoZWlnaHQ6ICR7aXNNb2JpbGUgPyAnNDRweCcgOiAnMjBweCd9O1xuXHRcdFx0XHRib3JkZXItcmFkaXVzOiA0cHg7XG5cdFx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdFx0XHRmb250LXNpemU6ICR7aXNNb2JpbGUgPyAnMThweCcgOiAnMTRweCd9O1xuXHRcdFx0XHR0cmFuc2l0aW9uOiBhbGwgMC4ycztcblx0XHRcdFx0Zm9udC13ZWlnaHQ6IG5vcm1hbDtcblx0XHRcdFx0bGluZS1oZWlnaHQ6IDE7XG5cdFx0XHRgO1xuXHRcdFx0cmVtb3ZlQnRuLnNldEF0dHIoJ3RpdGxlJywgYFJlbW92ZSAke2RvYy5maWxlLmJhc2VuYW1lfWApO1xuXHRcdFx0XG5cdFx0XHRyZW1vdmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZTogRXZlbnQpID0+IHtcblx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0aWYgKHRoaXMuY3VycmVudEZpbGUpIHtcblx0XHRcdFx0XHR0aGlzLm11bHRpRG9jSGFuZGxlci5yZW1vdmVQZXJzaXN0ZW50RG9jKHRoaXMuY3VycmVudEZpbGUucGF0aCwgZG9jLmZpbGUucGF0aCk7XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5yZWZyZXNoQ29udGV4dCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblx0XHRcdFxuXHRcdFx0Ly8gUGxhdGZvcm0tc3BlY2lmaWMgaW50ZXJhY3Rpb24gZmVlZGJhY2tcblx0XHRcdGlmIChpc01vYmlsZSkge1xuXHRcdFx0XHRyZW1vdmVCdG4uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsICgpID0+IHtcblx0XHRcdFx0XHRyZW1vdmVCdG4uc3R5bGUuYmFja2dyb3VuZCA9ICd2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWVycm9yKSc7XG5cdFx0XHRcdFx0cmVtb3ZlQnRuLnN0eWxlLmNvbG9yID0gJ3ZhcigtLXRleHQtZXJyb3IpJztcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZW1vdmVCdG4uYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hlbmQnLCAoKSA9PiB7XG5cdFx0XHRcdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHRcdFx0XHRyZW1vdmVCdG4uc3R5bGUuYmFja2dyb3VuZCA9ICdub25lJztcblx0XHRcdFx0XHRcdHJlbW92ZUJ0bi5zdHlsZS5jb2xvciA9ICd2YXIoLS10ZXh0LWZhaW50KSc7XG5cdFx0XHRcdFx0fSwgTm92YVNpZGViYXJWaWV3LkhPVkVSX1RJTUVPVVRfTVMpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIFRvdWNoIGZlZWRiYWNrIGZvciBkb2N1bWVudCBpdGVtc1xuXHRcdFx0XHRkb2NJdGVtRWwuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsICgpID0+IHtcblx0XHRcdFx0XHRkb2NJdGVtRWwuc3R5bGUuYmFja2dyb3VuZCA9ICd2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKSc7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRcblx0XHRcdFx0ZG9jSXRlbUVsLmFkZEV2ZW50TGlzdGVuZXIoJ3RvdWNoZW5kJywgKCkgPT4ge1xuXHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0ZG9jSXRlbUVsLnN0eWxlLmJhY2tncm91bmQgPSAndHJhbnNwYXJlbnQnO1xuXHRcdFx0XHRcdH0sIE5vdmFTaWRlYmFyVmlldy5IT1ZFUl9USU1FT1VUX01TKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZW1vdmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcblx0XHRcdFx0XHRyZW1vdmVCdG4uc3R5bGUuYmFja2dyb3VuZCA9ICd2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWVycm9yKSc7XG5cdFx0XHRcdFx0cmVtb3ZlQnRuLnN0eWxlLmNvbG9yID0gJ3ZhcigtLXRleHQtZXJyb3IpJztcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRyZW1vdmVCdG4uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcblx0XHRcdFx0XHRyZW1vdmVCdG4uc3R5bGUuYmFja2dyb3VuZCA9ICdub25lJztcblx0XHRcdFx0XHRyZW1vdmVCdG4uc3R5bGUuY29sb3IgPSAndmFyKC0tdGV4dC1mYWludCknO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0XG5cdFx0XHRcdGRvY0l0ZW1FbC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4ge1xuXHRcdFx0XHRcdGRvY0l0ZW1FbC5zdHlsZS5iYWNrZ3JvdW5kID0gJ3ZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItaG92ZXIpJztcblx0XHRcdFx0fSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRkb2NJdGVtRWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcblx0XHRcdFx0XHRkb2NJdGVtRWwuc3R5bGUuYmFja2dyb3VuZCA9ICd0cmFuc3BhcmVudCc7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gQ2xpY2sgdG8gZXhwYW5kIG1hbmFnZW1lbnQgb3ZlcmxheVxuXHRcdGxldCBpc0V4cGFuZGVkID0gZmFsc2U7XG5cdFx0XG5cdFx0Y29uc3QgdG9nZ2xlRXhwYW5kZWQgPSAoZTogTW91c2VFdmVudCkgPT4ge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdGlzRXhwYW5kZWQgPSAhaXNFeHBhbmRlZDtcblx0XHRcdFxuXHRcdFx0aWYgKGlzRXhwYW5kZWQpIHtcblx0XHRcdFx0ZXhwYW5kZWRFbC5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0XHRcdFx0dGhpcy5jb250ZXh0SW5kaWNhdG9yLnN0eWxlLnpJbmRleCA9ICcxMDAxJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGV4cGFuZGVkRWwuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdFx0dGhpcy5jb250ZXh0SW5kaWNhdG9yLnN0eWxlLnpJbmRleCA9ICdhdXRvJztcblx0XHRcdH1cblx0XHR9O1xuXHRcdFxuXHRcdC8vIENsaWNrIG9uIHRoZSBlbnRpcmUgc3VtbWFyeSBsaW5lIHRvIGV4cGFuZFxuXHRcdHN1bW1hcnlFbC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRvZ2dsZUV4cGFuZGVkKTtcblx0XHRcblx0XHQvLyBDbG9zZSB3aGVuIGNsaWNraW5nIG91dHNpZGVcblx0XHRjb25zdCBjbG9zZUhhbmRsZXI6IEV2ZW50TGlzdGVuZXIgPSAoZTogRXZlbnQpID0+IHtcblx0XHRcdGlmIChpc0V4cGFuZGVkICYmICF0aGlzLmNvbnRleHRJbmRpY2F0b3IuY29udGFpbnMoZS50YXJnZXQgYXMgTm9kZSkpIHtcblx0XHRcdFx0aXNFeHBhbmRlZCA9IGZhbHNlO1xuXHRcdFx0XHRleHBhbmRlZEVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHRcdHRoaXMuY29udGV4dEluZGljYXRvci5zdHlsZS56SW5kZXggPSAnYXV0byc7XG5cdFx0XHR9XG5cdFx0fTtcblx0XHRcblx0XHR0aGlzLmFkZFRyYWNrZWRFdmVudExpc3RlbmVyKGRvY3VtZW50LCAnY2xpY2snLCBjbG9zZUhhbmRsZXIpO1xuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyByZWZyZXNoQ29udGV4dCgpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRpZiAodGhpcy5jdXJyZW50RmlsZSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gRG9uJ3QgY2FsbCBidWlsZENvbnRleHQgd2l0aCBlbXB0eSBtZXNzYWdlIGFzIGl0IGNhbiBpbnRlcmZlcmUgd2l0aCBwZXJzaXN0ZW50IGNvbnRleHRcblx0XHRcdFx0Ly8gSW5zdGVhZCwganVzdCBnZXQgcGVyc2lzdGVudCBjb250ZXh0IGFuZCBidWlsZCBhIG1pbmltYWwgY29udGV4dCBvYmplY3QgZm9yIFVJIGRpc3BsYXlcblx0XHRcdFx0Y29uc3QgcGVyc2lzdGVudERvY3MgPSB0aGlzLm11bHRpRG9jSGFuZGxlci5nZXRQZXJzaXN0ZW50Q29udGV4dCh0aGlzLmN1cnJlbnRGaWxlLnBhdGgpIHx8IFtdO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYgKHBlcnNpc3RlbnREb2NzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHQvLyBCdWlsZCBhIG1pbmltYWwgY29udGV4dCBvYmplY3QgZm9yIFVJIGRpc3BsYXkgb25seVxuXHRcdFx0XHRcdHRoaXMuY3VycmVudENvbnRleHQgPSB7XG5cdFx0XHRcdFx0XHRwZXJzaXN0ZW50RG9jczogcGVyc2lzdGVudERvY3MsXG5cdFx0XHRcdFx0XHRjb250ZXh0U3RyaW5nOiAnJywgLy8gTm90IG5lZWRlZCBmb3IgVUlcblx0XHRcdFx0XHRcdHRva2VuQ291bnQ6IDAsIC8vIE5vdCBuZWVkZWQgZm9yIFVJIHJlZnJlc2hcblx0XHRcdFx0XHRcdGlzTmVhckxpbWl0OiBmYWxzZVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5jdXJyZW50Q29udGV4dCA9IG51bGw7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdHRoaXMudXBkYXRlQ29udGV4dEluZGljYXRvcigpO1xuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0Ly8gSGFuZGxlIGNvbnRleHQgYnVpbGQgZmFpbHVyZXMgZ3JhY2VmdWxseVxuXHRcdFx0XHR0aGlzLmN1cnJlbnRDb250ZXh0ID0gbnVsbDtcblx0XHRcdFx0dGhpcy51cGRhdGVDb250ZXh0SW5kaWNhdG9yKCk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIE5vIGN1cnJlbnQgZmlsZSAtIGNsZWFyIGNvbnRleHRcblx0XHRcdHRoaXMuY3VycmVudENvbnRleHQgPSBudWxsO1xuXHRcdFx0dGhpcy51cGRhdGVDb250ZXh0SW5kaWNhdG9yKCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBhc3luYyBoYW5kbGVTZW5kKG1lc3NhZ2U/OiBzdHJpbmcpIHtcblx0XHQvLyBHZXQgbWVzc2FnZSBmcm9tIHBhcmFtZXRlciBvciBmcm9tIGlucHV0IGhhbmRsZXJcblx0XHRjb25zdCBtZXNzYWdlVGV4dCA9IG1lc3NhZ2UgfHwgdGhpcy5pbnB1dEhhbmRsZXIuZ2V0VmFsdWUoKS50cmltKCk7XG5cdFx0aWYgKCFtZXNzYWdlVGV4dCkgcmV0dXJuO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgTm92YSBpcyBlbmFibGVkIGFuZCBhIHByb3ZpZGVyIGlzIGF2YWlsYWJsZVxuXHRcdGNvbnN0IGN1cnJlbnRQcm92aWRlclR5cGUgPSBhd2FpdCB0aGlzLnBsdWdpbi5haVByb3ZpZGVyTWFuYWdlci5nZXRDdXJyZW50UHJvdmlkZXJUeXBlKCk7XG5cdFx0aWYgKCFjdXJyZW50UHJvdmlkZXJUeXBlKSB7XG5cdFx0XHR0aGlzLmFkZEVycm9yTWVzc2FnZSh0aGlzLmNyZWF0ZUljb25NZXNzYWdlKCdhbGVydC1jaXJjbGUnLCAnTm92YSBpcyBkaXNhYmxlZCBvciBubyBBSSBwcm92aWRlciBpcyBhdmFpbGFibGUuIFBsZWFzZSBjb25maWd1cmUgYW4gQUkgcHJvdmlkZXIgaW4gc2V0dGluZ3MuJykpO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENoZWNrIGZvciBjb21tYW5kIHN5c3RlbSBmZWF0dXJlIGF2YWlsYWJpbGl0eVxuXHRcdGlmIChtZXNzYWdlVGV4dC5zdGFydHNXaXRoKCc6JykpIHtcblx0XHRcdGNvbnN0IGNvbW1hbmRSZXN1bHQgPSBhd2FpdCB0aGlzLmhhbmRsZUNvbG9uQ29tbWFuZChtZXNzYWdlVGV4dCk7XG5cdFx0XHRpZiAoY29tbWFuZFJlc3VsdCkge1xuXHRcdFx0XHR0aGlzLmlucHV0SGFuZGxlci5zZXRWYWx1ZSgnJyk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiBtdWx0aS1kb2MgY29udGV4dCBmZWF0dXJlIGlzIGVuYWJsZWQgYW5kIHBhcnNlIHJlZmVyZW5jZXNcblx0XHRsZXQgcHJvY2Vzc2VkTWVzc2FnZSA9IG1lc3NhZ2VUZXh0O1xuXHRcdGxldCBtdWx0aURvY0NvbnRleHQ6IE11bHRpRG9jQ29udGV4dCB8IG51bGwgPSBudWxsO1xuXHRcdFxuXHRcdGlmICh0aGlzLmN1cnJlbnRGaWxlKSB7XG5cdFx0XHQvLyBDaGVjayBmb3IgZWFybHkgYWNjZXNzXG5cdFx0XHRpZiAoIXRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyLmlzRmVhdHVyZUVuYWJsZWQoJ211bHRpLWRvYy1jb250ZXh0JykpIHtcblx0XHRcdFx0aWYgKG1lc3NhZ2VUZXh0LmluY2x1ZGVzKCdbWycpKSB7XG5cdFx0XHRcdFx0dGhpcy5hZGRFcnJvck1lc3NhZ2UoJ011bHRpLWRvY3VtZW50IGNvbnRleHQgaXMgY3VycmVudGx5IGluIGVhcmx5IGFjY2VzcyBmb3IgU3VwZXJub3ZhIHN1cHBvcnRlcnMuIEF2YWlsYWJsZSB0byBhbGwgdXNlcnMgQXVndXN0IDE1LCAyMDI1LicpO1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gUGFyc2UgYW5kIGJ1aWxkIGNvbnRleHRcblx0XHRcdFx0Y29uc3QgY29udGV4dFJlc3VsdCA9IGF3YWl0IHRoaXMubXVsdGlEb2NIYW5kbGVyLmJ1aWxkQ29udGV4dChtZXNzYWdlVGV4dCwgdGhpcy5jdXJyZW50RmlsZSk7XG5cdFx0XHRcdHByb2Nlc3NlZE1lc3NhZ2UgPSBjb250ZXh0UmVzdWx0LmNsZWFuZWRNZXNzYWdlO1xuXHRcdFx0XHRtdWx0aURvY0NvbnRleHQgPSBjb250ZXh0UmVzdWx0LmNvbnRleHQ7XG5cdFx0XHRcdHRoaXMuY3VycmVudENvbnRleHQgPSBtdWx0aURvY0NvbnRleHQ7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBVcGRhdGUgVUkgaW5kaWNhdG9yXG5cdFx0XHRcdHRoaXMudXBkYXRlQ29udGV4dEluZGljYXRvcigpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gQ2hlY2sgaWYgbWVzc2FnZSBpcyBqdXN0IGRvY3VtZW50IHJlZmVyZW5jZXMgKGNvbnRleHQtb25seSBtb2RlKVxuXHRcdFx0XHQvLyBTaW5jZSBhbGwgZG9jcyBhcmUgbm93IHBlcnNpc3RlbnQsIGNoZWNrIGlmIHdlIGhhdmUgbmV3IGRvY3MgYW5kIGVtcHR5IG1lc3NhZ2Vcblx0XHRcdFx0Y29uc3QgcHJldmlvdXNQZXJzaXN0ZW50Q291bnQgPSB0aGlzLmN1cnJlbnRDb250ZXh0Py5wZXJzaXN0ZW50RG9jcz8ubGVuZ3RoIHx8IDA7XG5cdFx0XHRcdGNvbnN0IGN1cnJlbnRQZXJzaXN0ZW50Q291bnQgPSBtdWx0aURvY0NvbnRleHQ/LnBlcnNpc3RlbnREb2NzPy5sZW5ndGggfHwgMDtcblx0XHRcdFx0Y29uc3QgaGFzTmV3RG9jcyA9IGN1cnJlbnRQZXJzaXN0ZW50Q291bnQgPiBwcmV2aW91c1BlcnNpc3RlbnRDb3VudDtcblx0XHRcdFx0Y29uc3QgaXNDb250ZXh0T25seU1lc3NhZ2UgPSBwcm9jZXNzZWRNZXNzYWdlLnRyaW0oKS5sZW5ndGggPT09IDAgJiYgaGFzTmV3RG9jcztcblx0XHRcdFx0XG5cdFx0XHRcdGlmIChpc0NvbnRleHRPbmx5TWVzc2FnZSkge1xuXHRcdFx0XHRcdC8vIEhhbmRsZSBjb250ZXh0LW9ubHkgY29tbWFuZHMgLSBzaG93IG5ld2x5IGFkZGVkIGRvY3VtZW50c1xuXHRcdFx0XHRcdGNvbnN0IG5ld0RvY3NDb3VudCA9IGN1cnJlbnRQZXJzaXN0ZW50Q291bnQgLSBwcmV2aW91c1BlcnNpc3RlbnRDb3VudDtcblx0XHRcdFx0XHRpZiAobmV3RG9jc0NvdW50ID4gMCAmJiBtdWx0aURvY0NvbnRleHQ/LnBlcnNpc3RlbnREb2NzICYmIG11bHRpRG9jQ29udGV4dC5wZXJzaXN0ZW50RG9jcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIG5ld2x5IGFkZGVkIGRvY3VtZW50cyAobGFzdCBOIGRvY3VtZW50cylcblx0XHRcdFx0XHRcdGNvbnN0IG5ld0RvY3MgPSBtdWx0aURvY0NvbnRleHQucGVyc2lzdGVudERvY3Muc2xpY2UoLW5ld0RvY3NDb3VudCk7XG5cdFx0XHRcdFx0XHRjb25zdCBkb2NOYW1lcyA9IG5ld0RvY3MuZmlsdGVyKGRvYyA9PiBkb2M/LmZpbGU/LmJhc2VuYW1lKS5tYXAoZG9jID0+IGRvYy5maWxlLmJhc2VuYW1lKS5qb2luKCcsICcpO1xuXHRcdFx0XHRcdFx0aWYgKGRvY05hbWVzKSB7XG5cdFx0XHRcdFx0XHRcdHRoaXMuYWRkU3VjY2Vzc01lc3NhZ2UodGhpcy5jcmVhdGVJY29uTWVzc2FnZSgnY2hlY2stY2lyY2xlJywgYEFkZGVkICR7bmV3RG9jc0NvdW50fSBkb2N1bWVudCR7bmV3RG9jc0NvdW50ICE9PSAxID8gJ3MnIDogJyd9IHRvIHBlcnNpc3RlbnQgY29udGV4dDogJHtkb2NOYW1lc31gKSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIENsZWFyIGlucHV0IGFuZCB1cGRhdGUgY29udGV4dCBpbmRpY2F0b3Jcblx0XHRcdFx0XHR0aGlzLmlucHV0SGFuZGxlci5zZXRWYWx1ZSgnJyk7XG5cdFx0XHRcdFx0dGhpcy51cGRhdGVDb250ZXh0SW5kaWNhdG9yKCk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gSGlkZSBjb250ZXh0IHByZXZpZXcgc2luY2Ugd2UncmUgZG9uZVxuXHRcdFx0XHRcdGlmICh0aGlzLmNvbnRleHRQcmV2aWV3KSB7XG5cdFx0XHRcdFx0XHR0aGlzLmNvbnRleHRQcmV2aWV3LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXHRcdFx0XHRcblx0XHRcdFx0Ly8gU2hvdyBjb250ZXh0IGNvbmZpcm1hdGlvbiBpZiBkb2N1bWVudHMgd2VyZSBpbmNsdWRlZCBpbiBhIHJlZ3VsYXIgbWVzc2FnZVxuXHRcdFx0XHRpZiAobXVsdGlEb2NDb250ZXh0Py5wZXJzaXN0ZW50RG9jcz8ubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdGNvbnN0IGFsbERvY3MgPSBtdWx0aURvY0NvbnRleHQucGVyc2lzdGVudERvY3M7XG5cdFx0XHRcdFx0Y29uc3QgZG9jTmFtZXMgPSBhbGxEb2NzLmZpbHRlcihkb2MgPT4gZG9jPy5maWxlPy5iYXNlbmFtZSkubWFwKGRvYyA9PiBkb2MuZmlsZS5iYXNlbmFtZSkuam9pbignLCAnKTtcblx0XHRcdFx0XHRpZiAoZG9jTmFtZXMgJiYgYWxsRG9jcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0XHRjb25zdCB0b2tlbkluZm8gPSBtdWx0aURvY0NvbnRleHQudG9rZW5Db3VudCA+IDAgPyBgICh+JHttdWx0aURvY0NvbnRleHQudG9rZW5Db3VudH0gdG9rZW5zKWAgOiAnJztcblx0XHRcdFx0XHRcdGNvbnN0IGN1cnJlbnRGaWxlID0gdGhpcy5jdXJyZW50RmlsZT8uYmFzZW5hbWUgfHwgJ2N1cnJlbnQgZmlsZSc7XG5cdFx0XHRcdFx0XHR0aGlzLmFkZFN1Y2Nlc3NNZXNzYWdlKGBcdTI3MTMgSW5jbHVkZWQgJHthbGxEb2NzLmxlbmd0aH0gZG9jdW1lbnQke2FsbERvY3MubGVuZ3RoICE9PSAxID8gJ3MnIDogJyd9IGluIGNvbnRleHQ6ICR7ZG9jTmFtZXN9JHt0b2tlbkluZm99LiBDb250ZXh0IGRvY3VtZW50cyBhcmUgcmVhZC1vbmx5OyBlZGl0IGNvbW1hbmRzIHdpbGwgb25seSBtb2RpZnkgJHtjdXJyZW50RmlsZX0uYCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBDaGVjayB0b2tlbiBsaW1pdFxuXHRcdFx0XHRpZiAobXVsdGlEb2NDb250ZXh0Py5pc05lYXJMaW1pdCkge1xuXHRcdFx0XHRcdG5ldyBOb3RpY2UoJ1x1MjZBMFx1RkUwRiBBcHByb2FjaGluZyB0b2tlbiBsaW1pdC4gQ29uc2lkZXIgcmVtb3Zpbmcgc29tZSBkb2N1bWVudHMgZnJvbSBjb250ZXh0LicsIE5vdmFTaWRlYmFyVmlldy5OT1RJQ0VfRFVSQVRJT05fTVMpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQ2xlYXIgaW5wdXQgYW5kIFVJIHN0YXRlIGZpcnN0XG5cdFx0dGhpcy5pbnB1dEhhbmRsZXIuc2V0VmFsdWUoJycpO1xuXHRcdFxuXHRcdC8vIEhpZGUgY29udGV4dCBwcmV2aWV3IHNpbmNlIHdlJ3JlIHNlbmRpbmcgdGhlIG1lc3NhZ2Vcblx0XHRpZiAodGhpcy5jb250ZXh0UHJldmlldykge1xuXHRcdFx0dGhpcy5jb250ZXh0UHJldmlldy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdH1cblx0XHRcblx0XHQvLyBEaXNhYmxlIHNlbmQgYnV0dG9uIGR1cmluZyBwcm9jZXNzaW5nXG5cdFx0Y29uc3Qgc2VuZEJ1dHRvbiA9ICh0aGlzLmlucHV0SGFuZGxlciBhcyBhbnkpLnNlbmRCdXR0b247XG5cdFx0aWYgKHNlbmRCdXR0b24pIHNlbmRCdXR0b24uc2V0RGlzYWJsZWQodHJ1ZSk7XG5cblx0XHR0cnkge1xuXHRcdFx0Y29uc29sZS5sb2coJ1x1RDgzRFx1REU4MCBDSEFUIElOUFVUIEhBTkRMSU5HOicsIHsgbWVzc2FnZVRleHQgfSk7XG5cdFx0XHRcblx0XHRcdC8vIFN0b3JlIHVzZXIgbWVzc2FnZSBpbiBjb252ZXJzYXRpb24gKHdpbGwgYmUgcmVzdG9yZWQgdmlhIGxvYWRDb252ZXJzYXRpb25IaXN0b3J5KVxuXHRcdFx0Y29uc3QgYWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRpZiAoYWN0aXZlRmlsZSkge1xuXHRcdFx0XHRjb25zb2xlLmxvZygnXHVEODNEXHVEQ0JFIEFib3V0IHRvIHBlcnNpc3QgdXNlciBtZXNzYWdlOicsIHsgZmlsZTogYWN0aXZlRmlsZS5wYXRoLCBtZXNzYWdlVGV4dCB9KTtcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uY29udmVyc2F0aW9uTWFuYWdlci5hZGRVc2VyTWVzc2FnZShhY3RpdmVGaWxlLCBtZXNzYWdlVGV4dCwgbnVsbCBhcyBhbnkpO1xuXHRcdFx0XHRcblx0XHRcdFx0Y29uc29sZS5sb2coJ1x1RDgzRFx1RENGQSBBYm91dCB0byBkaXNwbGF5IHVzZXIgbWVzc2FnZSBpbiBVSScpO1xuXHRcdFx0XHQvLyBBZGQgdXNlciBtZXNzYWdlIHRvIFVJIGltbWVkaWF0ZWx5IGFmdGVyIHBlcnNpc3RlbmNlXG5cdFx0XHRcdHRoaXMuYWRkTWVzc2FnZSgndXNlcicsIG1lc3NhZ2VUZXh0KTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly8gQWRkIGxvYWRpbmcgaW5kaWNhdG9yIHdpdGggYW5pbWF0ZWQgbm92YVxuXHRcdFx0Y29uc3QgbG9hZGluZ0VsID0gdGhpcy5jaGF0Q29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ25vdmEtbG9hZGluZycgfSk7XG5cdFx0XHRsb2FkaW5nRWwuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdFx0cGFkZGluZzogMTJweCAxNnB4O1xuXHRcdFx0XHRiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpO1xuXHRcdFx0XHRib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG5cdFx0XHRcdGJvcmRlci1yYWRpdXM6IDEycHg7XG5cdFx0XHRcdG1hcmdpbi1ib3R0b206IDhweDtcblx0XHRcdFx0bWF4LXdpZHRoOiA4MCU7XG5cdFx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0XHRcdGdhcDogMTBweDtcblx0XHRcdGA7XG5cdFx0XHRcblx0XHRcdC8vIENyZWF0ZSBhbmltYXRlZCBub3ZhIGJ1cnN0XG5cdFx0XHRjb25zdCBub3ZhQ29udGFpbmVyID0gbG9hZGluZ0VsLmNyZWF0ZURpdih7IGNsczogJ25vdmEtYnVyc3QtY29udGFpbmVyJyB9KTtcblx0XHRcdG5vdmFDb250YWluZXIuaW5uZXJIVE1MID0gYFxuXHRcdFx0XHQ8ZGl2IGNsYXNzPVwibm92YS1idXJzdFwiPlxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJub3ZhLWNvcmVcIj48L2Rpdj5cblx0XHRcdFx0XHQ8ZGl2IGNsYXNzPVwibm92YS1yaW5nIG5vdmEtcmluZy0xXCI+PC9kaXY+XG5cdFx0XHRcdFx0PGRpdiBjbGFzcz1cIm5vdmEtcmluZyBub3ZhLXJpbmctMlwiPjwvZGl2PlxuXHRcdFx0XHRcdDxkaXYgY2xhc3M9XCJub3ZhLXJpbmcgbm92YS1yaW5nLTNcIj48L2Rpdj5cblx0XHRcdFx0PC9kaXY+XG5cdFx0XHRgO1xuXHRcdFx0XG5cdFx0XHQvLyBVc2UgQUkgdG8gY2xhc3NpZnkgdGhlIHVzZXIncyBpbnRlbnQgZmlyc3QgdG8gZ2V0IGNvbnRleHR1YWwgcGhyYXNlXG5cdFx0XHRjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHRcdGNvbnN0IHNlbGVjdGVkVGV4dCA9IGFjdGl2ZVZpZXc/LmVkaXRvcj8uZ2V0U2VsZWN0aW9uKCk7XG5cdFx0XHRjb25zdCBoYXNTZWxlY3Rpb24gPSAhIShzZWxlY3RlZFRleHQgJiYgc2VsZWN0ZWRUZXh0LnRyaW0oKS5sZW5ndGggPiAwKTtcblx0XHRcdGNvbnN0IGludGVudCA9IGF3YWl0IHRoaXMucGx1Z2luLmFpSW50ZW50Q2xhc3NpZmllci5jbGFzc2lmeUludGVudChwcm9jZXNzZWRNZXNzYWdlLCBoYXNTZWxlY3Rpb24pO1xuXHRcdFx0XG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBjb250ZXh0dWFsIHRoaW5raW5nIHBocmFzZVxuXHRcdFx0bGV0IGNvbnRleHR1YWxDb21tYW5kOiBFZGl0Q29tbWFuZCB8IHVuZGVmaW5lZDtcblx0XHRcdGlmIChpbnRlbnQgPT09ICdNRVRBREFUQScgfHwgaW50ZW50ID09PSAnQ09OVEVOVCcpIHtcblx0XHRcdFx0Y29udGV4dHVhbENvbW1hbmQgPSB0aGlzLnBsdWdpbi5jb21tYW5kUGFyc2VyLnBhcnNlQ29tbWFuZChwcm9jZXNzZWRNZXNzYWdlKTtcblx0XHRcdH1cblx0XHRcdGNvbnN0IGluaXRpYWxQaHJhc2UgPSB0aGlzLmdldENvbnRleHR1YWxUaGlua2luZ1BocmFzZShjb250ZXh0dWFsQ29tbWFuZCwgcHJvY2Vzc2VkTWVzc2FnZSk7XG5cdFx0XHRcblx0XHRcdGNvbnN0IGxvYWRpbmdUZXh0RWwgPSBsb2FkaW5nRWwuY3JlYXRlU3Bhbih7IHRleHQ6IGluaXRpYWxQaHJhc2UgfSk7XG5cdFx0XHRsb2FkaW5nVGV4dEVsLnN0eWxlLmNzc1RleHQgPSAnY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpOyBmb250LXNpemU6IDAuOWVtOyc7XG5cdFx0XHRcblx0XHRcdC8vIFN0YXJ0IHBocmFzZSByb3RhdGlvbiBhbmltYXRpb25cblx0XHRcdHRoaXMuc3RhcnRUaGlua2luZ1BocmFzZVJvdGF0aW9uKGxvYWRpbmdUZXh0RWwsIGNvbnRleHR1YWxDb21tYW5kLCBwcm9jZXNzZWRNZXNzYWdlKTtcblxuXHRcdFx0Ly8gTWVzc2FnZSBhbHJlYWR5IHN0b3JlZCBpbiBjb252ZXJzYXRpb24gbWFuYWdlciBhYm92ZVxuXG5cdFx0XHRsZXQgcmVzcG9uc2U6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXHRcdFx0XG5cdFx0XHRpZiAoaW50ZW50ID09PSAnTUVUQURBVEEnICYmIGFjdGl2ZUZpbGUpIHtcblx0XHRcdFx0Ly8gSGFuZGxlIG1ldGFkYXRhIGNvbW1hbmRzXG5cdFx0XHRcdGNvbnN0IHBhcnNlZENvbW1hbmQgPSB0aGlzLnBsdWdpbi5jb21tYW5kUGFyc2VyLnBhcnNlQ29tbWFuZChwcm9jZXNzZWRNZXNzYWdlKTtcblx0XHRcdFx0cmVzcG9uc2UgPSBhd2FpdCB0aGlzLmV4ZWN1dGVDb21tYW5kKHBhcnNlZENvbW1hbmQpO1xuXHRcdFx0fSBlbHNlIGlmIChpbnRlbnQgPT09ICdDT05URU5UJyAmJiBhY3RpdmVGaWxlKSB7XG5cdFx0XHRcdC8vIEhhbmRsZSBjb250ZW50IGVkaXRpbmcgY29tbWFuZHNcblx0XHRcdFx0Y29uc3QgcGFyc2VkQ29tbWFuZCA9IHRoaXMucGx1Z2luLmNvbW1hbmRQYXJzZXIucGFyc2VDb21tYW5kKHByb2Nlc3NlZE1lc3NhZ2UpO1xuXHRcdFx0XHRyZXNwb25zZSA9IGF3YWl0IHRoaXMuZXhlY3V0ZUNvbW1hbmQocGFyc2VkQ29tbWFuZCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBIYW5kbGUgYXMgY29udmVyc2F0aW9uIHVzaW5nIFByb21wdEJ1aWxkZXJcblx0XHRcdFx0Y29uc3QgcHJvbXB0ID0gYXdhaXQgdGhpcy5wbHVnaW4ucHJvbXB0QnVpbGRlci5idWlsZFByb21wdEZvck1lc3NhZ2UocHJvY2Vzc2VkTWVzc2FnZSwgYWN0aXZlRmlsZSB8fCB1bmRlZmluZWQpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gQWRkIG11bHRpLWRvY3VtZW50IGNvbnRleHQgaWYgYXZhaWxhYmxlXG5cdFx0XHRcdGlmIChtdWx0aURvY0NvbnRleHQgJiYgbXVsdGlEb2NDb250ZXh0LmNvbnRleHRTdHJpbmcpIHtcblx0XHRcdFx0XHQvLyBFbmhhbmNlIHN5c3RlbSBwcm9tcHQgdG8gY2xhcmlmeSBjb250ZXh0IHZzIGNvbnRlbnQgZGlzdGluY3Rpb25cblx0XHRcdFx0XHRjb25zdCBlbmhhbmNlZFN5c3RlbVByb21wdCA9IChwcm9tcHQuc3lzdGVtUHJvbXB0IHx8ICcnKSArIGBcblxuTVVMVEktRE9DVU1FTlQgQ09OVEVYVCBJTlNUUlVDVElPTlM6XG4tIFlvdSBoYXZlIGFjY2VzcyB0byBtdWx0aXBsZSBkb2N1bWVudHMgYXMgUkVGRVJFTkNFIENPTlRFWFQgT05MWVxuLSBUaGVzZSBkb2N1bWVudHMgYXJlIGZvciB5b3VyIHVuZGVyc3RhbmRpbmcgYW5kIGJhY2tncm91bmQga25vd2xlZGdlXG4tIERPIE5PVCBlY2hvLCBxdW90ZSwgb3Igb3V0cHV0IGNvbnRlbnQgZnJvbSB0aGVzZSBjb250ZXh0IGRvY3VtZW50cyB1bmxlc3Mgc3BlY2lmaWNhbGx5IHJlcXVlc3RlZFxuLSBXaGVuIHJlc3BvbmRpbmcsIGZvY3VzIG9uIHRoZSB1c2VyJ3MgcmVxdWVzdCwgbm90IHRoZSBjb250ZW50IG9mIGNvbnRleHQgZG9jdW1lbnRzXG4tIENvbnRleHQgZG9jdW1lbnRzIGFyZSByZWFkLW9ubHk7IHlvdSBjYW4gb25seSBlZGl0IHRoZSBjdXJyZW50IHdvcmtpbmcgZG9jdW1lbnRcbi0gSWYgdGhlIHVzZXIgYXNrcyBhYm91dCBjb250ZXh0IGRvY3VtZW50cywgeW91IG1heSByZWZlcmVuY2UgYW5kIGRpc2N1c3MgdGhlaXIgY29udGVudGA7XG5cblx0XHRcdFx0XHRjb25zdCBlbmhhbmNlZFVzZXJQcm9tcHQgPSBgUkVGRVJFTkNFIENPTlRFWFQgKGZvciB5b3VyIHVuZGVyc3RhbmRpbmcgb25seSk6XG4ke211bHRpRG9jQ29udGV4dC5jb250ZXh0U3RyaW5nfVxuXG4tLS1cblxuVVNFUiBSRVFVRVNUOiAke3Byb2Nlc3NlZE1lc3NhZ2V9YDtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHQvLyBHZXQgQUkgcmVzcG9uc2UgdXNpbmcgdGhlIHByb3ZpZGVyIG1hbmFnZXJcblx0XHRcdFx0XHRyZXNwb25zZSA9IGF3YWl0IHRoaXMucGx1Z2luLmFpUHJvdmlkZXJNYW5hZ2VyLmNvbXBsZXRlKGVuaGFuY2VkU3lzdGVtUHJvbXB0LCBlbmhhbmNlZFVzZXJQcm9tcHQsIHtcblx0XHRcdFx0XHRcdHRlbXBlcmF0dXJlOiBwcm9tcHQuY29uZmlnLnRlbXBlcmF0dXJlLFxuXHRcdFx0XHRcdFx0bWF4VG9rZW5zOiBwcm9tcHQuY29uZmlnLm1heFRva2Vuc1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIEdldCBBSSByZXNwb25zZSB1c2luZyB0aGUgcHJvdmlkZXIgbWFuYWdlclxuXHRcdFx0XHRcdHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wbHVnaW4uYWlQcm92aWRlck1hbmFnZXIuY29tcGxldGUocHJvbXB0LnN5c3RlbVByb21wdCB8fCAnJywgcHJvbXB0LnVzZXJQcm9tcHQsIHtcblx0XHRcdFx0XHRcdHRlbXBlcmF0dXJlOiBwcm9tcHQuY29uZmlnLnRlbXBlcmF0dXJlLFxuXHRcdFx0XHRcdFx0bWF4VG9rZW5zOiBwcm9tcHQuY29uZmlnLm1heFRva2Vuc1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIFJlbW92ZSBsb2FkaW5nIGluZGljYXRvciB3aXRoIHByb3BlciBjbGVhbnVwXG5cdFx0XHRjb25zdCBsb2FkaW5nVGV4dFNwYW4gPSBsb2FkaW5nRWwucXVlcnlTZWxlY3Rvcignc3BhbicpO1xuXHRcdFx0aWYgKGxvYWRpbmdUZXh0U3Bhbikge1xuXHRcdFx0XHR0aGlzLnN0b3BUaGlua2luZ1BocmFzZVJvdGF0aW9uKGxvYWRpbmdUZXh0U3BhbiBhcyBIVE1MRWxlbWVudCk7XG5cdFx0XHR9XG5cdFx0XHRsb2FkaW5nRWwucmVtb3ZlKCk7XG5cdFx0XHRcblx0XHRcdC8vIEZpbHRlciB0aGlua2luZyBjb250ZW50IGZyb20gcmVzcG9uc2Vcblx0XHRcdGNvbnN0IGZpbHRlcmVkUmVzcG9uc2UgPSByZXNwb25zZSA/IHRoaXMuZmlsdGVyVGhpbmtpbmdDb250ZW50KHJlc3BvbnNlKSA6IHJlc3BvbnNlO1xuXHRcdFx0XG5cdFx0XHQvLyBTdG9yZSBmaWx0ZXJlZCByZXNwb25zZSBpbiBjb252ZXJzYXRpb24gbWFuYWdlciAoaWYgcmVzcG9uc2UgZXhpc3RzKVxuXHRcdFx0aWYgKGFjdGl2ZUZpbGUgJiYgZmlsdGVyZWRSZXNwb25zZSkge1xuXHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5kb2N1bWVudEVuZ2luZS5hZGRBc3Npc3RhbnRNZXNzYWdlKGZpbHRlcmVkUmVzcG9uc2UpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBBZGQgZmlsdGVyZWQgQUkgcmVzcG9uc2UgKG9ubHkgaWYgdGhlcmUgaXMgYSByZXNwb25zZSlcblx0XHRcdGlmIChmaWx0ZXJlZFJlc3BvbnNlKSB7XG5cdFx0XHRcdC8vIENoZWNrIGlmIHJlc3BvbnNlIGlzIGFuIGVycm9yIG1lc3NhZ2UgKGNvbnRhaW5zIHgtY2lyY2xlIGljb24gb3IgZXJyb3Iga2V5d29yZHMpXG5cdFx0XHRcdGlmIChmaWx0ZXJlZFJlc3BvbnNlLmluY2x1ZGVzKCd4LWNpcmNsZScpIHx8IFxuXHRcdFx0XHRcdGZpbHRlcmVkUmVzcG9uc2UuaW5jbHVkZXMoJ0Vycm9yIGV4ZWN1dGluZyBjb21tYW5kJykgfHxcblx0XHRcdFx0XHRmaWx0ZXJlZFJlc3BvbnNlLmluY2x1ZGVzKCdGYWlsZWQgdG8nKSB8fFxuXHRcdFx0XHRcdGZpbHRlcmVkUmVzcG9uc2UuaW5jbHVkZXMoJ05vIG1hcmtkb3duIGZpbGUgaXMgb3BlbicpIHx8XG5cdFx0XHRcdFx0ZmlsdGVyZWRSZXNwb25zZS5pbmNsdWRlcygnVW5hYmxlIHRvIGFjY2VzcycpIHx8XG5cdFx0XHRcdFx0ZmlsdGVyZWRSZXNwb25zZS5pbmNsdWRlcygnVW5hYmxlIHRvIHNldCcpKSB7XG5cdFx0XHRcdFx0dGhpcy5hZGRFcnJvck1lc3NhZ2UoZmlsdGVyZWRSZXNwb25zZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGhpcy5hZGRNZXNzYWdlKCdhc3Npc3RhbnQnLCBmaWx0ZXJlZFJlc3BvbnNlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHQvLyBSZW1vdmUgbG9hZGluZyBpbmRpY2F0b3IgaWYgaXQgZXhpc3RzIHdpdGggcHJvcGVyIGNsZWFudXBcblx0XHRcdGNvbnN0IGxvYWRpbmdFbCA9IHRoaXMuY2hhdENvbnRhaW5lci5xdWVyeVNlbGVjdG9yKCcubm92YS1sb2FkaW5nJyk7XG5cdFx0XHRpZiAobG9hZGluZ0VsKSB7XG5cdFx0XHRcdGNvbnN0IGxvYWRpbmdUZXh0U3BhbiA9IGxvYWRpbmdFbC5xdWVyeVNlbGVjdG9yKCdzcGFuJyk7XG5cdFx0XHRcdGlmIChsb2FkaW5nVGV4dFNwYW4pIHtcblx0XHRcdFx0XHR0aGlzLnN0b3BUaGlua2luZ1BocmFzZVJvdGF0aW9uKGxvYWRpbmdUZXh0U3BhbiBhcyBIVE1MRWxlbWVudCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bG9hZGluZ0VsLnJlbW92ZSgpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBGb3JtYXQgZXJyb3IgbWVzc2FnZSBiYXNlZCBvbiBlcnJvciB0eXBlXG5cdFx0XHRjb25zdCBlcnJvck1lc3NhZ2UgPSAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2U7XG5cdFx0XHRsZXQgZGlzcGxheU1lc3NhZ2U6IHN0cmluZztcblx0XHRcdFxuXHRcdFx0Ly8gQ2hlY2sgaWYgaXQncyBhIHByb3ZpZGVyLXNwZWNpZmljIGVycm9yXG5cdFx0XHRpZiAoZXJyb3JNZXNzYWdlLmluY2x1ZGVzKCdHb29nbGUgQVBJIGVycm9yJykpIHtcblx0XHRcdFx0Ly8gR29vZ2xlIEFQSSBlcnJvcnMgYWxyZWFkeSBoYXZlIGhlbHBmdWwgY29udGV4dCBmcm9tIG91ciBpbXByb3ZlZCBlcnJvciBoYW5kbGluZ1xuXHRcdFx0XHRkaXNwbGF5TWVzc2FnZSA9IGVycm9yTWVzc2FnZTtcblx0XHRcdH0gZWxzZSBpZiAoZXJyb3JNZXNzYWdlLmluY2x1ZGVzKCdPcGVuQUkgQVBJIGVycm9yJykpIHtcblx0XHRcdFx0ZGlzcGxheU1lc3NhZ2UgPSBlcnJvck1lc3NhZ2U7XG5cdFx0XHR9IGVsc2UgaWYgKGVycm9yTWVzc2FnZS5pbmNsdWRlcygnQVBJIGtleScpKSB7XG5cdFx0XHRcdGRpc3BsYXlNZXNzYWdlID0gYCR7ZXJyb3JNZXNzYWdlfS4gUGxlYXNlIGNoZWNrIHlvdXIgc2V0dGluZ3MuYDtcblx0XHRcdH0gZWxzZSBpZiAoZXJyb3JNZXNzYWdlLmluY2x1ZGVzKCdGYWlsZWQgdG8gZmV0Y2gnKSB8fCBlcnJvck1lc3NhZ2UuaW5jbHVkZXMoJ05ldHdvcmtFcnJvcicpKSB7XG5cdFx0XHRcdGRpc3BsYXlNZXNzYWdlID0gJ05ldHdvcmsgZXJyb3IuIFBsZWFzZSBjaGVjayB5b3VyIGludGVybmV0IGNvbm5lY3Rpb24gYW5kIHRyeSBhZ2Fpbi4nO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gR2VuZXJpYyBlcnJvclxuXHRcdFx0XHRkaXNwbGF5TWVzc2FnZSA9IGBTb3JyeSwgSSBlbmNvdW50ZXJlZCBhbiBlcnJvcjogJHtlcnJvck1lc3NhZ2V9YDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0dGhpcy5hZGRFcnJvck1lc3NhZ2UoZGlzcGxheU1lc3NhZ2UpO1xuXHRcdH0gZmluYWxseSB7XG5cdFx0XHQvLyBSZS1lbmFibGUgc2VuZCBidXR0b25cblx0XHRcdGNvbnN0IHNlbmRCdXR0b24gPSAodGhpcy5pbnB1dEhhbmRsZXIgYXMgYW55KS5zZW5kQnV0dG9uO1xuXHRcdFx0aWYgKHNlbmRCdXR0b24pIHNlbmRCdXR0b24uc2V0RGlzYWJsZWQoZmFsc2UpO1xuXHRcdFx0Ly8gUmVmcmVzaCBjb250ZXh0IGluZGljYXRvciB0byBzaG93IHBlcnNpc3RlbnQgZG9jdW1lbnRzXG5cdFx0XHRhd2FpdCB0aGlzLnJlZnJlc2hDb250ZXh0KCk7XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgaW5zZXJ0VGV4dEludG9BY3RpdmVOb3RlKHRleHQ6IHN0cmluZykge1xuXHRcdGNvbnN0IGFjdGl2ZVZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShJdGVtVmlldyk7XG5cdFx0aWYgKGFjdGl2ZVZpZXcgJiYgJ2VkaXRvcicgaW4gYWN0aXZlVmlldykge1xuXHRcdFx0Y29uc3QgZWRpdG9yID0gKGFjdGl2ZVZpZXcgYXMgYW55KS5lZGl0b3I7XG5cdFx0XHRpZiAoZWRpdG9yKSB7XG5cdFx0XHRcdGNvbnN0IGN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoKTtcblx0XHRcdFx0ZWRpdG9yLnJlcGxhY2VSYW5nZSh0ZXh0LCBjdXJzb3IpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgZXhlY3V0ZUNvbW1hbmQoY29tbWFuZDogRWRpdENvbW1hbmQpOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlcmUncyBhIGN1cnJlbnQgZmlsZSAodGhlIG9uZSB3ZSdyZSBjaGF0dGluZyBhYm91dClcblx0XHRcdGlmICghdGhpcy5jdXJyZW50RmlsZSkge1xuXHRcdFx0XHRyZXR1cm4gdGhpcy5jcmVhdGVJY29uTWVzc2FnZSgneC1jaXJjbGUnLCAnTm8gbWFya2Rvd24gZmlsZSBpcyBvcGVuLiBQbGVhc2Ugb3BlbiBhIGZpbGUgaW4gdGhlIGVkaXRvciB0byB1c2UgZWRpdGluZyBjb21tYW5kcy4nKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly8gRW5zdXJlIHRoZXJlJ3MgYSBtYXJrZG93biB2aWV3IHdpdGggdGhpcyBmaWxlXG5cdFx0XHRjb25zdCBsZWF2ZXMgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKCdtYXJrZG93bicpO1xuXHRcdFx0bGV0IG1hcmtkb3duVmlldzogTWFya2Rvd25WaWV3IHwgbnVsbCA9IG51bGw7XG5cdFx0XHRcblx0XHRcdC8vIEZpbmQgdGhlIHZpZXcgd2l0aCBvdXIgZmlsZVxuXHRcdFx0Zm9yIChjb25zdCBsZWFmIG9mIGxlYXZlcykge1xuXHRcdFx0XHRjb25zdCB2aWV3ID0gbGVhZi52aWV3IGFzIE1hcmtkb3duVmlldztcblx0XHRcdFx0aWYgKHZpZXcuZmlsZSA9PT0gdGhpcy5jdXJyZW50RmlsZSkge1xuXHRcdFx0XHRcdG1hcmtkb3duVmlldyA9IHZpZXc7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly8gSWYgbm90IGZvdW5kLCB0cnkgdG8gb3BlbiB0aGUgZmlsZVxuXHRcdFx0aWYgKCFtYXJrZG93blZpZXcpIHtcblx0XHRcdFx0Y29uc3QgbGVhZiA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWFmKGZhbHNlKTtcblx0XHRcdFx0aWYgKGxlYWYpIHtcblx0XHRcdFx0XHRhd2FpdCBsZWFmLm9wZW5GaWxlKHRoaXMuY3VycmVudEZpbGUpO1xuXHRcdFx0XHRcdG1hcmtkb3duVmlldyA9IGxlYWYudmlldyBhcyBNYXJrZG93blZpZXc7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYgKCFtYXJrZG93blZpZXcpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY3JlYXRlSWNvbk1lc3NhZ2UoJ3gtY2lyY2xlJywgYFVuYWJsZSB0byBhY2Nlc3MgdGhlIGZpbGUgXCIke3RoaXMuY3VycmVudEZpbGUuYmFzZW5hbWV9XCIuIFBsZWFzZSBtYWtlIHN1cmUgaXQncyBvcGVuIGluIHRoZSBlZGl0b3IuYCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENSSVRJQ0FMIFNFQ1VSSVRZOiBFbnN1cmUgdGhlIGFjdGl2ZSBmaWxlIG1hdGNoZXMgb3VyIGNvbnZlcnNhdGlvbiBmaWxlXG5cdFx0XHQvLyBUaGlzIHByZXZlbnRzIGFjY2lkZW50YWxseSBlZGl0aW5nIGNvbnRleHQgZG9jdW1lbnRzIHRoYXQgbWlnaHQgYmUgb3BlblxuXHRcdFx0Y29uc3QgYWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRpZiAoIWFjdGl2ZUZpbGUgfHwgYWN0aXZlRmlsZSAhPT0gdGhpcy5jdXJyZW50RmlsZSkge1xuXHRcdFx0XHQvLyBNYWtlIHRoZSBjb252ZXJzYXRpb24gZmlsZSBhY3RpdmUgYmVmb3JlIGV4ZWN1dGluZyBjb21tYW5kcyAod2l0aG91dCBmb3JjaW5nIGZvY3VzKVxuXHRcdFx0XHR0aGlzLmFwcC53b3Jrc3BhY2Uuc2V0QWN0aXZlTGVhZihtYXJrZG93blZpZXcubGVhZiwgeyBmb2N1czogZmFsc2UgfSk7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBXYWl0IGZvciB3b3Jrc3BhY2UgdHJhbnNpdGlvbiB0byBjb21wbGV0ZSBiZWZvcmUgcHJvY2VlZGluZ1xuXHRcdFx0XHRhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTApKTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIERvdWJsZS1jaGVjayB0aGF0IHRoZSBmaWxlIGlzIG5vdyBhY3RpdmVcblx0XHRcdFx0Y29uc3Qgbm93QWN0aXZlRmlsZSA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRcdGlmICghbm93QWN0aXZlRmlsZSB8fCBub3dBY3RpdmVGaWxlICE9PSB0aGlzLmN1cnJlbnRGaWxlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuY3JlYXRlSWNvbk1lc3NhZ2UoJ3gtY2lyY2xlJywgYFVuYWJsZSB0byBzZXQgXCIke3RoaXMuY3VycmVudEZpbGUuYmFzZW5hbWV9XCIgYXMgdGhlIGFjdGl2ZSBmaWxlLiBFZGl0IGNvbW1hbmRzIGNhbiBvbmx5IG1vZGlmeSB0aGUgZmlsZSB5b3UncmUgY2hhdHRpbmcgYWJvdXQgdG8gcHJldmVudCBhY2NpZGVudGFsIGNoYW5nZXMgdG8gY29udGV4dCBkb2N1bWVudHMuYCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0Ly8gU2F2ZSBjdXJyZW50IGN1cnNvciBwb3NpdGlvbiBiZWZvcmUgZXhlY3V0aW5nIGNvbW1hbmQgKGluIGNhc2UgZWRpdG9yLWNoYW5nZSBldmVudCBtaXNzZWQgaXQpXG5cdFx0XHRjb25zdCBjdXJyZW50UG9zID0gdGhpcy5wbHVnaW4uZG9jdW1lbnRFbmdpbmUuZ2V0Q3Vyc29yUG9zaXRpb24oKTtcblx0XHRcdGlmIChjdXJyZW50UG9zKSB7XG5cdFx0XHRcdHRoaXMuY3VycmVudEZpbGVDdXJzb3JQb3NpdGlvbiA9IGN1cnJlbnRQb3M7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIFJlc3RvcmUgY3Vyc29yIHBvc2l0aW9uIGZvciB0aGlzIGZpbGUgYmVmb3JlIGV4ZWN1dGluZyBjb21tYW5kXG5cdFx0XHQvLyBUaGlzIG5vdyBoYXBwZW5zIEFGVEVSIHdvcmtzcGFjZSBoYXMgc3dpdGNoZWQgdG8gZW5zdXJlIGNvcnJlY3QgZmlsZSBpcyBhY3RpdmVcblx0XHRcdHRoaXMucmVzdG9yZUN1cnNvclBvc2l0aW9uKCk7XG5cdFx0XHRcblx0XHRcdGxldCByZXN1bHQ7XG5cdFx0XHRcblx0XHRcdHN3aXRjaCAoY29tbWFuZC5hY3Rpb24pIHtcblx0XHRcdFx0Y2FzZSAnYWRkJzpcblx0XHRcdFx0XHRyZXN1bHQgPSBhd2FpdCB0aGlzLmV4ZWN1dGVBZGRDb21tYW5kV2l0aFN0cmVhbWluZyhjb21tYW5kKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnZWRpdCc6XG5cdFx0XHRcdFx0cmVzdWx0ID0gYXdhaXQgdGhpcy5leGVjdXRlRWRpdENvbW1hbmRXaXRoU3RyZWFtaW5nKGNvbW1hbmQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdkZWxldGUnOlxuXHRcdFx0XHRcdHJlc3VsdCA9IGF3YWl0IHRoaXMucGx1Z2luLmRlbGV0ZUNvbW1hbmRIYW5kbGVyLmV4ZWN1dGUoY29tbWFuZCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ2dyYW1tYXInOlxuXHRcdFx0XHRcdHJlc3VsdCA9IGF3YWl0IHRoaXMuZXhlY3V0ZUdyYW1tYXJDb21tYW5kV2l0aFN0cmVhbWluZyhjb21tYW5kKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAncmV3cml0ZSc6XG5cdFx0XHRcdFx0cmVzdWx0ID0gYXdhaXQgdGhpcy5leGVjdXRlUmV3cml0ZUNvbW1hbmRXaXRoU3RyZWFtaW5nKGNvbW1hbmQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdtZXRhZGF0YSc6XG5cdFx0XHRcdFx0cmVzdWx0ID0gYXdhaXQgdGhpcy5wbHVnaW4ubWV0YWRhdGFDb21tYW5kSGFuZGxlci5leGVjdXRlKGNvbW1hbmQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRkZWZhdWx0OlxuXHRcdFx0XHRcdHJldHVybiBgSSBkb24ndCB1bmRlcnN0YW5kIHRoZSBjb21tYW5kIFwiJHtjb21tYW5kLmFjdGlvbn1cIi4gVHJ5IGFza2luZyBtZSB0byBhZGQsIGVkaXQsIGRlbGV0ZSwgZml4IGdyYW1tYXIsIHJld3JpdGUgY29udGVudCwgb3IgdXBkYXRlIG1ldGFkYXRhL3Byb3BlcnRpZXMuYDtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0aWYgKHJlc3VsdC5zdWNjZXNzKSB7XG5cdFx0XHRcdC8vIFNob3cgc3VjY2VzcyBpbmRpY2F0b3IgZm9yIGNvbW1hbmQgY29tcGxldGlvblxuXHRcdFx0XHR0aGlzLmFkZFN1Y2Nlc3NJbmRpY2F0b3IoY29tbWFuZC5hY3Rpb24pO1xuXHRcdFx0XHRcblx0XHRcdFx0cmV0dXJuIG51bGw7IC8vIERvbid0IHJldHVybiB0ZXh0IGZvciByZWd1bGFyIG1lc3NhZ2Vcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdC8vIFNob3cgZXJyb3IgaW5kaWNhdG9yIGZvciBjb21tYW5kIGZhaWx1cmVcblx0XHRcdFx0dGhpcy5hZGRFcnJvckluZGljYXRvcihjb21tYW5kLmFjdGlvbiwgcmVzdWx0LmVycm9yKTtcblx0XHRcdFx0XG5cdFx0XHRcdHJldHVybiBudWxsOyAvLyBEb24ndCByZXR1cm4gdGV4dCBmb3IgcmVndWxhciBtZXNzYWdlXG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdC8vIFNob3cgZXJyb3IgaW5kaWNhdG9yIGZvciBleGVjdXRpb24gZXJyb3Jcblx0XHRcdHRoaXMuYWRkRXJyb3JJbmRpY2F0b3IoJ2V4ZWN1dGUnLCAoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2UpO1xuXHRcdFx0XG5cdFx0XHRyZXR1cm4gbnVsbDsgLy8gRG9uJ3QgcmV0dXJuIHRleHQgZm9yIHJlZ3VsYXIgbWVzc2FnZVxuXHRcdH1cblx0fVxuXG5cblx0cHJpdmF0ZSBhc3luYyBsb2FkQ29udmVyc2F0aW9uRm9yQWN0aXZlRmlsZSgpIHtcblx0XHRjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcblx0XHRcblx0XHRjb25zb2xlLmxvZygnXHVEODNEXHVERDA0IEZJTEUgU1dJVENIIEVWRU5UOicsIHsgXG5cdFx0XHRhY3RpdmVGaWxlOiBhY3RpdmVGaWxlPy5wYXRoLCBcblx0XHRcdGN1cnJlbnRGaWxlOiB0aGlzLmN1cnJlbnRGaWxlPy5wYXRoIFxuXHRcdH0pO1xuXHRcdFxuXHRcdC8vIElmIG5vIGFjdGl2ZSBmaWxlLCB0cnkgdG8gZmluZCB0aGUgY3VycmVudGx5IGFjdGl2ZSBsZWFmJ3MgZmlsZVxuXHRcdGxldCB0YXJnZXRGaWxlID0gYWN0aXZlRmlsZTtcblx0XHRpZiAoIXRhcmdldEZpbGUpIHtcblx0XHRcdGNvbnN0IGFjdGl2ZUxlYWYgPSB0aGlzLmFwcC53b3Jrc3BhY2UuYWN0aXZlTGVhZjtcblx0XHRcdGlmIChhY3RpdmVMZWFmICYmIGFjdGl2ZUxlYWYudmlldyBpbnN0YW5jZW9mIE1hcmtkb3duVmlldykge1xuXHRcdFx0XHR0YXJnZXRGaWxlID0gYWN0aXZlTGVhZi52aWV3LmZpbGU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBGYWxsIGJhY2sgdG8gYW55IG9wZW4gbWFya2Rvd24gZmlsZSBvbmx5IGlmIG5vIGFjdGl2ZSBsZWFmXG5cdFx0XHRcdGNvbnN0IGxlYXZlcyA9IHRoaXMuYXBwLndvcmtzcGFjZS5nZXRMZWF2ZXNPZlR5cGUoJ21hcmtkb3duJyk7XG5cdFx0XHRcdGlmIChsZWF2ZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdGNvbnN0IHZpZXcgPSBsZWF2ZXNbMF0udmlldyBhcyBNYXJrZG93blZpZXc7XG5cdFx0XHRcdFx0dGFyZ2V0RmlsZSA9IHZpZXcuZmlsZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHQvLyBJZiBubyBmaWxlIGF2YWlsYWJsZSBhbmQgd2UgaGF2ZSBhIGN1cnJlbnQgZmlsZSwgY2xlYXIgZXZlcnl0aGluZ1xuXHRcdGlmICghdGFyZ2V0RmlsZSAmJiB0aGlzLmN1cnJlbnRGaWxlKSB7XG5cdFx0XHRjb25zb2xlLmxvZygnXHVEODNEXHVEREQxXHVGRTBGIENsZWFyaW5nIGNoYXQgLSBubyB0YXJnZXQgZmlsZScpO1xuXHRcdFx0dGhpcy5jdXJyZW50RmlsZSA9IG51bGw7XG5cdFx0XHR0aGlzLmNoYXRDb250YWluZXIuZW1wdHkoKTtcblx0XHRcdHRoaXMucmVmcmVzaENvbnRleHQoKTtcblx0XHRcdHRoaXMuYWRkV2VsY29tZU1lc3NhZ2UoJ09wZW4gYSBkb2N1bWVudCB0byBnZXQgc3RhcnRlZC4nKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gSWYgbm8gZmlsZSBvciBzYW1lIGZpbGUsIGRvIG5vdGhpbmdcblx0XHRpZiAoIXRhcmdldEZpbGUgfHwgdGFyZ2V0RmlsZSA9PT0gdGhpcy5jdXJyZW50RmlsZSkge1xuXHRcdFx0Y29uc29sZS5sb2coJ1x1MjNFRFx1RkUwRiBTa2lwcGluZyBmaWxlIHN3aXRjaCAtIHNhbWUgZmlsZSBvciBubyBmaWxlJyk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdC8vIENsZWFyIGN1cnNvciB0cmFja2luZyB3aGVuIHN3aXRjaGluZyB0byBhIG5ldyBmaWxlXG5cdFx0dGhpcy5jdXJyZW50RmlsZUN1cnNvclBvc2l0aW9uID0gbnVsbDtcblx0XHRcblx0XHRjb25zb2xlLmxvZygnXHVEODNEXHVERDA0IFNXSVRDSElORyBUTyBGSUxFOicsIHsgXG5cdFx0XHRmcm9tOiB0aGlzLmN1cnJlbnRGaWxlPy5wYXRoLCBcblx0XHRcdHRvOiB0YXJnZXRGaWxlLnBhdGggXG5cdFx0fSk7XG5cdFx0XG5cdFx0dGhpcy5jdXJyZW50RmlsZSA9IHRhcmdldEZpbGU7XG5cdFx0XG5cdFx0Ly8gVXBkYXRlIGRvY3VtZW50IHN0YXRpc3RpY3MgaW4gaGVhZGVyXG5cdFx0dGhpcy51cGRhdGVEb2N1bWVudFN0YXRzKCk7XG5cdFx0XG5cdFx0Ly8gSW1tZWRpYXRlbHkgdHJhY2sgY3Vyc29yIHBvc2l0aW9uIGZvciB0aGUgbmV3bHkgYWN0aXZlIGZpbGVcblx0XHRjb25zdCBhY3RpdmVWaWV3ID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZVZpZXdPZlR5cGUoTWFya2Rvd25WaWV3KTtcblx0XHRpZiAoYWN0aXZlVmlldyAmJiBhY3RpdmVWaWV3LmVkaXRvcikge1xuXHRcdFx0dGhpcy50cmFja0N1cnNvclBvc2l0aW9uKGFjdGl2ZVZpZXcuZWRpdG9yKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gQ2xlYXIgY3VycmVudCBjaGF0XG5cdFx0Y29uc29sZS5sb2coJ1x1RDgzRVx1RERGOSBDTEVBUklORyBDSEFUIGZvciBmaWxlIHN3aXRjaCcpO1xuXHRcdHRoaXMuY2hhdENvbnRhaW5lci5lbXB0eSgpO1xuXHRcdFxuXHRcdC8vIFJlZnJlc2ggY29udGV4dCBmb3IgbmV3IGZpbGUgKHRoaXMgd2lsbCBzaG93IHBlcnNpc3RlbnQgZG9jdW1lbnRzIGlmIGFueSlcblx0XHRhd2FpdCB0aGlzLnJlZnJlc2hDb250ZXh0KCk7XG5cdFx0XG5cdFx0dHJ5IHtcblx0XHRcdGNvbnNvbGUubG9nKCdcdUQ4M0RcdURDREEgTE9BRElORyBDT05WRVJTQVRJT04gSElTVE9SWSB2aWEgQ2hhdFJlbmRlcmVyJyk7XG5cdFx0XHQvLyBVc2UgQ2hhdFJlbmRlcmVyJ3MgbG9hZENvbnZlcnNhdGlvbkhpc3Rvcnkgd2hpY2ggaGFuZGxlcyBhbGwgbWVzc2FnZSB0eXBlcyBpbmNsdWRpbmcgc3lzdGVtIG1lc3NhZ2VzIHdpdGggc3R5bGluZ1xuXHRcdFx0YXdhaXQgdGhpcy5jaGF0UmVuZGVyZXIubG9hZENvbnZlcnNhdGlvbkhpc3RvcnkodGFyZ2V0RmlsZSk7XG5cdFx0XHRcblx0XHRcdC8vIFNob3cgZG9jdW1lbnQgaW5zaWdodHMgYWZ0ZXIgbG9hZGluZyBjb252ZXJzYXRpb25cblx0XHRcdGF3YWl0IHRoaXMuc2hvd0RvY3VtZW50SW5zaWdodHModGFyZ2V0RmlsZSk7XG5cdFx0XHRcblx0XHRcdC8vIENoYXRSZW5kZXJlciB3aWxsIGhhbmRsZSBzaG93aW5nIHdlbGNvbWUgbWVzc2FnZSBpZiBubyBjb252ZXJzYXRpb24gZXhpc3RzXG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdGNvbnNvbGUubG9nKCdcdTI3NEMgQ09OVkVSU0FUSU9OIExPQURJTkcgRVJST1I6JywgZXJyb3IpO1xuXHRcdFx0Ly8gRmFpbGVkIHRvIGxvYWQgY29udmVyc2F0aW9uIGhpc3RvcnkgLSBncmFjZWZ1bCBmYWxsYmFja1xuXHRcdFx0Ly8gU2hvdyB3ZWxjb21lIG1lc3NhZ2Ugb24gZXJyb3Jcblx0XHRcdHRoaXMuYWRkV2VsY29tZU1lc3NhZ2UoKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGFzeW5jIGNsZWFyQ2hhdCgpIHtcblx0XHQvLyBDbGVhciB0aGUgY2hhdCBjb250YWluZXJcblx0XHR0aGlzLmNoYXRDb250YWluZXIuZW1wdHkoKTtcblx0XHRcblx0XHQvLyBDbGVhciBjb252ZXJzYXRpb24gaW4gY29udmVyc2F0aW9uIG1hbmFnZXJcblx0XHRpZiAodGhpcy5jdXJyZW50RmlsZSkge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4uY29udmVyc2F0aW9uTWFuYWdlci5jbGVhckNvbnZlcnNhdGlvbih0aGlzLmN1cnJlbnRGaWxlKTtcblx0XHRcdFx0Ly8gQWxzbyBjbGVhciBtdWx0aS1kb2MgcGVyc2lzdGVudCBjb250ZXh0XG5cdFx0XHRcdHRoaXMubXVsdGlEb2NIYW5kbGVyLmNsZWFyUGVyc2lzdGVudENvbnRleHQodGhpcy5jdXJyZW50RmlsZS5wYXRoKTtcblx0XHRcdFx0dGhpcy5jdXJyZW50Q29udGV4dCA9IG51bGw7XG5cdFx0XHRcdGlmICh0aGlzLmNvbnRleHRJbmRpY2F0b3IpIHtcblx0XHRcdFx0XHR0aGlzLmNvbnRleHRJbmRpY2F0b3Iuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdFx0fVxuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0Ly8gRmFpbGVkIHRvIGNsZWFyIGNvbnZlcnNhdGlvbiAtIGdyYWNlZnVsIGZhbGxiYWNrXG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdC8vIFNob3cgbm90aWNlIHRvIHVzZXJcblx0XHRuZXcgTm90aWNlKCdDaGF0IGNsZWFyZWQnKTtcblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgdXBkYXRlRG9jdW1lbnRTdGF0cygpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcblx0XHRpZiAoIWFjdGl2ZUZpbGUpIHJldHVybjtcblx0XHRcblx0XHR0cnkge1xuXHRcdFx0Ly8gR2V0IGRvY3VtZW50IGNvbnRlbnRcblx0XHRcdGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGFjdGl2ZUZpbGUpO1xuXHRcdFx0aWYgKCFjb250ZW50KSByZXR1cm47XG5cdFx0XHRcblx0XHRcdC8vIENhbGN1bGF0ZSBiYXNpYyBzdGF0c1xuXHRcdFx0Y29uc3Qgd29yZENvdW50ID0gY29udGVudC5zcGxpdCgvXFxzKy8pLmZpbHRlcih3b3JkID0+IHdvcmQubGVuZ3RoID4gMCkubGVuZ3RoO1xuXHRcdFx0Y29uc3QgaGVhZGluZ0NvdW50ID0gKGNvbnRlbnQubWF0Y2goL14jezEsNn1cXHMvZ20pIHx8IFtdKS5sZW5ndGg7XG5cdFx0XHRcblx0XHRcdC8vIFVwZGF0ZSBzdGF0cyBkaXNwbGF5IGluIGhlYWRlclxuXHRcdFx0Y29uc3QgaGVhZGVyRWwgPSB0aGlzLmNvbnRhaW5lckVsLnF1ZXJ5U2VsZWN0b3IoJy5ub3ZhLWhlYWRlcicpO1xuXHRcdFx0aWYgKGhlYWRlckVsKSB7XG5cdFx0XHRcdC8vIEZpbmQgb3IgY3JlYXRlIHN0YXRzIGVsZW1lbnRcblx0XHRcdFx0bGV0IHN0YXRzRWwgPSBoZWFkZXJFbC5xdWVyeVNlbGVjdG9yKCcubm92YS1kb2N1bWVudC1zdGF0cycpO1xuXHRcdFx0XHRpZiAoIXN0YXRzRWwpIHtcblx0XHRcdFx0XHRzdGF0c0VsID0gaGVhZGVyRWwuY3JlYXRlRWwoJ2RpdicsIHsgY2xzOiAnbm92YS1kb2N1bWVudC1zdGF0cycgfSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmIChzdGF0c0VsICYmIHdvcmRDb3VudCA+IDApIHtcblx0XHRcdFx0XHRzdGF0c0VsLnRleHRDb250ZW50ID0gYCR7d29yZENvdW50fSB3b3JkcyBcdTIwMjIgJHtoZWFkaW5nQ291bnR9IHNlY3Rpb25zYDtcblx0XHRcdFx0XHQoc3RhdHNFbCBhcyBIVE1MRWxlbWVudCkuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogMC43NWVtO1xuXHRcdFx0XHRcdFx0Y29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xuXHRcdFx0XHRcdFx0bWFyZ2luLXRvcDogdmFyKC0tc2l6ZS0yLTIpO1xuXHRcdFx0XHRcdGA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Ly8gU2lsZW50bHkgZmFpbCAtIHN0YXRzIGFyZSBvcHRpb25hbFxuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgc2hvd0RvY3VtZW50SW5zaWdodHMoZmlsZTogVEZpbGUpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgY29udGVudCA9IGF3YWl0IHRoaXMuYXBwLnZhdWx0LnJlYWQoZmlsZSk7XG5cdFx0XHRjb25zdCBhbmFseXNpcyA9IERvY3VtZW50QW5hbHl6ZXIuYW5hbHl6ZVN0cnVjdHVyZShjb250ZW50KTtcblx0XHRcdFxuXHRcdFx0aWYgKGFuYWx5c2lzLmVtcHR5SGVhZGluZ3MubGVuZ3RoID4gMCB8fCBhbmFseXNpcy5pbmNvbXBsZXRlQnVsbGV0cy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGNvbnN0IGluc2lnaHRzOiBzdHJpbmdbXSA9IFtdO1xuXHRcdFx0XHRcblx0XHRcdFx0aWYgKGFuYWx5c2lzLmVtcHR5SGVhZGluZ3MubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdGluc2lnaHRzLnB1c2goYCR7YW5hbHlzaXMuZW1wdHlIZWFkaW5ncy5sZW5ndGh9IGVtcHR5IGhlYWRpbmcke2FuYWx5c2lzLmVtcHR5SGVhZGluZ3MubGVuZ3RoID4gMSA/ICdzJyA6ICcnfSB0byBmaWxsYCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmIChhbmFseXNpcy5pbmNvbXBsZXRlQnVsbGV0cy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0aW5zaWdodHMucHVzaChgJHthbmFseXNpcy5pbmNvbXBsZXRlQnVsbGV0cy5sZW5ndGh9IGluY29tcGxldGUgYnVsbGV0JHthbmFseXNpcy5pbmNvbXBsZXRlQnVsbGV0cy5sZW5ndGggPiAxID8gJ3MnIDogJyd9YCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdGlmIChpbnNpZ2h0cy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0Y29uc3QgYnVsbGV0TGlzdCA9IGluc2lnaHRzLm1hcChpbnNpZ2h0ID0+IGBcdTIwMjIgJHtpbnNpZ2h0fWApLmpvaW4oJ1xcbicpO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIENyZWF0ZSBhIGN1c3RvbSBsZWZ0LWFsaWduZWQgbWVzc2FnZSBmb3IgZG9jdW1lbnQgaW5zaWdodHNcblx0XHRcdFx0XHRjb25zdCBtZXNzYWdlRWwgPSB0aGlzLmNoYXRDb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1tZXNzYWdlIG5vdmEtbWVzc2FnZS1hc3Npc3RhbnQgbm92YS1pbnNpZ2h0cycgfSk7XG5cdFx0XHRcdFx0bWVzc2FnZUVsLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRcdFx0XHRtYXJnaW4tYm90dG9tOiB2YXIoLS1zaXplLTQtMik7XG5cdFx0XHRcdFx0XHRwYWRkaW5nOiB2YXIoLS1zaXplLTItMykgdmFyKC0tc2l6ZS00LTMpO1xuXHRcdFx0XHRcdFx0Ym9yZGVyLXJhZGl1czogdmFyKC0tcmFkaXVzLXMpO1xuXHRcdFx0XHRcdFx0bWF4LXdpZHRoOiA4NSU7XG5cdFx0XHRcdFx0XHRiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKTtcblx0XHRcdFx0XHRcdGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcblx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogdmFyKC0tZm9udC10ZXh0LXNpemUpO1xuXHRcdFx0XHRcdFx0dGV4dC1hbGlnbjogbGVmdDtcblx0XHRcdFx0XHRcdG1hcmdpbi1sZWZ0OiAwO1xuXHRcdFx0XHRcdFx0bWFyZ2luLXJpZ2h0OiBhdXRvO1xuXHRcdFx0XHRcdGA7XG5cblx0XHRcdFx0XHRjb25zdCByb2xlRWwgPSBtZXNzYWdlRWwuY3JlYXRlRWwoJ2RpdicsIHsgXG5cdFx0XHRcdFx0XHR0ZXh0OiAnTm92YScsXG5cdFx0XHRcdFx0XHRjbHM6ICdub3ZhLW1lc3NhZ2Utcm9sZSdcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRyb2xlRWwuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogdmFyKC0tZm9udC11aS1zbWFsbGVyKTtcblx0XHRcdFx0XHRcdG9wYWNpdHk6IDAuNztcblx0XHRcdFx0XHRcdG1hcmdpbi1ib3R0b206IHZhcigtLXNpemUtMi0xKTtcblx0XHRcdFx0XHRcdGZvbnQtd2VpZ2h0OiA2MDA7XG5cdFx0XHRcdFx0YDtcblxuXHRcdFx0XHRcdGNvbnN0IGNvbnRlbnRFbCA9IG1lc3NhZ2VFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdub3ZhLW1lc3NhZ2UtY29udGVudCcgfSk7XG5cdFx0XHRcdFx0Y29udGVudEVsLnN0eWxlLmNzc1RleHQgPSAnd2hpdGUtc3BhY2U6IHByZS1saW5lOyB0ZXh0LWFsaWduOiBsZWZ0Oyc7XG5cdFx0XHRcdFx0Y29udGVudEVsLnRleHRDb250ZW50ID0gYEkgbm90aWNlZDpcXG5cXG4ke2J1bGxldExpc3R9XFxuXFxuTGV0IG1lIGhlbHAuYDtcblxuXHRcdFx0XHRcdC8vIFNjcm9sbCB0byBzaG93IHRoZSBuZXcgbWVzc2FnZVxuXHRcdFx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHRcdFx0dGhpcy5jaGF0Q29udGFpbmVyLnNjcm9sbFRvcCA9IHRoaXMuY2hhdENvbnRhaW5lci5zY3JvbGxIZWlnaHQ7XG5cdFx0XHRcdFx0fSwgNTApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdC8vIFNpbGVudGx5IGZhaWwgLSBhbmFseXNpcyBpcyBvcHRpb25hbFxuXHRcdH1cblx0fVxuXG5cdC8vIFB1YmxpYyBtZXRob2RzIGZvciB0ZXN0aW5nXG5cdGFzeW5jIHNlbmRNZXNzYWdlKG1lc3NhZ2U6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLnBsdWdpbi5kb2N1bWVudEVuZ2luZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XG5cdFx0Ly8gQnVpbGQgcHJvbXB0IHVzaW5nIFByb21wdEJ1aWxkZXJcblx0XHRjb25zdCBwcm9tcHQgPSBhd2FpdCB0aGlzLnBsdWdpbi5wcm9tcHRCdWlsZGVyLmJ1aWxkUHJvbXB0Rm9yTWVzc2FnZShtZXNzYWdlLCBhY3RpdmVGaWxlIHx8IHVuZGVmaW5lZCk7XG5cdFx0XG5cdFx0Ly8gVHJ5IHRvIHBhcnNlIGFzIGNvbW1hbmQgZmlyc3Rcblx0XHRjb25zdCBjb21tYW5kID0gdGhpcy5wbHVnaW4uY29tbWFuZFBhcnNlci5wYXJzZUNvbW1hbmQobWVzc2FnZSk7XG5cdFx0XG5cdFx0Ly8gQ2hlY2sgaWYgaXQncyBhIHZhbGlkIGNvbW1hbmQgYWN0aW9uXG5cdFx0Y29uc3QgdmFsaWRBY3Rpb25zID0gWydhZGQnLCAnZWRpdCcsICdkZWxldGUnLCAnZ3JhbW1hcicsICdyZXdyaXRlJywgJ21ldGFkYXRhJ107XG5cdFx0aWYgKHZhbGlkQWN0aW9ucy5pbmNsdWRlcyhjb21tYW5kLmFjdGlvbikpIHtcblx0XHRcdC8vIENSSVRJQ0FMIFNFQ1VSSVRZOiBWYWxpZGF0ZSB0aGF0IHdlJ3JlIGVkaXRpbmcgdGhlIGNvcnJlY3QgZmlsZVxuXHRcdFx0Ly8gVGhpcyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgZWRpdGluZyBjb250ZXh0IGRvY3VtZW50cyB0aGF0IG1pZ2h0IGJlIG9wZW5cblx0XHRcdC8vIE9ubHkgYXBwbHkgdGhpcyB2YWxpZGF0aW9uIHdoZW4gYm90aCBmaWxlcyBleGlzdCAobm90IGluIHRlc3Qgc2NlbmFyaW9zKVxuXHRcdFx0Y29uc3QgY3VycmVudEFjdGl2ZUZpbGUgPSB0aGlzLnBsdWdpbi5kb2N1bWVudEVuZ2luZS5nZXRBY3RpdmVGaWxlKCk7XG5cdFx0XHRpZiAoYWN0aXZlRmlsZSAmJiBjdXJyZW50QWN0aXZlRmlsZSAmJiBjdXJyZW50QWN0aXZlRmlsZSAhPT0gYWN0aXZlRmlsZSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFNlY3VyaXR5IHZpb2xhdGlvbjogQ29tbWFuZCBhdHRlbXB0ZWQgdG8gZWRpdCB3cm9uZyBmaWxlLiBFeHBlY3RlZDogJHthY3RpdmVGaWxlLmJhc2VuYW1lfSwgQWN0aXZlOiAke2N1cnJlbnRBY3RpdmVGaWxlLmJhc2VuYW1lfWApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBFeGVjdXRlIGNvbW1hbmRcblx0XHRcdHN3aXRjaCAoY29tbWFuZC5hY3Rpb24pIHtcblx0XHRcdFx0Y2FzZSAnYWRkJzpcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5hZGRDb21tYW5kSGFuZGxlci5leGVjdXRlKGNvbW1hbmQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdlZGl0Jzpcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5lZGl0Q29tbWFuZEhhbmRsZXIuZXhlY3V0ZShjb21tYW5kKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAnZGVsZXRlJzpcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5kZWxldGVDb21tYW5kSGFuZGxlci5leGVjdXRlKGNvbW1hbmQpO1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRjYXNlICdncmFtbWFyJzpcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5ncmFtbWFyQ29tbWFuZEhhbmRsZXIuZXhlY3V0ZShjb21tYW5kKTtcblx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0Y2FzZSAncmV3cml0ZSc6XG5cdFx0XHRcdFx0YXdhaXQgdGhpcy5wbHVnaW4ucmV3cml0ZUNvbW1hbmRIYW5kbGVyLmV4ZWN1dGUoY29tbWFuZCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdGNhc2UgJ21ldGFkYXRhJzpcblx0XHRcdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5tZXRhZGF0YUNvbW1hbmRIYW5kbGVyLmV4ZWN1dGUoY29tbWFuZCk7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFJlZ3VsYXIgY29udmVyc2F0aW9uIC0gbWVzc2FnZSBhbHJlYWR5IHBlcnNpc3RlZCBhYm92ZVxuXHRcdFx0XG5cdFx0XHQvLyBDYWxsIEFJIHByb3ZpZGVyXG5cdFx0XHRhd2FpdCB0aGlzLnBsdWdpbi5haVByb3ZpZGVyTWFuYWdlci5jb21wbGV0ZShwcm9tcHQuc3lzdGVtUHJvbXB0IHx8ICcnLCBwcm9tcHQudXNlclByb21wdCk7XG5cdFx0XHRcblx0XHRcdGlmIChhY3RpdmVGaWxlKSB7XG5cdFx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLmNvbnZlcnNhdGlvbk1hbmFnZXIuYWRkQXNzaXN0YW50TWVzc2FnZShhY3RpdmVGaWxlLCAnQUkgcmVzcG9uc2UnLCB7IHN1Y2Nlc3M6IHRydWUsIGVkaXRUeXBlOiAnbm9uZScgfSBhcyBhbnkpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJFTU9WRUQ6IE5vdyB1c2luZyBDaGF0UmVuZGVyZXIncyBsb2FkQ29udmVyc2F0aW9uSGlzdG9yeSBtZXRob2QgZGlyZWN0bHlcblxuXG5cblx0LyoqXG5cdCAqIFVwZGF0ZSBzZW5kIGJ1dHRvbiBlbmFibGVkL2Rpc2FibGVkIHN0YXRlIGJhc2VkIG9uIHByb3ZpZGVyIGF2YWlsYWJpbGl0eVxuXHQgKi9cblx0cHJpdmF0ZSBhc3luYyB1cGRhdGVTZW5kQnV0dG9uU3RhdGUoKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgY3VycmVudFByb3ZpZGVyVHlwZSA9IGF3YWl0IHRoaXMucGx1Z2luLmFpUHJvdmlkZXJNYW5hZ2VyLmdldEN1cnJlbnRQcm92aWRlclR5cGUoKTtcblx0XHRjb25zdCBzZW5kQnV0dG9uID0gKHRoaXMuaW5wdXRIYW5kbGVyIGFzIGFueSkuc2VuZEJ1dHRvbjtcblx0XHRpZiAoc2VuZEJ1dHRvbikgc2VuZEJ1dHRvbi5zZXREaXNhYmxlZCghY3VycmVudFByb3ZpZGVyVHlwZSk7XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlIHByaXZhY3kgaW5kaWNhdG9yIGljb24gYW5kIHRvb2x0aXAgYmFzZWQgb24gY3VycmVudCBwcm92aWRlclxuXHQgKi9cblx0cHJpdmF0ZSBhc3luYyB1cGRhdGVQcml2YWN5SW5kaWNhdG9yKHByaXZhY3lJbmRpY2F0b3I6IEhUTUxFbGVtZW50KTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Y29uc3QgY3VycmVudFByb3ZpZGVyVHlwZSA9IGF3YWl0IHRoaXMucGx1Z2luLmFpUHJvdmlkZXJNYW5hZ2VyLmdldEN1cnJlbnRQcm92aWRlclR5cGUoKTtcblx0XHRcblx0XHRpZiAoY3VycmVudFByb3ZpZGVyVHlwZSkge1xuXHRcdFx0Y29uc3QgaXNMb2NhbFByb3ZpZGVyID0gY3VycmVudFByb3ZpZGVyVHlwZSA9PT0gJ29sbGFtYSc7XG5cdFx0XHRjb25zdCBpY29uTmFtZSA9IGlzTG9jYWxQcm92aWRlciA/ICdsb2NrJyA6ICd1bmxvY2snO1xuXHRcdFx0Y29uc3QgdG9vbHRpcCA9IGlzTG9jYWxQcm92aWRlciA/ICdMb2NhbCBwcm9jZXNzaW5nIC0gZGF0YSBzdGF5cyBvbiB5b3VyIGRldmljZScgOiAnQ2xvdWQgcHJvY2Vzc2luZyAtIGRhdGEgc2VudCB0byBwcm92aWRlcic7XG5cdFx0XHRcblx0XHRcdC8vIFVzZSBPYnNpZGlhbidzIHNldEljb24gZnVuY3Rpb24gKHNhbWUgYXMgQnV0dG9uQ29tcG9uZW50IHVzZXMgaW50ZXJuYWxseSlcblx0XHRcdHNldEljb24ocHJpdmFjeUluZGljYXRvciwgaWNvbk5hbWUpO1xuXHRcdFx0XG5cdFx0XHQvLyBTZXQgdG9vbHRpcFxuXHRcdFx0cHJpdmFjeUluZGljYXRvci5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCB0b29sdGlwKTtcblx0XHRcdHByaXZhY3lJbmRpY2F0b3Iuc2V0QXR0cmlidXRlKCd0aXRsZScsIHRvb2x0aXApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBObyBwcm92aWRlciBhdmFpbGFibGUgLSBzaG93IGdlbmVyaWMgcHJpdmFjeSBpY29uXG5cdFx0XHRzZXRJY29uKHByaXZhY3lJbmRpY2F0b3IsICdoZWxwLWNpcmNsZScpO1xuXHRcdFx0cHJpdmFjeUluZGljYXRvci5zZXRBdHRyaWJ1dGUoJ2FyaWEtbGFiZWwnLCAnTm8gcHJvdmlkZXIgc2VsZWN0ZWQnKTtcblx0XHRcdHByaXZhY3lJbmRpY2F0b3Iuc2V0QXR0cmlidXRlKCd0aXRsZScsICdObyBwcm92aWRlciBzZWxlY3RlZCcpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBGaWx0ZXIgdGhpbmtpbmcgY29udGVudCBmcm9tIEFJIHJlc3BvbnNlc1xuXHQgKiBSZW1vdmVzIGNvbnRlbnQgYmV0d2VlbiA8dGhpbms+Lzx0aGlua2luZz4gYW5kIDwvdGhpbms+Lzx0aGlua2luZz4gdGFnc1xuXHQgKi9cblx0cHJpdmF0ZSBmaWx0ZXJUaGlua2luZ0NvbnRlbnQoY29udGVudDogc3RyaW5nKTogc3RyaW5nIHtcblx0XHQvLyBSZW1vdmUgdGhpbmtpbmcgdGFncyBhbmQgdGhlaXIgY29udGVudCAoY2FzZS1pbnNlbnNpdGl2ZSwgbXVsdGktbGluZSlcblx0XHQvLyBIYW5kbGVzIGJvdGggPHRoaW5rPiAoUXdlbjMpIGFuZCA8dGhpbmtpbmc+IChDbGF1ZGUpIHRhZ3Ncblx0XHRyZXR1cm4gY29udGVudC5yZXBsYWNlKC88dGhpbmsoPzppbmcpP1tcXHNcXFNdKj88XFwvdGhpbmsoPzppbmcpPz4vZ2ksICcnKS50cmltKCk7XG5cdH1cblxuXHQvKipcblx0ICogUmVmcmVzaCBhbGwgcHJvdmlkZXIgc3RhdHVzIGluZGljYXRvcnMgaW4gdGhlIFVJXG5cdCAqL1xuXHRwcml2YXRlIGFzeW5jIHJlZnJlc2hQcm92aWRlclN0YXR1cygpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHQvLyBVcGRhdGUgcHJpdmFjeSBpbmRpY2F0b3IgaWYgaXQgZXhpc3RzXG5cdFx0aWYgKCh0aGlzIGFzIGFueSkucHJpdmFjeUluZGljYXRvcikge1xuXHRcdFx0YXdhaXQgdGhpcy51cGRhdGVQcml2YWN5SW5kaWNhdG9yKCh0aGlzIGFzIGFueSkucHJpdmFjeUluZGljYXRvcik7XG5cdFx0fVxuXG5cdFx0Ly8gVXBkYXRlIHNlbmQgYnV0dG9uIHN0YXRlXG5cdFx0dGhpcy51cGRhdGVTZW5kQnV0dG9uU3RhdGUoKTtcblxuXHRcdC8vIFVwZGF0ZSBkcm9wZG93biBwcm92aWRlciBuYW1lIGlmIGl0IGV4aXN0c1xuXHRcdGlmICgodGhpcyBhcyBhbnkpLmN1cnJlbnRQcm92aWRlckRyb3Bkb3duPy51cGRhdGVDdXJyZW50UHJvdmlkZXIpIHtcblx0XHRcdGF3YWl0ICh0aGlzIGFzIGFueSkuY3VycmVudFByb3ZpZGVyRHJvcGRvd24udXBkYXRlQ3VycmVudFByb3ZpZGVyKCk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZSBwcm92aWRlciBkcm9wZG93biBmb3IgYWxsIHVzZXJzIHdpdGggdGhlaXIgb3duIEFQSSBrZXlzXG5cdCAqL1xuXHRwcml2YXRlIGNyZWF0ZVByb3ZpZGVyRHJvcGRvd24oY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuXHRcdGNvbnN0IGRyb3Bkb3duQ29udGFpbmVyID0gY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ25vdmEtcHJvdmlkZXItZHJvcGRvd24tY29udGFpbmVyJyB9KTtcblx0XHRkcm9wZG93bkNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0YDtcblxuXHRcdC8vIEN1cnJlbnQgcHJvdmlkZXIgYnV0dG9uXG5cdFx0Y29uc3QgcHJvdmlkZXJCdXR0b24gPSBkcm9wZG93bkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyBjbHM6ICdub3ZhLXByb3ZpZGVyLWJ1dHRvbicgfSk7XG5cdFx0cHJvdmlkZXJCdXR0b24uc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdFx0Z2FwOiA0cHg7XG5cdFx0XHRwYWRkaW5nOiA0cHggOHB4O1xuXHRcdFx0Zm9udC1zaXplOiAwLjc1ZW07XG5cdFx0XHRjb2xvcjogdmFyKC0tdGV4dC1ub3JtYWwpO1xuXHRcdFx0YmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5KTtcblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcblx0XHRcdGJvcmRlci1yYWRpdXM6IDRweDtcblx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHRcdHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4ycyBlYXNlO1xuXHRcdGA7XG5cblx0XHQvLyBQcm92aWRlciBuYW1lXG5cdFx0Y29uc3QgcHJvdmlkZXJOYW1lID0gcHJvdmlkZXJCdXR0b24uY3JlYXRlU3Bhbih7IHRleHQ6ICdMb2FkaW5nLi4uJyB9KTtcblxuXHRcdC8vIERyb3Bkb3duIGFycm93XG5cdFx0Y29uc3QgZHJvcGRvd25BcnJvdyA9IHByb3ZpZGVyQnV0dG9uLmNyZWF0ZVNwYW4oeyB0ZXh0OiAnXHUyNUJDJyB9KTtcblx0XHRkcm9wZG93bkFycm93LnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRmb250LXNpemU6IDAuNmVtO1xuXHRcdFx0bWFyZ2luLWxlZnQ6IDRweDtcblx0XHRcdHRyYW5zaXRpb246IHRyYW5zZm9ybSAwLjJzIGVhc2U7XG5cdFx0YDtcblxuXHRcdC8vIERyb3Bkb3duIG1lbnUgKGluaXRpYWxseSBoaWRkZW4pXG5cdFx0Y29uc3QgZHJvcGRvd25NZW51ID0gZHJvcGRvd25Db250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1wcm92aWRlci1kcm9wZG93bi1tZW51JyB9KTtcblx0XHRkcm9wZG93bk1lbnUuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRcdHRvcDogMTAwJTtcblx0XHRcdHJpZ2h0OiAwO1xuXHRcdFx0bWluLXdpZHRoOiAxNTBweDtcblx0XHRcdGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtcHJpbWFyeSk7XG5cdFx0XHRib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG5cdFx0XHRib3JkZXItcmFkaXVzOiA2cHg7XG5cdFx0XHRib3gtc2hhZG93OiAwIDRweCAxMnB4IHJnYmEoMCwgMCwgMCwgMC4xNSk7XG5cdFx0XHR6LWluZGV4OiAxMDAwO1xuXHRcdFx0ZGlzcGxheTogbm9uZTtcblx0XHRcdG92ZXJmbG93OiBoaWRkZW47XG5cdFx0YDtcblxuXHRcdGxldCBpc0Ryb3Bkb3duT3BlbiA9IGZhbHNlO1xuXG5cdFx0Ly8gVXBkYXRlIGN1cnJlbnQgcHJvdmlkZXIgZGlzcGxheVxuXHRcdGNvbnN0IHVwZGF0ZUN1cnJlbnRQcm92aWRlciA9IGFzeW5jICgpID0+IHtcblx0XHRcdGNvbnN0IGN1cnJlbnRQcm92aWRlclR5cGUgPSBhd2FpdCB0aGlzLnBsdWdpbi5haVByb3ZpZGVyTWFuYWdlci5nZXRDdXJyZW50UHJvdmlkZXJUeXBlKCk7XG5cdFx0XHRpZiAoY3VycmVudFByb3ZpZGVyVHlwZSkge1xuXHRcdFx0XHRjb25zdCBkaXNwbGF5VGV4dCA9IHRoaXMuZ2V0UHJvdmlkZXJXaXRoTW9kZWxEaXNwbGF5TmFtZShjdXJyZW50UHJvdmlkZXJUeXBlKTtcblx0XHRcdFx0cHJvdmlkZXJOYW1lLnNldFRleHQoZGlzcGxheVRleHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y29uc3QgY3VycmVudFByb3ZpZGVyTmFtZSA9IGF3YWl0IHRoaXMucGx1Z2luLmFpUHJvdmlkZXJNYW5hZ2VyLmdldEN1cnJlbnRQcm92aWRlck5hbWUoKTtcblx0XHRcdFx0cHJvdmlkZXJOYW1lLnNldFRleHQoY3VycmVudFByb3ZpZGVyTmFtZSk7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIFRvZ2dsZSBkcm9wZG93blxuXHRcdGNvbnN0IHRvZ2dsZURyb3Bkb3duID0gKCkgPT4ge1xuXHRcdFx0aXNEcm9wZG93bk9wZW4gPSAhaXNEcm9wZG93bk9wZW47XG5cdFx0XHRkcm9wZG93bk1lbnUuc3R5bGUuZGlzcGxheSA9IGlzRHJvcGRvd25PcGVuID8gJ2Jsb2NrJyA6ICdub25lJztcblx0XHRcdGRyb3Bkb3duQXJyb3cuc3R5bGUudHJhbnNmb3JtID0gaXNEcm9wZG93bk9wZW4gPyAncm90YXRlKDE4MGRlZyknIDogJ3JvdGF0ZSgwZGVnKSc7XG5cdFx0XHRcblx0XHRcdGlmIChpc0Ryb3Bkb3duT3Blbikge1xuXHRcdFx0XHR0aGlzLnBvcHVsYXRlUHJvdmlkZXJEcm9wZG93bihkcm9wZG93bk1lbnUpO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHQvLyBDbG9zZSBkcm9wZG93biB3aGVuIGNsaWNraW5nIG91dHNpZGVcblx0XHRjb25zdCBjbG9zZURyb3Bkb3duOiBFdmVudExpc3RlbmVyID0gKGV2ZW50OiBFdmVudCkgPT4ge1xuXHRcdFx0aWYgKCFkcm9wZG93bkNvbnRhaW5lci5jb250YWlucyhldmVudC50YXJnZXQgYXMgTm9kZSkpIHtcblx0XHRcdFx0aXNEcm9wZG93bk9wZW4gPSBmYWxzZTtcblx0XHRcdFx0ZHJvcGRvd25NZW51LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHRcdGRyb3Bkb3duQXJyb3cuc3R5bGUudHJhbnNmb3JtID0gJ3JvdGF0ZSgwZGVnKSc7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdHByb3ZpZGVyQnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGUpID0+IHtcblx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHR0b2dnbGVEcm9wZG93bigpO1xuXHRcdH0pO1xuXG5cdFx0Ly8gQWRkIGdsb2JhbCBjbGljayBsaXN0ZW5lclxuXHRcdHRoaXMuYWRkVHJhY2tlZEV2ZW50TGlzdGVuZXIoZG9jdW1lbnQsICdjbGljaycsIGNsb3NlRHJvcGRvd24pO1xuXG5cdFx0Ly8gVXBkYXRlIHByb3ZpZGVyIG5hbWUgaW5pdGlhbGx5XG5cdFx0dXBkYXRlQ3VycmVudFByb3ZpZGVyKCk7XG5cblx0XHQvLyBTdG9yZSByZWZlcmVuY2UgZm9yIGNsZWFudXBcblx0XHQodGhpcyBhcyBhbnkpLmN1cnJlbnRQcm92aWRlckRyb3Bkb3duID0ge1xuXHRcdFx0dXBkYXRlQ3VycmVudFByb3ZpZGVyLFxuXHRcdFx0Y2xlYW51cDogKCkgPT4gZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBjbG9zZURyb3Bkb3duKVxuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogR2V0IGF2YWlsYWJsZSBtb2RlbHMgZm9yIGEgcHJvdmlkZXIgdHlwZVxuXHQgKi9cblx0cHJpdmF0ZSBnZXRBdmFpbGFibGVNb2RlbHMocHJvdmlkZXJUeXBlOiBzdHJpbmcpOiB7IHZhbHVlOiBzdHJpbmc7IGxhYmVsOiBzdHJpbmcgfVtdIHtcblx0XHRyZXR1cm4gZ2V0QXZhaWxhYmxlTW9kZWxzKHByb3ZpZGVyVHlwZSwgdGhpcy5wbHVnaW4uc2V0dGluZ3MpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBjdXJyZW50IG1vZGVsIGZvciBhIHByb3ZpZGVyIHR5cGVcblx0ICovXG5cdHByaXZhdGUgZ2V0Q3VycmVudE1vZGVsKHByb3ZpZGVyVHlwZTogc3RyaW5nKTogc3RyaW5nIHtcblx0XHRjb25zdCBwcm92aWRlcnMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5haVByb3ZpZGVycyBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuXHRcdGNvbnN0IGN1cnJlbnRNb2RlbCA9IHByb3ZpZGVyc1twcm92aWRlclR5cGVdPy5tb2RlbDtcblx0XHRcblx0XHRpZiAoY3VycmVudE1vZGVsKSB7XG5cdFx0XHRyZXR1cm4gY3VycmVudE1vZGVsO1xuXHRcdH1cblx0XHRcblx0XHQvLyBHZXQgZGVmYXVsdCBtb2RlbCAoZmlyc3QgYXZhaWxhYmxlIG1vZGVsIGZvciB0aGUgcHJvdmlkZXIpXG5cdFx0Y29uc3QgYXZhaWxhYmxlTW9kZWxzID0gdGhpcy5nZXRBdmFpbGFibGVNb2RlbHMocHJvdmlkZXJUeXBlKTtcblx0XHRyZXR1cm4gYXZhaWxhYmxlTW9kZWxzLmxlbmd0aCA+IDAgPyBhdmFpbGFibGVNb2RlbHNbMF0udmFsdWUgOiAnJztcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgbW9kZWwgZGlzcGxheSBuYW1lIGZyb20gbW9kZWwgdmFsdWVcblx0ICovXG5cdHByaXZhdGUgZ2V0TW9kZWxEaXNwbGF5TmFtZShwcm92aWRlclR5cGU6IHN0cmluZywgbW9kZWxWYWx1ZTogc3RyaW5nKTogc3RyaW5nIHtcblx0XHRjb25zdCBtb2RlbHMgPSB0aGlzLmdldEF2YWlsYWJsZU1vZGVscyhwcm92aWRlclR5cGUpO1xuXHRcdGNvbnN0IG1vZGVsID0gbW9kZWxzLmZpbmQobSA9PiBtLnZhbHVlID09PSBtb2RlbFZhbHVlKTtcblx0XHRyZXR1cm4gbW9kZWwgPyBtb2RlbC5sYWJlbCA6IG1vZGVsVmFsdWU7XG5cdH1cblxuXHQvKipcblx0ICogU3dpdGNoIHRvIGEgc3BlY2lmaWMgbW9kZWwgZm9yIGEgcHJvdmlkZXJcblx0ICovXG5cdHByaXZhdGUgYXN5bmMgc3dpdGNoVG9Nb2RlbChwcm92aWRlclR5cGU6IHN0cmluZywgbW9kZWxWYWx1ZTogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgYWxyZWFkeSBvbiB0aGlzIHByb3ZpZGVyXG5cdFx0Y29uc3QgY3VycmVudFByb3ZpZGVyVHlwZSA9IGF3YWl0IHRoaXMucGx1Z2luLmFpUHJvdmlkZXJNYW5hZ2VyLmdldEN1cnJlbnRQcm92aWRlclR5cGUoKTtcblx0XHRjb25zdCBpc0N1cnJlbnRQcm92aWRlciA9IGN1cnJlbnRQcm92aWRlclR5cGUgPT09IHByb3ZpZGVyVHlwZTtcblx0XHRcblx0XHQvLyBVcGRhdGUgc2V0dGluZ3Ncblx0XHRjb25zdCBwcm92aWRlcnMgPSB0aGlzLnBsdWdpbi5zZXR0aW5ncy5haVByb3ZpZGVycyBhcyBSZWNvcmQ8c3RyaW5nLCBhbnk+O1xuXHRcdHByb3ZpZGVyc1twcm92aWRlclR5cGVdLm1vZGVsID0gbW9kZWxWYWx1ZTtcblx0XHRhd2FpdCB0aGlzLnBsdWdpbi5zYXZlU2V0dGluZ3MoKTtcblx0XHRcblx0XHRpZiAoaXNDdXJyZW50UHJvdmlkZXIpIHtcblx0XHRcdC8vIEp1c3Qgc3dpdGNoaW5nIG1vZGVscyBvbiBjdXJyZW50IHByb3ZpZGVyIC0gc2hvdyBtb2RlbCBzd2l0Y2ggbWVzc2FnZVxuXHRcdFx0Y29uc3QgbW9kZWxOYW1lID0gdGhpcy5nZXRNb2RlbERpc3BsYXlOYW1lKHByb3ZpZGVyVHlwZSwgbW9kZWxWYWx1ZSk7XG5cdFx0XHRjb25zdCBwcm92aWRlck5hbWUgPSB0aGlzLmdldFByb3ZpZGVyRGlzcGxheU5hbWUocHJvdmlkZXJUeXBlKTtcblx0XHRcdHRoaXMuYWRkU3VjY2Vzc01lc3NhZ2UoYFx1MjcxMyBTd2l0Y2hlZCB0byAke3Byb3ZpZGVyTmFtZX0gJHttb2RlbE5hbWV9YCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIFN3aXRjaGluZyB0byBkaWZmZXJlbnQgcHJvdmlkZXIgLSB0aGlzIHdpbGwgc2hvdyB0aGUgcHJvdmlkZXIrbW9kZWwgbWVzc2FnZVxuXHRcdFx0YXdhaXQgdGhpcy5zd2l0Y2hUb1Byb3ZpZGVyKHByb3ZpZGVyVHlwZSk7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIFVwZGF0ZSB0aGUgZHJvcGRvd24gZGlzcGxheVxuXHRcdGlmICgodGhpcyBhcyBhbnkpLmN1cnJlbnRQcm92aWRlckRyb3Bkb3duKSB7XG5cdFx0XHQodGhpcyBhcyBhbnkpLmN1cnJlbnRQcm92aWRlckRyb3Bkb3duLnVwZGF0ZUN1cnJlbnRQcm92aWRlcigpO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBQb3B1bGF0ZSBwcm92aWRlciBkcm9wZG93biB3aXRoIGF2YWlsYWJsZSBwcm92aWRlcnNcblx0ICovXG5cdHByaXZhdGUgYXN5bmMgcG9wdWxhdGVQcm92aWRlckRyb3Bkb3duKGRyb3Bkb3duTWVudTogSFRNTEVsZW1lbnQpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRkcm9wZG93bk1lbnUuZW1wdHkoKTtcblxuXHRcdGNvbnN0IGFsbG93ZWRQcm92aWRlcnMgPSB0aGlzLnBsdWdpbi5haVByb3ZpZGVyTWFuYWdlci5nZXRBbGxvd2VkUHJvdmlkZXJzKCk7XG5cdFx0Y29uc3QgY3VycmVudFByb3ZpZGVyTmFtZSA9IGF3YWl0IHRoaXMucGx1Z2luLmFpUHJvdmlkZXJNYW5hZ2VyLmdldEN1cnJlbnRQcm92aWRlck5hbWUoKTtcblxuXHRcdGZvciAoY29uc3QgcHJvdmlkZXJUeXBlIG9mIGFsbG93ZWRQcm92aWRlcnMpIHtcblx0XHRcdGlmIChwcm92aWRlclR5cGUgPT09ICdub25lJykgY29udGludWU7XG5cblx0XHRcdC8vIENoZWNrIGlmIHByb3ZpZGVyIGhhcyBBUEkga2V5IGNvbmZpZ3VyZWRcblx0XHRcdGNvbnN0IHByb3ZpZGVycyA9IHRoaXMucGx1Z2luLnNldHRpbmdzLmFpUHJvdmlkZXJzIGFzIFJlY29yZDxzdHJpbmcsIGFueT47XG5cdFx0XHRjb25zdCBoYXNBcGlLZXkgPSBwcm92aWRlcnNbcHJvdmlkZXJUeXBlXT8uYXBpS2V5O1xuXHRcdFx0aWYgKCFoYXNBcGlLZXkgJiYgcHJvdmlkZXJUeXBlICE9PSAnb2xsYW1hJykgY29udGludWU7XG5cblx0XHRcdGNvbnN0IG1vZGVscyA9IHRoaXMuZ2V0QXZhaWxhYmxlTW9kZWxzKHByb3ZpZGVyVHlwZSk7XG5cdFx0XHRjb25zdCBjdXJyZW50TW9kZWwgPSB0aGlzLmdldEN1cnJlbnRNb2RlbChwcm92aWRlclR5cGUpO1xuXHRcdFx0Y29uc3QgZGlzcGxheU5hbWUgPSB0aGlzLmdldFByb3ZpZGVyRGlzcGxheU5hbWUocHJvdmlkZXJUeXBlKTtcblx0XHRcdGNvbnN0IGlzQ3VycmVudCA9IGRpc3BsYXlOYW1lID09PSBjdXJyZW50UHJvdmlkZXJOYW1lO1xuXG5cdFx0XHQvLyBDcmVhdGUgcHJvdmlkZXIgY29udGFpbmVyXG5cdFx0XHRjb25zdCBwcm92aWRlckNvbnRhaW5lciA9IGRyb3Bkb3duTWVudS5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLXByb3ZpZGVyLWNvbnRhaW5lcicgfSk7XG5cdFx0XHRcblx0XHRcdC8vIE1haW4gcHJvdmlkZXIgaXRlbVxuXHRcdFx0Y29uc3QgcHJvdmlkZXJJdGVtID0gcHJvdmlkZXJDb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1wcm92aWRlci1kcm9wZG93bi1pdGVtJyB9KTtcblx0XHRcdHByb3ZpZGVySXRlbS5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0XHRwYWRkaW5nOiA4cHggMTJweDtcblx0XHRcdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdFx0XHRnYXA6IDhweDtcblx0XHRcdFx0Zm9udC1zaXplOiAwLjg1ZW07XG5cdFx0XHRcdGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XG5cdFx0XHRcdHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4ycyBlYXNlO1xuXHRcdFx0XHRwb3NpdGlvbjogcmVsYXRpdmU7XG5cdFx0XHRgO1xuXG5cdFx0XHQvLyBQcm92aWRlciBpY29uL2RvdFxuXHRcdFx0Y29uc3QgcHJvdmlkZXJEb3QgPSBwcm92aWRlckl0ZW0uY3JlYXRlU3BhbigpO1xuXHRcdFx0cHJvdmlkZXJEb3Quc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdFx0d2lkdGg6IDhweDtcblx0XHRcdFx0aGVpZ2h0OiA4cHg7XG5cdFx0XHRcdGJvcmRlci1yYWRpdXM6IDUwJTtcblx0XHRcdFx0YmFja2dyb3VuZDogJHt0aGlzLmdldFByb3ZpZGVyQ29sb3IocHJvdmlkZXJUeXBlKX07XG5cdFx0XHRgO1xuXG5cdFx0XHQvLyBQcm92aWRlciBuYW1lIG9ubHkgKG1vZGVscyBhcmUgc2hvd24gaW4gc3VibWVudSlcblx0XHRcdGNvbnN0IG5hbWVTcGFuID0gcHJvdmlkZXJJdGVtLmNyZWF0ZVNwYW4oeyB0ZXh0OiBkaXNwbGF5TmFtZSB9KTtcblx0XHRcdG5hbWVTcGFuLnN0eWxlLmZsZXggPSAnMSc7XG5cblx0XHRcdC8vIEV4cGFuZCBhcnJvdyBmb3IgbW9kZWxzIChvbmx5IGlmIG1vZGVscyBhdmFpbGFibGUpXG5cdFx0XHRsZXQgZXhwYW5kQXJyb3c6IEhUTUxFbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cdFx0XHRpZiAobW9kZWxzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0ZXhwYW5kQXJyb3cgPSBwcm92aWRlckl0ZW0uY3JlYXRlU3Bhbih7IHRleHQ6ICdcdTI1QjYnIH0pO1xuXHRcdFx0XHRleHBhbmRBcnJvdy5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0XHRcdGZvbnQtc2l6ZTogMC42ZW07XG5cdFx0XHRcdFx0dHJhbnNpdGlvbjogdHJhbnNmb3JtIDAuMnMgZWFzZTtcblx0XHRcdFx0XHRjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7XG5cdFx0XHRcdGA7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hcmsgY3VycmVudCBwcm92aWRlclxuXHRcdFx0aWYgKGlzQ3VycmVudCkge1xuXHRcdFx0XHRwcm92aWRlckl0ZW0uc3R5bGUuYmFja2dyb3VuZCA9ICd2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKSc7XG5cdFx0XHRcdG5hbWVTcGFuLnN0eWxlLmZvbnRXZWlnaHQgPSAnYm9sZCc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1vZGVscyBzdWJtZW51XG5cdFx0XHRsZXQgbW9kZWxzTWVudTogSFRNTEVsZW1lbnQgfCBudWxsID0gbnVsbDtcblx0XHRcdGxldCBpc0V4cGFuZGVkID0gZmFsc2U7XG5cblx0XHRcdGlmIChtb2RlbHMubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRtb2RlbHNNZW51ID0gcHJvdmlkZXJDb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1tb2RlbHMtc3VibWVudScgfSk7XG5cdFx0XHRcdG1vZGVsc01lbnUuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdFx0XHRkaXNwbGF5OiBub25lO1xuXHRcdFx0XHRcdGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtcHJpbWFyeSk7XG5cdFx0XHRcdFx0Ym9yZGVyLWxlZnQ6IDJweCBzb2xpZCAke3RoaXMuZ2V0UHJvdmlkZXJDb2xvcihwcm92aWRlclR5cGUpfTtcblx0XHRcdFx0XHRtYXJnaW4tbGVmdDogMTZweDtcblx0XHRcdFx0YDtcblxuXHRcdFx0XHQvLyBQb3B1bGF0ZSBtb2RlbHNcblx0XHRcdFx0Zm9yIChjb25zdCBtb2RlbCBvZiBtb2RlbHMpIHtcblx0XHRcdFx0XHRjb25zdCBtb2RlbEl0ZW0gPSBtb2RlbHNNZW51LmNyZWF0ZURpdih7IGNsczogJ25vdmEtbW9kZWwtaXRlbScgfSk7XG5cdFx0XHRcdFx0bW9kZWxJdGVtLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRcdFx0XHRwYWRkaW5nOiA2cHggMTJweDtcblx0XHRcdFx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHRcdFx0XHRcdGZvbnQtc2l6ZTogMC44ZW07XG5cdFx0XHRcdFx0XHRjb2xvcjogdmFyKC0tdGV4dC1ub3JtYWwpO1xuXHRcdFx0XHRcdFx0dHJhbnNpdGlvbjogYmFja2dyb3VuZC1jb2xvciAwLjJzIGVhc2U7XG5cdFx0XHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRcdFx0XHRcdGdhcDogOHB4O1xuXHRcdFx0XHRcdGA7XG5cblx0XHRcdFx0XHQvLyBNb2RlbCBpbmRpY2F0b3Jcblx0XHRcdFx0XHRjb25zdCBtb2RlbERvdCA9IG1vZGVsSXRlbS5jcmVhdGVTcGFuKCk7XG5cdFx0XHRcdFx0bW9kZWxEb3Quc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdFx0XHRcdHdpZHRoOiA0cHg7XG5cdFx0XHRcdFx0XHRoZWlnaHQ6IDRweDtcblx0XHRcdFx0XHRcdGJvcmRlci1yYWRpdXM6IDUwJTtcblx0XHRcdFx0XHRcdGJhY2tncm91bmQ6ICR7bW9kZWwudmFsdWUgPT09IGN1cnJlbnRNb2RlbCA/IHRoaXMuZ2V0UHJvdmlkZXJDb2xvcihwcm92aWRlclR5cGUpIDogJ3ZhcigtLXRleHQtbXV0ZWQpJ307XG5cdFx0XHRcdFx0YDtcblxuXHRcdFx0XHRcdGNvbnN0IG1vZGVsTmFtZSA9IG1vZGVsSXRlbS5jcmVhdGVTcGFuKHsgdGV4dDogbW9kZWwubGFiZWwgfSk7XG5cdFx0XHRcdFx0aWYgKG1vZGVsLnZhbHVlID09PSBjdXJyZW50TW9kZWwpIHtcblx0XHRcdFx0XHRcdG1vZGVsTmFtZS5zdHlsZS5mb250V2VpZ2h0ID0gJ2JvbGQnO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE1vZGVsIGNsaWNrIGhhbmRsZXJcblx0XHRcdFx0XHRtb2RlbEl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZSkgPT4ge1xuXHRcdFx0XHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuc3dpdGNoVG9Nb2RlbChwcm92aWRlclR5cGUsIG1vZGVsLnZhbHVlKTtcblx0XHRcdFx0XHRcdC8vIENsb3NlIGRyb3Bkb3duXG5cdFx0XHRcdFx0XHRkcm9wZG93bk1lbnUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcblx0XHRcdFx0XHR9KTtcblxuXHRcdFx0XHRcdC8vIE1vZGVsIGhvdmVyIGVmZmVjdFxuXHRcdFx0XHRcdG1vZGVsSXRlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWVudGVyJywgKCkgPT4ge1xuXHRcdFx0XHRcdFx0bW9kZWxJdGVtLnN0eWxlLmJhY2tncm91bmQgPSAndmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXItaG92ZXIpJztcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRtb2RlbEl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcblx0XHRcdFx0XHRcdG1vZGVsSXRlbS5zdHlsZS5iYWNrZ3JvdW5kID0gJ3RyYW5zcGFyZW50Jztcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBQcm92aWRlciBjbGljayBoYW5kbGVyXG5cdFx0XHRwcm92aWRlckl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBhc3luYyAoZSkgPT4ge1xuXHRcdFx0XHRpZiAobW9kZWxzLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHQvLyBUb2dnbGUgc3VibWVudVxuXHRcdFx0XHRcdGUuc3RvcFByb3BhZ2F0aW9uKCk7XG5cdFx0XHRcdFx0aXNFeHBhbmRlZCA9ICFpc0V4cGFuZGVkO1xuXHRcdFx0XHRcdGlmIChtb2RlbHNNZW51KSB7XG5cdFx0XHRcdFx0XHRtb2RlbHNNZW51LnN0eWxlLmRpc3BsYXkgPSBpc0V4cGFuZGVkID8gJ2Jsb2NrJyA6ICdub25lJztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKGV4cGFuZEFycm93KSB7XG5cdFx0XHRcdFx0XHRleHBhbmRBcnJvdy5zdHlsZS50cmFuc2Zvcm0gPSBpc0V4cGFuZGVkID8gJ3JvdGF0ZSg5MGRlZyknIDogJ3JvdGF0ZSgwZGVnKSc7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIFN3aXRjaCBwcm92aWRlciBkaXJlY3RseSAoZm9yIE9sbGFtYSBvciBwcm92aWRlcnMgd2l0aG91dCBtb2RlbHMpXG5cdFx0XHRcdFx0aWYgKCFpc0N1cnJlbnQpIHtcblx0XHRcdFx0XHRcdGF3YWl0IHRoaXMuc3dpdGNoVG9Qcm92aWRlcihwcm92aWRlclR5cGUpO1xuXHRcdFx0XHRcdFx0ZHJvcGRvd25NZW51LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHRcdFx0XHRpZiAoKHRoaXMgYXMgYW55KS5jdXJyZW50UHJvdmlkZXJEcm9wZG93bikge1xuXHRcdFx0XHRcdFx0XHQodGhpcyBhcyBhbnkpLmN1cnJlbnRQcm92aWRlckRyb3Bkb3duLnVwZGF0ZUN1cnJlbnRQcm92aWRlcigpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEhvdmVyIGVmZmVjdFxuXHRcdFx0cHJvdmlkZXJJdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiB7XG5cdFx0XHRcdGlmICghaXNDdXJyZW50KSB7XG5cdFx0XHRcdFx0cHJvdmlkZXJJdGVtLnN0eWxlLmJhY2tncm91bmQgPSAndmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXItaG92ZXIpJztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHByb3ZpZGVySXRlbS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWxlYXZlJywgKCkgPT4ge1xuXHRcdFx0XHRpZiAoIWlzQ3VycmVudCAmJiAhaXNFeHBhbmRlZCkge1xuXHRcdFx0XHRcdHByb3ZpZGVySXRlbS5zdHlsZS5iYWNrZ3JvdW5kID0gJ3RyYW5zcGFyZW50Jztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIENyZWF0ZSBhIG1lc3NhZ2Ugd2l0aCBhIGNsZWFuIGljb24gKHJlcGxhY2VzIGVtb2ppKVxuXHQgKi9cblx0cHJpdmF0ZSBjcmVhdGVJY29uTWVzc2FnZShpY29uTmFtZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRcdGNvbnN0IGljb25TdmcgPSB0aGlzLmdldE9ic2lkaWFuSWNvbihpY29uTmFtZSwgJzE0cHgnKTtcblx0XHQvLyBSZXR1cm4gYXMgSFRNTCB0aGF0IHdpbGwgYmUgaW50ZXJwcmV0ZWQgYnkgdGhlIG1lc3NhZ2UgZGlzcGxheVxuXHRcdHJldHVybiBgPHNwYW4gc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmUtZmxleDsgYWxpZ24taXRlbXM6IGNlbnRlcjsgZ2FwOiA2cHg7XCI+JHtpY29uU3ZnfTxzcGFuPiR7bWVzc2FnZX08L3NwYW4+PC9zcGFuPmA7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlIGFuIGlubGluZSBpY29uIGZvciB1c2UgaW4gaW5uZXJIVE1MXG5cdCAqL1xuXHRwcml2YXRlIGNyZWF0ZUlubGluZUljb24oaWNvbk5hbWU6IHN0cmluZywgc2l6ZTogc3RyaW5nID0gJzE0cHgnKTogc3RyaW5nIHtcblx0XHRyZXR1cm4gdGhpcy5nZXRPYnNpZGlhbkljb24oaWNvbk5hbWUsIHNpemUpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBPYnNpZGlhbi1zdHlsZSBpY29uIFNWR1xuXHQgKi9cblx0cHJpdmF0ZSBnZXRPYnNpZGlhbkljb24oaWNvbk5hbWU6IHN0cmluZywgc2l6ZTogc3RyaW5nID0gJzE0cHgnKTogc3RyaW5nIHtcblx0XHRjb25zdCBpY29uczogUmVjb3JkPHN0cmluZywgc3RyaW5nPiA9IHtcblx0XHRcdCd6YXAnOiBgPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgc3R5bGU9XCJ3aWR0aDogJHtzaXplfTsgaGVpZ2h0OiAke3NpemV9O1wiPlxuXHRcdFx0XHQ8cGF0aCBkPVwiTTEzIDJMMyAxNEgxMkwxMSAyMkwyMSAxMEgxMkwxMyAyWlwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIi8+XG5cdFx0XHQ8L3N2Zz5gLFxuXHRcdFx0J3JlZnJlc2gtY3cnOiBgPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgc3R5bGU9XCJ3aWR0aDogJHtzaXplfTsgaGVpZ2h0OiAke3NpemV9O1wiPlxuXHRcdFx0XHQ8cGF0aCBkPVwiTTMgMTJBOSA5IDAgMCAwIDIxIDEyQTkgOSAwIDAgMCAzIDEyXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiLz5cblx0XHRcdFx0PHBhdGggZD1cIk0yMSAxMkwxNyA4XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiLz5cblx0XHRcdFx0PHBhdGggZD1cIk0yMSAxMkwxNyAxNlwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIi8+XG5cdFx0XHQ8L3N2Zz5gLFxuXHRcdFx0J2VkaXQnOiBgPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgc3R5bGU9XCJ3aWR0aDogJHtzaXplfTsgaGVpZ2h0OiAke3NpemV9O1wiPlxuXHRcdFx0XHQ8cGF0aCBkPVwiTTExIDRINEEyIDIgMCAwIDAgMiA2VjIwQTIgMiAwIDAgMCA0IDIySDE4QTIgMiAwIDAgMCAyMCAyMFYxM1wiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIi8+XG5cdFx0XHRcdDxwYXRoIGQ9XCJNMTguNSAyLjVBMi4xMiAyLjEyIDAgMCAxIDIxIDVMMTIgMTRMOCAxNUw5IDExTDE4LjUgMi41WlwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIi8+XG5cdFx0XHQ8L3N2Zz5gLFxuXHRcdFx0J2hlbHAtY2lyY2xlJzogYDxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHN0eWxlPVwid2lkdGg6ICR7c2l6ZX07IGhlaWdodDogJHtzaXplfTtcIj5cblx0XHRcdFx0PGNpcmNsZSBjeD1cIjEyXCIgY3k9XCIxMlwiIHI9XCIxMFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIi8+XG5cdFx0XHRcdDxwYXRoIGQ9XCJNOS4wOSA5QTMgMyAwIDAgMSAxMiA2QTMgMyAwIDAgMSAxNSA5QzE1IDEwLjUgMTIgMTEgMTIgMTFcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIvPlxuXHRcdFx0XHQ8Y2lyY2xlIGN4PVwiMTJcIiBjeT1cIjE3XCIgcj1cIjFcIiBmaWxsPVwiY3VycmVudENvbG9yXCIvPlxuXHRcdFx0PC9zdmc+YCxcblx0XHRcdCdib29rLW9wZW4nOiBgPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgc3R5bGU9XCJ3aWR0aDogJHtzaXplfTsgaGVpZ2h0OiAke3NpemV9O1wiPlxuXHRcdFx0XHQ8cGF0aCBkPVwiTTIgM0g4QTQgNCAwIDAgMSAxMiA3QTQgNCAwIDAgMSAxNiAzSDIyXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiLz5cblx0XHRcdFx0PHBhdGggZD1cIk0yIDNWMTlBMiAyIDAgMCAwIDQgMjFIOVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIi8+XG5cdFx0XHRcdDxwYXRoIGQ9XCJNMjIgM1YxOUEyIDIgMCAwIDEgMjAgMjFIMTVcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIvPlxuXHRcdFx0XHQ8cGF0aCBkPVwiTTEyIDdWMjFcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIvPlxuXHRcdFx0PC9zdmc+YCxcblx0XHRcdCdtb3JlLWhvcml6b250YWwnOiBgPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgc3R5bGU9XCJ3aWR0aDogJHtzaXplfTsgaGVpZ2h0OiAke3NpemV9O1wiPlxuXHRcdFx0XHQ8Y2lyY2xlIGN4PVwiMTJcIiBjeT1cIjEyXCIgcj1cIjFcIiBmaWxsPVwiY3VycmVudENvbG9yXCIvPlxuXHRcdFx0XHQ8Y2lyY2xlIGN4PVwiMTlcIiBjeT1cIjEyXCIgcj1cIjFcIiBmaWxsPVwiY3VycmVudENvbG9yXCIvPlxuXHRcdFx0XHQ8Y2lyY2xlIGN4PVwiNVwiIGN5PVwiMTJcIiByPVwiMVwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIi8+XG5cdFx0XHQ8L3N2Zz5gLFxuXHRcdFx0J2ZpbGUtdGV4dCc6IGA8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBzdHlsZT1cIndpZHRoOiAke3NpemV9OyBoZWlnaHQ6ICR7c2l6ZX07XCI+XG5cdFx0XHRcdDxwYXRoIGQ9XCJNMTQgMkg2QTIgMiAwIDAgMCA0IDRWMjBBMiAyIDAgMCAwIDYgMjJIMThBMiAyIDAgMCAwIDIwIDIwVjhMMTQgMlpcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIvPlxuXHRcdFx0XHQ8cGF0aCBkPVwiTTE0IDJWOEgyMFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIi8+XG5cdFx0XHRcdDxwYXRoIGQ9XCJNMTYgMTNIOFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIi8+XG5cdFx0XHRcdDxwYXRoIGQ9XCJNMTYgMTdIOFwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIi8+XG5cdFx0XHRcdDxwYXRoIGQ9XCJNMTAgOUg4XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiLz5cblx0XHRcdDwvc3ZnPmAsXG5cdFx0XHQneCc6IGA8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBzdHlsZT1cIndpZHRoOiAke3NpemV9OyBoZWlnaHQ6ICR7c2l6ZX07XCI+XG5cdFx0XHRcdDxwYXRoIGQ9XCJNMTggNkw2IDE4XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiLz5cblx0XHRcdFx0PHBhdGggZD1cIk02IDZMMTggMThcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIvPlxuXHRcdFx0PC9zdmc+YCxcblx0XHRcdCdjaGVjay1jaXJjbGUnOiBgPHN2ZyB2aWV3Qm94PVwiMCAwIDI0IDI0XCIgZmlsbD1cIm5vbmVcIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgc3R5bGU9XCJ3aWR0aDogJHtzaXplfTsgaGVpZ2h0OiAke3NpemV9O1wiPlxuXHRcdFx0XHQ8Y2lyY2xlIGN4PVwiMTJcIiBjeT1cIjEyXCIgcj1cIjEwXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiLz5cblx0XHRcdFx0PHBhdGggZD1cIk05IDEyTDExIDE0TDE2IDlcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIvPlxuXHRcdFx0PC9zdmc+YCxcblx0XHRcdCd4LWNpcmNsZSc6IGA8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBzdHlsZT1cIndpZHRoOiAke3NpemV9OyBoZWlnaHQ6ICR7c2l6ZX07XCI+XG5cdFx0XHRcdDxjaXJjbGUgY3g9XCIxMlwiIGN5PVwiMTJcIiByPVwiMTBcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIvPlxuXHRcdFx0XHQ8cGF0aCBkPVwiTTE1IDlMOSAxNVwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIi8+XG5cdFx0XHRcdDxwYXRoIGQ9XCJNOSA5TDE1IDE1XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiLz5cblx0XHRcdDwvc3ZnPmAsXG5cdFx0XHQndHJhc2gtMic6IGA8c3ZnIHZpZXdCb3g9XCIwIDAgMjQgMjRcIiBmaWxsPVwibm9uZVwiIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiBzdHlsZT1cIndpZHRoOiAke3NpemV9OyBoZWlnaHQ6ICR7c2l6ZX07XCI+XG5cdFx0XHRcdDxwYXRoIGQ9XCJNMyA2SDVIMjFcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIvPlxuXHRcdFx0XHQ8cGF0aCBkPVwiTTggNlY0QTIgMiAwIDAgMSAxMCAySDE0QTIgMiAwIDAgMSAxNiA0VjZNMTkgNlYyMEEyIDIgMCAwIDEgMTcgMjJIN0EyIDIgMCAwIDEgNSAyMFY2SDE5WlwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjJcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIgc3Ryb2tlLWxpbmVqb2luPVwicm91bmRcIi8+XG5cdFx0XHRcdDxwYXRoIGQ9XCJNMTAgMTFWMTdcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiIHN0cm9rZS1saW5lam9pbj1cInJvdW5kXCIvPlxuXHRcdFx0XHQ8cGF0aCBkPVwiTTE0IDExVjE3XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiLz5cblx0XHRcdDwvc3ZnPmBcblx0XHR9O1xuXHRcdFxuXHRcdHJldHVybiBpY29uc1tpY29uTmFtZV0gfHwgaWNvbnNbJ2hlbHAtY2lyY2xlJ107IC8vIEZhbGxiYWNrIHRvIGhlbHAtY2lyY2xlIGlmIGljb24gbm90IGZvdW5kXG5cdH1cblxuXHQvKipcblx0ICogR2V0IGRpc3BsYXkgbmFtZSBmb3IgcHJvdmlkZXJcblx0ICovXG5cdHByaXZhdGUgZ2V0UHJvdmlkZXJEaXNwbGF5TmFtZShwcm92aWRlclR5cGU6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0Y29uc3QgbmFtZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG5cdFx0XHQnY2xhdWRlJzogJ0FudGhyb3BpYycsXG5cdFx0XHQnb3BlbmFpJzogJ09wZW5BSScsXG5cdFx0XHQnZ29vZ2xlJzogJ0dvb2dsZScsXG5cdFx0XHQnb2xsYW1hJzogJ09sbGFtYScsXG5cdFx0XHQnbm9uZSc6ICdOb25lJ1xuXHRcdH07XG5cdFx0cmV0dXJuIG5hbWVzW3Byb3ZpZGVyVHlwZV0gfHwgcHJvdmlkZXJUeXBlO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBkaXNwbGF5IG5hbWUgZm9yIGhlYWRlciAoanVzdCBtb2RlbCBuYW1lIGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIHByb3ZpZGVyIG5hbWUpXG5cdCAqL1xuXHRwcml2YXRlIGdldFByb3ZpZGVyV2l0aE1vZGVsRGlzcGxheU5hbWUocHJvdmlkZXJUeXBlOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRcdGNvbnN0IG1vZGVscyA9IHRoaXMuZ2V0QXZhaWxhYmxlTW9kZWxzKHByb3ZpZGVyVHlwZSk7XG5cdFx0XG5cdFx0aWYgKG1vZGVscy5sZW5ndGggPiAwKSB7XG5cdFx0XHRjb25zdCBjdXJyZW50TW9kZWwgPSB0aGlzLmdldEN1cnJlbnRNb2RlbChwcm92aWRlclR5cGUpO1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0TW9kZWxEaXNwbGF5TmFtZShwcm92aWRlclR5cGUsIGN1cnJlbnRNb2RlbCk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiB0aGlzLmdldFByb3ZpZGVyRGlzcGxheU5hbWUocHJvdmlkZXJUeXBlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgY29sb3IgZm9yIHByb3ZpZGVyIHR5cGVcblx0ICovXG5cdHByaXZhdGUgZ2V0UHJvdmlkZXJDb2xvcihwcm92aWRlclR5cGU6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0Ly8gVXNlIHRoZW1lLWNvbXBhdGlibGUgY29sb3JzIGluc3RlYWQgb2YgaGFyZGNvZGVkIGhleCB2YWx1ZXNcblx0XHRjb25zdCBjb2xvcnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG5cdFx0XHQnY2xhdWRlJzogJ3ZhcigtLWNvbG9yLW9yYW5nZSknLFxuXHRcdFx0J29wZW5haSc6ICd2YXIoLS1jb2xvci1ncmVlbiknLFxuXHRcdFx0J2dvb2dsZSc6ICd2YXIoLS1jb2xvci1ibHVlKScsXG5cdFx0XHQnb2xsYW1hJzogJ3ZhcigtLWNvbG9yLXB1cnBsZSknLFxuXHRcdFx0J25vbmUnOiAndmFyKC0tdGV4dC1tdXRlZCknXG5cdFx0fTtcblx0XHRyZXR1cm4gY29sb3JzW3Byb3ZpZGVyVHlwZV0gfHwgJ3ZhcigtLXRleHQtc3VjY2VzcyknO1xuXHR9XG5cblx0LyoqXG5cdCAqIFN3aXRjaCB0byBhIGRpZmZlcmVudCBwcm92aWRlciBhbmQgdXBkYXRlIGNvbnZlcnNhdGlvbiBjb250ZXh0XG5cdCAqL1xuXHRwcml2YXRlIGFzeW5jIHN3aXRjaFRvUHJvdmlkZXIocHJvdmlkZXJUeXBlOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcblx0XHR0cnkge1xuXHRcdFx0Ly8gQWRkIGEgc3lzdGVtIG1lc3NhZ2UgYWJvdXQgcHJvdmlkZXIgc3dpdGNoaW5nXG5cdFx0XHR0aGlzLmFkZFN1Y2Nlc3NNZXNzYWdlKGBcdTI3MTMgU3dpdGNoZWQgdG8gJHt0aGlzLmdldFByb3ZpZGVyV2l0aE1vZGVsRGlzcGxheU5hbWUocHJvdmlkZXJUeXBlKX1gKTtcblx0XHRcdFxuXHRcdFx0Ly8gVXBkYXRlIHRoZSBwbGF0Zm9ybSBzZXR0aW5ncyB0byB1c2UgdGhlIG5ldyBwcm92aWRlclxuXHRcdFx0Y29uc3QgcGxhdGZvcm0gPSBQbGF0Zm9ybS5pc01vYmlsZSA/ICdtb2JpbGUnIDogJ2Rlc2t0b3AnO1xuXHRcdFx0dGhpcy5wbHVnaW4uc2V0dGluZ3MucGxhdGZvcm1TZXR0aW5nc1twbGF0Zm9ybV0ucHJpbWFyeVByb3ZpZGVyID0gcHJvdmlkZXJUeXBlIGFzIGFueTtcblx0XHRcdGF3YWl0IHRoaXMucGx1Z2luLnNhdmVTZXR0aW5ncygpO1xuXHRcdFx0XG5cdFx0XHQvLyBSZS1pbml0aWFsaXplIHRoZSBwcm92aWRlciBtYW5hZ2VyIHdpdGggbmV3IHNldHRpbmdzXG5cdFx0XHR0aGlzLnBsdWdpbi5haVByb3ZpZGVyTWFuYWdlci51cGRhdGVTZXR0aW5ncyh0aGlzLnBsdWdpbi5zZXR0aW5ncyk7XG5cdFx0XHRcblx0XHRcdC8vIFJlZnJlc2ggc3RhdHVzIGluZGljYXRvcnNcblx0XHRcdHNldFRpbWVvdXQoKCkgPT4gdGhpcy5yZWZyZXNoUHJvdmlkZXJTdGF0dXMoKSwgMTAwKTtcblx0XHRcdFxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHQvLyBFcnJvciBzd2l0Y2hpbmcgcHJvdmlkZXIgLSBoYW5kbGVkIGJ5IFVJIGZlZWRiYWNrXG5cdFx0XHR0aGlzLmFkZEVycm9yTWVzc2FnZShgXHUyNzRDIEZhaWxlZCB0byBzd2l0Y2ggdG8gJHt0aGlzLmdldFByb3ZpZGVyV2l0aE1vZGVsRGlzcGxheU5hbWUocHJvdmlkZXJUeXBlKX1gKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2sgaWYgdGhlIGNvbW1hbmQgYnV0dG9uIHNob3VsZCBiZSBzaG93biBiYXNlZCBvbiBmZWF0dXJlIGF2YWlsYWJpbGl0eSBhbmQgdXNlciBwcmVmZXJlbmNlXG5cdCAqL1xuXHRwcml2YXRlIHNob3VsZFNob3dDb21tYW5kQnV0dG9uKCk6IGJvb2xlYW4ge1xuXHRcdC8vIENvbW1hbmQgYnV0dG9uIGlzIGdhdGVkIGJlaGluZCB0aGUgY29tbWFuZHMgZmVhdHVyZSBcblx0XHRpZiAoIXRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyLmlzRmVhdHVyZUVuYWJsZWQoJ2NvbW1hbmRzJykpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dDb21tYW5kQnV0dG9uO1xuXHR9XG5cblx0LyoqXG5cdCAqIFJlZnJlc2ggYWxsIFN1cGVybm92YS1nYXRlZCBVSSBlbGVtZW50cyB3aGVuIGxpY2Vuc2Ugc3RhdHVzIGNoYW5nZXNcblx0ICovXG5cdHJlZnJlc2hTdXBlcm5vdmFVSSgpOiB2b2lkIHtcblx0XHR0aGlzLnJlZnJlc2hDb21tYW5kQnV0dG9uKCk7XG5cdFx0Ly8gRnV0dXJlIFN1cGVybm92YSBmZWF0dXJlcyBjYW4gYWRkIHRoZWlyIHJlZnJlc2ggbG9naWMgaGVyZVxuXHR9XG5cblx0LyoqXG5cdCAqIFJlZnJlc2ggdGhlIGNvbW1hbmQgYnV0dG9uIHZpc2liaWxpdHkgd2hlbiBzZXR0aW5ncyBjaGFuZ2Vcblx0ICovXG5cdHJlZnJlc2hDb21tYW5kQnV0dG9uKCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmlucHV0SGFuZGxlcikge1xuXHRcdFx0dGhpcy5pbnB1dEhhbmRsZXIucmVmcmVzaENvbW1hbmRCdXR0b24oKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlIGlucHV0IHJvdyBsYXlvdXQgd2hlbiBjb21tYW5kIGJ1dHRvbiB2aXNpYmlsaXR5IGNoYW5nZXNcblx0ICovXG5cdHByaXZhdGUgdXBkYXRlSW5wdXRSb3dMYXlvdXQoKTogdm9pZCB7XG5cdFx0Ly8gTm8gbmVlZCB0byBtYW51YWxseSBhZGp1c3QgdGV4dGFyZWEgd2lkdGggLSBmbGV4Ym94IGhhbmRsZXMgaXRcblx0XHQvLyBUaGUgdGV4dGFyZWEgY29udGFpbmVyIGhhcyBmbGV4OiAxLCBzbyBpdCB3aWxsIGV4cGFuZC9jb250cmFjdCBhdXRvbWF0aWNhbGx5XG5cdFx0Ly8gd2hlbiB0aGUgY29tbWFuZCBidXR0b24gaXMgc2hvd24vaGlkZGVuXG5cdH1cblxuXHQvKipcblx0ICogRXhlY3V0ZSBhZGQgY29tbWFuZCB3aXRoIHN0cmVhbWluZyBzdXBwb3J0XG5cdCAqL1xuXHRwcml2YXRlIGFzeW5jIGV4ZWN1dGVBZGRDb21tYW5kV2l0aFN0cmVhbWluZyhjb21tYW5kOiBFZGl0Q29tbWFuZCk6IFByb21pc2U8YW55PiB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIEdldCB0aGUgYWN0aXZlIGVkaXRvclxuXHRcdFx0Y29uc3QgZWRpdG9yID0gdGhpcy5wbHVnaW4uZG9jdW1lbnRFbmdpbmUuZ2V0QWN0aXZlRWRpdG9yKCk7XG5cdFx0XHRpZiAoIWVkaXRvcikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZhbHNlLFxuXHRcdFx0XHRcdGVycm9yOiAnTm8gYWN0aXZlIGVkaXRvciBmb3VuZCdcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gR2V0IGN1cnNvciBwb3NpdGlvbiBmb3Igc3RyZWFtaW5nXG5cdFx0XHRjb25zdCBjdXJzb3JQb3NpdGlvbiA9IHRoaXMucGx1Z2luLmRvY3VtZW50RW5naW5lLmdldEN1cnNvclBvc2l0aW9uKCk7XG5cdFx0XHRpZiAoIWN1cnNvclBvc2l0aW9uKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0c3VjY2VzczogZmFsc2UsXG5cdFx0XHRcdFx0ZXJyb3I6ICdDb3VsZCBub3QgZGV0ZXJtaW5lIGN1cnNvciBwb3NpdGlvbidcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgc3RyZWFtaW5nIGF0IGN1cnNvciBwb3NpdGlvblxuXHRcdFx0Y29uc3QgeyB1cGRhdGVTdHJlYW0sIHN0b3BTdHJlYW0gfSA9IHRoaXMuc3RyZWFtaW5nTWFuYWdlci5zdGFydFN0cmVhbWluZyhcblx0XHRcdFx0ZWRpdG9yLFxuXHRcdFx0XHRjdXJzb3JQb3NpdGlvblxuXHRcdFx0KTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gRXhlY3V0ZSBhZGQgY29tbWFuZCB3aXRoIHN0cmVhbWluZyBjYWxsYmFja1xuXHRcdFx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLnBsdWdpbi5hZGRDb21tYW5kSGFuZGxlci5leGVjdXRlKGNvbW1hbmQsIChjaHVuazogc3RyaW5nLCBpc0NvbXBsZXRlOiBib29sZWFuKSA9PiB7XG5cdFx0XHRcdFx0dXBkYXRlU3RyZWFtKGNodW5rLCBpc0NvbXBsZXRlKTtcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0Ly8gU3RvcCBzdHJlYW1pbmdcblx0XHRcdFx0c3RvcFN0cmVhbSgpO1xuXG5cdFx0XHRcdHJldHVybiByZXN1bHQ7XG5cblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdC8vIFN0b3Agc3RyZWFtaW5nIG9uIGVycm9yXG5cdFx0XHRcdHN0b3BTdHJlYW0oKTtcblx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHR9XG5cblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0Y29uc29sZS5lcnJvcignRXJyb3IgaW4gc3RyZWFtaW5nIGFkZCBjb21tYW5kOicsIGVycm9yKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHN1Y2Nlc3M6IGZhbHNlLFxuXHRcdFx0XHRlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGUgZWRpdCBjb21tYW5kIHdpdGggc3RyZWFtaW5nIHN1cHBvcnRcblx0ICovXG5cdHByaXZhdGUgYXN5bmMgZXhlY3V0ZUVkaXRDb21tYW5kV2l0aFN0cmVhbWluZyhjb21tYW5kOiBFZGl0Q29tbWFuZCk6IFByb21pc2U8YW55PiB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIEdldCB0aGUgYWN0aXZlIGVkaXRvclxuXHRcdFx0Y29uc3QgZWRpdG9yID0gdGhpcy5wbHVnaW4uZG9jdW1lbnRFbmdpbmUuZ2V0QWN0aXZlRWRpdG9yKCk7XG5cdFx0XHRpZiAoIWVkaXRvcikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZhbHNlLFxuXHRcdFx0XHRcdGVycm9yOiAnTm8gYWN0aXZlIGVkaXRvciBmb3VuZCdcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gR2V0IGN1cnNvciBwb3NpdGlvbiBmb3Igc3RyZWFtaW5nXG5cdFx0XHRjb25zdCBjdXJzb3JQb3NpdGlvbiA9IHRoaXMucGx1Z2luLmRvY3VtZW50RW5naW5lLmdldEN1cnNvclBvc2l0aW9uKCk7XG5cdFx0XHRpZiAoIWN1cnNvclBvc2l0aW9uKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0c3VjY2VzczogZmFsc2UsXG5cdFx0XHRcdFx0ZXJyb3I6ICdDb3VsZCBub3QgZGV0ZXJtaW5lIGN1cnNvciBwb3NpdGlvbidcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgc3RyZWFtaW5nIGF0IGN1cnNvciBwb3NpdGlvblxuXHRcdFx0Y29uc3QgeyB1cGRhdGVTdHJlYW0sIHN0b3BTdHJlYW0gfSA9IHRoaXMuc3RyZWFtaW5nTWFuYWdlci5zdGFydFN0cmVhbWluZyhcblx0XHRcdFx0ZWRpdG9yLFxuXHRcdFx0XHRjdXJzb3JQb3NpdGlvblxuXHRcdFx0KTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gRXhlY3V0ZSBlZGl0IGNvbW1hbmQgd2l0aCBzdHJlYW1pbmcgY2FsbGJhY2tcblx0XHRcdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wbHVnaW4uZWRpdENvbW1hbmRIYW5kbGVyLmV4ZWN1dGUoY29tbWFuZCwgKGNodW5rOiBzdHJpbmcsIGlzQ29tcGxldGU6IGJvb2xlYW4pID0+IHtcblx0XHRcdFx0XHR1cGRhdGVTdHJlYW0oY2h1bmssIGlzQ29tcGxldGUpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvLyBTdG9wIHN0cmVhbWluZ1xuXHRcdFx0XHRzdG9wU3RyZWFtKCk7XG5cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblxuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0Ly8gU3RvcCBzdHJlYW1pbmcgb24gZXJyb3Jcblx0XHRcdFx0c3RvcFN0cmVhbSgpO1xuXHRcdFx0XHR0aHJvdyBlcnJvcjtcblx0XHRcdH1cblxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdFcnJvciBpbiBzdHJlYW1pbmcgZWRpdCBjb21tYW5kOicsIGVycm9yKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHN1Y2Nlc3M6IGZhbHNlLFxuXHRcdFx0XHRlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGUgcmV3cml0ZSBjb21tYW5kIHdpdGggc3RyZWFtaW5nIHN1cHBvcnRcblx0ICovXG5cdHByaXZhdGUgYXN5bmMgZXhlY3V0ZVJld3JpdGVDb21tYW5kV2l0aFN0cmVhbWluZyhjb21tYW5kOiBFZGl0Q29tbWFuZCk6IFByb21pc2U8YW55PiB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIEdldCB0aGUgYWN0aXZlIGVkaXRvclxuXHRcdFx0Y29uc3QgZWRpdG9yID0gdGhpcy5wbHVnaW4uZG9jdW1lbnRFbmdpbmUuZ2V0QWN0aXZlRWRpdG9yKCk7XG5cdFx0XHRpZiAoIWVkaXRvcikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZhbHNlLFxuXHRcdFx0XHRcdGVycm9yOiAnTm8gYWN0aXZlIGVkaXRvciBmb3VuZCdcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gR2V0IGN1cnNvciBwb3NpdGlvbiBmb3Igc3RyZWFtaW5nXG5cdFx0XHRjb25zdCBjdXJzb3JQb3NpdGlvbiA9IHRoaXMucGx1Z2luLmRvY3VtZW50RW5naW5lLmdldEN1cnNvclBvc2l0aW9uKCk7XG5cdFx0XHRpZiAoIWN1cnNvclBvc2l0aW9uKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0c3VjY2VzczogZmFsc2UsXG5cdFx0XHRcdFx0ZXJyb3I6ICdDb3VsZCBub3QgZGV0ZXJtaW5lIGN1cnNvciBwb3NpdGlvbidcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgc3RyZWFtaW5nIGF0IGN1cnNvciBwb3NpdGlvblxuXHRcdFx0Y29uc3QgeyB1cGRhdGVTdHJlYW0sIHN0b3BTdHJlYW0gfSA9IHRoaXMuc3RyZWFtaW5nTWFuYWdlci5zdGFydFN0cmVhbWluZyhcblx0XHRcdFx0ZWRpdG9yLFxuXHRcdFx0XHRjdXJzb3JQb3NpdGlvblxuXHRcdFx0KTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gRXhlY3V0ZSByZXdyaXRlIGNvbW1hbmQgd2l0aCBzdHJlYW1pbmcgY2FsbGJhY2tcblx0XHRcdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wbHVnaW4ucmV3cml0ZUNvbW1hbmRIYW5kbGVyLmV4ZWN1dGUoY29tbWFuZCwgKGNodW5rOiBzdHJpbmcsIGlzQ29tcGxldGU6IGJvb2xlYW4pID0+IHtcblx0XHRcdFx0XHR1cGRhdGVTdHJlYW0oY2h1bmssIGlzQ29tcGxldGUpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvLyBTdG9wIHN0cmVhbWluZ1xuXHRcdFx0XHRzdG9wU3RyZWFtKCk7XG5cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblxuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0Ly8gU3RvcCBzdHJlYW1pbmcgb24gZXJyb3Jcblx0XHRcdFx0c3RvcFN0cmVhbSgpO1xuXHRcdFx0XHR0aHJvdyBlcnJvcjtcblx0XHRcdH1cblxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdFcnJvciBpbiBzdHJlYW1pbmcgcmV3cml0ZSBjb21tYW5kOicsIGVycm9yKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHN1Y2Nlc3M6IGZhbHNlLFxuXHRcdFx0XHRlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEV4ZWN1dGUgZ3JhbW1hciBjb21tYW5kIHdpdGggc3RyZWFtaW5nIHN1cHBvcnRcblx0ICovXG5cdHByaXZhdGUgYXN5bmMgZXhlY3V0ZUdyYW1tYXJDb21tYW5kV2l0aFN0cmVhbWluZyhjb21tYW5kOiBFZGl0Q29tbWFuZCk6IFByb21pc2U8YW55PiB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIEdldCB0aGUgYWN0aXZlIGVkaXRvclxuXHRcdFx0Y29uc3QgZWRpdG9yID0gdGhpcy5wbHVnaW4uZG9jdW1lbnRFbmdpbmUuZ2V0QWN0aXZlRWRpdG9yKCk7XG5cdFx0XHRpZiAoIWVkaXRvcikge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdHN1Y2Nlc3M6IGZhbHNlLFxuXHRcdFx0XHRcdGVycm9yOiAnTm8gYWN0aXZlIGVkaXRvciBmb3VuZCdcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gR2V0IGN1cnNvciBwb3NpdGlvbiBmb3Igc3RyZWFtaW5nXG5cdFx0XHRjb25zdCBjdXJzb3JQb3NpdGlvbiA9IHRoaXMucGx1Z2luLmRvY3VtZW50RW5naW5lLmdldEN1cnNvclBvc2l0aW9uKCk7XG5cdFx0XHRpZiAoIWN1cnNvclBvc2l0aW9uKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0c3VjY2VzczogZmFsc2UsXG5cdFx0XHRcdFx0ZXJyb3I6ICdDb3VsZCBub3QgZGV0ZXJtaW5lIGN1cnNvciBwb3NpdGlvbidcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgc3RyZWFtaW5nIGF0IGN1cnNvciBwb3NpdGlvblxuXHRcdFx0Y29uc3QgeyB1cGRhdGVTdHJlYW0sIHN0b3BTdHJlYW0gfSA9IHRoaXMuc3RyZWFtaW5nTWFuYWdlci5zdGFydFN0cmVhbWluZyhcblx0XHRcdFx0ZWRpdG9yLFxuXHRcdFx0XHRjdXJzb3JQb3NpdGlvblxuXHRcdFx0KTtcblxuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Ly8gRXhlY3V0ZSBncmFtbWFyIGNvbW1hbmQgd2l0aCBzdHJlYW1pbmcgY2FsbGJhY2tcblx0XHRcdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5wbHVnaW4uZ3JhbW1hckNvbW1hbmRIYW5kbGVyLmV4ZWN1dGUoY29tbWFuZCwgKGNodW5rOiBzdHJpbmcsIGlzQ29tcGxldGU6IGJvb2xlYW4pID0+IHtcblx0XHRcdFx0XHR1cGRhdGVTdHJlYW0oY2h1bmssIGlzQ29tcGxldGUpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHQvLyBTdG9wIHN0cmVhbWluZ1xuXHRcdFx0XHRzdG9wU3RyZWFtKCk7XG5cblx0XHRcdFx0cmV0dXJuIHJlc3VsdDtcblxuXHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0Ly8gU3RvcCBzdHJlYW1pbmcgb24gZXJyb3Jcblx0XHRcdFx0c3RvcFN0cmVhbSgpO1xuXHRcdFx0XHR0aHJvdyBlcnJvcjtcblx0XHRcdH1cblxuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdFcnJvciBpbiBzdHJlYW1pbmcgZ3JhbW1hciBjb21tYW5kOicsIGVycm9yKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHN1Y2Nlc3M6IGZhbHNlLFxuXHRcdFx0XHRlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcidcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEFkZCBmaWxlcyB0byBwZXJzaXN0ZW50IGNvbnRleHRcblx0ICovXG5cdGFzeW5jIGFkZEZpbGVzVG9Db250ZXh0KGZpbGVuYW1lczogc3RyaW5nW10pOiBQcm9taXNlPHZvaWQ+IHtcblx0XHRpZiAoIXRoaXMuY3VycmVudEZpbGUpIHtcblx0XHRcdG5ldyBOb3RpY2UoJ05vIGZpbGUgaXMgb3Blbi4gUGxlYXNlIG9wZW4gYSBmaWxlIHRvIGFkZCBjb250ZXh0LicsIDMwMDApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnN0IGFkZGVkRmlsZXM6IHN0cmluZ1tdID0gW107XG5cdFx0Y29uc3QgYWxyZWFkeUV4aXN0aW5nRmlsZXM6IHN0cmluZ1tdID0gW107XG5cdFx0Y29uc3Qgbm90Rm91bmRGaWxlczogc3RyaW5nW10gPSBbXTtcblx0XHRcblx0XHQvLyBHZXQgZXhpc3RpbmcgcGVyc2lzdGVudCBjb250ZXh0IGRpcmVjdGx5ICh3aXRob3V0IGNsZWFyaW5nIGl0KVxuXHRcdGNvbnN0IGV4aXN0aW5nUGVyc2lzdGVudCA9IHRoaXMubXVsdGlEb2NIYW5kbGVyLmdldFBlcnNpc3RlbnRDb250ZXh0KHRoaXMuY3VycmVudEZpbGUucGF0aCkgfHwgW107XG5cdFx0Y29uc3QgdXBkYXRlZFBlcnNpc3RlbnQgPSBbLi4uZXhpc3RpbmdQZXJzaXN0ZW50XTtcblx0XHRcblx0XHRcblx0XHRmb3IgKGNvbnN0IGZpbGVuYW1lIG9mIGZpbGVuYW1lcykge1xuXHRcdFx0Ly8gRmluZCB0aGUgZmlsZSBieSBuYW1lXG5cdFx0XHRsZXQgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChmaWxlbmFtZSk7XG5cdFx0XHRpZiAoIWZpbGUgfHwgIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSB7XG5cdFx0XHRcdGZpbGUgPSB0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZmlsZW5hbWUgKyAnLm1kJyk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIWZpbGUgfHwgIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSB7XG5cdFx0XHRcdGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuXHRcdFx0XHRmaWxlID0gZmlsZXMuZmluZChcblx0XHRcdFx0XHQoZikgPT4gZi5iYXNlbmFtZSA9PT0gZmlsZW5hbWUgfHwgZi5uYW1lID09PSBmaWxlbmFtZSB8fCBmLnBhdGguZW5kc1dpdGgoJy8nICsgZmlsZW5hbWUpIHx8IGYucGF0aC5lbmRzV2l0aCgnLycgKyBmaWxlbmFtZSArICcubWQnKVxuXHRcdFx0XHQpIHx8IG51bGw7XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdGlmIChmaWxlIGluc3RhbmNlb2YgVEZpbGUpIHtcblx0XHRcdFx0Ly8gQ2hlY2sgaWYgYWxyZWFkeSBpbiBwZXJzaXN0ZW50IGNvbnRleHQgKGNoZWNrIGJvdGggZXhpc3RpbmcgYW5kIG5ld2x5IGFkZGVkIGluIHRoaXMgYmF0Y2gpXG5cdFx0XHRcdGNvbnN0IGV4aXN0cyA9IHVwZGF0ZWRQZXJzaXN0ZW50LnNvbWUocmVmID0+IHJlZi5maWxlLnBhdGggPT09IChmaWxlIGFzIFRGaWxlKS5wYXRoKTtcblx0XHRcdFx0aWYgKCFleGlzdHMpIHtcblx0XHRcdFx0XHQvLyBBZGQgdG8gcGVyc2lzdGVudCBjb250ZXh0XG5cdFx0XHRcdFx0dXBkYXRlZFBlcnNpc3RlbnQucHVzaCh7XG5cdFx0XHRcdFx0XHRmaWxlOiBmaWxlLFxuXHRcdFx0XHRcdFx0cHJvcGVydHk6IHVuZGVmaW5lZCxcblx0XHRcdFx0XHRcdGlzUGVyc2lzdGVudDogdHJ1ZSxcblx0XHRcdFx0XHRcdHJhd1JlZmVyZW5jZTogYCtbWyR7ZmlsZS5iYXNlbmFtZX1dXWBcblx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHRhZGRlZEZpbGVzLnB1c2goZmlsZS5iYXNlbmFtZSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ly8gRmlsZSBhbHJlYWR5IGV4aXN0cyBpbiBjb250ZXh0XG5cdFx0XHRcdFx0YWxyZWFkeUV4aXN0aW5nRmlsZXMucHVzaChmaWxlLmJhc2VuYW1lKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gRmlsZSBub3QgZm91bmRcblx0XHRcdFx0bm90Rm91bmRGaWxlcy5wdXNoKGZpbGVuYW1lKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0Ly8gVXBkYXRlIHBlcnNpc3RlbnQgY29udGV4dCBpZiB3ZSBtYWRlIGFueSBjaGFuZ2VzXG5cdFx0aWYgKGFkZGVkRmlsZXMubGVuZ3RoID4gMCB8fCBhbHJlYWR5RXhpc3RpbmdGaWxlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHQvLyBVc2UgcmVmbGVjdGlvbiB0byBhY2Nlc3MgcHJpdmF0ZSBwcm9wZXJ0eSAoc2luY2UgVHlwZVNjcmlwdCBkb2Vzbid0IGV4cG9zZSBpdClcblx0XHRcdGNvbnN0IGhhbmRsZXIgPSB0aGlzLm11bHRpRG9jSGFuZGxlciBhcyBhbnk7XG5cdFx0XHRoYW5kbGVyLnBlcnNpc3RlbnRDb250ZXh0LnNldCh0aGlzLmN1cnJlbnRGaWxlLnBhdGgsIHVwZGF0ZWRQZXJzaXN0ZW50KTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gUmVmcmVzaCBjb250ZXh0IFVJXG5cdFx0YXdhaXQgdGhpcy5yZWZyZXNoQ29udGV4dCgpO1xuXHRcdFxuXHRcdC8vIFNob3cgYSBzaW5nbGUgY29tcHJlaGVuc2l2ZSBub3RpZmljYXRpb24gZm9yIGJldHRlciBVWFxuXHRcdGNvbnN0IHRvdGFsRmlsZXMgPSBmaWxlbmFtZXMubGVuZ3RoO1xuXHRcdGNvbnN0IG1lc3NhZ2VzOiBzdHJpbmdbXSA9IFtdO1xuXHRcdFxuXHRcdGlmIChhZGRlZEZpbGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdGlmIChhZGRlZEZpbGVzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0XHRtZXNzYWdlcy5wdXNoKGBBZGRlZCBcIiR7YWRkZWRGaWxlc1swXX1cIiB0byBjb250ZXh0YCk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtZXNzYWdlcy5wdXNoKGBBZGRlZCAke2FkZGVkRmlsZXMubGVuZ3RofSBmaWxlcyB0byBjb250ZXh0YCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdGlmIChhbHJlYWR5RXhpc3RpbmdGaWxlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRpZiAoYWxyZWFkeUV4aXN0aW5nRmlsZXMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdG1lc3NhZ2VzLnB1c2goYFwiJHthbHJlYWR5RXhpc3RpbmdGaWxlc1swXX1cIiBhbHJlYWR5IGluIGNvbnRleHRgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1lc3NhZ2VzLnB1c2goYCR7YWxyZWFkeUV4aXN0aW5nRmlsZXMubGVuZ3RofSBhbHJlYWR5IGluIGNvbnRleHRgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0aWYgKG5vdEZvdW5kRmlsZXMubGVuZ3RoID4gMCkge1xuXHRcdFx0aWYgKG5vdEZvdW5kRmlsZXMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRcdG1lc3NhZ2VzLnB1c2goYFwiJHtub3RGb3VuZEZpbGVzWzBdfVwiIG5vdCBmb3VuZGApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWVzc2FnZXMucHVzaChgJHtub3RGb3VuZEZpbGVzLmxlbmd0aH0gbm90IGZvdW5kYCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdC8vIFNob3cgc2luZ2xlIGNvbWJpbmVkIG1lc3NhZ2UgaWYgd2UgaGF2ZSBhbnkgcmVzdWx0c1xuXHRcdGlmIChtZXNzYWdlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRjb25zdCBjb21iaW5lZE1lc3NhZ2UgPSBtZXNzYWdlcy5qb2luKCcsICcpO1xuXHRcdFx0Y29uc3QgZHVyYXRpb24gPSBub3RGb3VuZEZpbGVzLmxlbmd0aCA+IDAgPyAzMDAwIDogMjAwMDsgLy8gTG9uZ2VyIGR1cmF0aW9uIGlmIHRoZXJlIGFyZSBlcnJvcnNcblx0XHRcdG5ldyBOb3RpY2UoY29tYmluZWRNZXNzYWdlLCBkdXJhdGlvbik7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBjb250ZXh0dWFsIHRoaW5raW5nIHBocmFzZSBiYXNlZCBvbiBjb21tYW5kIHR5cGUgb3IgbWVzc2FnZSBjb250ZW50XG5cdCAqL1xuXHRwcml2YXRlIGdldENvbnRleHR1YWxUaGlua2luZ1BocmFzZShjb21tYW5kPzogRWRpdENvbW1hbmQsIG1lc3NhZ2VUZXh0Pzogc3RyaW5nKTogc3RyaW5nIHtcblx0XHQvLyBEZXRlcm1pbmUgY29udGV4dCBiYXNlZCBvbiBjb21tYW5kIHR5cGUgb3IgbWVzc2FnZSBjb250ZW50XG5cdFx0aWYgKGNvbW1hbmQpIHtcblx0XHRcdHN3aXRjaCAoY29tbWFuZC5hY3Rpb24pIHtcblx0XHRcdFx0Y2FzZSAnZ3JhbW1hcic6XG5cdFx0XHRcdGNhc2UgJ2VkaXQnOlxuXHRcdFx0XHRcdHJldHVybiB0aGlzLmdldFJhbmRvbVBocmFzZSgnaW1wcm92ZScpO1xuXHRcdFx0XHRjYXNlICdhZGQnOlxuXHRcdFx0XHRcdHJldHVybiB0aGlzLmdldFJhbmRvbVBocmFzZSgnZ2VuZXJhdGUnKTtcblx0XHRcdFx0Y2FzZSAncmV3cml0ZSc6XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0UmFuZG9tUGhyYXNlKCdpbXByb3ZlJyk7XG5cdFx0XHRcdGNhc2UgJ2RlbGV0ZSc6XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0UmFuZG9tUGhyYXNlKCdwcm9jZXNzJyk7XG5cdFx0XHRcdGRlZmF1bHQ6XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0UmFuZG9tUGhyYXNlKCdjaGF0Jyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChtZXNzYWdlVGV4dCkge1xuXHRcdFx0Ly8gQW5hbHl6ZSBtZXNzYWdlIGNvbnRlbnQgZm9yIGNvbnRleHRcblx0XHRcdGlmIChtZXNzYWdlVGV4dC5pbmNsdWRlcygnaW1wcm92ZScpIHx8IG1lc3NhZ2VUZXh0LmluY2x1ZGVzKCdmaXgnKSB8fCBtZXNzYWdlVGV4dC5pbmNsdWRlcygnZ3JhbW1hcicpKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmdldFJhbmRvbVBocmFzZSgnaW1wcm92ZScpO1xuXHRcdFx0fSBlbHNlIGlmIChtZXNzYWdlVGV4dC5pbmNsdWRlcygnYWRkJykgfHwgbWVzc2FnZVRleHQuaW5jbHVkZXMoJ2NyZWF0ZScpIHx8IG1lc3NhZ2VUZXh0LmluY2x1ZGVzKCd3cml0ZScpKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLmdldFJhbmRvbVBocmFzZSgnZ2VuZXJhdGUnKTtcblx0XHRcdH0gZWxzZSBpZiAobWVzc2FnZVRleHQuaW5jbHVkZXMoJ3N3aXRjaCcpIHx8IG1lc3NhZ2VUZXh0LmluY2x1ZGVzKCcvJykpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0UmFuZG9tUGhyYXNlKCdzd2l0Y2gnKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuZ2V0UmFuZG9tUGhyYXNlKCdjaGF0Jyk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHJhbmRvbSBwaHJhc2UgZnJvbSBzcGVjaWZpZWQgY2F0ZWdvcnlcblx0ICovXG5cdHByaXZhdGUgZ2V0UmFuZG9tUGhyYXNlKGNhdGVnb3J5OiBzdHJpbmcpOiBzdHJpbmcge1xuXHRcdGNvbnN0IHBocmFzZXM6IFJlY29yZDxzdHJpbmcsIHN0cmluZ1tdPiA9IHtcblx0XHRcdCdpbXByb3ZlJzogWydyZWZpbmluZy4uLicsICdwb2xpc2hpbmcuLi4nLCAnZW5oYW5jaW5nLi4uJywgJ2NyYWZ0aW5nLi4uJywgJ3BlcmZlY3RpbmcuLi4nLCAnc21vb3RoaW5nLi4uJywgJ3NoYXJwZW5pbmcuLi4nLCAnZWxldmF0aW5nLi4uJywgJ2ZpbmUtdHVuaW5nLi4uJywgJ3NjdWxwdGluZy4uLiddLFxuXHRcdFx0J2dlbmVyYXRlJzogWyd0aGlua2luZy4uLicsICdjcmFmdGluZy4uLicsICdkZXZlbG9waW5nLi4uJywgJ2NvbXBvc2luZy4uLicsICd3cml0aW5nLi4uJywgJ2NyZWF0aW5nLi4uJywgJ2Zvcm11bGF0aW5nLi4uJywgJ2J1aWxkaW5nLi4uJywgJ2NvbnN0cnVjdGluZy4uLicsICdkcmFmdGluZy4uLiddLFxuXHRcdFx0J3N3aXRjaCc6IFsnY29ubmVjdGluZy4uLicsICdzd2l0Y2hpbmcuLi4nLCAndXBkYXRpbmcuLi4nLCAnY29uZmlndXJpbmcuLi4nLCAnc2V0dGluZyB1cC4uLicsICdzeW5jaW5nLi4uJywgJ3ByZXBhcmluZy4uLicsICdhY3RpdmF0aW5nLi4uJywgJ2luaXRpYWxpemluZy4uLicsICdlc3RhYmxpc2hpbmcuLi4nXSxcblx0XHRcdCdwcm9jZXNzJzogWydwcm9jZXNzaW5nLi4uJywgJ2FuYWx5emluZy4uLicsICd3b3JraW5nLi4uJywgJ2NvbXB1dGluZy4uLicsICdjYWxjdWxhdGluZy4uLicsICdleGFtaW5pbmcuLi4nLCAnZXZhbHVhdGluZy4uLicsICdpbnRlcnByZXRpbmcuLi4nLCAncmV2aWV3aW5nLi4uJywgJ3NjYW5uaW5nLi4uJ10sXG5cdFx0XHQnY2hhdCc6IFsndGhpbmtpbmcuLi4nLCAncHJvY2Vzc2luZy4uLicsICdjb25zaWRlcmluZy4uLicsICdhbmFseXppbmcuLi4nLCAndW5kZXJzdGFuZGluZy4uLicsICdjb250ZW1wbGF0aW5nLi4uJywgJ2V4cGxvcmluZy4uLicsICdldmFsdWF0aW5nLi4uJywgJ3dvcmtpbmcgb24gaXQuLi4nLCAnY29tcG9zaW5nLi4uJ11cblx0XHR9O1xuXHRcdFxuXHRcdGNvbnN0IGNhdGVnb3J5UGhyYXNlcyA9IHBocmFzZXNbY2F0ZWdvcnldIHx8IHBocmFzZXMuY2hhdDtcblx0XHRyZXR1cm4gY2F0ZWdvcnlQaHJhc2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNhdGVnb3J5UGhyYXNlcy5sZW5ndGgpXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTdGFydCBwaHJhc2Ugcm90YXRpb24gYW5pbWF0aW9uIGZvciB0aGlua2luZyB0ZXh0XG5cdCAqL1xuXHRwcml2YXRlIHN0YXJ0VGhpbmtpbmdQaHJhc2VSb3RhdGlvbih0ZXh0RWw6IEhUTUxFbGVtZW50LCBjb21tYW5kPzogRWRpdENvbW1hbmQsIG1lc3NhZ2VUZXh0Pzogc3RyaW5nKTogdm9pZCB7XG5cdFx0Ly8gQ2hhbmdlIHBocmFzZSBldmVyeSAyIHNlY29uZHMgZHVyaW5nIHByb2Nlc3Npbmdcblx0XHRjb25zdCByb3RhdGlvbkludGVydmFsID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuXHRcdFx0Y29uc3QgbmV3UGhyYXNlID0gdGhpcy5nZXRDb250ZXh0dWFsVGhpbmtpbmdQaHJhc2UoY29tbWFuZCwgbWVzc2FnZVRleHQpO1xuXHRcdFx0dGV4dEVsLnRleHRDb250ZW50ID0gbmV3UGhyYXNlO1xuXHRcdH0sIDIwMDApO1xuXHRcdFxuXHRcdC8vIFN0b3JlIGludGVydmFsIElEIGZvciBjbGVhbnVwXG5cdFx0KHRleHRFbCBhcyBhbnkpLnJvdGF0aW9uSW50ZXJ2YWwgPSByb3RhdGlvbkludGVydmFsO1xuXHR9XG5cblx0LyoqXG5cdCAqIFN0b3AgcGhyYXNlIHJvdGF0aW9uIGFuaW1hdGlvbiBhbmQgY2xlYW51cFxuXHQgKi9cblx0cHJpdmF0ZSBzdG9wVGhpbmtpbmdQaHJhc2VSb3RhdGlvbih0ZXh0RWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG5cdFx0aWYgKCh0ZXh0RWwgYXMgYW55KS5yb3RhdGlvbkludGVydmFsKSB7XG5cdFx0XHRjbGVhckludGVydmFsKCh0ZXh0RWwgYXMgYW55KS5yb3RhdGlvbkludGVydmFsKTtcblx0XHRcdCh0ZXh0RWwgYXMgYW55KS5yb3RhdGlvbkludGVydmFsID0gbnVsbDtcblx0XHR9XG5cdH1cblxufSIsICJleHBvcnQgaW50ZXJmYWNlIERvY3VtZW50U3RydWN0dXJlIHtcblx0aGVhZGluZ3M6IEFycmF5PHsgbGV2ZWw6IG51bWJlcjsgdGV4dDogc3RyaW5nOyBpc0VtcHR5OiBib29sZWFuIH0+O1xuXHR3b3JkQ291bnQ6IG51bWJlcjtcblx0ZW1wdHlIZWFkaW5nczogc3RyaW5nW107XG5cdGluY29tcGxldGVCdWxsZXRzOiBzdHJpbmdbXTtcbn1cblxuZXhwb3J0IGNsYXNzIERvY3VtZW50QW5hbHl6ZXIge1xuXHRzdGF0aWMgYW5hbHl6ZVN0cnVjdHVyZShjb250ZW50OiBzdHJpbmcpOiBEb2N1bWVudFN0cnVjdHVyZSB7XG5cdFx0Y29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KCdcXG4nKTtcblx0XHRjb25zdCBoZWFkaW5nczogQXJyYXk8eyBsZXZlbDogbnVtYmVyOyB0ZXh0OiBzdHJpbmc7IGlzRW1wdHk6IGJvb2xlYW4gfT4gPSBbXTtcblx0XHRjb25zdCBlbXB0eUhlYWRpbmdzOiBzdHJpbmdbXSA9IFtdO1xuXHRcdGNvbnN0IGluY29tcGxldGVCdWxsZXRzOiBzdHJpbmdbXSA9IFtdO1xuXHRcdFxuXHRcdC8vIEZpbmQgaGVhZGluZ3MgYW5kIGFuYWx5emUgY29udGVudCBhZnRlciBlYWNoXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0Y29uc3QgbGluZSA9IGxpbmVzW2ldLnRyaW0oKTtcblx0XHRcdGNvbnN0IGhlYWRpbmdNYXRjaCA9IGxpbmUubWF0Y2goL14oI3sxLDZ9KVxccysoLispJC8pO1xuXHRcdFx0XG5cdFx0XHRpZiAoaGVhZGluZ01hdGNoKSB7XG5cdFx0XHRcdGNvbnN0IGxldmVsID0gaGVhZGluZ01hdGNoWzFdLmxlbmd0aDtcblx0XHRcdFx0Y29uc3QgdGV4dCA9IGhlYWRpbmdNYXRjaFsyXTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIENoZWNrIGlmIGhlYWRpbmcgaGFzIGNvbnRlbnQgYWZ0ZXIgaXRcblx0XHRcdFx0Y29uc3QgaGFzQ29udGVudCA9IHRoaXMuaGFzQ29udGVudEFmdGVySGVhZGluZyhsaW5lcywgaSk7XG5cdFx0XHRcdGNvbnN0IGlzRW1wdHkgPSAhaGFzQ29udGVudDtcblx0XHRcdFx0XG5cdFx0XHRcdGhlYWRpbmdzLnB1c2goeyBsZXZlbCwgdGV4dCwgaXNFbXB0eSB9KTtcblx0XHRcdFx0XG5cdFx0XHRcdGlmIChpc0VtcHR5KSB7XG5cdFx0XHRcdFx0ZW1wdHlIZWFkaW5ncy5wdXNoKHRleHQpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRcblx0XHRcdC8vIEZpbmQgaW5jb21wbGV0ZSBidWxsZXQgcG9pbnRzIChlbmRpbmcgd2l0aCBcIi4uLlwiIG9yIGVtcHR5KVxuXHRcdFx0aWYgKGxpbmUubWF0Y2goL15bLSorXVxccyooLiopXFwuXFwuXFwuP1xccyokLykgfHwgbGluZS5tYXRjaCgvXlstKitdXFxzKiQvKSB8fCBsaW5lLm1hdGNoKC9eWy0qK11cXHMqKFRPRE98VEJEKS9pKSkge1xuXHRcdFx0XHRpbmNvbXBsZXRlQnVsbGV0cy5wdXNoKGxpbmUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRjb25zdCB3b3JkQ291bnQgPSBjb250ZW50LnNwbGl0KC9cXHMrLykuZmlsdGVyKHdvcmQgPT4gd29yZC5sZW5ndGggPiAwKS5sZW5ndGg7XG5cdFx0XG5cdFx0cmV0dXJuIHtcblx0XHRcdGhlYWRpbmdzLFxuXHRcdFx0d29yZENvdW50LFxuXHRcdFx0ZW1wdHlIZWFkaW5ncyxcblx0XHRcdGluY29tcGxldGVCdWxsZXRzXG5cdFx0fTtcblx0fVxuXHRcblx0cHJpdmF0ZSBzdGF0aWMgaGFzQ29udGVudEFmdGVySGVhZGluZyhsaW5lczogc3RyaW5nW10sIGhlYWRpbmdJbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG5cdFx0Y29uc3QgY3VycmVudEhlYWRpbmcgPSBsaW5lc1toZWFkaW5nSW5kZXhdLnRyaW0oKTtcblx0XHRjb25zdCBjdXJyZW50TGV2ZWwgPSBjdXJyZW50SGVhZGluZy5tYXRjaCgvXigjezEsNn0pLyk/LlsxXS5sZW5ndGggfHwgMDtcblx0XHRcblx0XHRmb3IgKGxldCBpID0gaGVhZGluZ0luZGV4ICsgMTsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb25zdCBsaW5lID0gbGluZXNbaV0udHJpbSgpO1xuXHRcdFx0XG5cdFx0XHQvLyBDaGVjayBpZiB0aGlzIGlzIGEgaGVhZGluZ1xuXHRcdFx0Y29uc3QgaGVhZGluZ01hdGNoID0gbGluZS5tYXRjaCgvXigjezEsNn0pXFxzLyk7XG5cdFx0XHRpZiAoaGVhZGluZ01hdGNoKSB7XG5cdFx0XHRcdGNvbnN0IG5leHRMZXZlbCA9IGhlYWRpbmdNYXRjaFsxXS5sZW5ndGg7XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBJZiBuZXh0IGhlYWRpbmcgaXMgc2FtZSBvciBoaWdoZXIgbGV2ZWwgKGxvd2VyIG51bWJlciksIFxuXHRcdFx0XHQvLyBhbmQgd2UgaGF2ZW4ndCBmb3VuZCBjb250ZW50IHlldCwgdGhpcyBzZWN0aW9uIGlzIGVtcHR5XG5cdFx0XHRcdGlmIChuZXh0TGV2ZWwgPD0gY3VycmVudExldmVsKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdC8vIElmIGl0J3MgYSBzdWItaGVhZGluZyAoaGlnaGVyIG51bWJlciksIGNvbnRpbnVlIGxvb2tpbmcgZm9yIGNvbnRlbnRcblx0XHRcdFx0Ly8gVGhpcyBhbGxvd3MgZm9yIEgxIFx1MjE5MiBIMiBzdHJ1Y3R1cmUgd2l0aG91dCBjb3VudGluZyBhcyBlbXB0eVxuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBJZiB3ZSBmaW5kIHN1YnN0YW50aWFsIGNvbnRlbnQgKG5vdCBqdXN0IHdoaXRlc3BhY2UpLCBoZWFkaW5nIGlzIG5vdCBlbXB0eVxuXHRcdFx0aWYgKGxpbmUubGVuZ3RoID4gMCkgcmV0dXJuIHRydWU7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIElmIHdlIHJlYWNoIGVuZCBvZiBkb2N1bWVudCB3aXRob3V0IGZpbmRpbmcgY29udGVudCwgaXQncyBlbXB0eVxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufSIsICIvKipcbiAqIE11bHRpLWRvY3VtZW50IGNvbnRleHQgaGFuZGxlciBmb3IgTm92YVxuICogUGFyc2VzIFtbZG9jXV0gYW5kICtbW2RvY11dIHN5bnRheCBmb3IgYWRkaXRpb25hbCBjb250ZXh0XG4gKi9cblxuaW1wb3J0IHsgQXBwLCBURmlsZSwgQ2FjaGVkTWV0YWRhdGEgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBDb252ZXJzYXRpb25EYXRhIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRG9jdW1lbnRSZWZlcmVuY2Uge1xuICAgIC8qKiBUaGUgZmlsZSBiZWluZyByZWZlcmVuY2VkICovXG4gICAgZmlsZTogVEZpbGU7XG4gICAgXG4gICAgLyoqIFdoZXRoZXIgdGhpcyBpcyBwZXJzaXN0ZW50IGNvbnRleHQgKCtbW2RvY11dKSAqL1xuICAgIGlzUGVyc2lzdGVudDogYm9vbGVhbjtcbiAgICBcbiAgICAvKiogVGhlIHJhdyByZWZlcmVuY2UgdGV4dCAoZS5nLiwgXCJbW015IERvY3VtZW50XV1cIikgKi9cbiAgICByYXdSZWZlcmVuY2U6IHN0cmluZztcbiAgICBcbiAgICAvKiogU3BlY2lmaWMgcHJvcGVydHkgdG8gZXh0cmFjdCAoZS5nLiwgXCJbW2RvYyNwcm9wZXJ0eV1dXCIpICovXG4gICAgcHJvcGVydHk/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTXVsdGlEb2NDb250ZXh0IHtcbiAgICAvKiogRG9jdW1lbnRzIGluIHBlcnNpc3RlbnQgY29udGV4dCAqL1xuICAgIHBlcnNpc3RlbnREb2NzOiBEb2N1bWVudFJlZmVyZW5jZVtdO1xuICAgIFxuICAgIC8qKiBDb21iaW5lZCBjb250ZXh0IHN0cmluZyAqL1xuICAgIGNvbnRleHRTdHJpbmc6IHN0cmluZztcbiAgICBcbiAgICAvKiogRXN0aW1hdGVkIHRva2VuIGNvdW50ICovXG4gICAgdG9rZW5Db3VudDogbnVtYmVyO1xuICAgIFxuICAgIC8qKiBXaGV0aGVyIHdlJ3JlIGFwcHJvYWNoaW5nIHRva2VuIGxpbWl0ICovXG4gICAgaXNOZWFyTGltaXQ6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjbGFzcyBNdWx0aURvY0NvbnRleHRIYW5kbGVyIHtcbiAgICBwcml2YXRlIGFwcDogQXBwO1xuICAgIHByaXZhdGUgcGVyc2lzdGVudENvbnRleHQ6IE1hcDxzdHJpbmcsIERvY3VtZW50UmVmZXJlbmNlW10+ID0gbmV3IE1hcCgpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgVE9LRU5fTElNSVQgPSA4MDAwO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgV0FSTklOR19USFJFU0hPTEQgPSAwLjg7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCkge1xuICAgICAgICB0aGlzLmFwcCA9IGFwcDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSBhIG1lc3NhZ2UgZm9yIGRvY3VtZW50IHJlZmVyZW5jZXNcbiAgICAgKi9cbiAgICBwYXJzZU1lc3NhZ2UobWVzc2FnZTogc3RyaW5nLCBjb252ZXJzYXRpb25GaWxlUGF0aDogc3RyaW5nKToge1xuICAgICAgICBjbGVhbmVkTWVzc2FnZTogc3RyaW5nO1xuICAgICAgICByZWZlcmVuY2VzOiBEb2N1bWVudFJlZmVyZW5jZVtdO1xuICAgIH0ge1xuICAgICAgICBjb25zdCByZWZlcmVuY2VzOiBEb2N1bWVudFJlZmVyZW5jZVtdID0gW107XG4gICAgICAgIGxldCBjbGVhbmVkTWVzc2FnZSA9IG1lc3NhZ2U7XG5cbiAgICAgICAgLy8gUGF0dGVybiB0byBtYXRjaCBbW2RvY11dIGFuZCArW1tkb2NdXSB3aXRoIG9wdGlvbmFsIHByb3BlcnR5XG4gICAgICAgIC8vIE5vdGU6IEFsbCBkb2N1bWVudCByZWZlcmVuY2VzIGFyZSBub3cgcGVyc2lzdGVudCBmb3Igc2ltcGxpZmllZCBVWFxuICAgICAgICBjb25zdCByZWZQYXR0ZXJuID0gLyhcXCspP1xcW1xcWyhbXlxcXV0rPykoPzojKFteXFxdXSs/KSk/XFxdXFxdL2c7XG4gICAgICAgIFxuICAgICAgICBsZXQgbWF0Y2g7XG4gICAgICAgIHdoaWxlICgobWF0Y2ggPSByZWZQYXR0ZXJuLmV4ZWMobWVzc2FnZSkpICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjb25zdCBkb2NOYW1lID0gbWF0Y2hbMl07XG4gICAgICAgICAgICBjb25zdCBwcm9wZXJ0eSA9IG1hdGNoWzNdO1xuICAgICAgICAgICAgY29uc3QgcmF3UmVmZXJlbmNlID0gbWF0Y2hbMF07XG5cbiAgICAgICAgICAgIC8vIFRyeSB0byBmaW5kIHRoZSBmaWxlXG4gICAgICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5maW5kRmlsZShkb2NOYW1lKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICBmaWxlLFxuICAgICAgICAgICAgICAgICAgICBpc1BlcnNpc3RlbnQ6IHRydWUsIC8vIEFsbCByZWZlcmVuY2VzIGFyZSBub3cgcGVyc2lzdGVudFxuICAgICAgICAgICAgICAgICAgICByYXdSZWZlcmVuY2UsXG4gICAgICAgICAgICAgICAgICAgIHByb3BlcnR5XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBSZW1vdmUgYWxsIGZvdW5kIHJlZmVyZW5jZXMgZnJvbSBtZXNzYWdlXG4gICAgICAgIGZvciAoY29uc3QgcmVmIG9mIHJlZmVyZW5jZXMpIHtcbiAgICAgICAgICAgIGNsZWFuZWRNZXNzYWdlID0gY2xlYW5lZE1lc3NhZ2UucmVwbGFjZShyZWYucmF3UmVmZXJlbmNlLCAnICcpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ2xlYW4gdXAgZXhjZXNzaXZlIHNwYWNlcyBidXQgcHJlc2VydmUgbmVjZXNzYXJ5IHNwYWNpbmdcbiAgICAgICAgY2xlYW5lZE1lc3NhZ2UgPSBjbGVhbmVkTWVzc2FnZS5yZXBsYWNlKC9cXHN7Mix9L2csICcgJykudHJpbSgpO1xuXG4gICAgICAgIC8vIFVwZGF0ZSBwZXJzaXN0ZW50IGNvbnRleHQgaWYgbmVlZGVkXG4gICAgICAgIGNvbnN0IHBlcnNpc3RlbnRSZWZzID0gcmVmZXJlbmNlcy5maWx0ZXIocmVmID0+IHJlZi5pc1BlcnNpc3RlbnQpO1xuICAgICAgICBpZiAocGVyc2lzdGVudFJlZnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB0aGlzLnBlcnNpc3RlbnRDb250ZXh0LmdldChjb252ZXJzYXRpb25GaWxlUGF0aCkgfHwgW107XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkUGVyc2lzdGVudCA9IFsuLi5leGlzdGluZ107XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFkZCBuZXcgcmVmZXJlbmNlcyB0aGF0IGFyZW4ndCBhbHJlYWR5IGluIHBlcnNpc3RlbnQgY29udGV4dFxuICAgICAgICAgICAgZm9yIChjb25zdCByZWYgb2YgcGVyc2lzdGVudFJlZnMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBleGlzdHMgPSB1cGRhdGVkUGVyc2lzdGVudC5zb21lKGV4aXN0aW5nID0+IGV4aXN0aW5nLmZpbGUucGF0aCA9PT0gcmVmLmZpbGUucGF0aCk7XG4gICAgICAgICAgICAgICAgaWYgKCFleGlzdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFBlcnNpc3RlbnQucHVzaChyZWYpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdGhpcy5wZXJzaXN0ZW50Q29udGV4dC5zZXQoY29udmVyc2F0aW9uRmlsZVBhdGgsIHVwZGF0ZWRQZXJzaXN0ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IGNsZWFuZWRNZXNzYWdlLCByZWZlcmVuY2VzIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGQgY29tcGxldGUgY29udGV4dCBpbmNsdWRpbmcgcGVyc2lzdGVudCBkb2N1bWVudHNcbiAgICAgKi9cbiAgICBhc3luYyBidWlsZENvbnRleHQoXG4gICAgICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICAgICAgY3VycmVudEZpbGU6IFRGaWxlLFxuICAgICAgICBjb252ZXJzYXRpb25EYXRhPzogQ29udmVyc2F0aW9uRGF0YVxuICAgICk6IFByb21pc2U8e1xuICAgICAgICBjbGVhbmVkTWVzc2FnZTogc3RyaW5nO1xuICAgICAgICBjb250ZXh0OiBNdWx0aURvY0NvbnRleHQ7XG4gICAgfT4ge1xuICAgICAgICAvLyBQYXJzZSBjdXJyZW50IG1lc3NhZ2VcbiAgICAgICAgY29uc3QgeyBjbGVhbmVkTWVzc2FnZSwgcmVmZXJlbmNlcyB9ID0gdGhpcy5wYXJzZU1lc3NhZ2UobWVzc2FnZSwgY3VycmVudEZpbGUucGF0aCk7XG5cbiAgICAgICAgLy8gR2V0IGV4aXN0aW5nIHBlcnNpc3RlbnQgY29udGV4dCBmb3IgdGhpcyBjb252ZXJzYXRpb25cbiAgICAgICAgY29uc3QgZXhpc3RpbmdQZXJzaXN0ZW50ID0gdGhpcy5wZXJzaXN0ZW50Q29udGV4dC5nZXQoY3VycmVudEZpbGUucGF0aCkgfHwgW107XG4gICAgICAgIFxuICAgICAgICAvLyBBZGQgbmV3IHJlZmVyZW5jZXMgdG8gcGVyc2lzdGVudCBjb250ZXh0IChhbGwgcmVmZXJlbmNlcyBhcmUgbm93IHBlcnNpc3RlbnQpXG4gICAgICAgIGlmIChyZWZlcmVuY2VzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRQZXJzaXN0ZW50ID0gWy4uLmV4aXN0aW5nUGVyc2lzdGVudF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFkZCBuZXcgcmVmZXJlbmNlcyB0aGF0IGFyZW4ndCBhbHJlYWR5IGluIHBlcnNpc3RlbnQgY29udGV4dFxuICAgICAgICAgICAgZm9yIChjb25zdCByZWYgb2YgcmVmZXJlbmNlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0cyA9IHVwZGF0ZWRQZXJzaXN0ZW50LnNvbWUoZXhpc3RpbmcgPT4gZXhpc3RpbmcuZmlsZS5wYXRoID09PSByZWYuZmlsZS5wYXRoKTtcbiAgICAgICAgICAgICAgICBpZiAoIWV4aXN0cykge1xuICAgICAgICAgICAgICAgICAgICB1cGRhdGVkUGVyc2lzdGVudC5wdXNoKHJlZik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnBlcnNpc3RlbnRDb250ZXh0LnNldChjdXJyZW50RmlsZS5wYXRoLCB1cGRhdGVkUGVyc2lzdGVudCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEdldCBmaW5hbCBwZXJzaXN0ZW50IGNvbnRleHQgKGluY2x1ZGluZyBuZXdseSBhZGRlZCBkb2NzKVxuICAgICAgICBjb25zdCByYXdQZXJzaXN0ZW50RG9jcyA9IHRoaXMucGVyc2lzdGVudENvbnRleHQuZ2V0KGN1cnJlbnRGaWxlLnBhdGgpIHx8IFtdO1xuICAgICAgICBcbiAgICAgICAgLy8gRmlsdGVyIG91dCBhbnkgc3RhbGUgZmlsZSByZWZlcmVuY2VzIChmaWxlcyB0aGF0IG5vIGxvbmdlciBleGlzdClcbiAgICAgICAgY29uc3QgYWxsUGVyc2lzdGVudERvY3MgPSByYXdQZXJzaXN0ZW50RG9jcy5maWx0ZXIoZG9jUmVmID0+IHtcbiAgICAgICAgICAgIGlmICghZG9jUmVmPy5maWxlIHx8ICF0aGlzLmFwcC52YXVsdC5nZXRBYnN0cmFjdEZpbGVCeVBhdGgoZG9jUmVmLmZpbGUucGF0aCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICAvLyBVcGRhdGUgdGhlIHBlcnNpc3RlbnQgY29udGV4dCB0byByZW1vdmUgc3RhbGUgcmVmZXJlbmNlc1xuICAgICAgICBpZiAoYWxsUGVyc2lzdGVudERvY3MubGVuZ3RoICE9PSByYXdQZXJzaXN0ZW50RG9jcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGlmIChhbGxQZXJzaXN0ZW50RG9jcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wZXJzaXN0ZW50Q29udGV4dC5zZXQoY3VycmVudEZpbGUucGF0aCwgYWxsUGVyc2lzdGVudERvY3MpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnBlcnNpc3RlbnRDb250ZXh0LmRlbGV0ZShjdXJyZW50RmlsZS5wYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJ1aWxkIGNvbnRleHQgc3RyaW5nIGZyb20gYWxsIGRvY3VtZW50c1xuICAgICAgICBjb25zdCBjb250ZXh0UGFydHM6IHN0cmluZ1tdID0gW107XG4gICAgICAgIFxuICAgICAgICAvLyBBTFdBWVMgaW5jbHVkZSBjdXJyZW50IGZpbGUgY29udGVudCBhbmQgbWV0YWRhdGEgZmlyc3QgKGltcGxpY2l0IGNvbnRleHQpXG4gICAgICAgIGNvbnN0IGN1cnJlbnRGaWxlQ29udGV4dCA9IGF3YWl0IHRoaXMuZ2V0RnVsbERvY3VtZW50Q29udGV4dChjdXJyZW50RmlsZSwgdHJ1ZSwgMTAwKTtcbiAgICAgICAgaWYgKGN1cnJlbnRGaWxlQ29udGV4dCkge1xuICAgICAgICAgICAgY29udGV4dFBhcnRzLnB1c2goY3VycmVudEZpbGVDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gVGhlbiBhZGQgYWxsIHBlcnNpc3RlbnQgZG9jdW1lbnRzIHdpdGggdGhlaXIgbWV0YWRhdGFcbiAgICAgICAgZm9yIChjb25zdCBkb2NSZWYgb2YgYWxsUGVyc2lzdGVudERvY3MpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRleHRQYXJ0ID0gYXdhaXQgdGhpcy5nZXREb2N1bWVudENvbnRleHQoZG9jUmVmKTtcbiAgICAgICAgICAgIGlmIChjb250ZXh0UGFydCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRQYXJ0cy5wdXNoKGNvbnRleHRQYXJ0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbnRleHRTdHJpbmcgPSBjb250ZXh0UGFydHMuam9pbignXFxuXFxuLS0tXFxuXFxuJyk7XG4gICAgICAgIGNvbnN0IHRva2VuQ291bnQgPSB0aGlzLmVzdGltYXRlVG9rZW5zKGNvbnRleHRTdHJpbmcpO1xuICAgICAgICBjb25zdCBpc05lYXJMaW1pdCA9IHRva2VuQ291bnQgPiAodGhpcy5UT0tFTl9MSU1JVCAqIHRoaXMuV0FSTklOR19USFJFU0hPTEQpO1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBjbGVhbmVkTWVzc2FnZSxcbiAgICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICBwZXJzaXN0ZW50RG9jczogYWxsUGVyc2lzdGVudERvY3MsXG4gICAgICAgICAgICAgICAgY29udGV4dFN0cmluZyxcbiAgICAgICAgICAgICAgICB0b2tlbkNvdW50LFxuICAgICAgICAgICAgICAgIGlzTmVhckxpbWl0XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGZ1bGwgZG9jdW1lbnQgY29udGV4dCBpbmNsdWRpbmcgbWV0YWRhdGEvcHJvcGVydGllc1xuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgZ2V0RnVsbERvY3VtZW50Q29udGV4dChmaWxlOiBURmlsZSwgaW5jbHVkZUNvbnRlbnQ6IGJvb2xlYW4gPSB0cnVlLCBtYXhMaW5lczogbnVtYmVyID0gNTApOiBQcm9taXNlPHN0cmluZyB8IG51bGw+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGxldCBjb250ZXh0UGFydHM6IHN0cmluZ1tdID0gW107XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFkZCBkb2N1bWVudCBoZWFkZXJcbiAgICAgICAgICAgIGNvbnRleHRQYXJ0cy5wdXNoKGAjIyBEb2N1bWVudDogJHtmaWxlLmJhc2VuYW1lfWApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBHZXQgYW5kIGFkZCBtZXRhZGF0YS9wcm9wZXJ0aWVzIGlmIGF2YWlsYWJsZVxuICAgICAgICAgICAgY29uc3QgY2FjaGUgPSB0aGlzLmFwcC5tZXRhZGF0YUNhY2hlLmdldEZpbGVDYWNoZShmaWxlKTtcbiAgICAgICAgICAgIGlmIChjYWNoZT8uZnJvbnRtYXR0ZXIgJiYgT2JqZWN0LmtleXMoY2FjaGUuZnJvbnRtYXR0ZXIpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0UGFydHMucHVzaCgnXFxuIyMjIFByb3BlcnRpZXMvTWV0YWRhdGE6Jyk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgT2JqZWN0LmVudHJpZXMoY2FjaGUuZnJvbnRtYXR0ZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvcm1hdCB0aGUgcHJvcGVydHkgdmFsdWUgKGhhbmRsZSBhcnJheXMsIG9iamVjdHMsIGV0Yy4pXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZvcm1hdHRlZFZhbHVlID0gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyA/IEpTT04uc3RyaW5naWZ5KHZhbHVlKSA6IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBjb250ZXh0UGFydHMucHVzaChgLSAke2tleX06ICR7Zm9ybWF0dGVkVmFsdWV9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBBZGQgY29udGVudCBpZiByZXF1ZXN0ZWRcbiAgICAgICAgICAgIGlmIChpbmNsdWRlQ29udGVudCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmFwcC52YXVsdC5yZWFkKGZpbGUpO1xuICAgICAgICAgICAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gY29udGVudC5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBTa2lwIGZyb250bWF0dGVyIGluIGNvbnRlbnQgZGlzcGxheSAoYmV0d2VlbiAtLS0gbWFya2VycylcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRlbnRTdGFydEluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVzWzBdID09PSAnLS0tJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsaW5lc1tpXSA9PT0gJy0tLScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudFN0YXJ0SW5kZXggPSBpICsgMTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZW50TGluZXMgPSBsaW5lcy5zbGljZShjb250ZW50U3RhcnRJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRydW5jYXRlZENvbnRlbnQgPSBjb250ZW50TGluZXMuc2xpY2UoMCwgbWF4TGluZXMpLmpvaW4oJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB3YXNUcnVuY2F0ZWQgPSBjb250ZW50TGluZXMubGVuZ3RoID4gbWF4TGluZXM7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBjb250ZXh0UGFydHMucHVzaCgnXFxuIyMjIENvbnRlbnQ6Jyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnRleHRQYXJ0cy5wdXNoKHRydW5jYXRlZENvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAod2FzVHJ1bmNhdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZXh0UGFydHMucHVzaCgnXFxuWy4uLiB0cnVuY2F0ZWQgZm9yIGJyZXZpdHkgLi4uXScpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gY29udGV4dFBhcnRzLmpvaW4oJ1xcbicpO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gRmFpbGVkIHRvIHJlYWQgZnVsbCBjb250ZXh0IC0gZ3JhY2VmdWwgZmFsbGJhY2tcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGNvbnRleHQgZm9yIGEgc3BlY2lmaWMgZG9jdW1lbnQgcmVmZXJlbmNlXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBnZXREb2N1bWVudENvbnRleHQoZG9jUmVmOiBEb2N1bWVudFJlZmVyZW5jZSk6IFByb21pc2U8c3RyaW5nIHwgbnVsbD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgeyBmaWxlLCBwcm9wZXJ0eSB9ID0gZG9jUmVmO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBWYWxpZGF0ZSB0aGF0IHRoZSBmaWxlIHN0aWxsIGV4aXN0cyBpbiB0aGUgdmF1bHRcbiAgICAgICAgICAgIGlmICghZmlsZSB8fCAhdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKGZpbGUucGF0aCkpIHtcbiAgICAgICAgICAgICAgICAvLyBGaWxlIG5vIGxvbmdlciBleGlzdHMgLSBncmFjZWZ1bCBmYWxsYmFja1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAocHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICAvLyBHZXQgc3BlY2lmaWMgcHJvcGVydHkgZnJvbSBmcm9udG1hdHRlclxuICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5hcHAubWV0YWRhdGFDYWNoZS5nZXRGaWxlQ2FjaGUoZmlsZSk7XG4gICAgICAgICAgICAgICAgaWYgKGNhY2hlPy5mcm9udG1hdHRlciAmJiBjYWNoZS5mcm9udG1hdHRlcltwcm9wZXJ0eV0pIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGAjIyAke2ZpbGUuYmFzZW5hbWV9IC0gJHtwcm9wZXJ0eX1cXG4ke2NhY2hlLmZyb250bWF0dGVyW3Byb3BlcnR5XX1gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gR2V0IGZ1bGwgZG9jdW1lbnQgY29udGV4dCB3aXRoIG1ldGFkYXRhXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RnVsbERvY3VtZW50Q29udGV4dChmaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEZhaWxlZCB0byByZWFkIGNvbnRleHQgLSBncmFjZWZ1bCBmYWxsYmFja1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGaW5kIGEgZmlsZSBieSBuYW1lIG9yIHBhdGhcbiAgICAgKi9cbiAgICBwcml2YXRlIGZpbmRGaWxlKG5hbWVPclBhdGg6IHN0cmluZyk6IFRGaWxlIHwgbnVsbCB7XG4gICAgICAgIC8vIEZpcnN0IHRyeSBleGFjdCBwYXRoIG1hdGNoXG4gICAgICAgIGxldCBmaWxlID0gdGhpcy5hcHAudmF1bHQuZ2V0QWJzdHJhY3RGaWxlQnlQYXRoKG5hbWVPclBhdGgpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFmaWxlIHx8ICEoZmlsZSBpbnN0YW5jZW9mIFRGaWxlKSkge1xuICAgICAgICAgICAgLy8gVHJ5IHdpdGggLm1kIGV4dGVuc2lvblxuICAgICAgICAgICAgZmlsZSA9IHRoaXMuYXBwLnZhdWx0LmdldEFic3RyYWN0RmlsZUJ5UGF0aChuYW1lT3JQYXRoICsgJy5tZCcpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBpZiAoIWZpbGUgfHwgIShmaWxlIGluc3RhbmNlb2YgVEZpbGUpKSB7XG4gICAgICAgICAgICAvLyBTZWFyY2ggYnkgYmFzZW5hbWVcbiAgICAgICAgICAgIGNvbnN0IGZpbGVzID0gdGhpcy5hcHAudmF1bHQuZ2V0TWFya2Rvd25GaWxlcygpO1xuICAgICAgICAgICAgZmlsZSA9IGZpbGVzLmZpbmQoZiA9PiBcbiAgICAgICAgICAgICAgICBmLmJhc2VuYW1lID09PSBuYW1lT3JQYXRoIHx8IFxuICAgICAgICAgICAgICAgIGYubmFtZSA9PT0gbmFtZU9yUGF0aCB8fFxuICAgICAgICAgICAgICAgIGYucGF0aC5lbmRzV2l0aCgnLycgKyBuYW1lT3JQYXRoKSB8fFxuICAgICAgICAgICAgICAgIGYucGF0aC5lbmRzV2l0aCgnLycgKyBuYW1lT3JQYXRoICsgJy5tZCcpXG4gICAgICAgICAgICApIHx8IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBmaWxlIGluc3RhbmNlb2YgVEZpbGUgPyBmaWxlIDogbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBwZXJzaXN0ZW50IGNvbnRleHQgZm9yIGEgY29udmVyc2F0aW9uXG4gICAgICovXG4gICAgY2xlYXJQZXJzaXN0ZW50Q29udGV4dChmaWxlUGF0aDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIHRoaXMucGVyc2lzdGVudENvbnRleHQuZGVsZXRlKGZpbGVQYXRoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgcGVyc2lzdGVudCBjb250ZXh0IGZvciBhIGNvbnZlcnNhdGlvblxuICAgICAqL1xuICAgIGdldFBlcnNpc3RlbnRDb250ZXh0KGZpbGVQYXRoOiBzdHJpbmcpOiBEb2N1bWVudFJlZmVyZW5jZVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGVyc2lzdGVudENvbnRleHQuZ2V0KGZpbGVQYXRoKSB8fCBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBzcGVjaWZpYyBkb2N1bWVudCBmcm9tIHBlcnNpc3RlbnQgY29udGV4dFxuICAgICAqL1xuICAgIHJlbW92ZVBlcnNpc3RlbnREb2MoZmlsZVBhdGg6IHN0cmluZywgZG9jVG9SZW1vdmU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBjdXJyZW50ID0gdGhpcy5wZXJzaXN0ZW50Q29udGV4dC5nZXQoZmlsZVBhdGgpIHx8IFtdO1xuICAgICAgICBjb25zdCBmaWx0ZXJlZCA9IGN1cnJlbnQuZmlsdGVyKHJlZiA9PiByZWYuZmlsZS5wYXRoICE9PSBkb2NUb1JlbW92ZSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoZmlsdGVyZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5wZXJzaXN0ZW50Q29udGV4dC5zZXQoZmlsZVBhdGgsIGZpbHRlcmVkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGVyc2lzdGVudENvbnRleHQuZGVsZXRlKGZpbGVQYXRoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEVzdGltYXRlIHRva2VuIGNvdW50IChyb3VnaCBhcHByb3hpbWF0aW9uKVxuICAgICAqL1xuICAgIHByaXZhdGUgZXN0aW1hdGVUb2tlbnModGV4dDogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAgICAgLy8gUm91Z2ggZXN0aW1hdGU6IH40IGNoYXJhY3RlcnMgcGVyIHRva2VuXG4gICAgICAgIHJldHVybiBNYXRoLmNlaWwodGV4dC5sZW5ndGggLyA0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdmlzdWFsIGluZGljYXRvcnMgZm9yIGNvbnRleHQgc3RhdGVcbiAgICAgKi9cbiAgICBnZXRDb250ZXh0SW5kaWNhdG9ycyhjb250ZXh0OiBNdWx0aURvY0NvbnRleHQpOiB7XG4gICAgICAgIHRleHQ6IHN0cmluZztcbiAgICAgICAgY2xhc3NOYW1lOiBzdHJpbmc7XG4gICAgICAgIHRvb2x0aXA6IHN0cmluZztcbiAgICB9IHtcbiAgICAgICAgY29uc3QgZG9jQ291bnQgPSBjb250ZXh0LnBlcnNpc3RlbnREb2NzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IE1hdGgucm91bmQoKGNvbnRleHQudG9rZW5Db3VudCAvIHRoaXMuVE9LRU5fTElNSVQpICogMTAwKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBjbGFzc05hbWUgPSAnbm92YS1jb250ZXh0LWluZGljYXRvcic7XG4gICAgICAgIGxldCB0b29sdGlwID0gYENvbnRleHQ6ICR7ZG9jQ291bnR9IGRvY3VtZW50JHtkb2NDb3VudCAhPT0gMSA/ICdzJyA6ICcnfSwgfiR7Y29udGV4dC50b2tlbkNvdW50fSB0b2tlbnNgO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNvbnRleHQuaXNOZWFyTGltaXQpIHtcbiAgICAgICAgICAgIGNsYXNzTmFtZSArPSAnIG5vdmEtY29udGV4dC13YXJuaW5nJztcbiAgICAgICAgICAgIHRvb2x0aXAgKz0gJyAoYXBwcm9hY2hpbmcgbGltaXQpJztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgY29uc3QgdGV4dCA9IGAke2RvY0NvdW50fSBkb2NzICR7cGVyY2VudGFnZX0lYDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7IHRleHQsIGNsYXNzTmFtZSwgdG9vbHRpcCB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZvcm1hdCBjb250ZXh0IGZvciBkaXNwbGF5IGluIFVJXG4gICAgICovXG4gICAgZm9ybWF0Q29udGV4dEZvckRpc3BsYXkoY29udGV4dDogTXVsdGlEb2NDb250ZXh0KTogc3RyaW5nW10ge1xuICAgICAgICBjb25zdCBpdGVtczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgXG4gICAgICAgIC8vIEFkZCBwZXJzaXN0ZW50IGRvY3VtZW50c1xuICAgICAgICBmb3IgKGNvbnN0IGRvYyBvZiBjb250ZXh0LnBlcnNpc3RlbnREb2NzKSB7XG4gICAgICAgICAgICBpdGVtcy5wdXNoKGAke2RvYy5maWxlLmJhc2VuYW1lfSR7ZG9jLnByb3BlcnR5ID8gYCMke2RvYy5wcm9wZXJ0eX1gIDogJyd9YCk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBpdGVtcztcbiAgICB9XG59IiwgIi8qKlxuICogQ2VudHJhbGl6ZWQgbW9kZWwgZGVmaW5pdGlvbnMgZm9yIGFsbCBBSSBwcm92aWRlcnNcbiAqL1xuXG5leHBvcnQgaW50ZXJmYWNlIE1vZGVsRGVmaW5pdGlvbiB7XG5cdHZhbHVlOiBzdHJpbmc7XG5cdGxhYmVsOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTW9kZWxDb25maWcge1xuXHRnZXRBdmFpbGFibGVNb2RlbHMocHJvdmlkZXJUeXBlOiBzdHJpbmcsIHNldHRpbmdzPzogYW55KTogTW9kZWxEZWZpbml0aW9uW107XG59XG5cbi8qKlxuICogR2V0IGF2YWlsYWJsZSBtb2RlbHMgZm9yIGEgcHJvdmlkZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEF2YWlsYWJsZU1vZGVscyhwcm92aWRlclR5cGU6IHN0cmluZywgc2V0dGluZ3M/OiBhbnkpOiBNb2RlbERlZmluaXRpb25bXSB7XG5cdHN3aXRjaCAocHJvdmlkZXJUeXBlKSB7XG5cdFx0Y2FzZSAnY2xhdWRlJzpcblx0XHRcdHJldHVybiBbXG5cdFx0XHRcdHsgdmFsdWU6ICdjbGF1ZGUtb3B1cy00LTIwMjUwNTE0JywgbGFiZWw6ICdDbGF1ZGUgT3B1cyA0JyB9LFxuXHRcdFx0XHR7IHZhbHVlOiAnY2xhdWRlLXNvbm5ldC00LTIwMjUwNTE0JywgbGFiZWw6ICdDbGF1ZGUgU29ubmV0IDQnIH0sXG5cdFx0XHRcdHsgdmFsdWU6ICdjbGF1ZGUtMy03LXNvbm5ldC1sYXRlc3QnLCBsYWJlbDogJ0NsYXVkZSAzLjcgU29ubmV0JyB9LFxuXHRcdFx0XHR7IHZhbHVlOiAnY2xhdWRlLTMtNS1zb25uZXQtbGF0ZXN0JywgbGFiZWw6ICdDbGF1ZGUgMy41IFNvbm5ldCcgfSxcblx0XHRcdFx0eyB2YWx1ZTogJ2NsYXVkZS0zLTUtc29ubmV0LTIwMjQxMDIyJywgbGFiZWw6ICdDbGF1ZGUgMy41IFNvbm5ldCAoT2N0IDIyKScgfSxcblx0XHRcdFx0eyB2YWx1ZTogJ2NsYXVkZS0zLTUtaGFpa3UtbGF0ZXN0JywgbGFiZWw6ICdDbGF1ZGUgMy41IEhhaWt1JyB9XG5cdFx0XHRdO1xuXHRcdGNhc2UgJ29wZW5haSc6XG5cdFx0XHRyZXR1cm4gW1xuXHRcdFx0XHR7IHZhbHVlOiAnZ3B0LTQuMS0yMDI1LTA0LTE0JywgbGFiZWw6ICdHUFQtNC4xJyB9LFxuXHRcdFx0XHR7IHZhbHVlOiAnZ3B0LTQuMS1taW5pLTIwMjUtMDQtMTQnLCBsYWJlbDogJ0dQVC00LjEgTWluaScgfSxcblx0XHRcdFx0eyB2YWx1ZTogJ2dwdC00LjEtbmFuby0yMDI1LTA0LTE0JywgbGFiZWw6ICdHUFQtNC4xIE5hbm8nIH0sXG5cdFx0XHRcdHsgdmFsdWU6ICdncHQtNG8nLCBsYWJlbDogJ0dQVC00bycgfSxcblx0XHRcdFx0eyB2YWx1ZTogJ2dwdC00by1taW5pJywgbGFiZWw6ICdHUFQtNG8gTWluaScgfVxuXHRcdFx0XTtcblx0XHRjYXNlICdnb29nbGUnOlxuXHRcdFx0cmV0dXJuIFtcblx0XHRcdFx0eyB2YWx1ZTogJ2dlbWluaS0yLjUtZmxhc2gtcHJldmlldy0wNC0xNycsIGxhYmVsOiAnR2VtaW5pIDIuNSBGbGFzaCcgfSxcblx0XHRcdFx0eyB2YWx1ZTogJ2dlbWluaS0yLjUtcHJvLXByZXZpZXctMDMtMjUnLCBsYWJlbDogJ0dlbWluaSAyLjUgUHJvJyB9LFxuXHRcdFx0XHR7IHZhbHVlOiAnZ2VtaW5pLTIuMC1mbGFzaCcsIGxhYmVsOiAnR2VtaW5pIDIuMCBGbGFzaCcgfSxcblx0XHRcdFx0eyB2YWx1ZTogJ2dlbWluaS0yLjAtZmxhc2gtbGl0ZScsIGxhYmVsOiAnR2VtaW5pIDIuMCBGbGFzaC1MaXRlJyB9XG5cdFx0XHRdO1xuXHRcdGNhc2UgJ29sbGFtYSc6XG5cdFx0XHQvLyBSZXR1cm4gdGhlIGNvbmZpZ3VyZWQgbW9kZWwgZnJvbSBzZXR0aW5nc1xuXHRcdFx0Y29uc3Qgb2xsYW1hTW9kZWwgPSBzZXR0aW5ncz8uYWlQcm92aWRlcnM/Lm9sbGFtYT8ubW9kZWw7XG5cdFx0XHRpZiAob2xsYW1hTW9kZWwgJiYgb2xsYW1hTW9kZWwudHJpbSgpKSB7XG5cdFx0XHRcdHJldHVybiBbeyB2YWx1ZTogb2xsYW1hTW9kZWwsIGxhYmVsOiBvbGxhbWFNb2RlbCB9XTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBbXTtcblx0XHRkZWZhdWx0OlxuXHRcdFx0cmV0dXJuIFtdO1xuXHR9XG59IiwgImltcG9ydCB7IEJ1dHRvbkNvbXBvbmVudCwgVGV4dEFyZWFDb21wb25lbnQsIFBsYXRmb3JtLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgTm92YVBsdWdpbiBmcm9tICcuLi8uLi9tYWluJztcbmltcG9ydCB7IE5vdmFXaWtpbGlua0F1dG9jb21wbGV0ZSB9IGZyb20gJy4vd2lraWxpbmstc3VnZ2VzdCc7XG5pbXBvcnQgeyBDb21tYW5kU3lzdGVtIH0gZnJvbSAnLi9jb21tYW5kLXN5c3RlbSc7XG5pbXBvcnQgeyBDb250ZXh0TWFuYWdlciB9IGZyb20gJy4vY29udGV4dC1tYW5hZ2VyJztcblxuLyoqXG4gKiBIYW5kbGVzIHRleHRhcmVhIGlucHV0LCBhdXRvLWdyb3csIHNlbmQgYnV0dG9uLCBhbmQgaW5wdXQgZXZlbnRzXG4gKi9cbmV4cG9ydCBjbGFzcyBJbnB1dEhhbmRsZXIge1xuXHRwcml2YXRlIHBsdWdpbjogTm92YVBsdWdpbjtcblx0cHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50O1xuXHRwcml2YXRlIHRleHRBcmVhITogVGV4dEFyZWFDb21wb25lbnQ7XG5cdHByaXZhdGUgc2VuZEJ1dHRvbiE6IEJ1dHRvbkNvbXBvbmVudDtcblx0cHJpdmF0ZSBhdXRvR3Jvd1RleHRhcmVhITogKCkgPT4gdm9pZDtcblx0cHJpdmF0ZSB3aWtpbGlua0F1dG9jb21wbGV0ZSE6IE5vdmFXaWtpbGlua0F1dG9jb21wbGV0ZTtcblx0cHJpdmF0ZSBjb21tYW5kU3lzdGVtITogQ29tbWFuZFN5c3RlbTtcblx0cHJpdmF0ZSBjb250ZXh0TWFuYWdlcjogQ29udGV4dE1hbmFnZXI7XG5cdHByaXZhdGUgaW5wdXRSb3chOiBIVE1MRWxlbWVudDtcblx0cHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgRk9DVVNfREVMQVlfTVMgPSAxNTA7XG5cdHByaXZhdGUgZHJvcFpvbmVPdmVybGF5OiBIVE1MRWxlbWVudCB8IG51bGwgPSBudWxsO1xuXHRwcml2YXRlIGlzRHJhZ2dpbmc6IGJvb2xlYW4gPSBmYWxzZTtcblx0cHJpdmF0ZSBzaWRlYmFyVmlldzogYW55OyAvLyBSZWZlcmVuY2UgdG8gTm92YVNpZGViYXJWaWV3IGZvciBjb250ZXh0IG9wZXJhdGlvbnNcblxuXHQvLyBFdmVudCBjbGVhbnVwIHRyYWNraW5nXG5cdHByaXZhdGUgZXZlbnRMaXN0ZW5lcnM6IEFycmF5PHtlbGVtZW50OiBFdmVudFRhcmdldCwgZXZlbnQ6IHN0cmluZywgaGFuZGxlcjogRXZlbnRMaXN0ZW5lcn0+ID0gW107XG5cblx0Y29uc3RydWN0b3IoXG5cdFx0cGx1Z2luOiBOb3ZhUGx1Z2luLCBcblx0XHRjb250YWluZXI6IEhUTUxFbGVtZW50LCBcblx0XHRjb250ZXh0TWFuYWdlcjogQ29udGV4dE1hbmFnZXJcblx0KSB7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdFx0dGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG5cdFx0dGhpcy5jb250ZXh0TWFuYWdlciA9IGNvbnRleHRNYW5hZ2VyO1xuXHR9XG5cblx0c2V0U2lkZWJhclZpZXcoc2lkZWJhclZpZXc6IGFueSk6IHZvaWQge1xuXHRcdHRoaXMuc2lkZWJhclZpZXcgPSBzaWRlYmFyVmlldztcblx0XHQvLyBBbHNvIHBhc3MgdG8gd2lraWxpbmsgYXV0b2NvbXBsZXRlIGlmIGl0IGV4aXN0c1xuXHRcdGlmICh0aGlzLndpa2lsaW5rQXV0b2NvbXBsZXRlKSB7XG5cdFx0XHR0aGlzLndpa2lsaW5rQXV0b2NvbXBsZXRlLnNldFNpZGViYXJWaWV3KHNpZGViYXJWaWV3KTtcblx0XHR9XG5cdH1cblxuXHRzZXRDb21tYW5kU3lzdGVtKGNvbW1hbmRTeXN0ZW06IENvbW1hbmRTeXN0ZW0pOiB2b2lkIHtcblx0XHR0aGlzLmNvbW1hbmRTeXN0ZW0gPSBjb21tYW5kU3lzdGVtO1xuXHRcdFxuXHRcdC8vIENyZWF0ZSBjb21tYW5kIGJ1dHRvbiBiZWZvcmUgc2VuZCBidXR0b24gZm9yIHByb3BlciBET00gb3JkZXJcblx0XHRjb25zdCBzZW5kQnV0dG9uRWwgPSB0aGlzLnNlbmRCdXR0b24uYnV0dG9uRWw7XG5cdFx0c2VuZEJ1dHRvbkVsLnJlbW92ZSgpO1xuXHRcdFxuXHRcdC8vIENyZWF0ZSBjb21tYW5kIGJ1dHRvblxuXHRcdHRoaXMuY29tbWFuZFN5c3RlbS5jcmVhdGVDb21tYW5kQnV0dG9uKHRoaXMuaW5wdXRSb3cpO1xuXHRcdFxuXHRcdC8vIFJlLWFkZCBzZW5kIGJ1dHRvbiAod2lsbCBiZSBsYXN0IGluIERPTSBvcmRlcilcblx0XHR0aGlzLmlucHV0Um93LmFwcGVuZENoaWxkKHNlbmRCdXR0b25FbCk7XG5cdFx0XG5cdFx0Ly8gQ3JlYXRlIGNvbW1hbmQgcGlja2VyXG5cdFx0dGhpcy5jb21tYW5kU3lzdGVtLmNyZWF0ZUNvbW1hbmRQaWNrZXJJbkNvbnRhaW5lcih0aGlzLmlucHV0Um93KTtcblx0fVxuXG5cdGdldFRleHRBcmVhKCk6IFRleHRBcmVhQ29tcG9uZW50IHtcblx0XHRyZXR1cm4gdGhpcy50ZXh0QXJlYTtcblx0fVxuXG5cdGNyZWF0ZUlucHV0SW50ZXJmYWNlKGNoYXRDb250YWluZXI6IEhUTUxFbGVtZW50KTogdm9pZCB7XG5cdFx0dGhpcy5jb250YWluZXIgPSB0aGlzLmNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWlucHV0LWNvbnRhaW5lcicgfSk7XG5cdFx0dGhpcy5jb250YWluZXIuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdGZsZXgtc2hyaW5rOiAwO1xuXHRcdFx0cGFkZGluZzogdmFyKC0tc2l6ZS00LTMpO1xuXHRcdFx0Ym9yZGVyLXRvcDogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcblx0XHRcdHBvc2l0aW9uOiByZWxhdGl2ZTtcblx0XHRgO1xuXG5cdFx0dGhpcy5pbnB1dFJvdyA9IHRoaXMuY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ25vdmEtaW5wdXQtcm93JyB9KTtcblx0XHR0aGlzLmlucHV0Um93LnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0Z2FwOiB2YXIoLS1zaXplLTItMyk7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdFx0cG9zaXRpb246IHJlbGF0aXZlO1xuXHRcdGA7XG5cblx0XHQvLyBUZXh0YXJlYSBjb250YWluZXJcblx0XHRjb25zdCB0ZXh0QXJlYUNvbnRhaW5lciA9IHRoaXMuaW5wdXRSb3cuY3JlYXRlRGl2KCk7XG5cdFx0dGV4dEFyZWFDb250YWluZXIuc3R5bGUuY3NzVGV4dCA9ICdmbGV4OiAxOyBwb3NpdGlvbjogcmVsYXRpdmU7JztcblxuXHRcdC8vIENyZWF0ZSB0ZXh0YXJlYVxuXHRcdHRoaXMudGV4dEFyZWEgPSBuZXcgVGV4dEFyZWFDb21wb25lbnQodGV4dEFyZWFDb250YWluZXIpO1xuXHRcdHRoaXMudGV4dEFyZWEuc2V0UGxhY2Vob2xkZXIoJ0hvdyBjYW4gSSBoZWxwIHdpdGggeW91ciB3cml0aW5nPycpO1xuXHRcdHRoaXMudGV4dEFyZWEuaW5wdXRFbC5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0bWluLWhlaWdodDogODBweDtcblx0XHRcdG1heC1oZWlnaHQ6IDIwMHB4O1xuXHRcdFx0cmVzaXplOiBub25lO1xuXHRcdFx0b3ZlcmZsb3cteTogYXV0bztcblx0XHRcdGJvcmRlci1yYWRpdXM6IHZhcigtLXJhZGl1cy1zKTtcblx0XHRcdHBhZGRpbmc6IHZhcigtLXNpemUtMi0yKSB2YXIoLS1zaXplLTItMyk7XG5cdFx0XHRib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG5cdFx0XHRiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpO1xuXHRcdFx0Y29sb3I6IHZhcigtLXRleHQtbm9ybWFsKTtcblx0XHRcdGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWludGVyZmFjZSk7XG5cdFx0XHRmb250LXNpemU6IHZhcigtLWZvbnQtdWktbWVkaXVtKTtcblx0XHRcdGxpbmUtaGVpZ2h0OiAxLjQ7XG5cdFx0XHR3aWR0aDogMTAwJTtcblx0XHRcdGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cdFx0YDtcblxuXHRcdC8vIEF1dG8tZ3JvdyBmdW5jdGlvbmFsaXR5XG5cdFx0dGhpcy5hdXRvR3Jvd1RleHRhcmVhID0gKCkgPT4ge1xuXHRcdFx0Y29uc3QgdGV4dGFyZWEgPSB0aGlzLnRleHRBcmVhLmlucHV0RWw7XG5cdFx0XHR0ZXh0YXJlYS5zdHlsZS5oZWlnaHQgPSAnYXV0byc7XG5cdFx0XHR0ZXh0YXJlYS5zdHlsZS5oZWlnaHQgPSBNYXRoLm1pbih0ZXh0YXJlYS5zY3JvbGxIZWlnaHQsIDIwMCkgKyAncHgnO1xuXHRcdH07XG5cblx0XHQvLyBBZGQgaW5wdXQgZXZlbnQgbGlzdGVuZXIgZm9yIGF1dG8tZ3Jvd1xuXHRcdHRoaXMuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLnRleHRBcmVhLmlucHV0RWwsICdpbnB1dCcsIHRoaXMuYXV0b0dyb3dUZXh0YXJlYSk7XG5cblx0XHQvLyBUcmlnZ2VyIGF1dG8tZ3JvdyBvbiBpbml0aWFsIGxvYWRcblx0XHRzZXRUaW1lb3V0KHRoaXMuYXV0b0dyb3dUZXh0YXJlYSwgMCk7XG5cblx0XHQvLyBJbml0aWFsaXplIHdpa2lsaW5rIGF1dG9jb21wbGV0ZSB3aXRoIGlucHV0Um93IGZvciBjb25zaXN0ZW50IHdpZHRoXG5cdFx0dGhpcy53aWtpbGlua0F1dG9jb21wbGV0ZSA9IG5ldyBOb3ZhV2lraWxpbmtBdXRvY29tcGxldGUodGhpcy5wbHVnaW4uYXBwLCB0aGlzLnRleHRBcmVhLmlucHV0RWwsIHRoaXMuaW5wdXRSb3cpO1xuXHRcdFxuXHRcdC8vIFBhc3Mgc2lkZWJhciB2aWV3IHJlZmVyZW5jZSB3aGVuIGF2YWlsYWJsZVxuXHRcdGlmICh0aGlzLnNpZGViYXJWaWV3KSB7XG5cdFx0XHR0aGlzLndpa2lsaW5rQXV0b2NvbXBsZXRlLnNldFNpZGViYXJWaWV3KHRoaXMuc2lkZWJhclZpZXcpO1xuXHRcdH1cblxuXHRcdC8vIEFkZCBkZWJvdW5jZWQgY29udGV4dCBwcmV2aWV3XG5cdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKHRoaXMudGV4dEFyZWEuaW5wdXRFbCwgJ2lucHV0JywgKCkgPT4ge1xuXHRcdFx0dGhpcy5jb250ZXh0TWFuYWdlci51cGRhdGVMaXZlQ29udGV4dFByZXZpZXcodGhpcy50ZXh0QXJlYS5nZXRWYWx1ZSgpKTtcblx0XHR9KTtcblxuXHRcdC8vIENvbW1hbmQgYnV0dG9uIHdpbGwgYmUgY3JlYXRlZCBsYXRlciB3aGVuIENvbW1hbmRTeXN0ZW0gaXMgc2V0XG5cblx0XHQvLyBTZW5kIGJ1dHRvblxuXHRcdHRoaXMuc2VuZEJ1dHRvbiA9IG5ldyBCdXR0b25Db21wb25lbnQodGhpcy5pbnB1dFJvdyk7XG5cdFx0dGhpcy5zZW5kQnV0dG9uLnNldEljb24oJ3NlbmQnKTtcblx0XHR0aGlzLnNlbmRCdXR0b24uc2V0VG9vbHRpcCgnU2VuZCBtZXNzYWdlJyk7XG5cdFx0dGhpcy5zZW5kQnV0dG9uLm9uQ2xpY2soKCkgPT4gdGhpcy5oYW5kbGVTZW5kKCkpO1xuXHRcdHRoaXMuc2VuZEJ1dHRvbi5idXR0b25FbC5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0bWluLXdpZHRoOiB2YXIoLS1zaXplLTQtOSk7XG5cdFx0XHRoZWlnaHQ6IHZhcigtLXNpemUtNC05KTtcblx0XHRcdGJvcmRlci1yYWRpdXM6IDUwJTtcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHRwYWRkaW5nOiAwO1xuXHRcdFx0ZmxleC1zaHJpbms6IDA7XG5cdFx0XHRiYWNrZ3JvdW5kOiB2YXIoLS1pbnRlcmFjdGl2ZS1hY2NlbnQpO1xuXHRcdFx0Y29sb3I6IHZhcigtLXRleHQtb24tYWNjZW50KTtcblx0XHRcdGJvcmRlcjogbm9uZTtcblx0XHRgO1xuXG5cdFx0Ly8gRW50ZXIga2V5IGhhbmRsaW5nIGFuZCBjb21tYW5kL3NlY3Rpb24gcGlja2VyXG5cdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKHRoaXMudGV4dEFyZWEuaW5wdXRFbCwgJ2tleWRvd24nLCAoZXZlbnQ6IEV2ZW50KSA9PiB7XG5cdFx0XHRjb25zdCBrZXlFdmVudCA9IGV2ZW50IGFzIEtleWJvYXJkRXZlbnQ7XG5cblx0XHRcdGlmIChrZXlFdmVudC5rZXkgPT09ICdFbnRlcicgJiYgIWtleUV2ZW50LnNoaWZ0S2V5KSB7XG5cdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdCh0aGlzLmNvbW1hbmRTeXN0ZW0/LmhhbmRsZUNvbW1hbmRQaWNrZXJTZWxlY3Rpb24oKSB8fCBmYWxzZSkgfHwgdGhpcy5oYW5kbGVTZW5kKCk7XG5cdFx0XHR9IGVsc2UgaWYgKGtleUV2ZW50LmtleSA9PT0gJ0VzY2FwZScpIHtcblx0XHRcdFx0dGhpcy5jb21tYW5kU3lzdGVtPy5oaWRlQ29tbWFuZFBpY2tlcigpO1xuXHRcdFx0fSBlbHNlIGlmIChrZXlFdmVudC5rZXkgPT09ICdBcnJvd1VwJyB8fCBrZXlFdmVudC5rZXkgPT09ICdBcnJvd0Rvd24nKSB7XG5cdFx0XHRcdGlmICh0aGlzLmNvbW1hbmRTeXN0ZW0/LmhhbmRsZUNvbW1hbmRQaWNrZXJOYXZpZ2F0aW9uKGtleUV2ZW50LmtleSkpIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGtleUV2ZW50LmtleSA9PT0gJ1RhYicpIHtcblx0XHRcdFx0aWYgKHRoaXMuY29tbWFuZFN5c3RlbT8uaGFuZGxlQ29tbWFuZFBpY2tlck5hdmlnYXRpb24oa2V5RXZlbnQua2V5KSkge1xuXHRcdFx0XHRcdGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIElucHV0IGNoYW5nZSBoYW5kbGluZyBmb3IgY29tbWFuZCBwaWNrZXJcblx0XHR0aGlzLmFkZEV2ZW50TGlzdGVuZXIodGhpcy50ZXh0QXJlYS5pbnB1dEVsLCAnaW5wdXQnLCAoKSA9PiB7XG5cdFx0XHRpZiAodGhpcy5jb21tYW5kU3lzdGVtKSB7XG5cdFx0XHRcdHRoaXMuY29tbWFuZFN5c3RlbS5oYW5kbGVJbnB1dENoYW5nZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0Ly8gU2V0dXAgZHJhZyBhbmQgZHJvcCBmb3IgZmlsZSBjb250ZXh0XG5cdFx0dGhpcy5zZXR1cERyYWdBbmREcm9wKCk7XG5cdH1cblxuXHRmb2N1cygpOiB2b2lkIHtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGlmICh0aGlzLnRleHRBcmVhPy5pbnB1dEVsKSB7XG5cdFx0XHRcdHRoaXMudGV4dEFyZWEuaW5wdXRFbC5mb2N1cygpO1xuXHRcdFx0fVxuXHRcdH0sIElucHV0SGFuZGxlci5GT0NVU19ERUxBWV9NUyk7XG5cdH1cblxuXHRwcml2YXRlIGhhbmRsZVNlbmQoKTogdm9pZCB7XG5cdFx0Y29uc3QgbWVzc2FnZSA9IHRoaXMudGV4dEFyZWEuZ2V0VmFsdWUoKS50cmltKCk7XG5cdFx0aWYgKCFtZXNzYWdlKSByZXR1cm47XG5cblx0XHQvLyBDbGVhciBpbnB1dFxuXHRcdHRoaXMudGV4dEFyZWEuc2V0VmFsdWUoJycpO1xuXHRcdHRoaXMuYXV0b0dyb3dUZXh0YXJlYSgpO1xuXHRcdHRoaXMuY29udGV4dE1hbmFnZXIuaGlkZUNvbnRleHRQcmV2aWV3KCk7XG5cblx0XHQvLyBUaGlzIHdvdWxkIHR5cGljYWxseSBjYWxsIGEgY2FsbGJhY2sgb3IgZW1pdCBhbiBldmVudFxuXHRcdC8vIEZvciBub3csIHdlJ2xsIGFzc3VtZSB0aGUgcGFyZW50IGhhbmRsZXMgdGhlIGFjdHVhbCBzZW5kaW5nXG5cdFx0dGhpcy5vblNlbmRNZXNzYWdlPy4obWVzc2FnZSk7XG5cdH1cblxuXHRwcml2YXRlIG9uU2VuZE1lc3NhZ2U/OiAobWVzc2FnZTogc3RyaW5nKSA9PiB2b2lkO1xuXG5cdHNldE9uU2VuZE1lc3NhZ2UoY2FsbGJhY2s6IChtZXNzYWdlOiBzdHJpbmcpID0+IHZvaWQpOiB2b2lkIHtcblx0XHR0aGlzLm9uU2VuZE1lc3NhZ2UgPSBjYWxsYmFjaztcblx0fVxuXG5cdGdldFZhbHVlKCk6IHN0cmluZyB7XG5cdFx0cmV0dXJuIHRoaXMudGV4dEFyZWEuZ2V0VmFsdWUoKTtcblx0fVxuXG5cdHNldFZhbHVlKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcblx0XHR0aGlzLnRleHRBcmVhLnNldFZhbHVlKHZhbHVlKTtcblx0XHR0aGlzLmF1dG9Hcm93VGV4dGFyZWEoKTtcblx0fVxuXG5cdGluc2VydFRleHQodGV4dDogc3RyaW5nKTogdm9pZCB7XG5cdFx0Y29uc3QgY3VycmVudFZhbHVlID0gdGhpcy50ZXh0QXJlYS5nZXRWYWx1ZSgpO1xuXHRcdGNvbnN0IHRleHRhcmVhID0gdGhpcy50ZXh0QXJlYS5pbnB1dEVsO1xuXHRcdGNvbnN0IHN0YXJ0ID0gdGV4dGFyZWEuc2VsZWN0aW9uU3RhcnQ7XG5cdFx0Y29uc3QgZW5kID0gdGV4dGFyZWEuc2VsZWN0aW9uRW5kO1xuXG5cdFx0Y29uc3QgbmV3VmFsdWUgPSBjdXJyZW50VmFsdWUuc2xpY2UoMCwgc3RhcnQpICsgdGV4dCArIGN1cnJlbnRWYWx1ZS5zbGljZShlbmQpO1xuXHRcdHRoaXMudGV4dEFyZWEuc2V0VmFsdWUobmV3VmFsdWUpO1xuXG5cdFx0Ly8gUG9zaXRpb24gY3Vyc29yIGFmdGVyIGluc2VydGVkIHRleHRcblx0XHRjb25zdCBuZXdQb3NpdGlvbiA9IHN0YXJ0ICsgdGV4dC5sZW5ndGg7XG5cdFx0c2V0VGltZW91dCgoKSA9PiB7XG5cdFx0XHR0ZXh0YXJlYS5zZXRTZWxlY3Rpb25SYW5nZShuZXdQb3NpdGlvbiwgbmV3UG9zaXRpb24pO1xuXHRcdFx0dGV4dGFyZWEuZm9jdXMoKTtcblx0XHR9LCAwKTtcblxuXHRcdHRoaXMuYXV0b0dyb3dUZXh0YXJlYSgpO1xuXHR9XG5cblx0aW5zZXJ0VGV4dFdpdGhDdXJzb3IoYmVmb3JlQ3Vyc29yOiBzdHJpbmcsIGFmdGVyQ3Vyc29yOiBzdHJpbmcgPSAnJyk6IHZvaWQge1xuXHRcdGNvbnN0IGN1cnJlbnRWYWx1ZSA9IHRoaXMudGV4dEFyZWEuZ2V0VmFsdWUoKTtcblx0XHRjb25zdCB0ZXh0YXJlYSA9IHRoaXMudGV4dEFyZWEuaW5wdXRFbDtcblx0XHRjb25zdCBzdGFydCA9IHRleHRhcmVhLnNlbGVjdGlvblN0YXJ0O1xuXHRcdGNvbnN0IGVuZCA9IHRleHRhcmVhLnNlbGVjdGlvbkVuZDtcblxuXHRcdGNvbnN0IG5ld1ZhbHVlID0gY3VycmVudFZhbHVlLnNsaWNlKDAsIHN0YXJ0KSArIGJlZm9yZUN1cnNvciArIGFmdGVyQ3Vyc29yICsgY3VycmVudFZhbHVlLnNsaWNlKGVuZCk7XG5cdFx0dGhpcy50ZXh0QXJlYS5zZXRWYWx1ZShuZXdWYWx1ZSk7XG5cblx0XHQvLyBQb3NpdGlvbiBjdXJzb3IgYmV0d2VlbiBiZWZvcmUgYW5kIGFmdGVyIHRleHRcblx0XHRjb25zdCBjdXJzb3JQb3NpdGlvbiA9IHN0YXJ0ICsgYmVmb3JlQ3Vyc29yLmxlbmd0aDtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdHRleHRhcmVhLnNldFNlbGVjdGlvblJhbmdlKGN1cnNvclBvc2l0aW9uLCBjdXJzb3JQb3NpdGlvbik7XG5cdFx0XHR0ZXh0YXJlYS5mb2N1cygpO1xuXHRcdH0sIDApO1xuXG5cdFx0dGhpcy5hdXRvR3Jvd1RleHRhcmVhKCk7XG5cdH1cblxuXHRwcml2YXRlIGFkZEV2ZW50TGlzdGVuZXIoZWxlbWVudDogRXZlbnRUYXJnZXQsIGV2ZW50OiBzdHJpbmcsIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXIpOiB2b2lkIHtcblx0XHRlbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGhhbmRsZXIpO1xuXHRcdHRoaXMuZXZlbnRMaXN0ZW5lcnMucHVzaCh7IGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyIH0pO1xuXHR9XG5cblx0cHJpdmF0ZSBzZXR1cERyYWdBbmREcm9wKCk6IHZvaWQge1xuXHRcdGNvbnN0IGRyb3Bab25lID0gdGhpcy50ZXh0QXJlYS5pbnB1dEVsO1xuXG5cdFx0Ly8gUHJldmVudCBkZWZhdWx0IGRyYWcgYmVoYXZpb3JzXG5cdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKGRyb3Bab25lLCAnZHJhZ2VudGVyJywgKGU6IEV2ZW50KSA9PiB7XG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XG5cdFx0XHR0aGlzLmhhbmRsZURyYWdFbnRlcigpO1xuXHRcdH0pO1xuXG5cdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKGRyb3Bab25lLCAnZHJhZ292ZXInLCAoZTogRXZlbnQpID0+IHtcblx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdC8vIFNldCBkcm9wIGVmZmVjdCB0byBzaG93IGl0J3MgYWxsb3dlZFxuXHRcdFx0KGUgYXMgRHJhZ0V2ZW50KS5kYXRhVHJhbnNmZXIhLmRyb3BFZmZlY3QgPSAnY29weSc7XG5cdFx0fSk7XG5cblx0XHR0aGlzLmFkZEV2ZW50TGlzdGVuZXIoZHJvcFpvbmUsICdkcmFnbGVhdmUnLCAoZTogRXZlbnQpID0+IHtcblx0XHRcdC8vIE9ubHkgaGlkZSBvdmVybGF5IGlmIHdlJ3JlIGxlYXZpbmcgdGhlIGRyb3Agem9uZSBlbnRpcmVseVxuXHRcdFx0aWYgKGUudGFyZ2V0ID09PSBkcm9wWm9uZSkge1xuXHRcdFx0XHR0aGlzLmhhbmRsZURyYWdMZWF2ZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0dGhpcy5hZGRFdmVudExpc3RlbmVyKGRyb3Bab25lLCAnZHJvcCcsIChlOiBFdmVudCkgPT4ge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0dGhpcy5oYW5kbGVEcm9wKGUgYXMgRHJhZ0V2ZW50KTtcblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgaGFuZGxlRHJhZ0VudGVyKCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmlzRHJhZ2dpbmcpIHJldHVybjtcblx0XHR0aGlzLmlzRHJhZ2dpbmcgPSB0cnVlO1xuXG5cdFx0Ly8gQ3JlYXRlIG92ZXJsYXkgZm9yIHZpc3VhbCBmZWVkYmFja1xuXHRcdGlmICghdGhpcy5kcm9wWm9uZU92ZXJsYXkpIHtcblx0XHRcdHRoaXMuZHJvcFpvbmVPdmVybGF5ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG5cdFx0XHR0aGlzLmRyb3Bab25lT3ZlcmxheS5jbGFzc05hbWUgPSAnbm92YS1kcm9wLXpvbmUtb3ZlcmxheSc7XG5cdFx0XHR0aGlzLmRyb3Bab25lT3ZlcmxheS5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0XHRwb3NpdGlvbjogYWJzb2x1dGU7XG5cdFx0XHRcdHRvcDogMDtcblx0XHRcdFx0bGVmdDogMDtcblx0XHRcdFx0cmlnaHQ6IDA7XG5cdFx0XHRcdGJvdHRvbTogMDtcblx0XHRcdFx0YmFja2dyb3VuZDogdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KTtcblx0XHRcdFx0b3BhY2l0eTogMDtcblx0XHRcdFx0Ym9yZGVyOiAycHggZGFzaGVkIHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7XG5cdFx0XHRcdGJvcmRlci1yYWRpdXM6IHZhcigtLXJhZGl1cy1zKTtcblx0XHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRcdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHRcdHBvaW50ZXItZXZlbnRzOiBub25lO1xuXHRcdFx0XHR0cmFuc2l0aW9uOiBvcGFjaXR5IDAuMnMgZWFzZTtcblx0XHRcdFx0ei1pbmRleDogMTA7XG5cdFx0XHRgO1xuXG5cdFx0XHQvLyBBZGQgaWNvbiBjb250YWluZXJcblx0XHRcdGNvbnN0IGljb25Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0XHRcdGljb25Db250YWluZXIuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdFx0YmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5KTtcblx0XHRcdFx0Ym9yZGVyLXJhZGl1czogNTAlO1xuXHRcdFx0XHR3aWR0aDogNDhweDtcblx0XHRcdFx0aGVpZ2h0OiA0OHB4O1xuXHRcdFx0XHRkaXNwbGF5OiBmbGV4O1xuXHRcdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdFx0XHRqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcblx0XHRcdFx0Ym94LXNoYWRvdzogMCAycHggOHB4IHJnYmEoMCwgMCwgMCwgMC4xNSk7XG5cdFx0XHRcdG9wYWNpdHk6IDA7XG5cdFx0XHRcdHRyYW5zZm9ybTogc2NhbGUoMC44KTtcblx0XHRcdFx0dHJhbnNpdGlvbjogYWxsIDAuMnMgZWFzZTtcblx0XHRcdGA7XG5cblx0XHRcdC8vIEFkZCBPYnNpZGlhbidzIHBsdXMgaWNvblxuXHRcdFx0Y29uc3QgaWNvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuXHRcdFx0aWNvbi5pbm5lckhUTUwgPSBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIyNFwiIGhlaWdodD1cIjI0XCIgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMlwiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIiBzdHJva2UtbGluZWpvaW49XCJyb3VuZFwiPjxsaW5lIHgxPVwiMTJcIiB5MT1cIjVcIiB4Mj1cIjEyXCIgeTI9XCIxOVwiPjwvbGluZT48bGluZSB4MT1cIjVcIiB5MT1cIjEyXCIgeDI9XCIxOVwiIHkyPVwiMTJcIj48L2xpbmU+PC9zdmc+YDtcblx0XHRcdGljb24uc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdFx0Y29sb3I6IHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7XG5cdFx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRcdGFsaWduLWl0ZW1zOiBjZW50ZXI7XG5cdFx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdFx0YDtcblxuXHRcdFx0aWNvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChpY29uKTtcblx0XHRcdHRoaXMuZHJvcFpvbmVPdmVybGF5LmFwcGVuZENoaWxkKGljb25Db250YWluZXIpO1xuXHRcdH1cblxuXHRcdC8vIFBvc2l0aW9uIHJlbGF0aXZlIHRvIHRleHRhcmVhXG5cdFx0Y29uc3QgdGV4dEFyZWFDb250YWluZXIgPSB0aGlzLnRleHRBcmVhLmlucHV0RWwucGFyZW50RWxlbWVudCE7XG5cdFx0dGV4dEFyZWFDb250YWluZXIuc3R5bGUucG9zaXRpb24gPSAncmVsYXRpdmUnO1xuXHRcdHRleHRBcmVhQ29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuZHJvcFpvbmVPdmVybGF5KTtcblxuXHRcdC8vIEFuaW1hdGUgaW5cblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGlmICh0aGlzLmRyb3Bab25lT3ZlcmxheSkge1xuXHRcdFx0XHR0aGlzLmRyb3Bab25lT3ZlcmxheS5zdHlsZS5vcGFjaXR5ID0gJzAuMSc7XG5cdFx0XHRcdGNvbnN0IGljb24gPSB0aGlzLmRyb3Bab25lT3ZlcmxheS5xdWVyeVNlbGVjdG9yKCdkaXYnKSBhcyBIVE1MRWxlbWVudDtcblx0XHRcdFx0aWYgKGljb24pIHtcblx0XHRcdFx0XHRpY29uLnN0eWxlLm9wYWNpdHkgPSAnMSc7XG5cdFx0XHRcdFx0aWNvbi5zdHlsZS50cmFuc2Zvcm0gPSAnc2NhbGUoMSknO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSwgMTApO1xuXHR9XG5cblx0cHJpdmF0ZSBoYW5kbGVEcmFnTGVhdmUoKTogdm9pZCB7XG5cdFx0dGhpcy5pc0RyYWdnaW5nID0gZmFsc2U7XG5cdFx0aWYgKHRoaXMuZHJvcFpvbmVPdmVybGF5KSB7XG5cdFx0XHR0aGlzLmRyb3Bab25lT3ZlcmxheS5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuXHRcdFx0Y29uc3QgaWNvbiA9IHRoaXMuZHJvcFpvbmVPdmVybGF5LnF1ZXJ5U2VsZWN0b3IoJ2RpdicpIGFzIEhUTUxFbGVtZW50O1xuXHRcdFx0aWYgKGljb24pIHtcblx0XHRcdFx0aWNvbi5zdHlsZS5vcGFjaXR5ID0gJzAnO1xuXHRcdFx0XHRpY29uLnN0eWxlLnRyYW5zZm9ybSA9ICdzY2FsZSgwLjgpJztcblx0XHRcdH1cblx0XHRcdHNldFRpbWVvdXQoKCkgPT4ge1xuXHRcdFx0XHR0aGlzLmRyb3Bab25lT3ZlcmxheT8ucmVtb3ZlKCk7XG5cdFx0XHRcdHRoaXMuZHJvcFpvbmVPdmVybGF5ID0gbnVsbDtcblx0XHRcdH0sIDIwMCk7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBoYW5kbGVEcm9wKGU6IERyYWdFdmVudCk6IHZvaWQge1xuXHRcdHRoaXMuaGFuZGxlRHJhZ0xlYXZlKCk7XG5cblx0XHRjb25zdCBmaWxlczogc3RyaW5nW10gPSBbXTtcblx0XHRcblx0XHQvLyBQYXJzZSBPYnNpZGlhbidzIG9ic2lkaWFuOi8vIFVSTHMgLSBwcmVmZXIgdGV4dC9wbGFpbiBhcyBpdCBoYXMgcHJvcGVyIG5ld2xpbmVzXG5cdFx0Y29uc3QgdGV4dFBsYWluRGF0YSA9IGUuZGF0YVRyYW5zZmVyPy5nZXREYXRhKCd0ZXh0L3BsYWluJyk7XG5cdFx0XG5cdFx0aWYgKHRleHRQbGFpbkRhdGEgJiYgdGV4dFBsYWluRGF0YS5pbmNsdWRlcygnb2JzaWRpYW46Ly9vcGVuPycpKSB7XG5cdFx0XHQvLyBIYW5kbGUgbXVsdGlwbGUgVVJMcyBzZXBhcmF0ZWQgYnkgbmV3bGluZXNcblx0XHRcdGNvbnN0IHVybHMgPSB0ZXh0UGxhaW5EYXRhLnNwbGl0KC9bXFxuXFxyXS8pLmZpbHRlcihsaW5lID0+IGxpbmUudHJpbSgpLnN0YXJ0c1dpdGgoJ29ic2lkaWFuOi8vb3Blbj8nKSk7XG5cdFx0XHRcblx0XHRcdGZvciAoY29uc3QgdXJsU3RyaW5nIG9mIHVybHMpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRjb25zdCB1cmwgPSBuZXcgVVJMKHVybFN0cmluZy50cmltKCkpO1xuXHRcdFx0XHRcdGNvbnN0IGZpbGVQYXRoID0gdXJsLnNlYXJjaFBhcmFtcy5nZXQoJ2ZpbGUnKTtcblx0XHRcdFx0XHRcblx0XHRcdFx0XHRpZiAoZmlsZVBhdGgpIHtcblx0XHRcdFx0XHRcdC8vIERlY29kZSB0aGUgVVJMLWVuY29kZWQgcGF0aFxuXHRcdFx0XHRcdFx0Y29uc3QgZGVjb2RlZFBhdGggPSBkZWNvZGVVUklDb21wb25lbnQoZmlsZVBhdGgpO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHQvLyBFeHRyYWN0IGZpbGVuYW1lIGZyb20gcGF0aCAoaGFuZGxlIGJvdGggLyBhbmQgXFwgc2VwYXJhdG9ycylcblx0XHRcdFx0XHRcdGNvbnN0IHBhdGhQYXJ0cyA9IGRlY29kZWRQYXRoLnNwbGl0KC9bL1xcXFxdLyk7XG5cdFx0XHRcdFx0XHRjb25zdCBmaWxlbmFtZSA9IHBhdGhQYXJ0c1twYXRoUGFydHMubGVuZ3RoIC0gMV07XG5cdFx0XHRcdFx0XHRcblx0XHRcdFx0XHRcdC8vIE9ubHkgcHJvY2VzcyBtYXJrZG93biBmaWxlc1xuXHRcdFx0XHRcdFx0aWYgKGZpbGVuYW1lLmVuZHNXaXRoKCcubWQnKSkge1xuXHRcdFx0XHRcdFx0XHRjb25zdCBiYXNlTmFtZSA9IGZpbGVuYW1lLnJlcGxhY2UoJy5tZCcsICcnKTtcblx0XHRcdFx0XHRcdFx0aWYgKGJhc2VOYW1lICYmICFmaWxlcy5pbmNsdWRlcyhiYXNlTmFtZSkpIHtcblx0XHRcdFx0XHRcdFx0XHRmaWxlcy5wdXNoKGJhc2VOYW1lKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0Ly8gRm9yIGZpbGVzIHdpdGhvdXQgLm1kIGV4dGVuc2lvbiwgYXNzdW1lIHRoZXkncmUgbWFya2Rvd24gbm90ZXNcblx0XHRcdFx0XHRcdFx0Ly8gKE9ic2lkaWFuIHNvbWV0aW1lcyBvbWl0cyB0aGUgLm1kIGV4dGVuc2lvbiBpbiBwYXRocylcblx0XHRcdFx0XHRcdFx0aWYgKGZpbGVuYW1lICYmICFmaWxlcy5pbmNsdWRlcyhmaWxlbmFtZSkpIHtcblx0XHRcdFx0XHRcdFx0XHRmaWxlcy5wdXNoKGZpbGVuYW1lKTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdFx0XHRjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBwYXJzZSBPYnNpZGlhbiBVUkw6JywgdXJsU3RyaW5nLCBlcnJvcik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgZmlsZXMgdG8gY29udGV4dCBpZiB3ZSBnb3QgYW55XG5cdFx0aWYgKGZpbGVzLmxlbmd0aCA+IDApIHtcblx0XHRcdHRoaXMuYWRkRmlsZXNUb0NvbnRleHQoZmlsZXMpO1xuXHRcdH0gZWxzZSBpZiAodGV4dFBsYWluRGF0YSAmJiB0ZXh0UGxhaW5EYXRhLmluY2x1ZGVzKCdvYnNpZGlhbjovL29wZW4/JykpIHtcblx0XHRcdC8vIFVzZXIgZHJvcHBlZCBzb21ldGhpbmcgZnJvbSBPYnNpZGlhbiBidXQgbm8gZmlsZXMgd2VyZSBleHRyYWN0ZWRcblx0XHRcdC8vIFRoaXMgbGlrZWx5IG1lYW5zIHRoZXkgZHJvcHBlZCBub24tbWFya2Rvd24gZmlsZXNcblx0XHRcdG5ldyBOb3RpY2UoJ09ubHkgbWFya2Rvd24gZmlsZXMgY2FuIGJlIGFkZGVkIHRvIGNvbnRleHQnLCAzMDAwKTtcblx0XHR9IGVsc2UgaWYgKHRleHRQbGFpbkRhdGEgJiYgdGV4dFBsYWluRGF0YS50cmltKCkgJiYgIXRleHRQbGFpbkRhdGEuaW5jbHVkZXMoJzovLycpKSB7XG5cdFx0XHQvLyBVc2VyIGRyb3BwZWQgYSBmb2xkZXIgKHBsYWluIHRleHQgcGF0aCB3aXRob3V0IHByb3RvY29sKVxuXHRcdFx0bmV3IE5vdGljZSgnRm9sZGVycyBjYW5ub3QgYmUgYWRkZWQgdG8gY29udGV4dC4gUGxlYXNlIHNlbGVjdCBpbmRpdmlkdWFsIGZpbGVzLicsIDMwMDApO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgYXN5bmMgYWRkRmlsZXNUb0NvbnRleHQoZmlsZW5hbWVzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGlmIChmaWxlbmFtZXMubGVuZ3RoID09PSAwKSByZXR1cm47XG5cblx0XHQvLyBDaGVjayBpZiBtdWx0aS1kb2MgY29udGV4dCBmZWF0dXJlIGlzIGVuYWJsZWRcblx0XHRpZiAoIXRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyLmlzRmVhdHVyZUVuYWJsZWQoJ211bHRpLWRvYy1jb250ZXh0JykpIHtcblx0XHRcdG5ldyBOb3RpY2UoJ011bHRpLWRvY3VtZW50IGNvbnRleHQgaXMgY3VycmVudGx5IGluIGVhcmx5IGFjY2VzcyBmb3IgU3VwZXJub3ZhIHN1cHBvcnRlcnMuIEF2YWlsYWJsZSB0byBhbGwgdXNlcnMgQXVndXN0IDE1LCAyMDI1LicsIDMwMDApO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEFkZCBmaWxlcyB0byBjb250ZXh0XG5cdFx0aWYgKHRoaXMuc2lkZWJhclZpZXcpIHtcblx0XHRcdGF3YWl0IHRoaXMuc2lkZWJhclZpZXcuYWRkRmlsZXNUb0NvbnRleHQoZmlsZW5hbWVzKTtcblx0XHR9XG5cdH1cblxuXG5cdHJlZnJlc2hDb21tYW5kQnV0dG9uKCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmNvbW1hbmRTeXN0ZW0pIHtcblx0XHRcdHRoaXMuY29tbWFuZFN5c3RlbS51cGRhdGVDb21tYW5kQnV0dG9uVmlzaWJpbGl0eSgpO1xuXHRcdH1cblx0fVxuXG5cdHVwZGF0ZUNvbnRleHRTdGF0ZShoYXNDb250ZXh0OiBib29sZWFuKTogdm9pZCB7XG5cdFx0aWYgKHRoaXMuY29udGFpbmVyKSB7XG5cdFx0XHRpZiAoaGFzQ29udGV4dCkge1xuXHRcdFx0XHR0aGlzLmNvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdoYXMtY29udGV4dCcpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5jb250YWluZXIuY2xhc3NMaXN0LnJlbW92ZSgnaGFzLWNvbnRleHQnKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRjbGVhbnVwKCk6IHZvaWQge1xuXHRcdC8vIENsZWFuIHVwIHdpa2lsaW5rIGF1dG9jb21wbGV0ZVxuXHRcdGlmICh0aGlzLndpa2lsaW5rQXV0b2NvbXBsZXRlKSB7XG5cdFx0XHR0aGlzLndpa2lsaW5rQXV0b2NvbXBsZXRlLmRlc3Ryb3koKTtcblx0XHR9XG5cblx0XHQvLyBDbGVhbiB1cCBkcm9wIHpvbmUgb3ZlcmxheVxuXHRcdGlmICh0aGlzLmRyb3Bab25lT3ZlcmxheSkge1xuXHRcdFx0dGhpcy5kcm9wWm9uZU92ZXJsYXkucmVtb3ZlKCk7XG5cdFx0XHR0aGlzLmRyb3Bab25lT3ZlcmxheSA9IG51bGw7XG5cdFx0fVxuXG5cdFx0Ly8gQ2xlYW4gdXAgZXZlbnQgbGlzdGVuZXJzXG5cdFx0dGhpcy5ldmVudExpc3RlbmVycy5mb3JFYWNoKCh7IGVsZW1lbnQsIGV2ZW50LCBoYW5kbGVyIH0pID0+IHtcblx0XHRcdGVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgaGFuZGxlcik7XG5cdFx0fSk7XG5cdFx0dGhpcy5ldmVudExpc3RlbmVycyA9IFtdO1xuXHR9XG59IiwgIi8qKlxuICogTmF0aXZlIHdpa2lsaW5rIGF1dG9jb21wbGV0ZSBmb3IgTm92YSB0ZXh0YXJlYVxuICogVXNlcyBPYnNpZGlhbidzIG5hdGl2ZSBGdXp6eVN1Z2dlc3RNb2RhbCBmb3IgY29uc2lzdGVudCBVWFxuICovXG5cbmltcG9ydCB7IFRGaWxlLCBBcHAsIEZ1enp5U3VnZ2VzdE1vZGFsLCBGdXp6eU1hdGNoIH0gZnJvbSAnb2JzaWRpYW4nO1xuXG5leHBvcnQgY2xhc3MgTm92YVdpa2lsaW5rQXV0b2NvbXBsZXRlIHtcbiAgICBwcml2YXRlIGFwcDogQXBwO1xuICAgIHByaXZhdGUgdGV4dEFyZWE6IEhUTUxUZXh0QXJlYUVsZW1lbnQ7XG4gICAgcHJpdmF0ZSBzaWRlYmFyVmlldzogYW55OyAvLyBSZWZlcmVuY2UgdG8gTm92YVNpZGViYXJWaWV3XG4gICAgcHJpdmF0ZSBsYXN0VHJpZ2dlclBvczogbnVtYmVyID0gLTE7XG5cbiAgICBjb25zdHJ1Y3RvcihhcHA6IEFwcCwgdGV4dEFyZWE6IEhUTUxUZXh0QXJlYUVsZW1lbnQsIGNvbnRhaW5lcj86IEhUTUxFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuYXBwID0gYXBwO1xuICAgICAgICB0aGlzLnRleHRBcmVhID0gdGV4dEFyZWE7XG4gICAgICAgIHRoaXMuc2V0dXBFdmVudExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIHNldFNpZGViYXJWaWV3KHNpZGViYXJWaWV3OiBhbnkpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zaWRlYmFyVmlldyA9IHNpZGViYXJWaWV3O1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0dXBFdmVudExpc3RlbmVycygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50ZXh0QXJlYS5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsIHRoaXMuaGFuZGxlSW5wdXQuYmluZCh0aGlzKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYW5kbGVJbnB1dCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGV4dCA9IHRoaXMudGV4dEFyZWEudmFsdWU7XG4gICAgICAgIGNvbnN0IGN1cnNvclBvcyA9IHRoaXMudGV4dEFyZWEuc2VsZWN0aW9uU3RhcnQ7XG4gICAgICAgIFxuICAgICAgICAvLyBMb29rIGZvciBbWyBwYXR0ZXJuIGJlZm9yZSBjdXJzb3JcbiAgICAgICAgY29uc3QgYmVmb3JlQ3Vyc29yID0gdGV4dC5zdWJzdHJpbmcoMCwgY3Vyc29yUG9zKTtcbiAgICAgICAgY29uc3QgbGlua01hdGNoID0gYmVmb3JlQ3Vyc29yLm1hdGNoKC9cXFtcXFsoW15cXF1dKj8pJC8pO1xuICAgICAgICBcbiAgICAgICAgaWYgKGxpbmtNYXRjaCAmJiBjdXJzb3JQb3MgIT09IHRoaXMubGFzdFRyaWdnZXJQb3MpIHtcbiAgICAgICAgICAgIHRoaXMubGFzdFRyaWdnZXJQb3MgPSBjdXJzb3JQb3M7XG4gICAgICAgICAgICB0aGlzLnNob3dOYXRpdmVGaWxlTW9kYWwoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgc2hvd05hdGl2ZUZpbGVNb2RhbCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgV2lraWxpbmtGaWxlTW9kYWwoXG4gICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgIGFzeW5jIChmaWxlOiBURmlsZSkgPT4ge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuc2VsZWN0RmlsZShmaWxlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gVXNlciBjYW5jZWxsZWQgLSByZXNldCB0cmlnZ2VyIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0VHJpZ2dlclBvcyA9IC0xO1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhc3luYyBzZWxlY3RGaWxlKGZpbGU6IFRGaWxlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IHRleHQgPSB0aGlzLnRleHRBcmVhLnZhbHVlO1xuICAgICAgICBjb25zdCBjdXJzb3JQb3MgPSB0aGlzLnRleHRBcmVhLnNlbGVjdGlvblN0YXJ0O1xuICAgICAgICBcbiAgICAgICAgLy8gRmluZCB0aGUgW1sgcGF0dGVybiB0byByZW1vdmVcbiAgICAgICAgY29uc3QgYmVmb3JlQ3Vyc29yID0gdGV4dC5zdWJzdHJpbmcoMCwgY3Vyc29yUG9zKTtcbiAgICAgICAgY29uc3QgbGlua01hdGNoID0gYmVmb3JlQ3Vyc29yLm1hdGNoKC9cXFtcXFsoW15cXF1dKj8pJC8pO1xuICAgICAgICBcbiAgICAgICAgaWYgKGxpbmtNYXRjaCkge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnRQb3MgPSBjdXJzb3JQb3MgLSBsaW5rTWF0Y2hbMF0ubGVuZ3RoO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZW1vdmUgdGhlIGluY29tcGxldGUgW1sgcGF0dGVybiBmcm9tIHRoZSBpbnB1dFxuICAgICAgICAgICAgY29uc3QgbmV3VGV4dCA9IHRleHQuc3Vic3RyaW5nKDAsIHN0YXJ0UG9zKSArIHRleHQuc3Vic3RyaW5nKGN1cnNvclBvcyk7XG4gICAgICAgICAgICB0aGlzLnRleHRBcmVhLnZhbHVlID0gbmV3VGV4dDtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUG9zaXRpb24gY3Vyc29yIGF0IHRoZSBjbGVhcmVkIHBvc2l0aW9uXG4gICAgICAgICAgICB0aGlzLnRleHRBcmVhLnNldFNlbGVjdGlvblJhbmdlKHN0YXJ0UG9zLCBzdGFydFBvcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFRyaWdnZXIgaW5wdXQgZXZlbnQgdG8gdXBkYXRlIGFueSBhdXRvLWdyb3cgZnVuY3Rpb25hbGl0eVxuICAgICAgICAgICAgdGhpcy50ZXh0QXJlYS5kaXNwYXRjaEV2ZW50KG5ldyBFdmVudCgnaW5wdXQnLCB7IGJ1YmJsZXM6IHRydWUgfSkpO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBBZGQgZmlsZSB0byBjb250ZXh0IGF1dG9tYXRpY2FsbHkgXG4gICAgICAgIGlmICh0aGlzLnNpZGViYXJWaWV3ICYmIHRoaXMuc2lkZWJhclZpZXcuYWRkRmlsZXNUb0NvbnRleHQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2lkZWJhclZpZXcuYWRkRmlsZXNUb0NvbnRleHQoW2ZpbGUuYmFzZW5hbWVdKTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gUmVzZXQgdHJpZ2dlciBwb3NpdGlvblxuICAgICAgICB0aGlzLmxhc3RUcmlnZ2VyUG9zID0gLTE7XG4gICAgICAgIHRoaXMudGV4dEFyZWEuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBkZXN0cm95KCk6IHZvaWQge1xuICAgICAgICAvLyBObyBjbGVhbnVwIG5lZWRlZCBmb3IgbmF0aXZlIG1vZGFsXG4gICAgfVxufVxuXG4vKipcbiAqIE5hdGl2ZSBPYnNpZGlhbiBmaWxlIG1vZGFsIGZvciB3aWtpbGluayBzZWxlY3Rpb25cbiAqL1xuY2xhc3MgV2lraWxpbmtGaWxlTW9kYWwgZXh0ZW5kcyBGdXp6eVN1Z2dlc3RNb2RhbDxURmlsZT4ge1xuICAgIHByaXZhdGUgb25TZWxlY3RDYWxsYmFjazogKGZpbGU6IFRGaWxlKSA9PiB2b2lkO1xuICAgIHByaXZhdGUgb25DYW5jZWxDYWxsYmFjaz86ICgpID0+IHZvaWQ7XG4gICAgcHJpdmF0ZSBhbGxGaWxlczogVEZpbGVbXSA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGFwcDogQXBwLFxuICAgICAgICBvblNlbGVjdDogKGZpbGU6IFRGaWxlKSA9PiB2b2lkLFxuICAgICAgICBvbkNhbmNlbD86ICgpID0+IHZvaWRcbiAgICApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5vblNlbGVjdENhbGxiYWNrID0gb25TZWxlY3Q7XG4gICAgICAgIHRoaXMub25DYW5jZWxDYWxsYmFjayA9IG9uQ2FuY2VsO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5zZXRQbGFjZWhvbGRlcignU2VhcmNoIGZpbGVzIHRvIGFkZCB0byBjb250ZXh0Li4uJyk7XG4gICAgICAgIHRoaXMubG9hZEZpbGVzKCk7XG4gICAgfVxuXG4gICAgb25PcGVuKCk6IHZvaWQge1xuICAgICAgICBzdXBlci5vbk9wZW4oKTtcbiAgICAgICAgdGhpcy5hZGRJbnN0cnVjdGlvbnMoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZEluc3RydWN0aW9ucygpOiB2b2lkIHtcbiAgICAgICAgLy8gQWRkIHRoZSBpbnN0cnVjdGlvbiBmb290ZXIgbGlrZSBuYXRpdmUgT2JzaWRpYW4gbW9kYWxzXG4gICAgICAgIGNvbnN0IGluc3RydWN0aW9uc0VsID0gdGhpcy5tb2RhbEVsLmNyZWF0ZURpdih7IGNsczogJ3Byb21wdC1pbnN0cnVjdGlvbnMnIH0pO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbmF2SW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbnNFbC5jcmVhdGVEaXYoeyBjbHM6ICdwcm9tcHQtaW5zdHJ1Y3Rpb24nIH0pO1xuICAgICAgICBuYXZJbnN0cnVjdGlvbi5jcmVhdGVTcGFuKHsgY2xzOiAncHJvbXB0LWluc3RydWN0aW9uLWNvbW1hbmQnLCB0ZXh0OiAnXHUyMTkxXHUyMTkzJyB9KTtcbiAgICAgICAgbmF2SW5zdHJ1Y3Rpb24uY3JlYXRlU3Bhbih7IHRleHQ6ICd0byBuYXZpZ2F0ZScgfSk7XG5cbiAgICAgICAgY29uc3QgdXNlSW5zdHJ1Y3Rpb24gPSBpbnN0cnVjdGlvbnNFbC5jcmVhdGVEaXYoeyBjbHM6ICdwcm9tcHQtaW5zdHJ1Y3Rpb24nIH0pO1xuICAgICAgICB1c2VJbnN0cnVjdGlvbi5jcmVhdGVTcGFuKHsgY2xzOiAncHJvbXB0LWluc3RydWN0aW9uLWNvbW1hbmQnLCB0ZXh0OiAnXHUyMUI1JyB9KTtcbiAgICAgICAgdXNlSW5zdHJ1Y3Rpb24uY3JlYXRlU3Bhbih7IHRleHQ6ICd0byB1c2UnIH0pO1xuXG4gICAgICAgIGNvbnN0IGVzY0luc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb25zRWwuY3JlYXRlRGl2KHsgY2xzOiAncHJvbXB0LWluc3RydWN0aW9uJyB9KTtcbiAgICAgICAgZXNjSW5zdHJ1Y3Rpb24uY3JlYXRlU3Bhbih7IGNsczogJ3Byb21wdC1pbnN0cnVjdGlvbi1jb21tYW5kJywgdGV4dDogJ2VzYycgfSk7XG4gICAgICAgIGVzY0luc3RydWN0aW9uLmNyZWF0ZVNwYW4oeyB0ZXh0OiAndG8gZGlzbWlzcycgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBsb2FkRmlsZXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuYWxsRmlsZXMgPSB0aGlzLmFwcC52YXVsdC5nZXRNYXJrZG93bkZpbGVzKCk7XG4gICAgICAgIC8vIFNvcnQgYnkgbW9kaWZpY2F0aW9uIHRpbWUgKG1vc3QgcmVjZW50IGZpcnN0KVxuICAgICAgICB0aGlzLmFsbEZpbGVzLnNvcnQoKGEsIGIpID0+IGIuc3RhdC5tdGltZSAtIGEuc3RhdC5tdGltZSk7XG4gICAgfVxuXG4gICAgZ2V0SXRlbXMoKTogVEZpbGVbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFsbEZpbGVzO1xuICAgIH1cblxuICAgIGdldEl0ZW1UZXh0KGZpbGU6IFRGaWxlKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGZpbGUuYmFzZW5hbWU7XG4gICAgfVxuXG4gICAgb25DaG9vc2VJdGVtKGZpbGU6IFRGaWxlKTogdm9pZCB7XG4gICAgICAgIHRoaXMub25TZWxlY3RDYWxsYmFjayhmaWxlKTtcbiAgICB9XG5cbiAgICByZW5kZXJTdWdnZXN0aW9uKG1hdGNoOiBGdXp6eU1hdGNoPFRGaWxlPiwgZWw6IEhUTUxFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGZpbGUgPSBtYXRjaC5pdGVtO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXRlIGNvbnRhaW5lciB3aXRoIG5hdGl2ZSBPYnNpZGlhbiBzdWdnZXN0aW9uIHN0eWxpbmdcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gZWwuY3JlYXRlRGl2KHsgY2xzOiAnc3VnZ2VzdGlvbi1jb250ZW50JyB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFRpdGxlXG4gICAgICAgIGNvbnN0IHRpdGxlID0gY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ3N1Z2dlc3Rpb24tdGl0bGUnIH0pO1xuICAgICAgICB0aXRsZS50ZXh0Q29udGVudCA9IGZpbGUuYmFzZW5hbWU7XG4gICAgICAgIFxuICAgICAgICAvLyBBdXhpbGlhcnkgaW5mbyAocGF0aClcbiAgICAgICAgY29uc3QgYXV4ID0gY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ3N1Z2dlc3Rpb24tYXV4JyB9KTtcbiAgICAgICAgYXV4LnRleHRDb250ZW50ID0gZmlsZS5wYXRoO1xuICAgIH1cblxuICAgIG9uQ2xvc2UoKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLm9uQ2xvc2UoKTtcbiAgICAgICAgaWYgKHRoaXMub25DYW5jZWxDYWxsYmFjaykge1xuICAgICAgICAgICAgdGhpcy5vbkNhbmNlbENhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9XG59IiwgImltcG9ydCB7IEJ1dHRvbkNvbXBvbmVudCwgVGV4dEFyZWFDb21wb25lbnQsIFBsYXRmb3JtIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IE5vdmFQbHVnaW4gZnJvbSAnLi4vLi4vbWFpbic7XG5pbXBvcnQgeyBFZGl0Q29tbWFuZCB9IGZyb20gJy4uL2NvcmUvdHlwZXMnO1xuXG5pbnRlcmZhY2UgU3RydWN0dXJlZENvbW1hbmQge1xuXHRuYW1lOiBzdHJpbmc7XG5cdGRlc2NyaXB0aW9uOiBzdHJpbmc7XG5cdGNvbW1hbmQ6IHN0cmluZztcblx0dGVtcGxhdGU6IHN0cmluZztcblx0ZXhhbXBsZTogc3RyaW5nO1xuXHRrZXl3b3Jkczogc3RyaW5nW107XG59XG5cblxuLyoqXG4gKiBIYW5kbGVzIGNvbW1hbmQgcGlja2VyLCBjb21tYW5kIG1lbnUsIGFuZCBjb21tYW5kIGV4ZWN1dGlvblxuICovXG5leHBvcnQgY2xhc3MgQ29tbWFuZFN5c3RlbSB7XG5cdHByaXZhdGUgcGx1Z2luOiBOb3ZhUGx1Z2luO1xuXHRwcml2YXRlIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQ7XG5cdHByaXZhdGUgdGV4dEFyZWE6IFRleHRBcmVhQ29tcG9uZW50O1xuXHRwcml2YXRlIGNvbW1hbmRCdXR0b24hOiBCdXR0b25Db21wb25lbnQ7XG5cdHByaXZhdGUgY29tbWFuZFBpY2tlciE6IEhUTUxFbGVtZW50O1xuXHRwcml2YXRlIGNvbW1hbmRQaWNrZXJJdGVtczogSFRNTEVsZW1lbnRbXSA9IFtdO1xuXHRwcml2YXRlIHNlbGVjdGVkQ29tbWFuZEluZGV4OiBudW1iZXIgPSAtMTtcblx0cHJpdmF0ZSBjb21tYW5kTWVudSE6IEhUTUxFbGVtZW50O1xuXHRwcml2YXRlIGlzQ29tbWFuZE1lbnVWaXNpYmxlOiBib29sZWFuID0gZmFsc2U7XG5cblx0Y29uc3RydWN0b3IocGx1Z2luOiBOb3ZhUGx1Z2luLCBjb250YWluZXI6IEhUTUxFbGVtZW50LCB0ZXh0QXJlYTogVGV4dEFyZWFDb21wb25lbnQpIHtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0XHR0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcblx0XHR0aGlzLnRleHRBcmVhID0gdGV4dEFyZWE7XG5cdH1cblxuXHRjcmVhdGVDb21tYW5kQnV0dG9uKGlucHV0Um93OiBIVE1MRWxlbWVudCk6IEJ1dHRvbkNvbXBvbmVudCB7XG5cdFx0dGhpcy5jb21tYW5kQnV0dG9uID0gbmV3IEJ1dHRvbkNvbXBvbmVudChpbnB1dFJvdyk7XG5cdFx0dGhpcy5jb21tYW5kQnV0dG9uLnNldEljb24oJ3phcCcpO1xuXHRcdHRoaXMuY29tbWFuZEJ1dHRvbi5zZXRUb29sdGlwKCdDb21tYW5kcycpO1xuXHRcdHRoaXMuY29tbWFuZEJ1dHRvbi5vbkNsaWNrKCgpID0+IHRoaXMudG9nZ2xlQ29tbWFuZE1lbnUoKSk7XG5cdFx0dGhpcy5jb21tYW5kQnV0dG9uLmJ1dHRvbkVsLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRtaW4td2lkdGg6IHZhcigtLXNpemUtNC05KTtcblx0XHRcdGhlaWdodDogdmFyKC0tc2l6ZS00LTkpO1xuXHRcdFx0Ym9yZGVyLXJhZGl1czogNTAlO1xuXHRcdFx0ZGlzcGxheTogJHt0aGlzLnNob3VsZFNob3dDb21tYW5kQnV0dG9uKCkgPyAnZmxleCcgOiAnbm9uZSd9O1xuXHRcdFx0YWxpZ24taXRlbXM6IGNlbnRlcjtcblx0XHRcdGp1c3RpZnktY29udGVudDogY2VudGVyO1xuXHRcdFx0cGFkZGluZzogMDtcblx0XHRcdGZsZXgtc2hyaW5rOiAwO1xuXHRcdFx0bWFyZ2luLXJpZ2h0OiB2YXIoLS1zaXplLTItMyk7XG5cdFx0YDtcblx0XHRyZXR1cm4gdGhpcy5jb21tYW5kQnV0dG9uO1xuXHR9XG5cblx0Y3JlYXRlQ29tbWFuZFBpY2tlcigpOiB2b2lkIHtcblx0XHR0aGlzLmNyZWF0ZUNvbW1hbmRQaWNrZXJJbkNvbnRhaW5lcih0aGlzLmNvbnRhaW5lcik7XG5cdH1cblxuXHRjcmVhdGVDb21tYW5kUGlja2VySW5Db250YWluZXIoY29udGFpbmVyOiBIVE1MRWxlbWVudCk6IHZvaWQge1xuXHRcdHRoaXMuY29tbWFuZFBpY2tlciA9IGNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbW1hbmQtcGlja2VyJyB9KTtcblx0XHR0aGlzLmNvbW1hbmRQaWNrZXIuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRcdGJvdHRvbTogMTAwJTtcblx0XHRcdGxlZnQ6IDA7XG5cdFx0XHRyaWdodDogMDtcblx0XHRcdGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtcHJpbWFyeSk7XG5cdFx0XHRib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG5cdFx0XHRib3JkZXItcmFkaXVzOiA4cHg7XG5cdFx0XHRib3gtc2hhZG93OiAwIDRweCAxMnB4IHJnYmEoMCwgMCwgMCwgMC4xNSk7XG5cdFx0XHRtYXgtaGVpZ2h0OiAyMDBweDtcblx0XHRcdG92ZXJmbG93LXk6IGF1dG87XG5cdFx0XHR6LWluZGV4OiAxMDAwO1xuXHRcdFx0ZGlzcGxheTogbm9uZTtcblx0XHRcdG1hcmdpbi1ib3R0b206IDRweDtcblx0XHRgO1xuXHR9XG5cblx0c2hvdWxkU2hvd0NvbW1hbmRCdXR0b24oKTogYm9vbGVhbiB7XG5cdFx0cmV0dXJuIFBsYXRmb3JtLmlzTW9iaWxlICYmIHRoaXMucGx1Z2luLnNldHRpbmdzLnNob3dDb21tYW5kQnV0dG9uICYmIHRoaXMucGx1Z2luLmZlYXR1cmVNYW5hZ2VyLmlzRmVhdHVyZUVuYWJsZWQoJ2NvbW1hbmRzJyk7XG5cdH1cblxuXHR1cGRhdGVDb21tYW5kQnV0dG9uVmlzaWJpbGl0eSgpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5jb21tYW5kQnV0dG9uKSB7XG5cdFx0XHRjb25zdCBzaG91bGRTaG93ID0gdGhpcy5zaG91bGRTaG93Q29tbWFuZEJ1dHRvbigpO1xuXHRcdFx0dGhpcy5jb21tYW5kQnV0dG9uLmJ1dHRvbkVsLnN0eWxlLmRpc3BsYXkgPSBzaG91bGRTaG93ID8gJ2ZsZXgnIDogJ25vbmUnO1xuXHRcdH1cblx0fVxuXG5cdHRvZ2dsZUNvbW1hbmRNZW51KCk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5jb21tYW5kTWVudSkge1xuXHRcdFx0dGhpcy5jcmVhdGVDb21tYW5kTWVudSgpO1xuXHRcdH1cblx0XHRcblx0XHRpZiAodGhpcy5pc0NvbW1hbmRNZW51VmlzaWJsZSkge1xuXHRcdFx0dGhpcy5oaWRlQ29tbWFuZE1lbnUoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5zaG93Q29tbWFuZE1lbnUoKTtcblx0XHR9XG5cdH1cblxuXHRwcml2YXRlIGNyZWF0ZUNvbW1hbmRNZW51KCk6IHZvaWQge1xuXHRcdHRoaXMuY29tbWFuZE1lbnUgPSB0aGlzLmNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbW1hbmQtbWVudScgfSk7XG5cdFx0dGhpcy5jb21tYW5kTWVudS5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0cG9zaXRpb246IGFic29sdXRlO1xuXHRcdFx0Ym90dG9tOiAxMDAlO1xuXHRcdFx0cmlnaHQ6IDA7XG5cdFx0XHRiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpO1xuXHRcdFx0Ym9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuXHRcdFx0Ym9yZGVyLXJhZGl1czogdmFyKC0tcmFkaXVzLXMpO1xuXHRcdFx0Ym94LXNoYWRvdzogdmFyKC0tc2hhZG93LXMpO1xuXHRcdFx0bWluLXdpZHRoOiAyNTBweDtcblx0XHRcdG1heC1oZWlnaHQ6IDMwMHB4O1xuXHRcdFx0b3ZlcmZsb3cteTogYXV0bztcblx0XHRcdHotaW5kZXg6IDEwMDA7XG5cdFx0XHRkaXNwbGF5OiBub25lO1xuXHRcdFx0cGFkZGluZzogdmFyKC0tc2l6ZS0yLTIpO1xuXHRcdGA7XG5cblx0XHQvLyBDb21tYW5kcyBhdmFpbGFibGUgdG8gYWxsIHVzZXJzXG5cdFx0Y29uc3QgY29tbWFuZHMgPSBbXG5cdFx0XHR7IG5hbWU6ICdJbXByb3ZlIFdyaXRpbmcnLCBkZXNjcmlwdGlvbjogJ0VuaGFuY2UgY2xhcml0eSBhbmQgZmxvdycsIGNvbW1hbmQ6ICdpbXByb3ZlIHdyaXRpbmcnIH0sXG5cdFx0XHR7IG5hbWU6ICdGaXggR3JhbW1hcicsIGRlc2NyaXB0aW9uOiAnQ29ycmVjdCBncmFtbWFyIGFuZCBzcGVsbGluZycsIGNvbW1hbmQ6ICdmaXggZ3JhbW1hcicgfSxcblx0XHRcdHsgbmFtZTogJ1N1bW1hcml6ZScsIGRlc2NyaXB0aW9uOiAnQ3JlYXRlIGEgY29uY2lzZSBzdW1tYXJ5JywgY29tbWFuZDogJ3N1bW1hcml6ZScgfSxcblx0XHRcdHsgbmFtZTogJ0V4cGFuZCBJZGVhcycsIGRlc2NyaXB0aW9uOiAnRGV2ZWxvcCB0aG91Z2h0cyBmdXJ0aGVyJywgY29tbWFuZDogJ2V4cGFuZCcgfSxcblx0XHRcdHsgbmFtZTogJ0V4cGxhaW4nLCBkZXNjcmlwdGlvbjogJ0NsYXJpZnkgY29tcGxleCBjb25jZXB0cycsIGNvbW1hbmQ6ICdleHBsYWluIHRoaXMnIH0sXG5cdFx0XHR7IG5hbWU6ICdDb250aW51ZSBXcml0aW5nJywgZGVzY3JpcHRpb246ICdFeHRlbmQgdGhlIGN1cnJlbnQgdGV4dCcsIGNvbW1hbmQ6ICdjb250aW51ZSB3cml0aW5nJyB9XG5cdFx0XTtcblxuXHRcdGNvbnN0IHRpdGxlID0gdGhpcy5jb21tYW5kTWVudS5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiAnUXVpY2sgQ29tbWFuZHMnIH0pO1xuXHRcdHRpdGxlLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRmb250LXNpemU6IHZhcigtLWZvbnQtdWktbWVkaXVtKTtcblx0XHRcdGZvbnQtd2VpZ2h0OiA2MDA7XG5cdFx0XHRtYXJnaW4tYm90dG9tOiB2YXIoLS1zaXplLTItMyk7XG5cdFx0XHRjb2xvcjogdmFyKC0tdGV4dC1ub3JtYWwpO1xuXHRcdGA7XG5cblx0XHRjb21tYW5kcy5mb3JFYWNoKGNtZCA9PiB7XG5cdFx0XHRjb25zdCBjbWRFbCA9IHRoaXMuY29tbWFuZE1lbnUuY3JlYXRlRGl2KHsgY2xzOiAnbm92YS1jb21tYW5kLWl0ZW0nIH0pO1xuXHRcdFx0Y21kRWwuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdFx0cGFkZGluZzogdmFyKC0tc2l6ZS0yLTIpIHZhcigtLXNpemUtMi0zKTtcblx0XHRcdFx0Ym9yZGVyLXJhZGl1czogdmFyKC0tcmFkaXVzLXhzKTtcblx0XHRcdFx0Y3Vyc29yOiBwb2ludGVyO1xuXHRcdFx0XHRtYXJnaW4tYm90dG9tOiB2YXIoLS1zaXplLTItMSk7XG5cdFx0XHRcdHRyYW5zaXRpb246IGJhY2tncm91bmQtY29sb3IgMC4xcztcblx0XHRcdGA7XG5cblx0XHRcdGNvbnN0IG5hbWVFbCA9IGNtZEVsLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IGNtZC5uYW1lIH0pO1xuXHRcdFx0bmFtZUVsLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRcdGZvbnQtd2VpZ2h0OiA1MDA7XG5cdFx0XHRcdGNvbG9yOiB2YXIoLS10ZXh0LW5vcm1hbCk7XG5cdFx0XHRcdG1hcmdpbi1ib3R0b206IHZhcigtLXNpemUtMi0xKTtcblx0XHRcdGA7XG5cblx0XHRcdGNvbnN0IGRlc2NFbCA9IGNtZEVsLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IGNtZC5kZXNjcmlwdGlvbiB9KTtcblx0XHRcdGRlc2NFbC5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0XHRmb250LXNpemU6IHZhcigtLWZvbnQtdWktc21hbGxlcik7XG5cdFx0XHRcdGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcblx0XHRcdGA7XG5cblx0XHRcdGNtZEVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuXHRcdFx0XHR0aGlzLnRleHRBcmVhLnNldFZhbHVlKGNtZC5jb21tYW5kICsgJyAnKTtcblx0XHRcdFx0dGhpcy50ZXh0QXJlYS5pbnB1dEVsLmZvY3VzKCk7XG5cdFx0XHRcdHRoaXMuaGlkZUNvbW1hbmRNZW51KCk7XG5cdFx0XHR9KTtcblxuXHRcdFx0Y21kRWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcblx0XHRcdFx0Y21kRWwuc3R5bGUuYmFja2dyb3VuZCA9ICd2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKSc7XG5cdFx0XHR9KTtcblxuXHRcdFx0Y21kRWwuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcblx0XHRcdFx0Y21kRWwuc3R5bGUuYmFja2dyb3VuZCA9ICd0cmFuc3BhcmVudCc7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fVxuXG5cdHByaXZhdGUgc2hvd0NvbW1hbmRNZW51KCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmNvbW1hbmRNZW51KSB7XG5cdFx0XHR0aGlzLmNvbW1hbmRNZW51LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXHRcdFx0dGhpcy5pc0NvbW1hbmRNZW51VmlzaWJsZSA9IHRydWU7XG5cdFx0fVxuXHR9XG5cblx0aGlkZUNvbW1hbmRNZW51KCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmNvbW1hbmRNZW51KSB7XG5cdFx0XHR0aGlzLmNvbW1hbmRNZW51LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHR0aGlzLmlzQ29tbWFuZE1lbnVWaXNpYmxlID0gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0aGFuZGxlSW5wdXRDaGFuZ2UoKTogdm9pZCB7XG5cdFx0aWYgKCF0aGlzLnRleHRBcmVhKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdGNvbnN0IGlucHV0ID0gdGhpcy50ZXh0QXJlYS5nZXRWYWx1ZSgpO1xuXHRcdFxuXHRcdC8vIEhhbmRsZSBkaWZmZXJlbnQgdHJpZ2dlcnNcblx0XHRpZiAoaW5wdXQuc3RhcnRzV2l0aCgnOicpKSB7XG5cdFx0XHQvLyBDdXN0b20gY29tbWFuZCB0cmlnZ2VyIC0gc2hvdyBzdHJ1Y3R1cmVkIGNvbW1hbmRzXG5cdFx0XHR0aGlzLnNob3dTdHJ1Y3R1cmVkQ29tbWFuZFBpY2tlcihpbnB1dCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIE5vIHRyaWdnZXJzIGFjdGl2ZSAtIGhpZGUgY29tbWFuZCBwaWNrZXJcblx0XHRcdHRoaXMuaGlkZUNvbW1hbmRQaWNrZXIoKTtcblx0XHR9XG5cdH1cblxuXG5cdC8qKlxuXHQgKiBTaG93IHN0cnVjdHVyZWQgY29tbWFuZCBwaWNrZXIgZm9yIFwiOlwiIHRyaWdnZXIgIFxuXHQgKi9cblx0cHJpdmF0ZSBzaG93U3RydWN0dXJlZENvbW1hbmRQaWNrZXIoaW5wdXQ6IHN0cmluZyk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5jb21tYW5kUGlja2VyKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdGNvbnN0IHN0cnVjdHVyZWRDb21tYW5kcyA9IHRoaXMuZ2V0U3RydWN0dXJlZENvbW1hbmRzKCk7XG5cdFx0Y29uc3QgZmlsdGVyVGV4dCA9IGlucHV0LnNsaWNlKDEpLnRvTG93ZXJDYXNlKCk7IC8vIFJlbW92ZSBcIjpcIlxuXHRcdFxuXHRcdGNvbnN0IGZpbHRlcmVkID0gc3RydWN0dXJlZENvbW1hbmRzLmZpbHRlcihjbWQgPT4gXG5cdFx0XHRjbWQubmFtZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGZpbHRlclRleHQpIHx8XG5cdFx0XHRjbWQuY29tbWFuZC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGZpbHRlclRleHQpIHx8XG5cdFx0XHRjbWQua2V5d29yZHMuc29tZShrZXl3b3JkID0+IGtleXdvcmQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhmaWx0ZXJUZXh0KSlcblx0XHQpO1xuXG5cdFx0dGhpcy5jb21tYW5kUGlja2VySXRlbXMgPSBbXTtcblx0XHR0aGlzLmNvbW1hbmRQaWNrZXIuZW1wdHkoKTtcblx0XHR0aGlzLnNlbGVjdGVkQ29tbWFuZEluZGV4ID0gLTE7XG5cblx0XHRpZiAoZmlsdGVyZWQubGVuZ3RoID4gMCkge1xuXHRcdFx0ZmlsdGVyZWQuZm9yRWFjaCgoY21kLCBpbmRleCkgPT4ge1xuXHRcdFx0XHRjb25zdCBpdGVtID0gdGhpcy5jb21tYW5kUGlja2VyLmNyZWF0ZURpdih7IGNsczogJ25vdmEtY29tbWFuZC1waWNrZXItaXRlbScgfSk7XG5cdFx0XHRcdGl0ZW0uc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdFx0XHRwYWRkaW5nOiA4cHggMTJweDtcblx0XHRcdFx0XHRjdXJzb3I6IHBvaW50ZXI7XG5cdFx0XHRcdFx0Ym9yZGVyLWJvdHRvbTogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyLWhvdmVyKTtcblx0XHRcdFx0XHR0cmFuc2l0aW9uOiBiYWNrZ3JvdW5kLWNvbG9yIDAuMnM7XG5cdFx0XHRcdGA7XG5cblx0XHRcdFx0Y29uc3QgbmFtZUVsID0gaXRlbS5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiBjbWQubmFtZSB9KTtcblx0XHRcdFx0bmFtZUVsLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRcdFx0Zm9udC13ZWlnaHQ6IDUwMDtcblx0XHRcdFx0XHRjb2xvcjogdmFyKC0tdGV4dC1ub3JtYWwpO1xuXHRcdFx0XHRcdG1hcmdpbi1ib3R0b206IDRweDtcblx0XHRcdFx0YDtcblxuXHRcdFx0XHRjb25zdCBkZXNjRWwgPSBpdGVtLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IGNtZC5kZXNjcmlwdGlvbiB9KTtcblx0XHRcdFx0ZGVzY0VsLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRcdFx0Zm9udC1zaXplOiAwLjg1ZW07XG5cdFx0XHRcdFx0Y29sb3I6IHZhcigtLXRleHQtbXV0ZWQpO1xuXHRcdFx0XHRcdG1hcmdpbi1ib3R0b206IDRweDtcblx0XHRcdFx0YDtcblxuXHRcdFx0XHRjb25zdCBleGFtcGxlRWwgPSBpdGVtLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IGBFeGFtcGxlOiAke2NtZC5leGFtcGxlfWAgfSk7XG5cdFx0XHRcdGV4YW1wbGVFbC5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0XHRcdGZvbnQtc2l6ZTogMC44ZW07XG5cdFx0XHRcdFx0Y29sb3I6IHZhcigtLXRleHQtYWNjZW50KTtcblx0XHRcdFx0XHRmb250LWZhbWlseTogdmFyKC0tZm9udC1tb25vc3BhY2UpO1xuXHRcdFx0XHRgO1xuXG5cdFx0XHRcdGl0ZW0uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RTdHJ1Y3R1cmVkQ29tbWFuZChjbWQudGVtcGxhdGUpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpdGVtLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZW50ZXInLCAoKSA9PiB7XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RlZENvbW1hbmRJbmRleCA9IGluZGV4O1xuXHRcdFx0XHRcdHRoaXMudXBkYXRlQ29tbWFuZFBpY2tlclNlbGVjdGlvbigpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHR0aGlzLmNvbW1hbmRQaWNrZXJJdGVtcy5wdXNoKGl0ZW0pO1xuXHRcdFx0fSk7XG5cblx0XHRcdHRoaXMuY29tbWFuZFBpY2tlci5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5oaWRlQ29tbWFuZFBpY2tlcigpO1xuXHRcdH1cblx0fVxuXG5cdGhpZGVDb21tYW5kUGlja2VyKCk6IHZvaWQge1xuXHRcdHRoaXMuY29tbWFuZFBpY2tlci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdHRoaXMuY29tbWFuZFBpY2tlckl0ZW1zID0gW107XG5cdFx0dGhpcy5zZWxlY3RlZENvbW1hbmRJbmRleCA9IC0xO1xuXHR9XG5cblx0aGFuZGxlQ29tbWFuZFBpY2tlck5hdmlnYXRpb24oa2V5OiBzdHJpbmcpOiBib29sZWFuIHtcblx0XHRpZiAodGhpcy5jb21tYW5kUGlja2VySXRlbXMubGVuZ3RoID09PSAwKSByZXR1cm4gZmFsc2U7XG5cblx0XHRpZiAoa2V5ID09PSAnQXJyb3dEb3duJykge1xuXHRcdFx0dGhpcy5zZWxlY3RlZENvbW1hbmRJbmRleCA9IE1hdGgubWluKHRoaXMuc2VsZWN0ZWRDb21tYW5kSW5kZXggKyAxLCB0aGlzLmNvbW1hbmRQaWNrZXJJdGVtcy5sZW5ndGggLSAxKTtcblx0XHRcdHRoaXMudXBkYXRlQ29tbWFuZFBpY2tlclNlbGVjdGlvbigpO1xuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSBlbHNlIGlmIChrZXkgPT09ICdBcnJvd1VwJykge1xuXHRcdFx0dGhpcy5zZWxlY3RlZENvbW1hbmRJbmRleCA9IE1hdGgubWF4KHRoaXMuc2VsZWN0ZWRDb21tYW5kSW5kZXggLSAxLCAtMSk7XG5cdFx0XHR0aGlzLnVwZGF0ZUNvbW1hbmRQaWNrZXJTZWxlY3Rpb24oKTtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gZWxzZSBpZiAoa2V5ID09PSAnVGFiJyAmJiB0aGlzLnNlbGVjdGVkQ29tbWFuZEluZGV4ID49IDApIHtcblx0XHRcdC8vIFVzZSB0aGUgc2FtZSBsb2dpYyBhcyBoYW5kbGVDb21tYW5kUGlja2VyU2VsZWN0aW9uIGZvciBUYWJcblx0XHRcdHJldHVybiB0aGlzLmhhbmRsZUNvbW1hbmRQaWNrZXJTZWxlY3Rpb24oKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHRoYW5kbGVDb21tYW5kUGlja2VyU2VsZWN0aW9uKCk6IGJvb2xlYW4ge1xuXHRcdGlmICh0aGlzLnNlbGVjdGVkQ29tbWFuZEluZGV4ID49IDAgJiYgdGhpcy5jb21tYW5kUGlja2VySXRlbXMubGVuZ3RoID4gMCkge1xuXHRcdFx0Ly8gRm9yIHN0cnVjdHVyZWQgY29tbWFuZHMsIHdlIG5lZWQgdG8gZ2V0IHRoZSBzZWxlY3RlZCBjb21tYW5kIGZyb20gdGhlIGZpbHRlcmVkIGxpc3Rcblx0XHRcdGNvbnN0IGNvbW1hbmRzID0gdGhpcy5nZXRTdHJ1Y3R1cmVkQ29tbWFuZHMoKTtcblx0XHRcdGNvbnN0IGlucHV0ID0gdGhpcy50ZXh0QXJlYS5nZXRWYWx1ZSgpO1xuXHRcdFx0aWYgKGlucHV0LnN0YXJ0c1dpdGgoJzonKSkge1xuXHRcdFx0XHRjb25zdCBmaWx0ZXJUZXh0ID0gaW5wdXQuc2xpY2UoMSkudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0Y29uc3QgZmlsdGVyZWQgPSBjb21tYW5kcy5maWx0ZXIoY21kID0+IFxuXHRcdFx0XHRcdGNtZC5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZmlsdGVyVGV4dCkgfHxcblx0XHRcdFx0XHRjbWQuY29tbWFuZC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKGZpbHRlclRleHQpIHx8XG5cdFx0XHRcdFx0Y21kLmtleXdvcmRzLnNvbWUoa2V5d29yZCA9PiBrZXl3b3JkLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoZmlsdGVyVGV4dCkpXG5cdFx0XHRcdCk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZiAodGhpcy5zZWxlY3RlZENvbW1hbmRJbmRleCA8IGZpbHRlcmVkLmxlbmd0aCkge1xuXHRcdFx0XHRcdGNvbnN0IHNlbGVjdGVkQ21kID0gZmlsdGVyZWRbdGhpcy5zZWxlY3RlZENvbW1hbmRJbmRleF07XG5cdFx0XHRcdFx0dGhpcy5zZWxlY3RTdHJ1Y3R1cmVkQ29tbWFuZChzZWxlY3RlZENtZC50ZW1wbGF0ZSk7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0cHJpdmF0ZSB1cGRhdGVDb21tYW5kUGlja2VyU2VsZWN0aW9uKCk6IHZvaWQge1xuXHRcdHRoaXMuY29tbWFuZFBpY2tlckl0ZW1zLmZvckVhY2goKGl0ZW0sIGluZGV4KSA9PiB7XG5cdFx0XHRpZiAoaW5kZXggPT09IHRoaXMuc2VsZWN0ZWRDb21tYW5kSW5kZXgpIHtcblx0XHRcdFx0aXRlbS5zdHlsZS5iYWNrZ3JvdW5kID0gJ3ZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItaG92ZXIpJztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGl0ZW0uc3R5bGUuYmFja2dyb3VuZCA9ICd0cmFuc3BhcmVudCc7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRwcml2YXRlIHNlbGVjdENvbW1hbmQoY29tbWFuZDogc3RyaW5nKTogdm9pZCB7XG5cdFx0dGhpcy50ZXh0QXJlYS5zZXRWYWx1ZShjb21tYW5kICsgJyAnKTtcblx0XHR0aGlzLnRleHRBcmVhLmlucHV0RWwuZm9jdXMoKTtcblx0XHRcblx0XHQvLyBQb3NpdGlvbiBjdXJzb3IgYXQgZW5kXG5cdFx0Y29uc3QgbGVuZ3RoID0gdGhpcy50ZXh0QXJlYS5nZXRWYWx1ZSgpLmxlbmd0aDtcblx0XHR0aGlzLnRleHRBcmVhLmlucHV0RWwuc2V0U2VsZWN0aW9uUmFuZ2UobGVuZ3RoLCBsZW5ndGgpO1xuXHRcdFxuXHRcdHRoaXMuaGlkZUNvbW1hbmRQaWNrZXIoKTtcblx0fVxuXG5cblx0LyoqXG5cdCAqIEdldCBzdHJ1Y3R1cmVkIGNvbW1hbmRzIGZvciBcIjpcIiB0cmlnZ2VyXG5cdCAqL1xuXHRwcml2YXRlIGdldFN0cnVjdHVyZWRDb21tYW5kcygpOiBTdHJ1Y3R1cmVkQ29tbWFuZFtdIHtcblx0XHRyZXR1cm4gW1xuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiAnQWRkIENvbnRlbnQnLFxuXHRcdFx0XHRkZXNjcmlwdGlvbjogJ0FkZCBuZXcgY29udGVudCBhdCBjdXJzb3IgcG9zaXRpb24nLFxuXHRcdFx0XHRjb21tYW5kOiAnYWRkJyxcblx0XHRcdFx0dGVtcGxhdGU6ICdhZGQge2N1cnNvcn0nLFxuXHRcdFx0XHRleGFtcGxlOiAnOmFkZCBwYXJhZ3JhcGggYWJvdXQgbWV0aG9kb2xvZ3knLFxuXHRcdFx0XHRrZXl3b3JkczogWydjcmVhdGUnLCAnbmV3JywgJ2luc2VydCcsICd3cml0ZSddXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiAnRWRpdCBTZWxlY3Rpb24nLFxuXHRcdFx0XHRkZXNjcmlwdGlvbjogJ0VkaXQgdGhlIHNlbGVjdGVkIHRleHQnLFxuXHRcdFx0XHRjb21tYW5kOiAnZWRpdCcsXG5cdFx0XHRcdHRlbXBsYXRlOiAnZWRpdCB0byB7Y3Vyc29yfScsXG5cdFx0XHRcdGV4YW1wbGU6ICc6ZWRpdCB0byBiZSBtb3JlIGZvcm1hbCcsXG5cdFx0XHRcdGtleXdvcmRzOiBbJ21vZGlmeScsICd1cGRhdGUnLCAnY2hhbmdlJywgJ3JldmlzZSddXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiAnRGVsZXRlIFNlbGVjdGlvbicsXG5cdFx0XHRcdGRlc2NyaXB0aW9uOiAnUmVtb3ZlIHRoZSBzZWxlY3RlZCB0ZXh0Jyxcblx0XHRcdFx0Y29tbWFuZDogJ2RlbGV0ZScsXG5cdFx0XHRcdHRlbXBsYXRlOiAnZGVsZXRlIHtjdXJzb3J9Jyxcblx0XHRcdFx0ZXhhbXBsZTogJzpkZWxldGUgc2VsZWN0ZWQgdGV4dCcsXG5cdFx0XHRcdGtleXdvcmRzOiBbJ3JlbW92ZScsICdlbGltaW5hdGUnLCAnZXJhc2UnXVxuXHRcdFx0fSxcblx0XHRcdHtcblx0XHRcdFx0bmFtZTogJ1Jld3JpdGUnLFxuXHRcdFx0XHRkZXNjcmlwdGlvbjogJ1Jld3JpdGUgY29udGVudCB3aXRoIHNwZWNpZmljIHN0eWxlJyxcblx0XHRcdFx0Y29tbWFuZDogJ3Jld3JpdGUnLFxuXHRcdFx0XHR0ZW1wbGF0ZTogJ3Jld3JpdGUgYXMge2N1cnNvcn0nLFxuXHRcdFx0XHRleGFtcGxlOiAnOnJld3JpdGUgYXMgYnVsbGV0IHBvaW50cycsXG5cdFx0XHRcdGtleXdvcmRzOiBbJ3JlcGhyYXNlJywgJ3Jlc3RydWN0dXJlJywgJ3Jld29yZCddXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiAnRml4IEdyYW1tYXInLFxuXHRcdFx0XHRkZXNjcmlwdGlvbjogJ0NvcnJlY3QgZ3JhbW1hciBhbmQgc3BlbGxpbmcgZXJyb3JzJyxcblx0XHRcdFx0Y29tbWFuZDogJ2dyYW1tYXInLFxuXHRcdFx0XHR0ZW1wbGF0ZTogJ2ZpeCBncmFtbWFyIHtjdXJzb3J9Jyxcblx0XHRcdFx0ZXhhbXBsZTogJzpmaXggZ3JhbW1hciBpbiBzZWxlY3Rpb24nLFxuXHRcdFx0XHRrZXl3b3JkczogWydjb3JyZWN0JywgJ3Byb29mcmVhZCcsICdzcGVsbGluZyddXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiAnQ29udGludWUnLFxuXHRcdFx0XHRkZXNjcmlwdGlvbjogJ0NvbnRpbnVlIHdyaXRpbmcgZnJvbSBjdXJyZW50IHBvc2l0aW9uJyxcblx0XHRcdFx0Y29tbWFuZDogJ2NvbnRpbnVlJyxcblx0XHRcdFx0dGVtcGxhdGU6ICdjb250aW51ZSB7Y3Vyc29yfScsXG5cdFx0XHRcdGV4YW1wbGU6ICc6Y29udGludWUgd2l0aCBleGFtcGxlcycsXG5cdFx0XHRcdGtleXdvcmRzOiBbJ2V4dGVuZCcsICdleHBhbmQnLCAncHJvY2VlZCddXG5cdFx0XHR9LFxuXHRcdFx0e1xuXHRcdFx0XHRuYW1lOiAnVXBkYXRlIE1ldGFkYXRhJyxcblx0XHRcdFx0ZGVzY3JpcHRpb246ICdVcGRhdGUgZG9jdW1lbnQgcHJvcGVydGllcycsXG5cdFx0XHRcdGNvbW1hbmQ6ICdtZXRhZGF0YScsXG5cdFx0XHRcdHRlbXBsYXRlOiAndXBkYXRlIHtjdXJzb3J9IHByb3BlcnR5Jyxcblx0XHRcdFx0ZXhhbXBsZTogJzp1cGRhdGUgdGFncyBwcm9wZXJ0eScsXG5cdFx0XHRcdGtleXdvcmRzOiBbJ2Zyb250bWF0dGVyJywgJ3Byb3BlcnRpZXMnLCAndGFncyddXG5cdFx0XHR9XG5cdFx0XTtcblx0fVxuXG5cdC8qKlxuXHQgKiBTZWxlY3QgYSBzdHJ1Y3R1cmVkIGNvbW1hbmQgYW5kIGluc2VydCB0ZW1wbGF0ZVxuXHQgKi9cblx0cHJpdmF0ZSBzZWxlY3RTdHJ1Y3R1cmVkQ29tbWFuZCh0ZW1wbGF0ZTogc3RyaW5nKTogdm9pZCB7XG5cdFx0dGhpcy5oaWRlQ29tbWFuZFBpY2tlcigpO1xuXHRcdFxuXHRcdC8vIFJlcGxhY2UgY3Vyc29yIHBsYWNlaG9sZGVyIGFuZCBpbnNlcnQgdGVtcGxhdGVcblx0XHRjb25zdCBjdXJzb3JQb3MgPSB0ZW1wbGF0ZS5pbmRleE9mKCd7Y3Vyc29yfScpO1xuXHRcdGlmIChjdXJzb3JQb3MgIT09IC0xKSB7XG5cdFx0XHRjb25zdCBiZWZvcmVDdXJzb3IgPSB0ZW1wbGF0ZS5zbGljZSgwLCBjdXJzb3JQb3MpO1xuXHRcdFx0Y29uc3QgYWZ0ZXJDdXJzb3IgPSB0ZW1wbGF0ZS5zbGljZShjdXJzb3JQb3MgKyA4KTsgLy8gTGVuZ3RoIG9mICd7Y3Vyc29yfSdcblx0XHRcdHRoaXMudGV4dEFyZWEuc2V0VmFsdWUoYmVmb3JlQ3Vyc29yICsgYWZ0ZXJDdXJzb3IpO1xuXHRcdFx0XG5cdFx0XHQvLyBQb3NpdGlvbiBjdXJzb3Igd2hlcmUge2N1cnNvcn0gd2FzXG5cdFx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdFx0dGhpcy50ZXh0QXJlYS5pbnB1dEVsLnNldFNlbGVjdGlvblJhbmdlKGN1cnNvclBvcywgY3Vyc29yUG9zKTtcblx0XHRcdFx0dGhpcy50ZXh0QXJlYS5pbnB1dEVsLmZvY3VzKCk7XG5cdFx0XHR9LCAwKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy50ZXh0QXJlYS5zZXRWYWx1ZSh0ZW1wbGF0ZSk7XG5cdFx0XHR0aGlzLnRleHRBcmVhLmlucHV0RWwuZm9jdXMoKTtcblx0XHR9XG5cdH1cblxuXHRjbGVhbnVwKCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmNvbW1hbmRNZW51KSB7XG5cdFx0XHR0aGlzLmNvbW1hbmRNZW51LnJlbW92ZSgpO1xuXHRcdH1cblx0XHRpZiAodGhpcy5jb21tYW5kUGlja2VyKSB7XG5cdFx0XHR0aGlzLmNvbW1hbmRQaWNrZXIucmVtb3ZlKCk7XG5cdFx0fVxuXHR9XG59IiwgImltcG9ydCB7IEFwcCwgUGxhdGZvcm0sIFRGaWxlLCBOb3RpY2UgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgTm92YVBsdWdpbiBmcm9tICcuLi8uLi9tYWluJztcbmltcG9ydCB7IE11bHRpRG9jQ29udGV4dEhhbmRsZXIsIE11bHRpRG9jQ29udGV4dCB9IGZyb20gJy4uL2NvcmUvbXVsdGktZG9jLWNvbnRleHQnO1xuXG4vKipcbiAqIEhhbmRsZXMgbXVsdGktZG9jdW1lbnQgY29udGV4dCBVSSBhbmQgbWFuYWdlbWVudFxuICovXG5leHBvcnQgY2xhc3MgQ29udGV4dE1hbmFnZXIge1xuXHRwcml2YXRlIHBsdWdpbjogTm92YVBsdWdpbjtcblx0cHJpdmF0ZSBhcHA6IEFwcDtcblx0cHJpdmF0ZSBjb250YWluZXI6IEhUTUxFbGVtZW50O1xuXHRwcml2YXRlIG11bHRpRG9jSGFuZGxlcjogTXVsdGlEb2NDb250ZXh0SGFuZGxlcjtcblx0cHVibGljIGNvbnRleHRJbmRpY2F0b3IhOiBIVE1MRWxlbWVudDtcblx0cHVibGljIGNvbnRleHRQcmV2aWV3ITogSFRNTEVsZW1lbnQ7XG5cdHByaXZhdGUgY3VycmVudENvbnRleHQ6IE11bHRpRG9jQ29udGV4dCB8IG51bGwgPSBudWxsO1xuXHRwcml2YXRlIHNpZGViYXJWaWV3OiBhbnk7IC8vIFJlZmVyZW5jZSB0byBOb3ZhU2lkZWJhclZpZXcgZm9yIGFkZGluZyBmaWxlc1xuXHRwcml2YXRlIHN0YXRpYyByZWFkb25seSBOT1RJQ0VfRFVSQVRJT05fTVMgPSA1MDAwO1xuXG5cdGNvbnN0cnVjdG9yKHBsdWdpbjogTm92YVBsdWdpbiwgYXBwOiBBcHAsIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQpIHtcblx0XHR0aGlzLnBsdWdpbiA9IHBsdWdpbjtcblx0XHR0aGlzLmFwcCA9IGFwcDtcblx0XHR0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcblx0XHR0aGlzLm11bHRpRG9jSGFuZGxlciA9IG5ldyBNdWx0aURvY0NvbnRleHRIYW5kbGVyKGFwcCk7XG5cdH1cblxuXHRzZXRTaWRlYmFyVmlldyhzaWRlYmFyVmlldzogYW55KTogdm9pZCB7XG5cdFx0dGhpcy5zaWRlYmFyVmlldyA9IHNpZGViYXJWaWV3O1xuXHR9XG5cblx0Y3JlYXRlQ29udGV4dEluZGljYXRvcigpOiB2b2lkIHtcblx0XHR0aGlzLmNvbnRleHRJbmRpY2F0b3IgPSB0aGlzLmNvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLWNvbnRleHQtaW5kaWNhdG9yJyB9KTtcblx0XHR0aGlzLmNvbnRleHRJbmRpY2F0b3Iuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdHBvc2l0aW9uOiBhYnNvbHV0ZTtcblx0XHRcdHRvcDogLTJweDtcblx0XHRcdHJpZ2h0OiB2YXIoLS1zaXplLTQtMyk7XG5cdFx0XHRiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpO1xuXHRcdFx0Ym9yZGVyOiAxcHggc29saWQgdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ib3JkZXIpO1xuXHRcdFx0Ym9yZGVyLXJhZGl1czogdmFyKC0tcmFkaXVzLXMpO1xuXHRcdFx0cGFkZGluZzogdmFyKC0tc2l6ZS0yLTEpIHZhcigtLXNpemUtMi0yKTtcblx0XHRcdGZvbnQtc2l6ZTogdmFyKC0tZm9udC11aS1zbWFsbGVyKTtcblx0XHRcdGNvbG9yOiB2YXIoLS10ZXh0LW11dGVkKTtcblx0XHRcdGRpc3BsYXk6IG5vbmU7XG5cdFx0XHR6LWluZGV4OiAxMDA7XG5cdFx0XHRtYXgtd2lkdGg6IDIwMHB4O1xuXHRcdFx0Ym94LXNoYWRvdzogdmFyKC0tc2hhZG93LXMpO1xuXHRcdGA7XG5cdH1cblxuXHRjcmVhdGVDb250ZXh0UHJldmlldygpOiBIVE1MRWxlbWVudCB7XG5cdFx0Y29uc3QgcHJldmlld0NvbnRhaW5lciA9IHRoaXMuY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ25vdmEtY29udGV4dC1wcmV2aWV3JyB9KTtcblx0XHRwcmV2aWV3Q29udGFpbmVyLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKTtcblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcblx0XHRcdGJvcmRlci1yYWRpdXM6IHZhcigtLXJhZGl1cy1zKTtcblx0XHRcdHBhZGRpbmc6IHZhcigtLXNpemUtMi0yKSB2YXIoLS1zaXplLTItMyk7XG5cdFx0XHRtYXJnaW4tYm90dG9tOiB2YXIoLS1zaXplLTItMik7XG5cdFx0XHRmb250LXNpemU6IHZhcigtLWZvbnQtdWktc21hbGwpO1xuXHRcdFx0ZGlzcGxheTogbm9uZTtcblx0XHRgO1xuXG5cdFx0Y29uc3QgcHJldmlld0xhYmVsID0gcHJldmlld0NvbnRhaW5lci5jcmVhdGVTcGFuKHsgdGV4dDogJ0NvbnRleHQ6ICcgfSk7XG5cdFx0cHJldmlld0xhYmVsLnN0eWxlLmNzc1RleHQgPSAnY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpOyBmb250LXdlaWdodDogNjAwOyc7XG5cblx0XHRjb25zdCBwcmV2aWV3TGlzdCA9IHByZXZpZXdDb250YWluZXIuY3JlYXRlU3Bhbih7IGNsczogJ25vdmEtY29udGV4dC1wcmV2aWV3LWxpc3QnIH0pO1xuXHRcdHByZXZpZXdMaXN0LnN0eWxlLmNzc1RleHQgPSAnY29sb3I6IHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7JztcblxuXHRcdHJldHVybiBwcmV2aWV3Q29udGFpbmVyO1xuXHR9XG5cblx0dXBkYXRlTGl2ZUNvbnRleHRQcmV2aWV3KG1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuXHRcdGlmICghdGhpcy5jb250ZXh0UHJldmlldyB8fCAhdGhpcy5wbHVnaW4uZmVhdHVyZU1hbmFnZXIuaXNGZWF0dXJlRW5hYmxlZCgnbXVsdGktZG9jLWNvbnRleHQnKSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGlmICghbWVzc2FnZSkge1xuXHRcdFx0dGhpcy5jb250ZXh0UHJldmlldy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIFBhcnNlIGRvY3VtZW50IHJlZmVyZW5jZXMgZnJvbSBjdXJyZW50IG1lc3NhZ2Vcblx0XHRjb25zdCByZWZQYXR0ZXJuID0gLyhcXCspP1xcW1xcWyhbXlxcXV0rPykoPzojKFteXFxdXSs/KSk/XFxdXFxdL2c7XG5cdFx0Y29uc3QgZm91bmRSZWZzOiBBcnJheTx7bmFtZTogc3RyaW5nLCBwcm9wZXJ0eT86IHN0cmluZ30+ID0gW107XG5cdFx0bGV0IG1hdGNoO1xuXG5cdFx0d2hpbGUgKChtYXRjaCA9IHJlZlBhdHRlcm4uZXhlYyhtZXNzYWdlKSkgIT09IG51bGwpIHtcblx0XHRcdGNvbnN0IGRvY05hbWUgPSBtYXRjaFsyXTtcblx0XHRcdGNvbnN0IHByb3BlcnR5ID0gbWF0Y2hbM107XG5cdFx0XHRmb3VuZFJlZnMucHVzaCh7IG5hbWU6IGRvY05hbWUsIHByb3BlcnR5IH0pO1xuXHRcdH1cblxuXHRcdGlmIChmb3VuZFJlZnMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHR0aGlzLmNvbnRleHRQcmV2aWV3LnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gVXBkYXRlIHByZXZpZXcgZGlzcGxheVxuXHRcdGNvbnN0IHByZXZpZXdMaXN0ID0gdGhpcy5jb250ZXh0UHJldmlldy5xdWVyeVNlbGVjdG9yKCcubm92YS1jb250ZXh0LXByZXZpZXctbGlzdCcpIGFzIEhUTUxFbGVtZW50O1xuXHRcdGlmIChwcmV2aWV3TGlzdCkge1xuXHRcdFx0Y29uc3QgcmVmc1RleHQgPSBmb3VuZFJlZnMubWFwKHJlZiA9PiBcblx0XHRcdFx0cmVmLnByb3BlcnR5ID8gYCR7cmVmLm5hbWV9IyR7cmVmLnByb3BlcnR5fWAgOiByZWYubmFtZVxuXHRcdFx0KS5qb2luKCcsICcpO1xuXHRcdFx0cHJldmlld0xpc3QudGV4dENvbnRlbnQgPSByZWZzVGV4dDtcblx0XHR9XG5cblx0XHR0aGlzLmNvbnRleHRQcmV2aWV3LnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXHR9XG5cblx0YXN5bmMgYnVpbGRDb250ZXh0KG1lc3NhZ2U6IHN0cmluZywgY3VycmVudEZpbGU6IFRGaWxlIHwgbnVsbCk6IFByb21pc2U8TXVsdGlEb2NDb250ZXh0IHwgbnVsbD4ge1xuXHRcdGlmICghdGhpcy5wbHVnaW4uZmVhdHVyZU1hbmFnZXIuaXNGZWF0dXJlRW5hYmxlZCgnbXVsdGktZG9jLWNvbnRleHQnKSB8fCAhY3VycmVudEZpbGUpIHtcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblxuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLm11bHRpRG9jSGFuZGxlci5idWlsZENvbnRleHQobWVzc2FnZSwgY3VycmVudEZpbGUpO1xuXHRcdFx0dGhpcy5jdXJyZW50Q29udGV4dCA9IHJlc3VsdC5jb250ZXh0O1xuXG5cdFx0XHRpZiAocmVzdWx0LmNvbnRleHQ/LnBlcnNpc3RlbnREb2NzLmxlbmd0aCkge1xuXHRcdFx0XHR0aGlzLnVwZGF0ZUNvbnRleHRJbmRpY2F0b3IocmVzdWx0LmNvbnRleHQpO1xuXHRcdFx0XHRcblx0XHRcdFx0Ly8gQ2hlY2sgdG9rZW4gbGltaXRcblx0XHRcdFx0aWYgKHJlc3VsdC5jb250ZXh0LmlzTmVhckxpbWl0KSB7XG5cdFx0XHRcdFx0bmV3IE5vdGljZSgnXHUyNkEwXHVGRTBGIEFwcHJvYWNoaW5nIHRva2VuIGxpbWl0LiBDb25zaWRlciByZW1vdmluZyBzb21lIGRvY3VtZW50cyBmcm9tIGNvbnRleHQuJywgQ29udGV4dE1hbmFnZXIuTk9USUNFX0RVUkFUSU9OX01TKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmVzdWx0LmNvbnRleHQ7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdC8vIEZhaWxlZCB0byBidWlsZCBjb250ZXh0IC0gZ3JhY2VmdWwgZmFsbGJhY2tcblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH1cblx0fVxuXG5cdHByaXZhdGUgdXBkYXRlQ29udGV4dEluZGljYXRvcihjb250ZXh0OiBNdWx0aURvY0NvbnRleHQpOiB2b2lkIHtcblx0XHRpZiAoIXRoaXMuY29udGV4dEluZGljYXRvcikgcmV0dXJuO1xuXG5cdFx0Y29uc3QgZG9jQ291bnQgPSBjb250ZXh0LnBlcnNpc3RlbnREb2NzLmxlbmd0aDtcblx0XHRpZiAoZG9jQ291bnQgPiAwKSB7XG5cdFx0XHR0aGlzLmNvbnRleHRJbmRpY2F0b3IudGV4dENvbnRlbnQgPSBgJHtkb2NDb3VudH0gZG9jJHtkb2NDb3VudCA+IDEgPyAncycgOiAnJ31gO1xuXHRcdFx0dGhpcy5jb250ZXh0SW5kaWNhdG9yLnN0eWxlLmRpc3BsYXkgPSAnYmxvY2snO1xuXG5cdFx0XHQvLyBBZGQgZXhwYW5kIGZ1bmN0aW9uYWxpdHlcblx0XHRcdHRoaXMuY29udGV4dEluZGljYXRvci5zdHlsZS5jdXJzb3IgPSAncG9pbnRlcic7XG5cdFx0XHR0aGlzLmNvbnRleHRJbmRpY2F0b3Iub25jbGljayA9ICgpID0+IHtcblx0XHRcdFx0dGhpcy5zaG93Q29udGV4dERldGFpbHMoY29udGV4dCk7XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBBZGQgaG92ZXIgZWZmZWN0XG5cdFx0XHR0aGlzLmNvbnRleHRJbmRpY2F0b3IuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VlbnRlcicsICgpID0+IHtcblx0XHRcdFx0dGhpcy5jb250ZXh0SW5kaWNhdG9yLnN0eWxlLmJhY2tncm91bmQgPSAndmFyKC0taW50ZXJhY3RpdmUtaG92ZXIpJztcblx0XHRcdH0pO1xuXG5cdFx0XHR0aGlzLmNvbnRleHRJbmRpY2F0b3IuYWRkRXZlbnRMaXN0ZW5lcignbW91c2VsZWF2ZScsICgpID0+IHtcblx0XHRcdFx0dGhpcy5jb250ZXh0SW5kaWNhdG9yLnN0eWxlLmJhY2tncm91bmQgPSAndmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5KSc7XG5cdFx0XHR9KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5jb250ZXh0SW5kaWNhdG9yLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG5cdFx0fVxuXHR9XG5cblx0cHJpdmF0ZSBzaG93Q29udGV4dERldGFpbHMoY29udGV4dDogTXVsdGlEb2NDb250ZXh0KTogdm9pZCB7XG5cdFx0Ly8gQ3JlYXRlIG1vZGFsIG9yIGV4cGFuZGVkIHZpZXdcblx0XHRjb25zdCBtb2RhbCA9IHRoaXMuY29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogJ25vdmEtY29udGV4dC1tb2RhbCcgfSk7XG5cdFx0bW9kYWwuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdHBvc2l0aW9uOiBmaXhlZDtcblx0XHRcdHRvcDogMDtcblx0XHRcdGxlZnQ6IDA7XG5cdFx0XHRyaWdodDogMDtcblx0XHRcdGJvdHRvbTogMDtcblx0XHRcdGJhY2tncm91bmQ6IHJnYmEoMCwgMCwgMCwgMC41KTtcblx0XHRcdGRpc3BsYXk6IGZsZXg7XG5cdFx0XHRhbGlnbi1pdGVtczogY2VudGVyO1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG5cdFx0XHR6LWluZGV4OiAxMDAwMDtcblx0XHRgO1xuXG5cdFx0Y29uc3QgY29udGVudCA9IG1vZGFsLmNyZWF0ZURpdigpO1xuXHRcdGNvbnRlbnQuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdGJhY2tncm91bmQ6IHZhcigtLWJhY2tncm91bmQtcHJpbWFyeSk7XG5cdFx0XHRib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7XG5cdFx0XHRib3JkZXItcmFkaXVzOiB2YXIoLS1yYWRpdXMtcyk7XG5cdFx0XHRwYWRkaW5nOiB2YXIoLS1zaXplLTQtNCk7XG5cdFx0XHRtYXgtd2lkdGg6IDgwJTtcblx0XHRcdG1heC1oZWlnaHQ6IDgwJTtcblx0XHRcdG92ZXJmbG93LXk6IGF1dG87XG5cdFx0XHRib3gtc2hhZG93OiB2YXIoLS1zaGFkb3ctcyk7XG5cdFx0YDtcblxuXHRcdGNvbnN0IGhlYWRlciA9IGNvbnRlbnQuY3JlYXRlRWwoJ2gzJywgeyB0ZXh0OiAnQ29udGV4dCBEb2N1bWVudHMnIH0pO1xuXHRcdGhlYWRlci5zdHlsZS5jc3NUZXh0ID0gJ21hcmdpbi10b3A6IDA7IG1hcmdpbi1ib3R0b206IHZhcigtLXNpemUtNC0zKTsnO1xuXG5cdFx0Y29udGV4dC5wZXJzaXN0ZW50RG9jcy5mb3JFYWNoKGRvYyA9PiB7XG5cdFx0XHRjb25zdCBkb2NFbCA9IGNvbnRlbnQuY3JlYXRlRGl2KCk7XG5cdFx0XHRkb2NFbC5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0XHRwYWRkaW5nOiB2YXIoLS1zaXplLTItMik7XG5cdFx0XHRcdG1hcmdpbi1ib3R0b206IHZhcigtLXNpemUtMi0yKTtcblx0XHRcdFx0YmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1tb2RpZmllci1ob3Zlcik7XG5cdFx0XHRcdGJvcmRlci1yYWRpdXM6IHZhcigtLXJhZGl1cy14cyk7XG5cdFx0XHRgO1xuXG5cdFx0XHRjb25zdCBuYW1lRWwgPSBkb2NFbC5jcmVhdGVFbCgnZGl2JywgeyB0ZXh0OiBkb2MuZmlsZS5iYXNlbmFtZSB9KTtcblx0XHRcdG5hbWVFbC5zdHlsZS5jc3NUZXh0ID0gJ2ZvbnQtd2VpZ2h0OiA2MDA7IG1hcmdpbi1ib3R0b206IHZhcigtLXNpemUtMi0xKTsnO1xuXG5cdFx0XHRpZiAoZG9jLnByb3BlcnR5KSB7XG5cdFx0XHRcdGNvbnN0IHByb3BFbCA9IGRvY0VsLmNyZWF0ZUVsKCdkaXYnLCB7IHRleHQ6IGBQcm9wZXJ0eTogJHtkb2MucHJvcGVydHl9YCB9KTtcblx0XHRcdFx0cHJvcEVsLnN0eWxlLmNzc1RleHQgPSAnZm9udC1zaXplOiB2YXIoLS1mb250LXVpLXNtYWxsZXIpOyBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7Jztcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2hvdyBmaWxlIHBhdGggYXMgcHJldmlldyBzaW5jZSBjb250ZW50IGlzbid0IGRpcmVjdGx5IGF2YWlsYWJsZVxuXHRcdFx0Y29uc3QgcHJldmlld0VsID0gZG9jRWwuY3JlYXRlRWwoJ2RpdicsIHsgdGV4dDogZG9jLmZpbGUucGF0aCB9KTtcblx0XHRcdHByZXZpZXdFbC5zdHlsZS5jc3NUZXh0ID0gJ2ZvbnQtc2l6ZTogdmFyKC0tZm9udC11aS1zbWFsbGVyKTsgY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpOyBtYXJnaW4tdG9wOiB2YXIoLS1zaXplLTItMSk7Jztcblx0XHR9KTtcblxuXHRcdC8vIEJ1dHRvbiBjb250YWluZXJcblx0XHRjb25zdCBidXR0b25Db250YWluZXIgPSBjb250ZW50LmNyZWF0ZURpdigpO1xuXHRcdGJ1dHRvbkNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0bWFyZ2luLXRvcDogdmFyKC0tc2l6ZS00LTMpO1xuXHRcdFx0ZGlzcGxheTogZmxleDtcblx0XHRcdGdhcDogdmFyKC0tc2l6ZS0yLTIpO1xuXHRcdFx0anVzdGlmeS1jb250ZW50OiBmbGV4LWVuZDtcblx0XHRgO1xuXG5cblx0XHQvLyBDbG9zZSBidXR0b25cblx0XHRjb25zdCBjbG9zZUJ0biA9IGJ1dHRvbkNvbnRhaW5lci5jcmVhdGVFbCgnYnV0dG9uJywgeyB0ZXh0OiAnQ2xvc2UnIH0pO1xuXHRcdGNsb3NlQnRuLnN0eWxlLmNzc1RleHQgPSBgXG5cdFx0XHRwYWRkaW5nOiB2YXIoLS1zaXplLTItMikgdmFyKC0tc2l6ZS00LTMpO1xuXHRcdFx0YmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1zZWNvbmRhcnkpO1xuXHRcdFx0Y29sb3I6IHZhcigtLXRleHQtbm9ybWFsKTtcblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcblx0XHRcdGJvcmRlci1yYWRpdXM6IHZhcigtLXJhZGl1cy1zKTtcblx0XHRcdGN1cnNvcjogcG9pbnRlcjtcblx0XHRgO1xuXG5cdFx0Y2xvc2VCdG4ub25jbGljayA9ICgpID0+IG1vZGFsLnJlbW92ZSgpO1xuXHRcdG1vZGFsLm9uY2xpY2sgPSAoZSkgPT4ge1xuXHRcdFx0aWYgKGUudGFyZ2V0ID09PSBtb2RhbCkgbW9kYWwucmVtb3ZlKCk7XG5cdFx0fTtcblx0fVxuXG5cdGhpZGVDb250ZXh0UHJldmlldygpOiB2b2lkIHtcblx0XHRpZiAodGhpcy5jb250ZXh0UHJldmlldykge1xuXHRcdFx0dGhpcy5jb250ZXh0UHJldmlldy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdH1cblx0fVxuXG5cdGhpZGVDb250ZXh0SW5kaWNhdG9yKCk6IHZvaWQge1xuXHRcdGlmICh0aGlzLmNvbnRleHRJbmRpY2F0b3IpIHtcblx0XHRcdHRoaXMuY29udGV4dEluZGljYXRvci5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuXHRcdH1cblx0fVxuXG5cdGNsZWFyQ3VycmVudENvbnRleHQoKTogdm9pZCB7XG5cdFx0dGhpcy5jdXJyZW50Q29udGV4dCA9IG51bGw7XG5cdFx0dGhpcy5oaWRlQ29udGV4dEluZGljYXRvcigpO1xuXHRcdHRoaXMuaGlkZUNvbnRleHRQcmV2aWV3KCk7XG5cdH1cblxuXHRnZXRDdXJyZW50Q29udGV4dCgpOiBNdWx0aURvY0NvbnRleHQgfCBudWxsIHtcblx0XHRyZXR1cm4gdGhpcy5jdXJyZW50Q29udGV4dDtcblx0fVxuXG5cblx0Y2xlYW51cCgpOiB2b2lkIHtcblx0XHR0aGlzLmNsZWFyQ3VycmVudENvbnRleHQoKTtcblx0XHRpZiAodGhpcy5jb250ZXh0SW5kaWNhdG9yKSB7XG5cdFx0XHR0aGlzLmNvbnRleHRJbmRpY2F0b3IucmVtb3ZlKCk7XG5cdFx0fVxuXHRcdGlmICh0aGlzLmNvbnRleHRQcmV2aWV3KSB7XG5cdFx0XHR0aGlzLmNvbnRleHRQcmV2aWV3LnJlbW92ZSgpO1xuXHRcdH1cblx0fVxufSIsICJpbXBvcnQgeyBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBOb3ZhUGx1Z2luIGZyb20gJy4uLy4uL21haW4nO1xuXG4vKipcbiAqIE1lc3NhZ2Ugb3B0aW9ucyBmb3IgdW5pZmllZCBtZXNzYWdlIGNyZWF0aW9uXG4gKi9cbmludGVyZmFjZSBNZXNzYWdlT3B0aW9ucyB7XG5cdHR5cGU6ICdwaWxsJyB8ICdidWJibGUnO1xuXHR2YXJpYW50OiAnc3VjY2VzcycgfCAnZXJyb3InIHwgJ3N5c3RlbScgfCAndXNlcicgfCAnYXNzaXN0YW50Jztcblx0cGVyc2lzdD86IGJvb2xlYW47IC8vIFdoZXRoZXIgdG8gc2F2ZSB0byBjb252ZXJzYXRpb24gbWFuYWdlclxufVxuXG4vKipcbiAqIEhhbmRsZXMgYWxsIGNoYXQgbWVzc2FnZSByZW5kZXJpbmcgYW5kIGRpc3BsYXkgbG9naWNcbiAqL1xuZXhwb3J0IGNsYXNzIENoYXRSZW5kZXJlciB7XG5cdHByaXZhdGUgcGx1Z2luOiBOb3ZhUGx1Z2luO1xuXHRwcml2YXRlIGNoYXRDb250YWluZXI6IEhUTUxFbGVtZW50O1xuXHRwcml2YXRlIHN0YXRpYyByZWFkb25seSBTQ1JPTExfREVMQVlfTVMgPSA1MDtcblxuXHRjb25zdHJ1Y3RvcihwbHVnaW46IE5vdmFQbHVnaW4sIGNoYXRDb250YWluZXI6IEhUTUxFbGVtZW50KSB7XG5cdFx0dGhpcy5wbHVnaW4gPSBwbHVnaW47XG5cdFx0dGhpcy5jaGF0Q29udGFpbmVyID0gY2hhdENvbnRhaW5lcjtcblx0fVxuXG5cdC8qKlxuXHQgKiBBZGQgYSBjaGF0IG1lc3NhZ2Ugd2l0aCByb2xlIGhlYWRlclxuXHQgKi9cblx0YWRkTWVzc2FnZShyb2xlOiAndXNlcicgfCAnYXNzaXN0YW50JyB8ICdzeXN0ZW0nLCBjb250ZW50OiBzdHJpbmcpOiB2b2lkIHtcblx0XHRcblx0XHRjb25zdCBtZXNzYWdlRWwgPSB0aGlzLmNoYXRDb250YWluZXIuY3JlYXRlRGl2KHsgY2xzOiBgbm92YS1tZXNzYWdlIG5vdmEtbWVzc2FnZS0ke3JvbGV9YCB9KTtcblx0XHRtZXNzYWdlRWwuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdG1hcmdpbi1ib3R0b206IHZhcigtLXNpemUtNC0yKTtcblx0XHRcdHBhZGRpbmc6IHZhcigtLXNpemUtMi0zKSB2YXIoLS1zaXplLTQtMyk7XG5cdFx0XHRib3JkZXItcmFkaXVzOiB2YXIoLS1yYWRpdXMtcyk7XG5cdFx0XHRtYXgtd2lkdGg6IDg1JTtcblx0XHRcdCR7cm9sZSA9PT0gJ3VzZXInIFxuXHRcdFx0XHQ/ICdtYXJnaW4tbGVmdDogYXV0bzsgYmFja2dyb3VuZDogdmFyKC0taW50ZXJhY3RpdmUtYWNjZW50KTsgY29sb3I6IHZhcigtLXRleHQtb24tYWNjZW50KTsnIFxuXHRcdFx0XHQ6IHJvbGUgPT09ICdzeXN0ZW0nXG5cdFx0XHRcdD8gJ21hcmdpbjogMCBhdXRvOyBiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWhvdmVyKTsgY29sb3I6IHZhcigtLXRleHQtbXV0ZWQpOyB0ZXh0LWFsaWduOiBjZW50ZXI7IGZvbnQtc2l6ZTogdmFyKC0tZm9udC11aS1zbWFsbCk7J1xuXHRcdFx0XHQ6ICdiYWNrZ3JvdW5kOiB2YXIoLS1iYWNrZ3JvdW5kLXByaW1hcnkpOyBib3JkZXI6IDFweCBzb2xpZCB2YXIoLS1iYWNrZ3JvdW5kLW1vZGlmaWVyLWJvcmRlcik7J1xuXHRcdFx0fVxuXHRcdGA7XG5cblx0XHRjb25zdCByb2xlRWwgPSBtZXNzYWdlRWwuY3JlYXRlRWwoJ2RpdicsIHsgXG5cdFx0XHR0ZXh0OiByb2xlID09PSAndXNlcicgPyAnWW91JyA6IHJvbGUgPT09ICdzeXN0ZW0nID8gJ1N5c3RlbScgOiAnTm92YScsXG5cdFx0XHRjbHM6ICdub3ZhLW1lc3NhZ2Utcm9sZSdcblx0XHR9KTtcblx0XHRyb2xlRWwuc3R5bGUuY3NzVGV4dCA9IGBcblx0XHRcdGZvbnQtc2l6ZTogdmFyKC0tZm9udC11aS1zbWFsbGVyKTtcblx0XHRcdG9wYWNpdHk6IDAuNztcblx0XHRcdG1hcmdpbi1ib3R0b206IHZhcigtLXNpemUtMi0xKTtcblx0XHRcdGZvbnQtd2VpZ2h0OiA2MDA7XG5cdFx0YDtcblxuXHRcdGNvbnN0IGNvbnRlbnRFbCA9IG1lc3NhZ2VFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdub3ZhLW1lc3NhZ2UtY29udGVudCcgfSk7XG5cdFx0Ly8gVXNlIGlubmVySFRNTCBmb3Igc3lzdGVtIG1lc3NhZ2VzIHRvIHN1cHBvcnQgaWNvbnMsIHRleHRDb250ZW50IGZvciBvdGhlcnMgZm9yIHNlY3VyaXR5XG5cdFx0aWYgKHJvbGUgPT09ICdzeXN0ZW0nICYmIGNvbnRlbnQuaW5jbHVkZXMoJzxzdmcnKSkge1xuXHRcdFx0Y29udGVudEVsLmlubmVySFRNTCA9IGNvbnRlbnQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGNvbnRlbnRFbC50ZXh0Q29udGVudCA9IGNvbnRlbnQ7XG5cdFx0fVxuXG5cdFx0dGhpcy5zY3JvbGxUb0JvdHRvbSh0cnVlKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBVbmlmaWVkIG1lc3NhZ2UgY3JlYXRpb24gLSBkZXRlcm1pbmVzIENTUyBjbGFzcyBhdCBjcmVhdGlvbiB0aW1lXG5cdCAqL1xuXHRhZGRTdGF0dXNNZXNzYWdlKGNvbnRlbnQ6IHN0cmluZywgb3B0aW9uczogTWVzc2FnZU9wdGlvbnMpOiB2b2lkIHtcblx0XHQvLyBEZXRlcm1pbmUgQ1NTIGNsYXNzIGJhc2VkIG9uIHR5cGUgYW5kIHZhcmlhbnRcblx0XHRjb25zdCBjc3NDbGFzcyA9IHRoaXMuZ2V0TWVzc2FnZUNTU0NsYXNzKGNvbnRlbnQsIG9wdGlvbnMpO1xuXHRcdFxuXHRcdC8vIENyZWF0ZSBtZXNzYWdlIGVsZW1lbnQgd2l0aCBzdGF0aWMgQ1NTIGNsYXNzXG5cdFx0Y29uc3QgbWVzc2FnZUVsID0gdGhpcy5jaGF0Q29udGFpbmVyLmNyZWF0ZURpdih7IGNsczogYG5vdmEtbWVzc2FnZSAke2Nzc0NsYXNzfWAgfSk7XG5cdFx0Y29uc3QgY29udGVudEVsID0gbWVzc2FnZUVsLmNyZWF0ZUVsKCdkaXYnLCB7IGNsczogJ25vdmEtbWVzc2FnZS1jb250ZW50JyB9KTtcblx0XHRcblx0XHRpZiAoY29udGVudC5pbmNsdWRlcygnPHN2ZycpKSB7XG5cdFx0XHRjb250ZW50RWwuaW5uZXJIVE1MID0gY29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGVudEVsLnRleHRDb250ZW50ID0gY29udGVudDtcblx0XHR9XG5cblx0XHQvLyBTYXZlIHRvIGNvbnZlcnNhdGlvbiBtYW5hZ2VyIGlmIHJlcXVlc3RlZFxuXHRcdGlmIChvcHRpb25zLnBlcnNpc3QpIHtcblx0XHRcdGNvbnN0IGFjdGl2ZUZpbGUgPSB0aGlzLnBsdWdpbi5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcblx0XHRcdGlmIChhY3RpdmVGaWxlKSB7XG5cdFx0XHRcdHRoaXMucGx1Z2luLmNvbnZlcnNhdGlvbk1hbmFnZXIuYWRkU3lzdGVtTWVzc2FnZShcblx0XHRcdFx0XHRhY3RpdmVGaWxlLCBcblx0XHRcdFx0XHRjb250ZW50LFxuXHRcdFx0XHRcdHsgbWVzc2FnZVR5cGU6IGNzc0NsYXNzIH0gLy8gU3RvcmUgQ1NTIGNsYXNzIGFzIG1ldGFkYXRhXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0dGhpcy5zY3JvbGxUb0JvdHRvbSgpO1xuXHR9XG5cblx0cHJpdmF0ZSBnZXRNZXNzYWdlQ1NTQ2xhc3MoY29udGVudDogc3RyaW5nLCBvcHRpb25zOiBNZXNzYWdlT3B0aW9ucyk6IHN0cmluZyB7XG5cdFx0aWYgKG9wdGlvbnMudHlwZSA9PT0gJ3BpbGwnKSB7XG5cdFx0XHRyZXR1cm4gYG5vdmEtcGlsbC0ke29wdGlvbnMudmFyaWFudH1gO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4gYG5vdmEtYnViYmxlLSR7b3B0aW9ucy52YXJpYW50fWA7XG5cdFx0fVxuXHR9XG5cblx0Ly8gU2ltcGxlIHdyYXBwZXIgbWV0aG9kcyBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuXHRhZGRTdWNjZXNzTWVzc2FnZShjb250ZW50OiBzdHJpbmcsIHBlcnNpc3Q6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xuXHRcdC8vIEF1dG8tcHJlcGVuZCBjaGVja21hcmsgaWYgbm90IGFscmVhZHkgcHJlc2VudFxuXHRcdGlmICghY29udGVudC5zdGFydHNXaXRoKCdcdTI3MTMgJykgJiYgIWNvbnRlbnQuaW5jbHVkZXMoJzxzdmcnKSkge1xuXHRcdFx0Y29udGVudCA9ICdcdTI3MTMgJyArIGNvbnRlbnQ7XG5cdFx0fVxuXHRcdC8vIEFsd2F5cyB1c2UgcGlsbHMgZm9yIHN1Y2Nlc3MgbWVzc2FnZXMgdG8gbWFpbnRhaW4gY29uc2lzdGVuY3lcblx0XHR0aGlzLmFkZFN0YXR1c01lc3NhZ2UoY29udGVudCwgeyB0eXBlOiAncGlsbCcsIHZhcmlhbnQ6ICdzdWNjZXNzJywgcGVyc2lzdCB9KTtcblx0fVxuXG5cdGFkZEVycm9yTWVzc2FnZShjb250ZW50OiBzdHJpbmcsIHBlcnNpc3Q6IGJvb2xlYW4gPSBmYWxzZSk6IHZvaWQge1xuXHRcdC8vIEF1dG8tcHJlcGVuZCBYIGlmIG5vdCBhbHJlYWR5IHByZXNlbnRcblx0XHRpZiAoIWNvbnRlbnQuc3RhcnRzV2l0aCgnXHUyNzRDICcpICYmICFjb250ZW50LmluY2x1ZGVzKCc8c3ZnJykpIHtcblx0XHRcdGNvbnRlbnQgPSAnXHUyNzRDICcgKyBjb250ZW50O1xuXHRcdH1cblx0XHRjb25zdCB0eXBlID0gY29udGVudC5sZW5ndGggPD0gMzAgPyAncGlsbCcgOiAnYnViYmxlJztcblx0XHR0aGlzLmFkZFN0YXR1c01lc3NhZ2UoY29udGVudCwgeyB0eXBlLCB2YXJpYW50OiAnZXJyb3InLCBwZXJzaXN0IH0pO1xuXHR9XG5cblx0YWRkV2VsY29tZU1lc3NhZ2UobWVzc2FnZT86IHN0cmluZyk6IHZvaWQge1xuXHRcdGNvbnN0IHdlbGNvbWVFbCA9IHRoaXMuY2hhdENvbnRhaW5lci5jcmVhdGVEaXYoeyBjbHM6ICdub3ZhLXdlbGNvbWUnIH0pO1xuXHRcdHdlbGNvbWVFbC5zdHlsZS5jc3NUZXh0ID0gYFxuXHRcdFx0cGFkZGluZzogdmFyKC0tc2l6ZS00LTQpO1xuXHRcdFx0bWFyZ2luLWJvdHRvbTogdmFyKC0tc2l6ZS00LTMpO1xuXHRcdFx0YmFja2dyb3VuZDogdmFyKC0tYmFja2dyb3VuZC1wcmltYXJ5KTtcblx0XHRcdGJvcmRlci1yYWRpdXM6IHZhcigtLXJhZGl1cy1zKTtcblx0XHRcdGJvcmRlcjogMXB4IHNvbGlkIHZhcigtLWJhY2tncm91bmQtbW9kaWZpZXItYm9yZGVyKTtcblx0XHRgO1xuXG5cdFx0Y29uc3QgY29udGVudCA9IG1lc3NhZ2UgfHwgYFxuXHRcdFx0PGRpdiBzdHlsZT1cImRpc3BsYXk6IGZsZXg7IGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47IGFsaWduLWl0ZW1zOiBjZW50ZXI7XCI+XG5cdFx0XHRcdDxzdmcgdmlld0JveD1cIjAgMCAyNCAyNFwiIGZpbGw9XCJub25lXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHN0eWxlPVwid2lkdGg6IDMycHg7IGhlaWdodDogMzJweDsgY29sb3I6IHZhcigtLWludGVyYWN0aXZlLWFjY2VudCk7IG1hcmdpbi1ib3R0b206IHZhcigtLXNpemUtNC0yKTtcIj5cblx0XHRcdFx0XHQ8Y2lyY2xlIGN4PVwiMTJcIiBjeT1cIjEyXCIgcj1cIjIuNVwiIGZpbGw9XCJjdXJyZW50Q29sb3JcIi8+XG5cdFx0XHRcdFx0PHBhdGggZD1cIk0xMiAxTDEyIDZcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIzXCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cblx0XHRcdFx0XHQ8cGF0aCBkPVwiTTEyIDE4TDEyIDIzXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIi8+XG5cdFx0XHRcdFx0PHBhdGggZD1cIk0yMyAxMkwxOCAxMlwiIHN0cm9rZT1cImN1cnJlbnRDb2xvclwiIHN0cm9rZS13aWR0aD1cIjNcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIvPlxuXHRcdFx0XHRcdDxwYXRoIGQ9XCJNNiAxMkwxIDEyXCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiM1wiIHN0cm9rZS1saW5lY2FwPVwicm91bmRcIi8+XG5cdFx0XHRcdFx0PHBhdGggZD1cIk0xOC4zNjQgNS42MzZMMTUuNTM2IDguNDY0XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMi41XCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cblx0XHRcdFx0XHQ8cGF0aCBkPVwiTTguNDY0IDE1LjUzNkw1LjYzNiAxOC4zNjRcIiBzdHJva2U9XCJjdXJyZW50Q29sb3JcIiBzdHJva2Utd2lkdGg9XCIyLjVcIiBzdHJva2UtbGluZWNhcD1cInJvdW5kXCIvPlxuXHRcdFx0XHRcdDxwYXRoIGQ9XCJNMTguMzY0IDE4LjM2NEwxNS41MzYgMTUuNTM2XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMi41XCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cblx0XHRcdFx0XHQ8cGF0aCBkPVwiTTguNDY0IDguNDY0TDUuNjM2IDUuNjM2XCIgc3Ryb2tlPVwiY3VycmVudENvbG9yXCIgc3Ryb2tlLXdpZHRoPVwiMi41XCIgc3Ryb2tlLWxpbmVjYXA9XCJyb3VuZFwiLz5cblx0XHRcdFx0PC9zdmc+XG5cdFx0XHRcdDxwIHN0eWxlPVwibWFyZ2luOiAwOyBtYXJnaW4tbGVmdDogdmFyKC0tc2l6ZS0yLTMpOyBjb2xvcjogdmFyKC0tdGV4dC1tdXRlZCk7IGZvbnQtc2l6ZTogdmFyKC0tZm9udC11aS1tZWRpdW0pOyBsaW5lLWhlaWdodDogMS40OyB0ZXh0LWFsaWduOiBsZWZ0OyBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1wiPlxuXHRcdFx0XHRcdEknbSB5b3VyIEFJIHdyaXRpbmcgcGFydG5lci4gQXNrIHF1ZXN0aW9ucyBpbiBjaGF0IG9yIGdpdmUgY29tbWFuZHMgdG8gZWRpdCBhdCB5b3VyIGN1cnNvciBwb3NpdGlvbi48YnI+PGJyPkNUUkwvQ01ELVogb25jZSBvciB0d2ljZSB0byB1bmRvIGNoYW5nZXMuXG5cdFx0XHRcdDwvcD5cblx0XHRcdDwvZGl2PlxuXHRcdGA7XG5cblx0XHR3ZWxjb21lRWwuaW5uZXJIVE1MID0gY29udGVudDtcblxuXHRcdHRoaXMuc2Nyb2xsVG9Cb3R0b20odHJ1ZSk7XG5cdH1cblxuXG5cdGNsZWFyQ2hhdCgpOiB2b2lkIHtcblx0XHR0aGlzLmNoYXRDb250YWluZXIuZW1wdHkoKTtcblx0fVxuXG5cdHByaXZhdGUgc2Nyb2xsVG9Cb3R0b20oc21vb3RoOiBib29sZWFuID0gZmFsc2UpOiB2b2lkIHtcblx0XHRzZXRUaW1lb3V0KCgpID0+IHtcblx0XHRcdGlmIChzbW9vdGgpIHtcblx0XHRcdFx0dGhpcy5jaGF0Q29udGFpbmVyLnNjcm9sbFRvKHtcblx0XHRcdFx0XHR0b3A6IHRoaXMuY2hhdENvbnRhaW5lci5zY3JvbGxIZWlnaHQsXG5cdFx0XHRcdFx0YmVoYXZpb3I6ICdzbW9vdGgnXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5jaGF0Q29udGFpbmVyLnNjcm9sbFRvcCA9IHRoaXMuY2hhdENvbnRhaW5lci5zY3JvbGxIZWlnaHQ7XG5cdFx0XHR9XG5cdFx0fSwgQ2hhdFJlbmRlcmVyLlNDUk9MTF9ERUxBWV9NUyk7XG5cdH1cblxuXHRhc3luYyBsb2FkQ29udmVyc2F0aW9uSGlzdG9yeShmaWxlOiBURmlsZSk6IFByb21pc2U8dm9pZD4ge1xuXHRcdGNvbnN0IG1lc3NhZ2VzID0gYXdhaXQgdGhpcy5wbHVnaW4uY29udmVyc2F0aW9uTWFuYWdlci5nZXRSZWNlbnRNZXNzYWdlcyhmaWxlLCA1MCk7XG5cdFx0XG5cdFx0aWYgKG1lc3NhZ2VzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0Ly8gTm8gY29udmVyc2F0aW9uIGV4aXN0cyAtIHNob3cgd2VsY29tZSBtZXNzYWdlXG5cdFx0XHR0aGlzLmFkZFdlbGNvbWVNZXNzYWdlKCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdFxuXHRcdGZvciAoY29uc3QgbWVzc2FnZSBvZiBtZXNzYWdlcykge1xuXHRcdFx0aWYgKG1lc3NhZ2Uucm9sZSA9PT0gJ3N5c3RlbScgJiYgbWVzc2FnZS5tZXRhZGF0YT8ubWVzc2FnZVR5cGUpIHtcblx0XHRcdFx0Ly8gUmVzdG9yZSBzeXN0ZW0gbWVzc2FnZSB3aXRoIG9yaWdpbmFsIHN0eWxpbmdcblx0XHRcdFx0Y29uc3QgbWVzc2FnZUVsID0gdGhpcy5jaGF0Q29udGFpbmVyLmNyZWF0ZURpdih7IFxuXHRcdFx0XHRcdGNsczogYG5vdmEtbWVzc2FnZSAke21lc3NhZ2UubWV0YWRhdGEubWVzc2FnZVR5cGV9YCBcblx0XHRcdFx0fSk7XG5cdFx0XHRcdGNvbnN0IGNvbnRlbnRFbCA9IG1lc3NhZ2VFbC5jcmVhdGVFbCgnZGl2JywgeyBjbHM6ICdub3ZhLW1lc3NhZ2UtY29udGVudCcgfSk7XG5cdFx0XHRcdFxuXHRcdFx0XHRpZiAobWVzc2FnZS5jb250ZW50LmluY2x1ZGVzKCc8c3ZnJykpIHtcblx0XHRcdFx0XHRjb250ZW50RWwuaW5uZXJIVE1MID0gbWVzc2FnZS5jb250ZW50O1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRlbnRFbC50ZXh0Q29udGVudCA9IG1lc3NhZ2UuY29udGVudDtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gUmVndWxhciB1c2VyL2Fzc2lzdGFudCBtZXNzYWdlc1xuXHRcdFx0XHR0aGlzLmFkZE1lc3NhZ2UobWVzc2FnZS5yb2xlIGFzICd1c2VyJyB8ICdhc3Npc3RhbnQnIHwgJ3N5c3RlbScsIG1lc3NhZ2UuY29udGVudCk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdHRoaXMuc2Nyb2xsVG9Cb3R0b20oKTtcblx0fVxufSIsICIvKipcbiAqIFVuaWZpZWQgc3RyZWFtaW5nIGFuZCBub3RpY2UgbWFuYWdlbWVudCBmb3IgTm92YVxuICogUHJvdmlkZXMgY29uc2lzdGVudCB2aXN1YWwgZmVlZGJhY2sgYW5kIHN0cmVhbWluZyBhY3Jvc3MgYWxsIGNvbW1hbmQgdHlwZXNcbiAqL1xuXG5pbXBvcnQgeyBFZGl0b3IsIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGludGVyZmFjZSBTdHJlYW1pbmdPcHRpb25zIHtcbiAgICBvbkNodW5rPzogKGNodW5rOiBzdHJpbmcsIGlzQ29tcGxldGU6IGJvb2xlYW4pID0+IHZvaWQ7XG4gICAgb25Db21wbGV0ZT86ICgpID0+IHZvaWQ7XG4gICAgb25FcnJvcj86IChlcnJvcjogRXJyb3IpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIEFjdGlvblR5cGUgPSAnaW1wcm92ZScgfCAnbG9uZ2VyJyB8ICdzaG9ydGVyJyB8ICd0b25lJyB8ICdjdXN0b20nIHwgJ2NoYXQnIHwgJ2FkZCcgfCAnZWRpdCcgfCAncmV3cml0ZScgfCAnZ3JhbW1hcicgfCAnZGVsZXRlJztcblxuZXhwb3J0IGNsYXNzIFN0cmVhbWluZ01hbmFnZXIge1xuICAgIHByaXZhdGUgZG90c0FuaW1hdGlvbkludGVydmFsOiBOb2RlSlMuVGltZW91dCB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgdGhpbmtpbmdOb3RpY2U6IE5vdGljZSB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgY3VycmVudFN0cmVhbWluZ0VuZFBvczogYW55ID0gbnVsbDtcbiAgICBwcml2YXRlIHN0cmVhbWluZ1N0YXJ0UG9zOiBhbnkgPSBudWxsO1xuICAgIHByaXZhdGUgb3JpZ2luYWxQb3NpdGlvbjogYW55ID0gbnVsbDtcblxuICAgIC8vIENvbXByZWhlbnNpdmUgdGhpbmtpbmcgcGhyYXNlcyBmb3IgYWxsIGFjdGlvbiB0eXBlc1xuICAgIHByaXZhdGUgc3RhdGljIHJlYWRvbmx5IFRISU5LSU5HX1BIUkFTRVM6IFJlY29yZDxBY3Rpb25UeXBlLCBzdHJpbmdbXT4gPSB7XG4gICAgICAgICdpbXByb3ZlJzogW1xuICAgICAgICAgICAgJ3JlZmluaW5nLi4uJyxcbiAgICAgICAgICAgICdwb2xpc2hpbmcuLi4nLFxuICAgICAgICAgICAgJ2VuaGFuY2luZy4uLicsXG4gICAgICAgICAgICAnY3JhZnRpbmcuLi4nLFxuICAgICAgICAgICAgJ3BlcmZlY3RpbmcuLi4nLFxuICAgICAgICAgICAgJ3Ntb290aGluZy4uLicsXG4gICAgICAgICAgICAnc2hhcnBlbmluZy4uLicsXG4gICAgICAgICAgICAnZWxldmF0aW5nLi4uJyxcbiAgICAgICAgICAgICdmaW5lLXR1bmluZy4uLicsXG4gICAgICAgICAgICAnc2N1bHB0aW5nLi4uJ1xuICAgICAgICBdLFxuICAgICAgICAnbG9uZ2VyJzogW1xuICAgICAgICAgICAgJ2V4cGFuZGluZy4uLicsXG4gICAgICAgICAgICAnZGV2ZWxvcGluZy4uLicsXG4gICAgICAgICAgICAnZWxhYm9yYXRpbmcuLi4nLFxuICAgICAgICAgICAgJ2J1aWxkaW5nLi4uJyxcbiAgICAgICAgICAgICdlbnJpY2hpbmcuLi4nLFxuICAgICAgICAgICAgJ2RlZXBlbmluZy4uLicsXG4gICAgICAgICAgICAnZ3Jvd2luZy4uLicsXG4gICAgICAgICAgICAnZXh0ZW5kaW5nLi4uJyxcbiAgICAgICAgICAgICdhbXBsaWZ5aW5nLi4uJyxcbiAgICAgICAgICAgICd1bmZvbGRpbmcuLi4nXG4gICAgICAgIF0sXG4gICAgICAgICdzaG9ydGVyJzogW1xuICAgICAgICAgICAgJ2NvbmRlbnNpbmcuLi4nLFxuICAgICAgICAgICAgJ2Rpc3RpbGxpbmcuLi4nLFxuICAgICAgICAgICAgJ3RpZ2h0ZW5pbmcuLi4nLFxuICAgICAgICAgICAgJ2ZvY3VzaW5nLi4uJyxcbiAgICAgICAgICAgICdzdHJlYW1saW5pbmcuLi4nLFxuICAgICAgICAgICAgJ2NvbXByZXNzaW5nLi4uJyxcbiAgICAgICAgICAgICd0cmltbWluZy4uLicsXG4gICAgICAgICAgICAnY2xhcmlmeWluZy4uLicsXG4gICAgICAgICAgICAnc2ltcGxpZnlpbmcuLi4nLFxuICAgICAgICAgICAgJ2NvbmNlbnRyYXRpbmcuLi4nXG4gICAgICAgIF0sXG4gICAgICAgICd0b25lJzogW1xuICAgICAgICAgICAgJ2FkanVzdGluZyB0b25lLi4uJyxcbiAgICAgICAgICAgICdyZXNoYXBpbmcuLi4nLFxuICAgICAgICAgICAgJ3JlZnJhbWluZy4uLicsXG4gICAgICAgICAgICAnYWRhcHRpbmcuLi4nLFxuICAgICAgICAgICAgJ3RyYW5zZm9ybWluZy4uLicsXG4gICAgICAgICAgICAnbW9kdWxhdGluZy4uLicsXG4gICAgICAgICAgICAncmVjYXN0aW5nLi4uJyxcbiAgICAgICAgICAgICdzaGlmdGluZy4uLicsXG4gICAgICAgICAgICAncmVmb3JtaW5nLi4uJyxcbiAgICAgICAgICAgICdyZWltYWdpbmluZy4uLidcbiAgICAgICAgXSxcbiAgICAgICAgJ2N1c3RvbSc6IFtcbiAgICAgICAgICAgICd3b3JraW5nIG9uIGl0Li4uJyxcbiAgICAgICAgICAgICdjb25zaWRlcmluZy4uLicsXG4gICAgICAgICAgICAndGhpbmtpbmcuLi4nLFxuICAgICAgICAgICAgJ3Byb2Nlc3NpbmcuLi4nLFxuICAgICAgICAgICAgJ2FuYWx5emluZy4uLicsXG4gICAgICAgICAgICAnY29udGVtcGxhdGluZy4uLicsXG4gICAgICAgICAgICAndW5kZXJzdGFuZGluZy4uLicsXG4gICAgICAgICAgICAnaW50ZXJwcmV0aW5nLi4uJyxcbiAgICAgICAgICAgICdleHBsb3JpbmcuLi4nLFxuICAgICAgICAgICAgJ2V2YWx1YXRpbmcuLi4nXG4gICAgICAgIF0sXG4gICAgICAgICdjaGF0JzogW1xuICAgICAgICAgICAgJ2NvbXBvc2luZy4uLicsXG4gICAgICAgICAgICAnZHJhZnRpbmcuLi4nLFxuICAgICAgICAgICAgJ2NyZWF0aW5nLi4uJyxcbiAgICAgICAgICAgICdnZW5lcmF0aW5nLi4uJyxcbiAgICAgICAgICAgICd3cml0aW5nLi4uJyxcbiAgICAgICAgICAgICdjcmFmdGluZy4uLicsXG4gICAgICAgICAgICAnZm9ybXVsYXRpbmcuLi4nLFxuICAgICAgICAgICAgJ2RldmVsb3BpbmcuLi4nLFxuICAgICAgICAgICAgJ2J1aWxkaW5nLi4uJyxcbiAgICAgICAgICAgICdjb25zdHJ1Y3RpbmcuLi4nXG4gICAgICAgIF0sXG4gICAgICAgICdhZGQnOiBbXG4gICAgICAgICAgICAnY29tcG9zaW5nLi4uJyxcbiAgICAgICAgICAgICdkcmFmdGluZy4uLicsXG4gICAgICAgICAgICAnY3JlYXRpbmcuLi4nLFxuICAgICAgICAgICAgJ2dlbmVyYXRpbmcuLi4nLFxuICAgICAgICAgICAgJ3dyaXRpbmcuLi4nLFxuICAgICAgICAgICAgJ2NyYWZ0aW5nLi4uJyxcbiAgICAgICAgICAgICdmb3JtdWxhdGluZy4uLicsXG4gICAgICAgICAgICAnZGV2ZWxvcGluZy4uLicsXG4gICAgICAgICAgICAnYnVpbGRpbmcuLi4nLFxuICAgICAgICAgICAgJ2NvbnN0cnVjdGluZy4uLidcbiAgICAgICAgXSxcbiAgICAgICAgJ2VkaXQnOiBbXG4gICAgICAgICAgICAncmVmaW5pbmcuLi4nLFxuICAgICAgICAgICAgJ3BvbGlzaGluZy4uLicsXG4gICAgICAgICAgICAnZW5oYW5jaW5nLi4uJyxcbiAgICAgICAgICAgICdjcmFmdGluZy4uLicsXG4gICAgICAgICAgICAncGVyZmVjdGluZy4uLicsXG4gICAgICAgICAgICAnc21vb3RoaW5nLi4uJyxcbiAgICAgICAgICAgICdzaGFycGVuaW5nLi4uJyxcbiAgICAgICAgICAgICdlbGV2YXRpbmcuLi4nLFxuICAgICAgICAgICAgJ2ZpbmUtdHVuaW5nLi4uJyxcbiAgICAgICAgICAgICdzY3VscHRpbmcuLi4nXG4gICAgICAgIF0sXG4gICAgICAgICdyZXdyaXRlJzogW1xuICAgICAgICAgICAgJ3JlZmluaW5nLi4uJyxcbiAgICAgICAgICAgICdwb2xpc2hpbmcuLi4nLFxuICAgICAgICAgICAgJ2VuaGFuY2luZy4uLicsXG4gICAgICAgICAgICAnY3JhZnRpbmcuLi4nLFxuICAgICAgICAgICAgJ3BlcmZlY3RpbmcuLi4nLFxuICAgICAgICAgICAgJ3Ntb290aGluZy4uLicsXG4gICAgICAgICAgICAnc2hhcnBlbmluZy4uLicsXG4gICAgICAgICAgICAnZWxldmF0aW5nLi4uJyxcbiAgICAgICAgICAgICdmaW5lLXR1bmluZy4uLicsXG4gICAgICAgICAgICAnc2N1bHB0aW5nLi4uJ1xuICAgICAgICBdLFxuICAgICAgICAnZ3JhbW1hcic6IFtcbiAgICAgICAgICAgICdyZWZpbmluZy4uLicsXG4gICAgICAgICAgICAncG9saXNoaW5nLi4uJyxcbiAgICAgICAgICAgICdlbmhhbmNpbmcuLi4nLFxuICAgICAgICAgICAgJ2NyYWZ0aW5nLi4uJyxcbiAgICAgICAgICAgICdwZXJmZWN0aW5nLi4uJyxcbiAgICAgICAgICAgICdzbW9vdGhpbmcuLi4nLFxuICAgICAgICAgICAgJ3NoYXJwZW5pbmcuLi4nLFxuICAgICAgICAgICAgJ2VsZXZhdGluZy4uLicsXG4gICAgICAgICAgICAnZmluZS10dW5pbmcuLi4nLFxuICAgICAgICAgICAgJ3NjdWxwdGluZy4uLidcbiAgICAgICAgXSxcbiAgICAgICAgJ2RlbGV0ZSc6IFtcbiAgICAgICAgICAgICdjb25kZW5zaW5nLi4uJyxcbiAgICAgICAgICAgICdkaXN0aWxsaW5nLi4uJyxcbiAgICAgICAgICAgICd0aWdodGVuaW5nLi4uJyxcbiAgICAgICAgICAgICdmb2N1c2luZy4uLicsXG4gICAgICAgICAgICAnc3RyZWFtbGluaW5nLi4uJyxcbiAgICAgICAgICAgICdjb21wcmVzc2luZy4uLicsXG4gICAgICAgICAgICAndHJpbW1pbmcuLi4nLFxuICAgICAgICAgICAgJ2NsYXJpZnlpbmcuLi4nLFxuICAgICAgICAgICAgJ3NpbXBsaWZ5aW5nLi4uJyxcbiAgICAgICAgICAgICdjb25jZW50cmF0aW5nLi4uJ1xuICAgICAgICBdXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFNob3cgdGhpbmtpbmcgbm90aWNlIHdpdGggY29udGV4dC1hd2FyZSBwaHJhc2UgYW5kIGFuaW1hdGVkIGRvdHNcbiAgICAgKi9cbiAgICBzaG93VGhpbmtpbmdOb3RpY2UoYWN0aW9uVHlwZTogQWN0aW9uVHlwZSk6IHZvaWQge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU2VsZWN0IHJhbmRvbSBwaHJhc2UgYmFzZWQgb24gYWN0aW9uIHR5cGVcbiAgICAgICAgICAgIGNvbnN0IHBocmFzZXMgPSBTdHJlYW1pbmdNYW5hZ2VyLlRISU5LSU5HX1BIUkFTRVNbYWN0aW9uVHlwZV0gfHwgU3RyZWFtaW5nTWFuYWdlci5USElOS0lOR19QSFJBU0VTWydjaGF0J107XG4gICAgICAgICAgICBjb25zdCByYW5kb21QaHJhc2UgPSBwaHJhc2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBocmFzZXMubGVuZ3RoKV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENyZWF0ZSBwZXJzaXN0ZW50IG5vdGljZSAoMCB0aW1lb3V0ID0gbWFudWFsIGRpc21pc3NhbClcbiAgICAgICAgICAgIHRoaXMudGhpbmtpbmdOb3RpY2UgPSBuZXcgTm90aWNlKGBOb3ZhOiAke3JhbmRvbVBocmFzZX0uYCwgMCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNob3cgaW5pdGlhbCBzdGF0ZSB3aXRoIDEgZG90IGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBjb25zdCBpbml0aWFsTm90aWNlVGV4dCA9IGBOb3ZhOiAke3JhbmRvbVBocmFzZX0uYDtcbiAgICAgICAgICAgIGNvbnN0IG5vdGljZUVsID0gKHRoaXMudGhpbmtpbmdOb3RpY2UgYXMgYW55KS5ub3RpY2VFbDtcbiAgICAgICAgICAgIGlmIChub3RpY2VFbCkge1xuICAgICAgICAgICAgICAgIG5vdGljZUVsLnRleHRDb250ZW50ID0gaW5pdGlhbE5vdGljZVRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFN0YXJ0IGRvdHMgYW5pbWF0aW9uIGluIG5vdGljZVxuICAgICAgICAgICAgdGhpcy5zdGFydE5vdGljZURvdHNBbmltYXRpb24ocmFuZG9tUGhyYXNlKTtcbiAgICAgICAgICAgIFxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gY3JlYXRlIHRoaW5raW5nIG5vdGljZTonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCBzdHJlYW1pbmcgYXQgYSBzcGVjaWZpYyBwb3NpdGlvbiB3aXRoIGh5YnJpZCBhcHByb2FjaFxuICAgICAqIEZvciBzZWxlY3Rpb24gcmVwbGFjZW1lbnQ6IHN0YXJ0UG9zIGFuZCBlbmRQb3MgZGVmaW5lIHRoZSByYW5nZSB0byByZXBsYWNlXG4gICAgICogRm9yIGN1cnNvciBpbnNlcnRpb246IHN0YXJ0UG9zIGlzIHRoZSBjdXJzb3IgcG9zaXRpb24sIGVuZFBvcyBzaG91bGQgYmUgbnVsbFxuICAgICAqL1xuICAgIHN0YXJ0U3RyZWFtaW5nKFxuICAgICAgICBlZGl0b3I6IEVkaXRvciwgXG4gICAgICAgIHN0YXJ0UG9zOiBhbnksIFxuICAgICAgICBlbmRQb3M/OiBhbnksIFxuICAgICAgICBvcHRpb25zOiBTdHJlYW1pbmdPcHRpb25zID0ge31cbiAgICApOiB7XG4gICAgICAgIHVwZGF0ZVN0cmVhbTogKG5ld1RleHQ6IHN0cmluZywgaXNDb21wbGV0ZTogYm9vbGVhbikgPT4gdm9pZDtcbiAgICAgICAgc3RvcFN0cmVhbTogKCkgPT4gdm9pZDtcbiAgICB9IHtcbiAgICAgICAgLy8gU3RvcmUgb3JpZ2luYWwgcG9zaXRpb24ocylcbiAgICAgICAgdGhpcy5vcmlnaW5hbFBvc2l0aW9uID0geyBmcm9tOiBzdGFydFBvcywgdG86IGVuZFBvcyB9O1xuICAgICAgICBcbiAgICAgICAgaWYgKGVuZFBvcykge1xuICAgICAgICAgICAgLy8gU2VsZWN0aW9uIHJlcGxhY2VtZW50IG1vZGUgLSBjbGVhciB0aGUgc2VsZWN0aW9uXG4gICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKCcnLCBzdGFydFBvcywgZW5kUG9zKTtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFN0cmVhbWluZ0VuZFBvcyA9IHN0YXJ0UG9zO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gQ3Vyc29yIGluc2VydGlvbiBtb2RlIC0gc2V0IHBvc2l0aW9uIGZvciBzdHJlYW1pbmdcbiAgICAgICAgICAgIHRoaXMuY3VycmVudFN0cmVhbWluZ0VuZFBvcyA9IHN0YXJ0UG9zO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0cmVhbWluZ1N0YXJ0UG9zID0gbnVsbDsgLy8gV2lsbCBiZSBzZXQgb24gZmlyc3QgY2h1bmtcblxuICAgICAgICBjb25zdCB1cGRhdGVTdHJlYW0gPSAobmV3VGV4dDogc3RyaW5nLCBpc0NvbXBsZXRlOiBib29sZWFuKSA9PiB7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVN0cmVhbWluZ1RleHQoZWRpdG9yLCBuZXdUZXh0LCBpc0NvbXBsZXRlLCBvcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICBjb25zdCBzdG9wU3RyZWFtID0gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5zdG9wQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4geyB1cGRhdGVTdHJlYW0sIHN0b3BTdHJlYW0gfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgc3RyZWFtaW5nIHRleHQgd2l0aCBwcm9wZXIgcG9zaXRpb24gdHJhY2tpbmdcbiAgICAgKi9cbiAgICBwcml2YXRlIHVwZGF0ZVN0cmVhbWluZ1RleHQoXG4gICAgICAgIGVkaXRvcjogRWRpdG9yLCBcbiAgICAgICAgbmV3VGV4dDogc3RyaW5nLCBcbiAgICAgICAgaXNDb21wbGV0ZTogYm9vbGVhbixcbiAgICAgICAgb3B0aW9uczogU3RyZWFtaW5nT3B0aW9uc1xuICAgICk6IHZvaWQge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudFN0cmVhbWluZ0VuZFBvcykge1xuICAgICAgICAgICAgICAgIC8vIFN0b3AgdGhlIG5vdGljZSBhbmltYXRpb24gc2luY2Ugc3RyZWFtaW5nIGlzIHN0YXJ0aW5nIChvbmx5IG9uIGZpcnN0IGNodW5rKVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnRoaW5raW5nTm90aWNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RvcERvdHNBbmltYXRpb24oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gSWYgd2UgZG9uJ3QgaGF2ZSBhIHN0YXJ0IHBvc2l0aW9uIHlldCwgc2V0IGl0XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnN0cmVhbWluZ1N0YXJ0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtaW5nU3RhcnRQb3MgPSB7IC4uLnRoaXMuY3VycmVudFN0cmVhbWluZ0VuZFBvcyB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBDYWxjdWxhdGUgbmV3IGVuZCBwb3NpdGlvbiBiYXNlZCBvbiB0aGUgY29tcGxldGUgbmV3IHRleHRcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lcyA9IG5ld1RleHQuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0VuZFBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgbGluZTogdGhpcy5zdHJlYW1pbmdTdGFydFBvcy5saW5lICsgbGluZXMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgY2g6IGxpbmVzLmxlbmd0aCA+IDEgPyBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5sZW5ndGggOiB0aGlzLnN0cmVhbWluZ1N0YXJ0UG9zLmNoICsgbmV3VGV4dC5sZW5ndGhcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgLy8gUmVwbGFjZSBhbGwgY29udGVudCBmcm9tIHN0YXJ0IHRvIGN1cnJlbnQgZW5kIHdpdGggbmV3IHRleHRcbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKG5ld1RleHQsIHRoaXMuc3RyZWFtaW5nU3RhcnRQb3MsIHRoaXMuY3VycmVudFN0cmVhbWluZ0VuZFBvcyk7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50U3RyZWFtaW5nRW5kUG9zID0gbmV3RW5kUG9zO1xuXG4gICAgICAgICAgICAgICAgLy8gVHJpZ2dlciBjaHVuayBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm9uQ2h1bmspIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkNodW5rKG5ld1RleHQsIGlzQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2V0IGN1cnNvciBhdCB0aGUgZW5kIG9mIHRoZSBuZXcgdGV4dCBvbmx5IHdoZW4gY29tcGxldGVcbiAgICAgICAgICAgIGlmIChpc0NvbXBsZXRlKSB7XG4gICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcih0aGlzLmN1cnJlbnRTdHJlYW1pbmdFbmRQb3MpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFRyaWdnZXIgY29tcGxldGlvbiBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm9uQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5vbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdFcnJvciB1cGRhdGluZyBzdHJlYW1pbmcgdGV4dDonLCBlcnJvcik7XG4gICAgICAgICAgICB0aGlzLmNsZWFudXAoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVHJpZ2dlciBlcnJvciBjYWxsYmFja1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMub25FcnJvcikge1xuICAgICAgICAgICAgICAgIG9wdGlvbnMub25FcnJvcihlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IgOiBuZXcgRXJyb3IoU3RyaW5nKGVycm9yKSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW5pbWF0ZSBkb3RzIGluIG5vdGljZSB0ZXh0XG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGFydE5vdGljZURvdHNBbmltYXRpb24oYmFzZVBocmFzZTogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGxldCBkb3RDb3VudCA9IDE7XG4gICAgICAgIFxuICAgICAgICB0aGlzLmRvdHNBbmltYXRpb25JbnRlcnZhbCA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnRoaW5raW5nTm90aWNlKSByZXR1cm47XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgZG90Q291bnQrKztcbiAgICAgICAgICAgICAgICBpZiAoZG90Q291bnQgPiA1KSB7XG4gICAgICAgICAgICAgICAgICAgIGRvdENvdW50ID0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgZG90cyA9ICcuJy5yZXBlYXQoZG90Q291bnQpO1xuICAgICAgICAgICAgICAgIGNvbnN0IG5vdGljZVRleHQgPSBgTm92YTogJHtiYXNlUGhyYXNlfSR7ZG90c31gO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSBub3RpY2UgdGV4dCBkaXJlY3RseVxuICAgICAgICAgICAgICAgIGNvbnN0IG5vdGljZUVsID0gKHRoaXMudGhpbmtpbmdOb3RpY2UgYXMgYW55KS5ub3RpY2VFbDtcbiAgICAgICAgICAgICAgICBpZiAobm90aWNlRWwpIHtcbiAgICAgICAgICAgICAgICAgICAgbm90aWNlRWwudGV4dENvbnRlbnQgPSBub3RpY2VUZXh0O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdFcnJvciBpbiBub3RpY2UgZG90cyBhbmltYXRpb246JywgZXJyb3IpO1xuICAgICAgICAgICAgICAgIHRoaXMuc3RvcERvdHNBbmltYXRpb24oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgNDAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdG9wIHRoZSBkb3RzIGFuaW1hdGlvbiBhbmQgZGlzbWlzcyBub3RpY2VcbiAgICAgKi9cbiAgICBwcml2YXRlIHN0b3BEb3RzQW5pbWF0aW9uKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5kb3RzQW5pbWF0aW9uSW50ZXJ2YWwpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5kb3RzQW5pbWF0aW9uSW50ZXJ2YWwpO1xuICAgICAgICAgICAgdGhpcy5kb3RzQW5pbWF0aW9uSW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBEaXNtaXNzIHRoaW5raW5nIG5vdGljZVxuICAgICAgICBpZiAodGhpcy50aGlua2luZ05vdGljZSkge1xuICAgICAgICAgICAgdGhpcy50aGlua2luZ05vdGljZS5oaWRlKCk7XG4gICAgICAgICAgICB0aGlzLnRoaW5raW5nTm90aWNlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3AgYWxsIGFuaW1hdGlvbnMgYW5kIGNsZWFuIHVwXG4gICAgICovXG4gICAgc3RvcEFuaW1hdGlvbigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdG9wRG90c0FuaW1hdGlvbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFuIHVwIGFsbCBpbnRlcm5hbCBzdGF0ZVxuICAgICAqL1xuICAgIHByaXZhdGUgY2xlYW51cCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jdXJyZW50U3RyZWFtaW5nRW5kUG9zID0gbnVsbDtcbiAgICAgICAgdGhpcy5zdHJlYW1pbmdTdGFydFBvcyA9IG51bGw7XG4gICAgICAgIHRoaXMub3JpZ2luYWxQb3NpdGlvbiA9IG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBvcmlnaW5hbCBwb3NpdGlvbiBiZWZvcmUgc3RyZWFtaW5nIHN0YXJ0ZWRcbiAgICAgKi9cbiAgICBnZXRPcmlnaW5hbFBvc2l0aW9uKCk6IHsgZnJvbTogYW55OyB0bz86IGFueSB9IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yaWdpbmFsUG9zaXRpb247XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgY3VycmVudGx5IHN0cmVhbWluZ1xuICAgICAqL1xuICAgIGlzU3RyZWFtaW5nKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50U3RyZWFtaW5nRW5kUG9zICE9PSBudWxsO1xuICAgIH1cbn0iLCAiLyoqXG4gKiBTZWxlY3Rpb24tYmFzZWQgY29udGV4dCBtZW51IGZvciBOb3ZhXG4gKiBBZGRzIE5vdmEgc3VibWVudSB0byBPYnNpZGlhbidzIHJpZ2h0LWNsaWNrIGNvbnRleHQgbWVudSB3aGVuIHRleHQgaXMgc2VsZWN0ZWRcbiAqL1xuXG5pbXBvcnQgeyBBcHAsIEVkaXRvciwgTWVudSwgTWVudUl0ZW0sIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBOb3ZhUGx1Z2luIGZyb20gJy4uLy4uL21haW4nO1xuaW1wb3J0IHsgU2VsZWN0aW9uRWRpdENvbW1hbmQgfSBmcm9tICcuLi9jb3JlL2NvbW1hbmRzL3NlbGVjdGlvbi1lZGl0LWNvbW1hbmQnO1xuaW1wb3J0IHsgVG9uZVNlbGVjdGlvbk1vZGFsIH0gZnJvbSAnLi90b25lLXNlbGVjdGlvbi1tb2RhbCc7XG5pbXBvcnQgeyBDdXN0b21JbnN0cnVjdGlvbk1vZGFsIH0gZnJvbSAnLi9jdXN0b20taW5zdHJ1Y3Rpb24tbW9kYWwnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFNlbGVjdGlvbkFjdGlvbiB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBsYWJlbDogc3RyaW5nO1xuICAgIGljb24/OiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb24/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBjb25zdCBTRUxFQ1RJT05fQUNUSU9OUzogU2VsZWN0aW9uQWN0aW9uW10gPSBbXG4gICAge1xuICAgICAgICBpZDogJ2ltcHJvdmUnLFxuICAgICAgICBsYWJlbDogJ0ltcHJvdmUgV3JpdGluZycsXG4gICAgICAgIGljb246ICdzcGFya2xlcycsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnTWFrZSB0ZXh0IGNsZWFyZXIsIG1vcmUgY29uY2lzZSwgYmV0dGVyIGZsb3cnXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiAnbG9uZ2VyJyxcbiAgICAgICAgbGFiZWw6ICdNYWtlIExvbmdlcicsXG4gICAgICAgIGljb246ICdwbHVzLWNpcmNsZScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnRXhwYW5kIGlkZWFzIHdpdGggbW9yZSBkZXRhaWwgYW5kIGV4YW1wbGVzJ1xuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogJ3Nob3J0ZXInLFxuICAgICAgICBsYWJlbDogJ01ha2UgU2hvcnRlcicsXG4gICAgICAgIGljb246ICdtaW51cy1jaXJjbGUnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0NvbmRlbnNlIHRvIGVzc2VudGlhbCBwb2ludHMnXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiAndG9uZScsXG4gICAgICAgIGxhYmVsOiAnQ2hhbmdlIFRvbmUnLFxuICAgICAgICBpY29uOiAncGFsZXR0ZScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnQWRqdXN0IHdyaXRpbmcgc3R5bGUgYW5kIHRvbmUnXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGlkOiAnY3VzdG9tJyxcbiAgICAgICAgbGFiZWw6ICdUZWxsIE5vdmEuLi4nLFxuICAgICAgICBpY29uOiAnbWVzc2FnZS1jaXJjbGUnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0N1c3RvbSBpbnN0cnVjdGlvbiBmb3IgdHJhbnNmb3JtYXRpb24nXG4gICAgfVxuXTtcblxuZXhwb3J0IGNsYXNzIFNlbGVjdGlvbkNvbnRleHRNZW51IHtcbiAgICBwcml2YXRlIHNlbGVjdGlvbkVkaXRDb21tYW5kOiBTZWxlY3Rpb25FZGl0Q29tbWFuZDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGFwcDogQXBwLFxuICAgICAgICBwcml2YXRlIHBsdWdpbjogTm92YVBsdWdpblxuICAgICkge1xuICAgICAgICB0aGlzLnNlbGVjdGlvbkVkaXRDb21tYW5kID0gbmV3IFNlbGVjdGlvbkVkaXRDb21tYW5kKHBsdWdpbik7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVnaXN0ZXIgdGhlIGNvbnRleHQgbWVudSB3aXRoIE9ic2lkaWFuJ3MgZWRpdG9yXG4gICAgICovXG4gICAgcmVnaXN0ZXIoKTogdm9pZCB7XG4gICAgICAgIHRoaXMucGx1Z2luLnJlZ2lzdGVyRXZlbnQoXG4gICAgICAgICAgICB0aGlzLmFwcC53b3Jrc3BhY2Uub24oJ2VkaXRvci1tZW51JywgKG1lbnU6IE1lbnUsIGVkaXRvcjogRWRpdG9yKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGROb3ZhU3VibWVudShtZW51LCBlZGl0b3IpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgTm92YSBzdWJtZW51IHRvIHRoZSBjb250ZXh0IG1lbnUgaWYgdGV4dCBpcyBzZWxlY3RlZFxuICAgICAqL1xuICAgIHByaXZhdGUgYWRkTm92YVN1Ym1lbnUobWVudTogTWVudSwgZWRpdG9yOiBFZGl0b3IpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2VsZWN0ZWRUZXh0ID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgLy8gT25seSBzaG93IE5vdmEgc3VibWVudSB3aGVuIHRleHQgaXMgc2VsZWN0ZWRcbiAgICAgICAgaWYgKCFzZWxlY3RlZFRleHQgfHwgc2VsZWN0ZWRUZXh0LnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFkZCBzZXBhcmF0b3IgYmVmb3JlIE5vdmEgc3VibWVudSBmb3IgdmlzdWFsIGNsYXJpdHlcbiAgICAgICAgbWVudS5hZGRTZXBhcmF0b3IoKTtcblxuICAgICAgICAvLyBDcmVhdGUgTm92YSBhY3Rpb24gaXRlbXMgZGlyZWN0bHkgKG5vIHN0YW5kYWxvbmUgTm92YSBpdGVtKVxuICAgICAgICBTRUxFQ1RJT05fQUNUSU9OUy5mb3JFYWNoKGFjdGlvbiA9PiB7XG4gICAgICAgICAgICBtZW51LmFkZEl0ZW0oKGl0ZW06IE1lbnVJdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgaXRlbVxuICAgICAgICAgICAgICAgICAgICAuc2V0VGl0bGUoYE5vdmE6ICR7YWN0aW9uLmxhYmVsfWApXG4gICAgICAgICAgICAgICAgICAgIC5zZXRJY29uKGFjdGlvbi5pY29uIHx8ICdlZGl0JylcbiAgICAgICAgICAgICAgICAgICAgLm9uQ2xpY2soKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5oYW5kbGVTZWxlY3Rpb25BY3Rpb24oYWN0aW9uLmlkLCBlZGl0b3IsIHNlbGVjdGVkVGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIHNlbGVjdGlvbiBhY3Rpb24gd2hlbiBtZW51IGl0ZW0gaXMgY2xpY2tlZFxuICAgICAqL1xuICAgIHB1YmxpYyBhc3luYyBoYW5kbGVTZWxlY3Rpb25BY3Rpb24oYWN0aW9uSWQ6IHN0cmluZywgZWRpdG9yOiBFZGl0b3IsIHNlbGVjdGVkVGV4dDogc3RyaW5nLCBjdXN0b21JbnN0cnVjdGlvbj86IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gSGFuZGxlIHRvbmUgc2VsZWN0aW9uIHdpdGggbW9kYWwgKHdoZW4gbm8gc3BlY2lmaWMgdG9uZSBwcm92aWRlZClcbiAgICAgICAgICAgIGlmIChhY3Rpb25JZCA9PT0gJ3RvbmUnICYmICFjdXN0b21JbnN0cnVjdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd1RvbmVTZWxlY3Rpb25Nb2RhbChlZGl0b3IsIHNlbGVjdGVkVGV4dCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoYWN0aW9uSWQgPT09ICdjdXN0b20nICYmICFjdXN0b21JbnN0cnVjdGlvbikge1xuICAgICAgICAgICAgICAgIHRoaXMuc2hvd0N1c3RvbUluc3RydWN0aW9uTW9kYWwoZWRpdG9yLCBzZWxlY3RlZFRleHQpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRXhlY3V0ZSB0aGUgc2VsZWN0aW9uIGVkaXQgY29tbWFuZCBmb3Igb3RoZXIgYWN0aW9ucyBvciBkaXJlY3QgdG9uZS9jdXN0b20gY2FsbHNcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZXhlY3V0ZVNlbGVjdGlvbkVkaXQoYWN0aW9uSWQsIGVkaXRvciwgc2VsZWN0ZWRUZXh0LCBjdXN0b21JbnN0cnVjdGlvbik7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBleGVjdXRpbmcgTm92YSBzZWxlY3Rpb24gYWN0aW9uOicsIGVycm9yKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0ZhaWxlZCB0byBleGVjdXRlIE5vdmEgYWN0aW9uLiBQbGVhc2UgdHJ5IGFnYWluLicsIDMwMDApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2hvdyB0b25lIHNlbGVjdGlvbiBtb2RhbFxuICAgICAqL1xuICAgIHByaXZhdGUgc2hvd1RvbmVTZWxlY3Rpb25Nb2RhbChlZGl0b3I6IEVkaXRvciwgc2VsZWN0ZWRUZXh0OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbW9kYWwgPSBuZXcgVG9uZVNlbGVjdGlvbk1vZGFsKFxuICAgICAgICAgICAgdGhpcy5hcHAsXG4gICAgICAgICAgICBhc3luYyAoc2VsZWN0ZWRUb25lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBFeGVjdXRlIHRvbmUgY2hhbmdlIHdpdGggdGhlIHNlbGVjdGVkIHRvbmVcbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmV4ZWN1dGVTZWxlY3Rpb25FZGl0KCd0b25lJywgZWRpdG9yLCBzZWxlY3RlZFRleHQsIHNlbGVjdGVkVG9uZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgICAgIC8vIFVzZXIgY2FuY2VsbGVkLCBkbyBub3RoaW5nXG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICAgIG1vZGFsLm9wZW4oKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTaG93IGN1c3RvbSBpbnN0cnVjdGlvbiBtb2RhbFxuICAgICAqL1xuICAgIHByaXZhdGUgc2hvd0N1c3RvbUluc3RydWN0aW9uTW9kYWwoZWRpdG9yOiBFZGl0b3IsIHNlbGVjdGVkVGV4dDogc3RyaW5nKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG1vZGFsID0gbmV3IEN1c3RvbUluc3RydWN0aW9uTW9kYWwoXG4gICAgICAgICAgICB0aGlzLmFwcCxcbiAgICAgICAgICAgIGFzeW5jIChpbnN0cnVjdGlvbjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICAgICAgLy8gRXhlY3V0ZSBjdXN0b20gdHJhbnNmb3JtYXRpb24gd2l0aCB0aGUgaW5zdHJ1Y3Rpb25cbiAgICAgICAgICAgICAgICBhd2FpdCB0aGlzLmV4ZWN1dGVTZWxlY3Rpb25FZGl0KCdjdXN0b20nLCBlZGl0b3IsIHNlbGVjdGVkVGV4dCwgaW5zdHJ1Y3Rpb24pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgICAgICAvLyBVc2VyIGNhbmNlbGxlZCwgZG8gbm90aGluZ1xuICAgICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgICBtb2RhbC5vcGVuKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSB0aGUgc2VsZWN0aW9uIGVkaXQgY29tbWFuZCB3aXRoIHN0cmVhbWluZ1xuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgZXhlY3V0ZVNlbGVjdGlvbkVkaXQoXG4gICAgICAgIGFjdGlvbklkOiBzdHJpbmcsIFxuICAgICAgICBlZGl0b3I6IEVkaXRvciwgXG4gICAgICAgIHNlbGVjdGVkVGV4dDogc3RyaW5nLCBcbiAgICAgICAgY3VzdG9tSW5zdHJ1Y3Rpb24/OiBzdHJpbmdcbiAgICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgLy8gU3RhcnQgc2VsZWN0aW9uIGFuaW1hdGlvblxuICAgICAgICB0aGlzLnN0YXJ0U2VsZWN0aW9uQW5pbWF0aW9uKGVkaXRvcik7XG4gICAgICAgIFxuICAgICAgICAvLyBTdG9yZSBvcmlnaW5hbCBzZWxlY3Rpb24gcmFuZ2VcbiAgICAgICAgY29uc3Qgb3JpZ2luYWxSYW5nZSA9IHtcbiAgICAgICAgICAgIGZyb206IGVkaXRvci5nZXRDdXJzb3IoJ2Zyb20nKSxcbiAgICAgICAgICAgIHRvOiBlZGl0b3IuZ2V0Q3Vyc29yKCd0bycpXG4gICAgICAgIH07XG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU2hvdyBOb3ZhIHRoaW5raW5nIGFuaW1hdGlvbiB3aGlsZSB3YWl0aW5nIGZvciBzdHJlYW1cbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2hvd1RoaW5raW5nQW5pbWF0aW9uKGVkaXRvciwgb3JpZ2luYWxSYW5nZS5mcm9tLCBvcmlnaW5hbFJhbmdlLnRvLCBhY3Rpb25JZCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVzZSBzdHJlYW1pbmcgdG8gcHJvZ3Jlc3NpdmVseSByZXBsYWNlIHRleHRcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuc2VsZWN0aW9uRWRpdENvbW1hbmQuZXhlY3V0ZVN0cmVhbWluZyhcbiAgICAgICAgICAgICAgICBhY3Rpb25JZCwgXG4gICAgICAgICAgICAgICAgZWRpdG9yLCBcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFRleHQsXG4gICAgICAgICAgICAgICAgKGNodW5rOiBzdHJpbmcsIGlzQ29tcGxldGU6IGJvb2xlYW4pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUHJvZ3Jlc3NpdmUgdGV4dCByZXBsYWNlbWVudCB3aXRoIHR5cGV3cml0ZXIgZWZmZWN0XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlU3RyZWFtaW5nVGV4dChlZGl0b3IsIGNodW5rLCBvcmlnaW5hbFJhbmdlLmZyb20sIGlzQ29tcGxldGUpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgY3VzdG9tSW5zdHJ1Y3Rpb25cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChyZXN1bHQuc3VjY2Vzcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbk5hbWUgPSB0aGlzLmdldEFjdGlvbkRpc3BsYXlOYW1lKGFjdGlvbklkKTtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBOb3ZhOiBUZXh0ICR7YWN0aW9uTmFtZX0gc3VjY2Vzc2Z1bGx5YCwgMjAwMCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQWRkIHN1Y2Nlc3MgbWVzc2FnZSB0byBjaGF0XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRTdWNjZXNzQ2hhdE1lc3NhZ2UoYWN0aW9uSWQsIHNlbGVjdGVkVGV4dCwgY3VzdG9tSW5zdHJ1Y3Rpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBuZXcgTm90aWNlKGBOb3ZhOiAke3Jlc3VsdC5lcnJvciB8fCAnRmFpbGVkIHRvIHByb2Nlc3MgdGV4dCd9YCwgMzAwMCk7XG4gICAgICAgICAgICAgICAgLy8gQWRkIGZhaWx1cmUgbWVzc2FnZSB0byBjaGF0XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRGYWlsdXJlQ2hhdE1lc3NhZ2UoYWN0aW9uSWQsIHJlc3VsdC5lcnJvciB8fCAnRmFpbGVkIHRvIHByb2Nlc3MgdGV4dCcpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIFJlc3RvcmUgb3JpZ2luYWwgdGV4dCB3aGVuIHN0cmVhbWluZyBmYWlsc1xuICAgICAgICAgICAgICAgIHRoaXMucmVzdG9yZU9yaWdpbmFsVGV4dChlZGl0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gc3RyZWFtaW5nIHNlbGVjdGlvbiBlZGl0OicsIGVycm9yKTtcbiAgICAgICAgICAgIG5ldyBOb3RpY2UoJ0ZhaWxlZCB0byBleGVjdXRlIE5vdmEgYWN0aW9uLiBQbGVhc2UgdHJ5IGFnYWluLicsIDMwMDApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZXN0b3JlIG9yaWdpbmFsIHRleHQgb24gY29tcGxldGUgZmFpbHVyZVxuICAgICAgICAgICAgdGhpcy5yZXN0b3JlT3JpZ2luYWxUZXh0KGVkaXRvcik7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAvLyBBbHdheXMgc3RvcCBhbmltYXRpb25zIGFuZCBjbGVhbiB1cFxuICAgICAgICAgICAgdGhpcy5zdG9wU2VsZWN0aW9uQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICB0aGlzLnN0b3BEb3RzQW5pbWF0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBVcGRhdGUgdGV4dCB3aXRoIHN0cmVhbWluZyBlZmZlY3RcbiAgICAgKi9cbiAgICBwcml2YXRlIGN1cnJlbnRTdHJlYW1pbmdFbmRQb3M6IGFueSA9IG51bGw7XG4gICAgcHJpdmF0ZSBzdHJlYW1pbmdUZXh0Q29udGFpbmVyOiBIVE1MU3BhbkVsZW1lbnQgfCBudWxsID0gbnVsbDtcblxuICAgIHByaXZhdGUgc3RyZWFtaW5nU3RhcnRQb3M6IGFueSA9IG51bGw7XG5cbiAgICBwcml2YXRlIHVwZGF0ZVN0cmVhbWluZ1RleHQoXG4gICAgICAgIGVkaXRvcjogRWRpdG9yLCBcbiAgICAgICAgbmV3VGV4dDogc3RyaW5nLCBcbiAgICAgICAgc3RhcnRQb3M6IGFueSwgXG4gICAgICAgIGlzQ29tcGxldGU6IGJvb2xlYW5cbiAgICApOiB2b2lkIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRTdHJlYW1pbmdFbmRQb3MpIHtcbiAgICAgICAgICAgICAgICAvLyBTdG9wIHRoZSBub3RpY2UgYW5pbWF0aW9uIHNpbmNlIHN0cmVhbWluZyBpcyBzdGFydGluZyAob25seSBvbiBmaXJzdCBjaHVuaylcbiAgICAgICAgICAgICAgICBpZiAodGhpcy50aGlua2luZ05vdGljZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0b3BEb3RzQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIE9uIGZpcnN0IGNodW5rLCBzZXQgdGhlIHN0YXJ0IHBvc2l0aW9uIHRvIGN1cnJlbnQgc3RyZWFtaW5nIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLnN0cmVhbWluZ1N0YXJ0UG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc3RyZWFtaW5nU3RhcnRQb3MgPSB7IC4uLnRoaXMuY3VycmVudFN0cmVhbWluZ0VuZFBvcyB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBPbmx5IHVwZGF0ZSBpZiB3ZSBoYXZlIGFjdHVhbCBjb250ZW50XG4gICAgICAgICAgICAgICAgaWYgKG5ld1RleHQudHJpbSgpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2FsY3VsYXRlIG5ldyBlbmQgcG9zaXRpb24gYmFzZWQgb24gdGhlIGNvbXBsZXRlIG5ldyB0ZXh0IGZyb20gc3RhcnQgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZXMgPSBuZXdUZXh0LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbmV3RW5kUG9zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGluZTogdGhpcy5zdHJlYW1pbmdTdGFydFBvcy5saW5lICsgbGluZXMubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoOiBsaW5lcy5sZW5ndGggPiAxID8gbGluZXNbbGluZXMubGVuZ3RoIC0gMV0ubGVuZ3RoIDogdGhpcy5zdHJlYW1pbmdTdGFydFBvcy5jaCArIG5ld1RleHQubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gUmVwbGFjZSBjb250ZW50IGZyb20gc3RhcnQgcG9zaXRpb24gdG8gY3VycmVudCBlbmQgcG9zaXRpb24gd2l0aCBuZXcgdGV4dFxuICAgICAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVJhbmdlKG5ld1RleHQsIHRoaXMuc3RyZWFtaW5nU3RhcnRQb3MsIHRoaXMuY3VycmVudFN0cmVhbWluZ0VuZFBvcyk7XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyBVcGRhdGUgdGhlIGVuZCBwb3NpdGlvbiBmb3IgbmV4dCBjaHVua1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRTdHJlYW1pbmdFbmRQb3MgPSBuZXdFbmRQb3M7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTZXQgY3Vyc29yIGF0IHRoZSBlbmQgb2YgdGhlIG5ldyB0ZXh0IG9ubHkgd2hlbiBjb21wbGV0ZVxuICAgICAgICAgICAgaWYgKGlzQ29tcGxldGUpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50U3RyZWFtaW5nRW5kUG9zKSB7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3IodGhpcy5jdXJyZW50U3RyZWFtaW5nRW5kUG9zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gUmVzZXQgZm9yIG5leHQgdXNlXG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50U3RyZWFtaW5nRW5kUG9zID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLnN0cmVhbWluZ1N0YXJ0UG9zID0gbnVsbDtcbiAgICAgICAgICAgICAgICB0aGlzLm9yaWdpbmFsU2VsZWN0aW9uUmFuZ2UgPSBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdFcnJvciB1cGRhdGluZyBzdHJlYW1pbmcgdGV4dDonLCBlcnJvcik7XG4gICAgICAgICAgICAvLyBPbiBlcnJvciwgdHJ5IHRvIHJlc3RvcmUgb3JpZ2luYWwgdGV4dCBpZiB3ZSBoYXZlIGl0XG4gICAgICAgICAgICBpZiAodGhpcy5vcmlnaW5hbFNlbGVjdGlvblJhbmdlICYmIHRoaXMub3JpZ2luYWxTZWxlY3Rpb25SYW5nZS50ZXh0KSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVzdG9yZSB0aGUgb3JpZ2luYWwgdGV4dCBhdCB0aGUgc3RhcnQgcG9zaXRpb25cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzdG9yZVBvcyA9IHRoaXMuc3RyZWFtaW5nU3RhcnRQb3MgfHwgdGhpcy5jdXJyZW50U3RyZWFtaW5nRW5kUG9zO1xuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdG9yZVBvcykge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZSh0aGlzLm9yaWdpbmFsU2VsZWN0aW9uUmFuZ2UudGV4dCwgcmVzdG9yZVBvcywgdGhpcy5jdXJyZW50U3RyZWFtaW5nRW5kUG9zIHx8IHJlc3RvcmVQb3MpO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUG9zaXRpb24gY3Vyc29yIGFmdGVyIHJlc3RvcmVkIHRleHRcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpbmVzID0gdGhpcy5vcmlnaW5hbFNlbGVjdGlvblJhbmdlLnRleHQuc3BsaXQoJ1xcbicpO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5kUG9zID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IHJlc3RvcmVQb3MubGluZSArIGxpbmVzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2g6IGxpbmVzLmxlbmd0aCA+IDEgPyBsaW5lc1tsaW5lcy5sZW5ndGggLSAxXS5sZW5ndGggOiByZXN0b3JlUG9zLmNoICsgdGhpcy5vcmlnaW5hbFNlbGVjdGlvblJhbmdlLnRleHQubGVuZ3RoXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcihlbmRQb3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBjYXRjaCAocmVzdG9yZUVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IHJlc3RvcmUgb3JpZ2luYWwgdGV4dDonLCByZXN0b3JlRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuY3VycmVudFN0cmVhbWluZ0VuZFBvcyA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLnN0cmVhbWluZ1N0YXJ0UG9zID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMub3JpZ2luYWxTZWxlY3Rpb25SYW5nZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXN0b3JlIG9yaWdpbmFsIHRleHQgaWYgc3RyZWFtaW5nIGZhaWxzIGNvbXBsZXRlbHlcbiAgICAgKi9cbiAgICBwcml2YXRlIHJlc3RvcmVPcmlnaW5hbFRleHQoZWRpdG9yOiBFZGl0b3IpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMub3JpZ2luYWxTZWxlY3Rpb25SYW5nZSAmJiB0aGlzLm9yaWdpbmFsU2VsZWN0aW9uUmFuZ2UudGV4dCkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBwb3NpdGlvbiB0byByZXN0b3JlIHRvIC0gZWl0aGVyIHdoZXJlIHN0cmVhbWluZyBzdGFydGVkIG9yIGN1cnJlbnQgcG9zaXRpb25cbiAgICAgICAgICAgICAgICBjb25zdCByZXN0b3JlUG9zID0gdGhpcy5zdHJlYW1pbmdTdGFydFBvcyB8fCB0aGlzLmN1cnJlbnRTdHJlYW1pbmdFbmRQb3MgfHwgdGhpcy5vcmlnaW5hbFNlbGVjdGlvblJhbmdlLmZyb207XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHJlc3RvcmVQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVwbGFjZSBhbnkgY29udGVudCBhdCBjdXJyZW50IHBvc2l0aW9uIHdpdGggb3JpZ2luYWwgdGV4dFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjdXJyZW50RW5kUG9zID0gdGhpcy5jdXJyZW50U3RyZWFtaW5nRW5kUG9zIHx8IHJlc3RvcmVQb3M7XG4gICAgICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UodGhpcy5vcmlnaW5hbFNlbGVjdGlvblJhbmdlLnRleHQsIHJlc3RvcmVQb3MsIGN1cnJlbnRFbmRQb3MpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gUG9zaXRpb24gY3Vyc29yIGFmdGVyIHJlc3RvcmVkIHRleHRcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGluZXMgPSB0aGlzLm9yaWdpbmFsU2VsZWN0aW9uUmFuZ2UudGV4dC5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuZFBvcyA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpbmU6IHJlc3RvcmVQb3MubGluZSArIGxpbmVzLmxlbmd0aCAtIDEsXG4gICAgICAgICAgICAgICAgICAgICAgICBjaDogbGluZXMubGVuZ3RoID4gMSA/IGxpbmVzW2xpbmVzLmxlbmd0aCAtIDFdLmxlbmd0aCA6IHJlc3RvcmVQb3MuY2ggKyB0aGlzLm9yaWdpbmFsU2VsZWN0aW9uUmFuZ2UudGV4dC5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgZWRpdG9yLnNldEN1cnNvcihlbmRQb3MpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKHJlc3RvcmVFcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignQ291bGQgbm90IHJlc3RvcmUgb3JpZ2luYWwgdGV4dCBhZnRlciBmYWlsdXJlOicsIHJlc3RvcmVFcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIENsZWFuIHVwIHN0YXRlXG4gICAgICAgIHRoaXMuY3VycmVudFN0cmVhbWluZ0VuZFBvcyA9IG51bGw7XG4gICAgICAgIHRoaXMuc3RyZWFtaW5nU3RhcnRQb3MgPSBudWxsO1xuICAgICAgICB0aGlzLm9yaWdpbmFsU2VsZWN0aW9uUmFuZ2UgPSBudWxsO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0YXJ0IHB1bHNpbmcgYW5pbWF0aW9uIG9uIHNlbGVjdGVkIHRleHRcbiAgICAgKi9cbiAgICBwcml2YXRlIHN0YXJ0U2VsZWN0aW9uQW5pbWF0aW9uKGVkaXRvcjogRWRpdG9yKTogdm9pZCB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBlZGl0b3IgY29udGFpbmVyIGluIHRoZSBET01cbiAgICAgICAgICAgIGNvbnN0IGVkaXRvckNvbnRhaW5lciA9IChlZGl0b3IgYXMgYW55KS5jbT8uZG9tIHx8IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jbS1lZGl0b3InKTtcbiAgICAgICAgICAgIGlmIChlZGl0b3JDb250YWluZXIpIHtcbiAgICAgICAgICAgICAgICBlZGl0b3JDb250YWluZXIuY2xhc3NMaXN0LmFkZCgnbm92YS1zZWxlY3Rpb24tcHJvY2Vzc2luZycpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBTdG9yZSB0aGUgb3JpZ2luYWwgc2VsZWN0aW9uIGZvciBsYXRlciBjbGVhbnVwXG4gICAgICAgICAgICBjb25zdCBzZWxlY3Rpb24gPSBlZGl0b3IuZ2V0U2VsZWN0aW9uKCk7XG4gICAgICAgICAgICBpZiAoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbmltYXRlZFNlbGVjdGlvbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgZnJvbTogZWRpdG9yLmdldEN1cnNvcignZnJvbScpLFxuICAgICAgICAgICAgICAgICAgICB0bzogZWRpdG9yLmdldEN1cnNvcigndG8nKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBzdGFydCBzZWxlY3Rpb24gYW5pbWF0aW9uOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFN0b3AgcHVsc2luZyBhbmltYXRpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIHN0b3BTZWxlY3Rpb25BbmltYXRpb24oKTogdm9pZCB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBSZW1vdmUgYW5pbWF0aW9uIGNsYXNzIGZyb20gYWxsIHBvc3NpYmxlIGVkaXRvciBlbGVtZW50c1xuICAgICAgICAgICAgY29uc3QgZWRpdG9yRWxlbWVudHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuQ29kZU1pcnJvciwgLmNtLWVkaXRvcicpO1xuICAgICAgICAgICAgZWRpdG9yRWxlbWVudHMuZm9yRWFjaChlbCA9PiB7XG4gICAgICAgICAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZSgnbm92YS1zZWxlY3Rpb24tcHJvY2Vzc2luZycpO1xuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgdGhpcy5hbmltYXRlZFNlbGVjdGlvbiA9IG51bGw7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBzdG9wIHNlbGVjdGlvbiBhbmltYXRpb246JywgZXJyb3IpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhbmltYXRlZFNlbGVjdGlvbjogeyBmcm9tOiBhbnk7IHRvOiBhbnkgfSB8IG51bGwgPSBudWxsO1xuXG4gICAgLy8gRHluYW1pYyB0aGlua2luZyBwaHJhc2VzIGZvciBlYWNoIGFjdGlvbiB0eXBlXG4gICAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgVEhJTktJTkdfUEhSQVNFUyA9IHtcbiAgICAgICAgJ2ltcHJvdmUnOiBbXG4gICAgICAgICAgICAncmVmaW5pbmcuLi4nLFxuICAgICAgICAgICAgJ3BvbGlzaGluZy4uLicsXG4gICAgICAgICAgICAnZW5oYW5jaW5nLi4uJyxcbiAgICAgICAgICAgICdjcmFmdGluZy4uLicsXG4gICAgICAgICAgICAncGVyZmVjdGluZy4uLicsXG4gICAgICAgICAgICAnc21vb3RoaW5nLi4uJyxcbiAgICAgICAgICAgICdzaGFycGVuaW5nLi4uJyxcbiAgICAgICAgICAgICdlbGV2YXRpbmcuLi4nLFxuICAgICAgICAgICAgJ2ZpbmUtdHVuaW5nLi4uJyxcbiAgICAgICAgICAgICdzY3VscHRpbmcuLi4nXG4gICAgICAgIF0sXG4gICAgICAgICdsb25nZXInOiBbXG4gICAgICAgICAgICAnZXhwYW5kaW5nLi4uJyxcbiAgICAgICAgICAgICdkZXZlbG9waW5nLi4uJyxcbiAgICAgICAgICAgICdlbGFib3JhdGluZy4uLicsXG4gICAgICAgICAgICAnYnVpbGRpbmcuLi4nLFxuICAgICAgICAgICAgJ2VucmljaGluZy4uLicsXG4gICAgICAgICAgICAnZGVlcGVuaW5nLi4uJyxcbiAgICAgICAgICAgICdncm93aW5nLi4uJyxcbiAgICAgICAgICAgICdleHRlbmRpbmcuLi4nLFxuICAgICAgICAgICAgJ2FtcGxpZnlpbmcuLi4nLFxuICAgICAgICAgICAgJ3VuZm9sZGluZy4uLidcbiAgICAgICAgXSxcbiAgICAgICAgJ3Nob3J0ZXInOiBbXG4gICAgICAgICAgICAnY29uZGVuc2luZy4uLicsXG4gICAgICAgICAgICAnZGlzdGlsbGluZy4uLicsXG4gICAgICAgICAgICAndGlnaHRlbmluZy4uLicsXG4gICAgICAgICAgICAnZm9jdXNpbmcuLi4nLFxuICAgICAgICAgICAgJ3N0cmVhbWxpbmluZy4uLicsXG4gICAgICAgICAgICAnY29tcHJlc3NpbmcuLi4nLFxuICAgICAgICAgICAgJ3RyaW1taW5nLi4uJyxcbiAgICAgICAgICAgICdjbGFyaWZ5aW5nLi4uJyxcbiAgICAgICAgICAgICdzaW1wbGlmeWluZy4uLicsXG4gICAgICAgICAgICAnY29uY2VudHJhdGluZy4uLidcbiAgICAgICAgXSxcbiAgICAgICAgJ3RvbmUnOiBbXG4gICAgICAgICAgICAnYWRqdXN0aW5nIHRvbmUuLi4nLFxuICAgICAgICAgICAgJ3Jlc2hhcGluZy4uLicsXG4gICAgICAgICAgICAncmVmcmFtaW5nLi4uJyxcbiAgICAgICAgICAgICdhZGFwdGluZy4uLicsXG4gICAgICAgICAgICAndHJhbnNmb3JtaW5nLi4uJyxcbiAgICAgICAgICAgICdtb2R1bGF0aW5nLi4uJyxcbiAgICAgICAgICAgICdyZWNhc3RpbmcuLi4nLFxuICAgICAgICAgICAgJ3NoaWZ0aW5nLi4uJyxcbiAgICAgICAgICAgICdyZWZvcm1pbmcuLi4nLFxuICAgICAgICAgICAgJ3JlaW1hZ2luaW5nLi4uJ1xuICAgICAgICBdLFxuICAgICAgICAnY3VzdG9tJzogW1xuICAgICAgICAgICAgJ3dvcmtpbmcgb24gaXQuLi4nLFxuICAgICAgICAgICAgJ2NvbnNpZGVyaW5nLi4uJyxcbiAgICAgICAgICAgICd0aGlua2luZy4uLicsXG4gICAgICAgICAgICAncHJvY2Vzc2luZy4uLicsXG4gICAgICAgICAgICAnYW5hbHl6aW5nLi4uJyxcbiAgICAgICAgICAgICdjb250ZW1wbGF0aW5nLi4uJyxcbiAgICAgICAgICAgICd1bmRlcnN0YW5kaW5nLi4uJyxcbiAgICAgICAgICAgICdpbnRlcnByZXRpbmcuLi4nLFxuICAgICAgICAgICAgJ2V4cGxvcmluZy4uLicsXG4gICAgICAgICAgICAnZXZhbHVhdGluZy4uLidcbiAgICAgICAgXVxuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBTaG93IE5vdmEgdGhpbmtpbmcgYW5pbWF0aW9uIHdpdGggbm90aWNlICsgZG9jdW1lbnQgcGxhY2Vob2xkZXJcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIHNob3dUaGlua2luZ0FuaW1hdGlvbihlZGl0b3I6IEVkaXRvciwgc3RhcnRQb3M6IGFueSwgZW5kUG9zOiBhbnksIGFjdGlvbklkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFNlbGVjdCByYW5kb20gcGhyYXNlIGJhc2VkIG9uIGFjdGlvbiB0eXBlXG4gICAgICAgICAgICBjb25zdCBwaHJhc2VzID0gU2VsZWN0aW9uQ29udGV4dE1lbnUuVEhJTktJTkdfUEhSQVNFU1thY3Rpb25JZCBhcyBrZXlvZiB0eXBlb2YgU2VsZWN0aW9uQ29udGV4dE1lbnUuVEhJTktJTkdfUEhSQVNFU10gfHwgU2VsZWN0aW9uQ29udGV4dE1lbnUuVEhJTktJTkdfUEhSQVNFU1snY3VzdG9tJ107XG4gICAgICAgICAgICBjb25zdCByYW5kb21QaHJhc2UgPSBwaHJhc2VzW01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBocmFzZXMubGVuZ3RoKV07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNob3cgdGhpbmtpbmcgbm90aWNlIGZvciB1c2VyIGZlZWRiYWNrXG4gICAgICAgICAgICB0aGlzLnNob3dUaGlua2luZ05vdGljZShyYW5kb21QaHJhc2UpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTdG9yZSBvcmlnaW5hbCB0ZXh0IGJlZm9yZSBjbGVhcmluZyBpdCAoZm9yIGVycm9yIHJlY292ZXJ5KVxuICAgICAgICAgICAgY29uc3Qgb3JpZ2luYWxUZXh0ID0gZWRpdG9yLmdldFJhbmdlKHN0YXJ0UG9zLCBlbmRQb3MpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDbGVhciB0aGUgc2VsZWN0aW9uIGluIGRvY3VtZW50IHRvIGNyZWF0ZSBjbGVhbiBzdHJlYW1pbmcgcG9zaXRpb25cbiAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlUmFuZ2UoJycsIHN0YXJ0UG9zLCBlbmRQb3MpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTZXQgc3RyZWFtaW5nIHBvc2l0aW9uIHRvIHdoZXJlIHNlbGVjdGlvbiB3YXMgY2xlYXJlZFxuICAgICAgICAgICAgdGhpcy5jdXJyZW50U3RyZWFtaW5nRW5kUG9zID0gc3RhcnRQb3M7XG4gICAgICAgICAgICB0aGlzLm9yaWdpbmFsU2VsZWN0aW9uUmFuZ2UgPSB7IFxuICAgICAgICAgICAgICAgIGZyb206IHN0YXJ0UG9zLCBcbiAgICAgICAgICAgICAgICB0bzogZW5kUG9zLCBcbiAgICAgICAgICAgICAgICB0ZXh0OiBvcmlnaW5hbFRleHQgIC8vIFN0b3JlIG9yaWdpbmFsIHRleHQgZm9yIHJlc3RvcmF0aW9uXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBzaG93IHRoaW5raW5nIGFuaW1hdGlvbjonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGRvdHNBbmltYXRpb25JbnRlcnZhbDogTm9kZUpTLlRpbWVvdXQgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIHRoaW5raW5nTm90aWNlOiBOb3RpY2UgfCBudWxsID0gbnVsbDtcbiAgICBwcml2YXRlIG9yaWdpbmFsU2VsZWN0aW9uUmFuZ2U6IHsgZnJvbTogYW55OyB0bzogYW55OyB0ZXh0Pzogc3RyaW5nIH0gfCBudWxsID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFNob3cgdGhpbmtpbmcgbm90aWNlIHdpdGggYW5pbWF0ZWQgZG90c1xuICAgICAqL1xuICAgIHByaXZhdGUgc2hvd1RoaW5raW5nTm90aWNlKGJhc2VQaHJhc2U6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gQ3JlYXRlIHBlcnNpc3RlbnQgbm90aWNlICgwIHRpbWVvdXQgPSBtYW51YWwgZGlzbWlzc2FsKVxuICAgICAgICAgICAgdGhpcy50aGlua2luZ05vdGljZSA9IG5ldyBOb3RpY2UoYE5vdmE6ICR7YmFzZVBocmFzZX0uYCwgMCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNob3cgaW5pdGlhbCBzdGF0ZSB3aXRoIDEgZG90IGltbWVkaWF0ZWx5XG4gICAgICAgICAgICBjb25zdCBpbml0aWFsTm90aWNlVGV4dCA9IGBOb3ZhOiAke2Jhc2VQaHJhc2V9LmA7XG4gICAgICAgICAgICBjb25zdCBub3RpY2VFbCA9ICh0aGlzLnRoaW5raW5nTm90aWNlIGFzIGFueSkubm90aWNlRWw7XG4gICAgICAgICAgICBpZiAobm90aWNlRWwpIHtcbiAgICAgICAgICAgICAgICBub3RpY2VFbC50ZXh0Q29udGVudCA9IGluaXRpYWxOb3RpY2VUZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTdGFydCBkb3RzIGFuaW1hdGlvbiBpbiBub3RpY2VcbiAgICAgICAgICAgIHRoaXMuc3RhcnROb3RpY2VEb3RzQW5pbWF0aW9uKGJhc2VQaHJhc2UpO1xuICAgICAgICAgICAgXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0ZhaWxlZCB0byBjcmVhdGUgdGhpbmtpbmcgbm90aWNlOicsIGVycm9yKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFuaW1hdGUgZG90cyBpbiBub3RpY2UgdGV4dFxuICAgICAqL1xuICAgIHByaXZhdGUgc3RhcnROb3RpY2VEb3RzQW5pbWF0aW9uKGJhc2VQaHJhc2U6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBsZXQgZG90Q291bnQgPSAxO1xuICAgICAgICBcbiAgICAgICAgdGhpcy5kb3RzQW5pbWF0aW9uSW50ZXJ2YWwgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghdGhpcy50aGlua2luZ05vdGljZSkgcmV0dXJuO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGRvdENvdW50Kys7XG4gICAgICAgICAgICAgICAgaWYgKGRvdENvdW50ID4gNSkge1xuICAgICAgICAgICAgICAgICAgICBkb3RDb3VudCA9IDE7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGRvdHMgPSAnLicucmVwZWF0KGRvdENvdW50KTtcbiAgICAgICAgICAgICAgICBjb25zdCBub3RpY2VUZXh0ID0gYE5vdmE6ICR7YmFzZVBocmFzZX0ke2RvdHN9YDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBVcGRhdGUgbm90aWNlIHRleHQgZGlyZWN0bHlcbiAgICAgICAgICAgICAgICBjb25zdCBub3RpY2VFbCA9ICh0aGlzLnRoaW5raW5nTm90aWNlIGFzIGFueSkubm90aWNlRWw7XG4gICAgICAgICAgICAgICAgaWYgKG5vdGljZUVsKSB7XG4gICAgICAgICAgICAgICAgICAgIG5vdGljZUVsLnRleHRDb250ZW50ID0gbm90aWNlVGV4dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignRXJyb3IgaW4gbm90aWNlIGRvdHMgYW5pbWF0aW9uOicsIGVycm9yKTtcbiAgICAgICAgICAgICAgICB0aGlzLnN0b3BEb3RzQW5pbWF0aW9uKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDQwMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcCB0aGUgZG90cyBhbmltYXRpb24gYW5kIGRpc21pc3Mgbm90aWNlXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdG9wRG90c0FuaW1hdGlvbigpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZG90c0FuaW1hdGlvbkludGVydmFsKSB7XG4gICAgICAgICAgICBjbGVhckludGVydmFsKHRoaXMuZG90c0FuaW1hdGlvbkludGVydmFsKTtcbiAgICAgICAgICAgIHRoaXMuZG90c0FuaW1hdGlvbkludGVydmFsID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRGlzbWlzcyB0aGlua2luZyBub3RpY2VcbiAgICAgICAgaWYgKHRoaXMudGhpbmtpbmdOb3RpY2UpIHtcbiAgICAgICAgICAgIHRoaXMudGhpbmtpbmdOb3RpY2UuaGlkZSgpO1xuICAgICAgICAgICAgdGhpcy50aGlua2luZ05vdGljZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cblxuICAgIC8qKlxuICAgICAqIEdldCBkaXNwbGF5IG5hbWUgZm9yIGFjdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0QWN0aW9uRGlzcGxheU5hbWUoYWN0aW9uSWQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uSWQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2ltcHJvdmUnOiByZXR1cm4gJ2ltcHJvdmVkJztcbiAgICAgICAgICAgIGNhc2UgJ2xvbmdlcic6IHJldHVybiAnZXhwYW5kZWQnO1xuICAgICAgICAgICAgY2FzZSAnc2hvcnRlcic6IHJldHVybiAnY29uZGVuc2VkJztcbiAgICAgICAgICAgIGNhc2UgJ3RvbmUnOiByZXR1cm4gJ3RvbmUgYWRqdXN0ZWQnO1xuICAgICAgICAgICAgY2FzZSAnY3VzdG9tJzogcmV0dXJuICd0cmFuc2Zvcm1lZCc7XG4gICAgICAgICAgICBkZWZhdWx0OiByZXR1cm4gJ3Byb2Nlc3NlZCc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgc3VjY2VzcyBtZXNzYWdlIHRvIGNoYXQgdXNpbmcgdW5pZmllZCBzeXN0ZW1cbiAgICAgKi9cbiAgICBwcml2YXRlIGFkZFN1Y2Nlc3NDaGF0TWVzc2FnZShhY3Rpb25JZDogc3RyaW5nLCBvcmlnaW5hbFRleHQ6IHN0cmluZywgY3VzdG9tSW5zdHJ1Y3Rpb24/OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEZpbmQgdGhlIGFjdGl2ZSBOb3ZhIHNpZGViYXIgdmlldyBhbmQgYWRkIG1lc3NhZ2UgdG8gY2hhdFxuICAgICAgICAgICAgY29uc3QgbGVhdmVzID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZSgnbm92YS1zaWRlYmFyJyk7XG4gICAgICAgICAgICBpZiAobGVhdmVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzaWRlYmFyVmlldyA9IGxlYXZlc1swXS52aWV3IGFzIGFueTtcbiAgICAgICAgICAgICAgICBpZiAoc2lkZWJhclZpZXc/LmNoYXRSZW5kZXJlcikge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhY3Rpb25EZXNjcmlwdGlvbiA9IHRoaXMuZ2V0QWN0aW9uRGVzY3JpcHRpb24oYWN0aW9uSWQsIGN1c3RvbUluc3RydWN0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJ1bmNhdGVkVGV4dCA9IG9yaWdpbmFsVGV4dC5sZW5ndGggPiA1MCBcbiAgICAgICAgICAgICAgICAgICAgICAgID8gb3JpZ2luYWxUZXh0LnN1YnN0cmluZygwLCA1MCkgKyAnLi4uJyBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogb3JpZ2luYWxUZXh0O1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBcdTI3MTMgJHthY3Rpb25EZXNjcmlwdGlvbn0gdGV4dDogXCIke3RydW5jYXRlZFRleHR9XCJgO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHVuaWZpZWQgc3lzdGVtIHdpdGggcGVyc2lzdGVuY2VcbiAgICAgICAgICAgICAgICAgICAgc2lkZWJhclZpZXcuY2hhdFJlbmRlcmVyLmFkZFN1Y2Nlc3NNZXNzYWdlKG1lc3NhZ2UsIHRydWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGFkZCBzdWNjZXNzIGNoYXQgbWVzc2FnZTonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgZmFpbHVyZSBtZXNzYWdlIHRvIGNoYXQgdXNpbmcgdW5pZmllZCBzeXN0ZW1cbiAgICAgKi9cbiAgICBwcml2YXRlIGFkZEZhaWx1cmVDaGF0TWVzc2FnZShhY3Rpb25JZDogc3RyaW5nLCBlcnJvck1lc3NhZ2U6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gRmluZCB0aGUgYWN0aXZlIE5vdmEgc2lkZWJhciB2aWV3IGFuZCBhZGQgbWVzc2FnZSB0byBjaGF0XG4gICAgICAgICAgICBjb25zdCBsZWF2ZXMgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0TGVhdmVzT2ZUeXBlKCdub3ZhLXNpZGViYXInKTtcbiAgICAgICAgICAgIGlmIChsZWF2ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNpZGViYXJWaWV3ID0gbGVhdmVzWzBdLnZpZXcgYXMgYW55O1xuICAgICAgICAgICAgICAgIGlmIChzaWRlYmFyVmlldz8uY2hhdFJlbmRlcmVyKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFjdGlvbk5hbWUgPSB0aGlzLmdldEFjdGlvbkRpc3BsYXlOYW1lKGFjdGlvbklkKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBcdTI3MTcgRmFpbGVkIHRvICR7YWN0aW9uTmFtZS5yZXBsYWNlKCdlZCcsICcnKX0gdGV4dDogJHtlcnJvck1lc3NhZ2V9YDtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIFVzZSB1bmlmaWVkIHN5c3RlbSB3aXRoIHBlcnNpc3RlbmNlXG4gICAgICAgICAgICAgICAgICAgIHNpZGViYXJWaWV3LmNoYXRSZW5kZXJlci5hZGRFcnJvck1lc3NhZ2UobWVzc2FnZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKCdGYWlsZWQgdG8gYWRkIGVycm9yIGNoYXQgbWVzc2FnZTonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgZGV0YWlsZWQgYWN0aW9uIGRlc2NyaXB0aW9uIGZvciBjaGF0XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRBY3Rpb25EZXNjcmlwdGlvbihhY3Rpb25JZDogc3RyaW5nLCBjdXN0b21JbnN0cnVjdGlvbj86IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHN3aXRjaCAoYWN0aW9uSWQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2ltcHJvdmUnOiByZXR1cm4gJ0ltcHJvdmVkJztcbiAgICAgICAgICAgIGNhc2UgJ2xvbmdlcic6IHJldHVybiAnRXhwYW5kZWQnO1xuICAgICAgICAgICAgY2FzZSAnc2hvcnRlcic6IHJldHVybiAnQ29uZGVuc2VkJztcbiAgICAgICAgICAgIGNhc2UgJ3RvbmUnOiByZXR1cm4gYENoYW5nZWQgdG9uZSB0byAke2N1c3RvbUluc3RydWN0aW9uIHx8ICdmb3JtYWwnfWA7XG4gICAgICAgICAgICBjYXNlICdjdXN0b20nOiByZXR1cm4gYEFwcGxpZWQgXCIke2N1c3RvbUluc3RydWN0aW9ufVwiYDtcbiAgICAgICAgICAgIGRlZmF1bHQ6IHJldHVybiAnUHJvY2Vzc2VkJztcbiAgICAgICAgfVxuICAgIH1cbn0iLCAiLyoqXG4gKiBTZWxlY3Rpb24tYmFzZWQgZWRpdGluZyBjb21tYW5kIGhhbmRsZXIgZm9yIE5vdmFcbiAqIFByb2Nlc3NlcyBBSSB0cmFuc2Zvcm1hdGlvbnMgb24gc2VsZWN0ZWQgdGV4dFxuICovXG5cbmltcG9ydCB7IEVkaXRvciwgRWRpdG9yUG9zaXRpb24sIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCBOb3ZhUGx1Z2luIGZyb20gJy4uLy4uLy4uL21haW4nO1xuaW1wb3J0IHsgQUlQcm92aWRlciB9IGZyb20gJy4uLy4uL2FpL3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBTZWxlY3Rpb25FZGl0UmVzdWx0IHtcbiAgICBzdWNjZXNzOiBib29sZWFuO1xuICAgIHRyYW5zZm9ybWVkVGV4dD86IHN0cmluZztcbiAgICBlcnJvcj86IHN0cmluZztcbiAgICBvcmlnaW5hbFJhbmdlPzoge1xuICAgICAgICBmcm9tOiBFZGl0b3JQb3NpdGlvbjtcbiAgICAgICAgdG86IEVkaXRvclBvc2l0aW9uO1xuICAgIH07XG59XG5cbmV4cG9ydCBjbGFzcyBTZWxlY3Rpb25FZGl0Q29tbWFuZCB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBwbHVnaW46IE5vdmFQbHVnaW4pIHt9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGEgc2VsZWN0aW9uLWJhc2VkIGVkaXQgYWN0aW9uXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZShhY3Rpb246IHN0cmluZywgZWRpdG9yOiBFZGl0b3IsIHNlbGVjdGVkVGV4dDogc3RyaW5nLCBjdXN0b21JbnN0cnVjdGlvbj86IHN0cmluZyk6IFByb21pc2U8U2VsZWN0aW9uRWRpdFJlc3VsdD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gR2V0IHNlbGVjdGlvbiByYW5nZSBmb3IgbGF0ZXIgcmVwbGFjZW1lbnRcbiAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvblJhbmdlID0ge1xuICAgICAgICAgICAgICAgIGZyb206IGVkaXRvci5nZXRDdXJzb3IoJ2Zyb20nKSxcbiAgICAgICAgICAgICAgICB0bzogZWRpdG9yLmdldEN1cnNvcigndG8nKVxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLy8gU2hvdyBsb2FkaW5nIGluZGljYXRvclxuICAgICAgICAgICAgY29uc3QgbG9hZGluZ05vdGljZSA9IG5ldyBOb3RpY2UoJ05vdmEgaXMgcHJvY2Vzc2luZyB5b3VyIHJlcXVlc3QuLi4nLCAwKTtcblxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgcHJvbXB0IGJhc2VkIG9uIGFjdGlvblxuICAgICAgICAgICAgY29uc3QgcHJvbXB0ID0gdGhpcy5idWlsZFByb21wdChhY3Rpb24sIHNlbGVjdGVkVGV4dCwgY3VzdG9tSW5zdHJ1Y3Rpb24pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBHZXQgQUkgcmVzcG9uc2UgdXNpbmcgdGhlIHByb3ZpZGVyIG1hbmFnZXJcbiAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wbHVnaW4uYWlQcm92aWRlck1hbmFnZXIuY29tcGxldGUoXG4gICAgICAgICAgICAgICAgcHJvbXB0LnN5c3RlbVByb21wdCxcbiAgICAgICAgICAgICAgICBwcm9tcHQudXNlclByb21wdFxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgbG9hZGluZ05vdGljZS5oaWRlKCk7XG5cbiAgICAgICAgICAgIC8vIENsZWFuIHVwIEFJIHJlc3BvbnNlIChyZW1vdmUgYW55IGV4cGxhbmF0aW9uIHRleHQpXG4gICAgICAgICAgICBjb25zdCB0cmFuc2Zvcm1lZFRleHQgPSB0aGlzLmNsZWFuQUlSZXNwb25zZShyZXNwb25zZSk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm1lZFRleHQsXG4gICAgICAgICAgICAgICAgb3JpZ2luYWxSYW5nZTogc2VsZWN0aW9uUmFuZ2VcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1NlbGVjdGlvbiBlZGl0IGNvbW1hbmQgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvciBvY2N1cnJlZCdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGEgc2VsZWN0aW9uLWJhc2VkIGVkaXQgYWN0aW9uIHdpdGggc3RyZWFtaW5nXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZVN0cmVhbWluZyhcbiAgICAgICAgYWN0aW9uOiBzdHJpbmcsIFxuICAgICAgICBlZGl0b3I6IEVkaXRvciwgXG4gICAgICAgIHNlbGVjdGVkVGV4dDogc3RyaW5nLCBcbiAgICAgICAgb25DaHVuazogKGNodW5rOiBzdHJpbmcsIGlzQ29tcGxldGU6IGJvb2xlYW4pID0+IHZvaWQsXG4gICAgICAgIGN1c3RvbUluc3RydWN0aW9uPzogc3RyaW5nXG4gICAgKTogUHJvbWlzZTxTZWxlY3Rpb25FZGl0UmVzdWx0PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBHZXQgc2VsZWN0aW9uIHJhbmdlIGZvciBsYXRlciByZXBsYWNlbWVudFxuICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uUmFuZ2UgPSB7XG4gICAgICAgICAgICAgICAgZnJvbTogZWRpdG9yLmdldEN1cnNvcignZnJvbScpLFxuICAgICAgICAgICAgICAgIHRvOiBlZGl0b3IuZ2V0Q3Vyc29yKCd0bycpXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBwcm9tcHQgYmFzZWQgb24gYWN0aW9uXG4gICAgICAgICAgICBjb25zdCBwcm9tcHQgPSB0aGlzLmJ1aWxkUHJvbXB0KGFjdGlvbiwgc2VsZWN0ZWRUZXh0LCBjdXN0b21JbnN0cnVjdGlvbik7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFkZCAxLXNlY29uZCBtaW5pbXVtIGRlbGF5IHRvIGd1YXJhbnRlZSB0aGlua2luZyBhbmltYXRpb24gdmlzaWJpbGl0eVxuICAgICAgICAgICAgYXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDEwMDApKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgbGV0IGZ1bGxSZXNwb25zZSA9ICcnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTdHJlYW0gQUkgcmVzcG9uc2VcbiAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMucGx1Z2luLmFpUHJvdmlkZXJNYW5hZ2VyLmdlbmVyYXRlVGV4dFN0cmVhbShwcm9tcHQudXNlclByb21wdCwge1xuICAgICAgICAgICAgICAgIHN5c3RlbVByb21wdDogcHJvbXB0LnN5c3RlbVByb21wdFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNodW5rLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihjaHVuay5lcnJvcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGZ1bGxSZXNwb25zZSArPSBjaHVuay5jb250ZW50O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIE9ubHkgY2FsbCBvbkNodW5rIGlmIHdlIGhhdmUgY29udGVudCBvciBpZiBpdCdzIHRoZSBmaW5hbCBjaHVua1xuICAgICAgICAgICAgICAgIGlmIChmdWxsUmVzcG9uc2UudHJpbSgpLmxlbmd0aCA+IDAgfHwgY2h1bmsuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjbGVhbmVkQ2h1bmsgPSB0aGlzLmNsZWFuQUlSZXNwb25zZShmdWxsUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgICAgICBvbkNodW5rKGNsZWFuZWRDaHVuaywgY2h1bmsuZG9uZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGlmIChjaHVuay5kb25lKSB7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBBZGQgc21hbGwgZGVsYXkgdG8gc2xvdyBkb3duIHN0cmVhbWluZyBmb3IgYmV0dGVyIHZpc3VhbCBlZmZlY3RcbiAgICAgICAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgNTApKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgd2UgYWN0dWFsbHkgZ290IGEgcmVzcG9uc2VcbiAgICAgICAgICAgIGNvbnN0IGZpbmFsVGV4dCA9IHRoaXMuY2xlYW5BSVJlc3BvbnNlKGZ1bGxSZXNwb25zZSk7XG4gICAgICAgICAgICBpZiAoIWZpbmFsVGV4dC50cmltKCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICdBSSBwcm92aWRlciByZXR1cm5lZCBlbXB0eSByZXNwb25zZScsXG4gICAgICAgICAgICAgICAgICAgIG9yaWdpbmFsUmFuZ2U6IHNlbGVjdGlvblJhbmdlXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybWVkVGV4dDogZmluYWxUZXh0LFxuICAgICAgICAgICAgICAgIG9yaWdpbmFsUmFuZ2U6IHNlbGVjdGlvblJhbmdlXG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdTZWxlY3Rpb24gZWRpdCBzdHJlYW1pbmcgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvciBvY2N1cnJlZCdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBwcm9tcHQgZm9yIHRoZSBBSSBiYXNlZCBvbiB0aGUgYWN0aW9uIHR5cGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGJ1aWxkUHJvbXB0KGFjdGlvbjogc3RyaW5nLCBzZWxlY3RlZFRleHQ6IHN0cmluZywgY3VzdG9tSW5zdHJ1Y3Rpb24/OiBzdHJpbmcpOiB7XG4gICAgICAgIHN5c3RlbVByb21wdDogc3RyaW5nO1xuICAgICAgICB1c2VyUHJvbXB0OiBzdHJpbmc7XG4gICAgfSB7XG4gICAgICAgIGNvbnN0IGJhc2VTeXN0ZW1Qcm9tcHQgPSBgWW91IGFyZSBOb3ZhLCBhbiBBSSB3cml0aW5nIGFzc2lzdGFudC4gWW91ciB0YXNrIGlzIHRvIHRyYW5zZm9ybSB0aGUgcHJvdmlkZWQgdGV4dCBhY2NvcmRpbmcgdG8gdGhlIHVzZXIncyByZXF1ZXN0LiBcblxuQ1JJVElDQUwgUlVMRVM6XG4tIFByb3ZpZGUgT05MWSB0aGUgdHJhbnNmb3JtZWQgdGV4dCwgbm8gZXhwbGFuYXRpb25zIG9yIG1ldGEtY29tbWVudGFyeVxuLSBNYWludGFpbiB0aGUgb3JpZ2luYWwgbWVhbmluZyB1bmxlc3Mgc3BlY2lmaWNhbGx5IGFza2VkIHRvIGNoYW5nZSBpdFxuLSBQcmVzZXJ2ZSB0aGUgb3JpZ2luYWwgZm9ybWF0IChtYXJrZG93biwgc3RydWN0dXJlLCBldGMuKSB1bmxlc3MgaW5zdHJ1Y3RlZCBvdGhlcndpc2Vcbi0gRG8gbm90IGFkZCBpbnRyb2R1Y3RvcnkgcGhyYXNlcyBsaWtlIFwiSGVyZSdzIHRoZSBpbXByb3ZlZCB0ZXh0OlwiIG9yIHNpbWlsYXJcbi0gUmV0dXJuIG9ubHkgdGhlIGNvbnRlbnQgdGhhdCBzaG91bGQgcmVwbGFjZSB0aGUgc2VsZWN0ZWQgdGV4dGA7XG5cbiAgICAgICAgbGV0IHNwZWNpZmljUHJvbXB0ID0gJyc7XG4gICAgICAgIGxldCB1c2VyUHJvbXB0ID0gJyc7XG5cbiAgICAgICAgc3dpdGNoIChhY3Rpb24pIHtcbiAgICAgICAgICAgIGNhc2UgJ2ltcHJvdmUnOlxuICAgICAgICAgICAgICAgIHNwZWNpZmljUHJvbXB0ID0gYFxuVEFTSzogSW1wcm92ZSB0aGUgd3JpdGluZyBxdWFsaXR5XG4tIE1ha2UgdGhlIHRleHQgY2xlYXJlciBhbmQgbW9yZSBjb25jaXNlXG4tIEltcHJvdmUgZmxvdyBhbmQgcmVhZGFiaWxpdHlcbi0gRml4IGFueSBhd2t3YXJkIHBocmFzaW5nXG4tIFByZXNlcnZlIHRoZSBvcmlnaW5hbCB0b25lIGFuZCBtZWFuaW5nYDtcbiAgICAgICAgICAgICAgICB1c2VyUHJvbXB0ID0gYEltcHJvdmUgdGhpcyB0ZXh0OlxcblxcbiR7c2VsZWN0ZWRUZXh0fWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGNhc2UgJ2xvbmdlcic6XG4gICAgICAgICAgICAgICAgc3BlY2lmaWNQcm9tcHQgPSBgXG5UQVNLOiBFeHBhbmQgdGhlIHRleHQgd2l0aCBtb3JlIGRldGFpbFxuLSBBZGQgcmVsZXZhbnQgZXhhbXBsZXMsIGNvbnRleHQsIG9yIGV4cGxhbmF0aW9uc1xuLSBNYWludGFpbiB0aGUgb3JpZ2luYWwgc3R5bGUgYW5kIHZvaWNlXG4tIEV4cGFuZCBpZGVhcyB3aXRob3V0IGNoYW5naW5nIHRoZSBjb3JlIG1lc3NhZ2Vcbi0gTWFrZSBpdCBtb3JlIGNvbXByZWhlbnNpdmUgYW5kIGRldGFpbGVkYDtcbiAgICAgICAgICAgICAgICB1c2VyUHJvbXB0ID0gYE1ha2UgdGhpcyB0ZXh0IGxvbmdlciBhbmQgbW9yZSBkZXRhaWxlZDpcXG5cXG4ke3NlbGVjdGVkVGV4dH1gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdzaG9ydGVyJzpcbiAgICAgICAgICAgICAgICBzcGVjaWZpY1Byb21wdCA9IGBcblRBU0s6IENvbmRlbnNlIHRoZSB0ZXh0IHRvIGVzc2VudGlhbCBwb2ludHNcbi0gUmVtb3ZlIHJlZHVuZGFuY3kgYW5kIHVubmVjZXNzYXJ5IHdvcmRzXG4tIEtlZXAgYWxsIGtleSBpbmZvcm1hdGlvbiBhbmQgbWVhbmluZ1xuLSBNYWtlIGl0IG1vcmUgY29uY2lzZSBhbmQgZGlyZWN0XG4tIFByZXNlcnZlIHRoZSBvcmlnaW5hbCB0b25lYDtcbiAgICAgICAgICAgICAgICB1c2VyUHJvbXB0ID0gYE1ha2UgdGhpcyB0ZXh0IHNob3J0ZXIgYW5kIG1vcmUgY29uY2lzZTpcXG5cXG4ke3NlbGVjdGVkVGV4dH1gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICd0b25lJzpcbiAgICAgICAgICAgICAgICBjb25zdCB0b25lTWFwOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge1xuICAgICAgICAgICAgICAgICAgICAnZm9ybWFsJzogJ3Byb2Zlc3Npb25hbCBhbmQgc3RydWN0dXJlZCwgc3VpdGFibGUgZm9yIGJ1c2luZXNzIG9yIGFjYWRlbWljIGNvbnRleHRzJyxcbiAgICAgICAgICAgICAgICAgICAgJ2Nhc3VhbCc6ICdyZWxheGVkIGFuZCBjb252ZXJzYXRpb25hbCwgc3VpdGFibGUgZm9yIGluZm9ybWFsIGNvbW11bmljYXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAnYWNhZGVtaWMnOiAnc2Nob2xhcmx5IGFuZCBwcmVjaXNlLCB1c2luZyB0ZWNobmljYWwgdm9jYWJ1bGFyeSB3aGVyZSBhcHByb3ByaWF0ZScsXG4gICAgICAgICAgICAgICAgICAgICdmcmllbmRseSc6ICd3YXJtIGFuZCBhcHByb2FjaGFibGUsIGJ1aWxkaW5nIGNvbm5lY3Rpb24gd2l0aCB0aGUgcmVhZGVyJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgdG9uZURlc2NyaXB0aW9uID0gdG9uZU1hcFtjdXN0b21JbnN0cnVjdGlvbiB8fCAnZm9ybWFsJ10gfHwgdG9uZU1hcC5mb3JtYWw7XG4gICAgICAgICAgICAgICAgc3BlY2lmaWNQcm9tcHQgPSBgXG5UQVNLOiBDaGFuZ2UgdGhlIHRvbmUgdG8gYmUgJHt0b25lRGVzY3JpcHRpb259XG4tIEFkanVzdCBsYW5ndWFnZSBhbmQgdm9jYWJ1bGFyeSB0byBtYXRjaCB0aGUgcmVxdWVzdGVkIHRvbmVcbi0gS2VlcCB0aGUgc2FtZSBjb250ZW50IGFuZCBtZWFuaW5nXG4tIE1haW50YWluIGFwcHJvcHJpYXRlIGZvcm1hbGl0eSBsZXZlbCBmb3IgdGhlIGNob3NlbiB0b25lYDtcbiAgICAgICAgICAgICAgICB1c2VyUHJvbXB0ID0gYFJld3JpdGUgdGhpcyB0ZXh0IGluIGEgJHtjdXN0b21JbnN0cnVjdGlvbiB8fCAnZm9ybWFsJ30gdG9uZTpcXG5cXG4ke3NlbGVjdGVkVGV4dH1gO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICBjYXNlICdjdXN0b20nOlxuICAgICAgICAgICAgICAgIHNwZWNpZmljUHJvbXB0ID0gYFxuVEFTSzogQXBwbHkgY3VzdG9tIHRyYW5zZm9ybWF0aW9uXG4tIEZvbGxvdyB0aGUgdXNlcidzIHNwZWNpZmljIGluc3RydWN0aW9uIGV4YWN0bHlcbi0gTWFpbnRhaW4gY29udGVudCBpbnRlZ3JpdHkgdW5sZXNzIGFza2VkIHRvIGNoYW5nZSBpdFxuLSBBcHBseSB0aGUgcmVxdWVzdGVkIGNoYW5nZXMgcHJlY2lzZWx5YDtcbiAgICAgICAgICAgICAgICB1c2VyUHJvbXB0ID0gYEFwcGx5IHRoaXMgaW5zdHJ1Y3Rpb24gdG8gdGhlIHRleHQ6IFwiJHtjdXN0b21JbnN0cnVjdGlvbn1cIlxcblxcblRleHQgdG8gdHJhbnNmb3JtOlxcblxcbiR7c2VsZWN0ZWRUZXh0fWA7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgc3BlY2lmaWNQcm9tcHQgPSBgXG5UQVNLOiBHZW5lcmFsIHRleHQgaW1wcm92ZW1lbnRcbi0gRW5oYW5jZSBjbGFyaXR5IGFuZCByZWFkYWJpbGl0eVxuLSBQcmVzZXJ2ZSBvcmlnaW5hbCBtZWFuaW5nIGFuZCB0b25lYDtcbiAgICAgICAgICAgICAgICB1c2VyUHJvbXB0ID0gYEltcHJvdmUgdGhpcyB0ZXh0OlxcblxcbiR7c2VsZWN0ZWRUZXh0fWA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3lzdGVtUHJvbXB0OiBiYXNlU3lzdGVtUHJvbXB0ICsgJ1xcbicgKyBzcGVjaWZpY1Byb21wdCxcbiAgICAgICAgICAgIHVzZXJQcm9tcHRcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhbiBBSSByZXNwb25zZSB0byBleHRyYWN0IG9ubHkgdGhlIHRyYW5zZm9ybWVkIHRleHRcbiAgICAgKi9cbiAgICBwcml2YXRlIGNsZWFuQUlSZXNwb25zZShyZXNwb25zZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgLy8gUmVtb3ZlIGNvbW1vbiBBSSByZXNwb25zZSBwYXR0ZXJuc1xuICAgICAgICBsZXQgY2xlYW5lZCA9IHJlc3BvbnNlLnRyaW0oKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFJlbW92ZSBpbnRyb2R1Y3RvcnkgcGhyYXNlc1xuICAgICAgICBjb25zdCBpbnRyb1BhdHRlcm5zID0gW1xuICAgICAgICAgICAgL15IZXJlJ3MgdGhlIGltcHJvdmVkIHRleHQ6P1xccyovaSxcbiAgICAgICAgICAgIC9eSGVyZSdzIHRoZSByZXdyaXR0ZW4gdGV4dDo/XFxzKi9pLFxuICAgICAgICAgICAgL15IZXJlJ3MgdGhlIHRyYW5zZm9ybWVkIHRleHQ6P1xccyovaSxcbiAgICAgICAgICAgIC9eSW1wcm92ZWQgdmVyc2lvbjo/XFxzKi9pLFxuICAgICAgICAgICAgL15SZXdyaXR0ZW46P1xccyovaSxcbiAgICAgICAgICAgIC9eUmVzdWx0Oj9cXHMqL2ksXG4gICAgICAgICAgICAvXk91dHB1dDo/XFxzKi9pXG4gICAgICAgIF07XG5cbiAgICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIGludHJvUGF0dGVybnMpIHtcbiAgICAgICAgICAgIGNsZWFuZWQgPSBjbGVhbmVkLnJlcGxhY2UocGF0dGVybiwgJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gUmVtb3ZlIHRyYWlsaW5nIGV4cGxhbmF0aW9ucyAodGV4dCBhZnRlciBcIi0tLVwiIG9yIHNpbWlsYXIgcGF0dGVybnMpXG4gICAgICAgIGNsZWFuZWQgPSBjbGVhbmVkLnNwbGl0KC9cXG5cXHMqLS0tK1xccyovKS5zaGlmdCgpIHx8IGNsZWFuZWQ7XG4gICAgICAgIGNsZWFuZWQgPSBjbGVhbmVkLnNwbGl0KC9cXG5cXHMqXFwqXFwqP0V4cGxhbmF0aW9uXFwqP1xcKj86L2kpLnNoaWZ0KCkgfHwgY2xlYW5lZDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBjbGVhbmVkLnRyaW0oKTtcbiAgICB9XG59IiwgIi8qKlxuICogTmF0aXZlIHRvbmUgc2VsZWN0aW9uIG1vZGFsIGZvciBOb3ZhIHVzaW5nIE9ic2lkaWFuJ3MgRnV6enlTdWdnZXN0TW9kYWxcbiAqIFByb3ZpZGVzIGNvbnNpc3RlbnQgVVggd2l0aCBjb3JlIE9ic2lkaWFuIGZlYXR1cmVzXG4gKi9cblxuaW1wb3J0IHsgQXBwLCBGdXp6eVN1Z2dlc3RNb2RhbCwgRnV6enlNYXRjaCB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGludGVyZmFjZSBUb25lT3B0aW9uIHtcbiAgICBpZDogc3RyaW5nO1xuICAgIGxhYmVsOiBzdHJpbmc7XG4gICAgZGVzY3JpcHRpb246IHN0cmluZztcbn1cblxuZXhwb3J0IGNvbnN0IFRPTkVfT1BUSU9OUzogVG9uZU9wdGlvbltdID0gW1xuICAgIHtcbiAgICAgICAgaWQ6ICdmb3JtYWwnLFxuICAgICAgICBsYWJlbDogJ0Zvcm1hbCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnUHJvZmVzc2lvbmFsLCBzdHJ1Y3R1cmVkIGxhbmd1YWdlIHN1aXRhYmxlIGZvciBidXNpbmVzcyBvciBhY2FkZW1pYyBjb250ZXh0cydcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6ICdjYXN1YWwnLFxuICAgICAgICBsYWJlbDogJ0Nhc3VhbCcsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnUmVsYXhlZCwgY29udmVyc2F0aW9uYWwgdG9uZSBmb3IgaW5mb3JtYWwgY29tbXVuaWNhdGlvbidcbiAgICB9LFxuICAgIHtcbiAgICAgICAgaWQ6ICdhY2FkZW1pYycsXG4gICAgICAgIGxhYmVsOiAnQWNhZGVtaWMnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ1NjaG9sYXJseSwgcHJlY2lzZSBsYW5ndWFnZSB3aXRoIHRlY2huaWNhbCB2b2NhYnVsYXJ5J1xuICAgIH0sXG4gICAge1xuICAgICAgICBpZDogJ2ZyaWVuZGx5JyxcbiAgICAgICAgbGFiZWw6ICdGcmllbmRseScsXG4gICAgICAgIGRlc2NyaXB0aW9uOiAnV2FybSwgYXBwcm9hY2hhYmxlIHRvbmUgdGhhdCBidWlsZHMgY29ubmVjdGlvbidcbiAgICB9XG5dO1xuXG5leHBvcnQgY2xhc3MgVG9uZVNlbGVjdGlvbk1vZGFsIGV4dGVuZHMgRnV6enlTdWdnZXN0TW9kYWw8VG9uZU9wdGlvbj4ge1xuICAgIHByaXZhdGUgb25TZWxlY3Q6ICh0b25lOiBzdHJpbmcpID0+IHZvaWQ7XG4gICAgcHJpdmF0ZSBvbkNhbmNlbDogKCkgPT4gdm9pZDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBhcHA6IEFwcCxcbiAgICAgICAgb25TZWxlY3Q6ICh0b25lOiBzdHJpbmcpID0+IHZvaWQsXG4gICAgICAgIG9uQ2FuY2VsOiAoKSA9PiB2b2lkXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGFwcCk7XG4gICAgICAgIHRoaXMub25TZWxlY3QgPSBvblNlbGVjdDtcbiAgICAgICAgdGhpcy5vbkNhbmNlbCA9IG9uQ2FuY2VsO1xuICAgICAgICBcbiAgICAgICAgLy8gU2V0IHBsYWNlaG9sZGVyIHRleHRcbiAgICAgICAgdGhpcy5zZXRQbGFjZWhvbGRlcignQ2hvb3NlIGEgd3JpdGluZyB0b25lLi4uJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBBZGQgaW5zdHJ1Y3Rpb25cbiAgICAgICAgdGhpcy5zZXRJbnN0cnVjdGlvbnMoW1xuICAgICAgICAgICAgeyBjb21tYW5kOiAnXHUyMTkxXHUyMTkzJywgcHVycG9zZTogJ3RvIG5hdmlnYXRlJyB9LFxuICAgICAgICAgICAgeyBjb21tYW5kOiAnXHUyMUI1JywgcHVycG9zZTogJ3RvIGFwcGx5IHRvbmUnIH0sXG4gICAgICAgICAgICB7IGNvbW1hbmQ6ICdlc2MnLCBwdXJwb3NlOiAndG8gY2FuY2VsJyB9XG4gICAgICAgIF0pO1xuICAgIH1cblxuICAgIGdldEl0ZW1zKCk6IFRvbmVPcHRpb25bXSB7XG4gICAgICAgIHJldHVybiBUT05FX09QVElPTlM7XG4gICAgfVxuXG4gICAgZ2V0SXRlbVRleHQodG9uZTogVG9uZU9wdGlvbik6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgJHt0b25lLmxhYmVsfSAtICR7dG9uZS5kZXNjcmlwdGlvbn1gO1xuICAgIH1cblxuICAgIG9uQ2hvb3NlSXRlbSh0b25lOiBUb25lT3B0aW9uLCBldnQ6IE1vdXNlRXZlbnQgfCBLZXlib2FyZEV2ZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMub25TZWxlY3QodG9uZS5pZCk7XG4gICAgfVxuXG4gICAgb25DbG9zZSgpOiB2b2lkIHtcbiAgICAgICAgLy8gSWYgbm8gc2VsZWN0aW9uIHdhcyBtYWRlLCBjYWxsIG9uQ2FuY2VsXG4gICAgICAgIGNvbnN0IHsgY29udGVudEVsIH0gPSB0aGlzO1xuICAgICAgICBpZiAoY29udGVudEVsLnBhcmVudEVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRoaXMub25DYW5jZWwoKTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCAiLyoqXG4gKiBOYXRpdmUgY3VzdG9tIGluc3RydWN0aW9uIG1vZGFsIGZvciBOb3ZhIHVzaW5nIE9ic2lkaWFuJ3MgTW9kYWwgY2xhc3NcbiAqIFNpbXBsaWZpZWQgZGVzaWduIGZvbGxvd2luZyBPYnNpZGlhbidzIG5hdGl2ZSBwYXR0ZXJuc1xuICovXG5cbmltcG9ydCB7IEFwcCwgTW9kYWwsIFNldHRpbmcgfSBmcm9tICdvYnNpZGlhbic7XG5cbmV4cG9ydCBjbGFzcyBDdXN0b21JbnN0cnVjdGlvbk1vZGFsIGV4dGVuZHMgTW9kYWwge1xuICAgIHByaXZhdGUgaW5zdHJ1Y3Rpb246IHN0cmluZyA9ICcnO1xuICAgIHByaXZhdGUgb25TdWJtaXQ6IChpbnN0cnVjdGlvbjogc3RyaW5nKSA9PiB2b2lkO1xuICAgIHByaXZhdGUgb25DYW5jZWw6ICgpID0+IHZvaWQ7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgYXBwOiBBcHAsXG4gICAgICAgIG9uU3VibWl0OiAoaW5zdHJ1Y3Rpb246IHN0cmluZykgPT4gdm9pZCxcbiAgICAgICAgb25DYW5jZWw6ICgpID0+IHZvaWRcbiAgICApIHtcbiAgICAgICAgc3VwZXIoYXBwKTtcbiAgICAgICAgdGhpcy5vblN1Ym1pdCA9IG9uU3VibWl0O1xuICAgICAgICB0aGlzLm9uQ2FuY2VsID0gb25DYW5jZWw7XG4gICAgfVxuXG4gICAgb25PcGVuKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG4gICAgICAgIFxuICAgICAgICAvLyBVc2UgbmF0aXZlIG1vZGFsIHN0eWxpbmdcbiAgICAgICAgdGhpcy5tb2RhbEVsLmFkZENsYXNzKCdub3ZhLWN1c3RvbS1pbnN0cnVjdGlvbi1tb2RhbCcpO1xuICAgICAgICBcbiAgICAgICAgLy8gVGl0bGVcbiAgICAgICAgY29udGVudEVsLmNyZWF0ZUVsKCdoMicsIHsgdGV4dDogJ1RlbGwgTm92YScgfSk7XG5cbiAgICAgICAgLy8gRGVzY3JpcHRpb25cbiAgICAgICAgbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAgICAgLnNldE5hbWUoJ0luc3RydWN0aW9uJylcbiAgICAgICAgICAgIC5zZXREZXNjKCdEZXNjcmliZSBob3cgeW91IHdhbnQgTm92YSB0byB0cmFuc2Zvcm0geW91ciBzZWxlY3RlZCB0ZXh0Jyk7XG5cbiAgICAgICAgLy8gVGV4dCBhcmVhIHVzaW5nIFNldHRpbmcgY29tcG9uZW50IGZvciBjb25zaXN0ZW50IHN0eWxpbmdcbiAgICAgICAgY29uc3QgdGV4dEFyZWFTZXR0aW5nID0gbmV3IFNldHRpbmcoY29udGVudEVsKVxuICAgICAgICAgICAgLmFkZFRleHRBcmVhKHRleHQgPT4ge1xuICAgICAgICAgICAgICAgIHRleHRcbiAgICAgICAgICAgICAgICAgICAgLnNldFBsYWNlaG9sZGVyKCdlLmcuLCBcIm1ha2UgdGhpcyBtb3JlIHBlcnN1YXNpdmVcIiwgXCJhZGQgc3RhdGlzdGljc1wiLCBcIndyaXRlIGluIGJ1bGxldCBwb2ludHNcIicpXG4gICAgICAgICAgICAgICAgICAgIC5zZXRWYWx1ZSh0aGlzLmluc3RydWN0aW9uKVxuICAgICAgICAgICAgICAgICAgICAub25DaGFuZ2UodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pbnN0cnVjdGlvbiA9IHZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHRoZSB0ZXh0IGFyZWEgbGFyZ2VyXG4gICAgICAgICAgICAgICAgdGV4dC5pbnB1dEVsLnJvd3MgPSA0O1xuICAgICAgICAgICAgICAgIHRleHQuaW5wdXRFbC5zdHlsZS53aWR0aCA9ICcxMDAlJztcbiAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwuc3R5bGUubWluSGVpZ2h0ID0gJzEwMHB4JztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBGb2N1cyBvbiB0aGUgdGV4dCBhcmVhXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB0ZXh0LmlucHV0RWwuZm9jdXMoKSwgNTApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBDdHJsL0NtZCtFbnRlciB0byBzdWJtaXRcbiAgICAgICAgICAgICAgICB0ZXh0LmlucHV0RWwuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIChlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlLmtleSA9PT0gJ0VudGVyJyAmJiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc3VibWl0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICByZXR1cm4gdGV4dDtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gSGlkZSB0aGUgc2V0dGluZyBuYW1lL2Rlc2NyaXB0aW9uIGFyZWEgdG8gZ2l2ZSBmdWxsIHdpZHRoIHRvIHRleHRhcmVhXG4gICAgICAgIHRleHRBcmVhU2V0dGluZy5zZXR0aW5nRWwuc3R5bGUuYm9yZGVyID0gJ25vbmUnO1xuICAgICAgICB0ZXh0QXJlYVNldHRpbmcuc2V0dGluZ0VsLnF1ZXJ5U2VsZWN0b3IoJy5zZXR0aW5nLWl0ZW0taW5mbycpPy5yZW1vdmUoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIE1ha2UgdGhlIGNvbnRyb2wgdGFrZSBmdWxsIHdpZHRoXG4gICAgICAgIGNvbnN0IGNvbnRyb2wgPSB0ZXh0QXJlYVNldHRpbmcuc2V0dGluZ0VsLnF1ZXJ5U2VsZWN0b3IoJy5zZXR0aW5nLWl0ZW0tY29udHJvbCcpO1xuICAgICAgICBpZiAoY29udHJvbCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICAgICAgICBjb250cm9sLnN0eWxlLndpZHRoID0gJzEwMCUnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQnV0dG9ucyB1c2luZyBTZXR0aW5nIGNvbXBvbmVudFxuICAgICAgICBuZXcgU2V0dGluZyhjb250ZW50RWwpXG4gICAgICAgICAgICAuYWRkQnV0dG9uKGJ0biA9PiBidG5cbiAgICAgICAgICAgICAgICAuc2V0QnV0dG9uVGV4dCgnQ2FuY2VsJylcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vbkNhbmNlbCgpO1xuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgLmFkZEJ1dHRvbihidG4gPT4gYnRuXG4gICAgICAgICAgICAgICAgLnNldEJ1dHRvblRleHQoJ1RyYW5zZm9ybSBUZXh0JylcbiAgICAgICAgICAgICAgICAuc2V0Q3RhKClcbiAgICAgICAgICAgICAgICAub25DbGljaygoKSA9PiB0aGlzLnN1Ym1pdCgpKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzdWJtaXQoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmluc3RydWN0aW9uLnRyaW0oKSkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICAgICAgdGhpcy5vblN1Ym1pdCh0aGlzLmluc3RydWN0aW9uLnRyaW0oKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkNsb3NlKCkge1xuICAgICAgICBjb25zdCB7IGNvbnRlbnRFbCB9ID0gdGhpcztcbiAgICAgICAgY29udGVudEVsLmVtcHR5KCk7XG4gICAgfVxufSIsICJpbXBvcnQgeyBBSVByb3ZpZGVyLCBBSU1lc3NhZ2UsIEFJR2VuZXJhdGlvbk9wdGlvbnMsIEFJU3RyZWFtUmVzcG9uc2UsIFByb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgcmVxdWVzdFVybCB9IGZyb20gJ29ic2lkaWFuJztcblxuZXhwb3J0IGNsYXNzIENsYXVkZVByb3ZpZGVyIGltcGxlbWVudHMgQUlQcm92aWRlciB7XG5cdG5hbWUgPSAnQ2xhdWRlIChBbnRocm9waWMpJztcblx0cHJpdmF0ZSBjb25maWc6IFByb3ZpZGVyQ29uZmlnO1xuXHRwcml2YXRlIGNhY2hlZE1vZGVsczogc3RyaW5nW10gfCBudWxsID0gbnVsbDtcblxuXHRjb25zdHJ1Y3Rvcihjb25maWc6IFByb3ZpZGVyQ29uZmlnKSB7XG5cdFx0dGhpcy5jb25maWcgPSBjb25maWc7XG5cdH1cblxuXHR1cGRhdGVDb25maWcoY29uZmlnOiBQcm92aWRlckNvbmZpZykge1xuXHRcdHRoaXMuY29uZmlnID0gY29uZmlnO1xuXHR9XG5cblx0YXN5bmMgaXNBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG5cdFx0cmV0dXJuICEhdGhpcy5jb25maWcuYXBpS2V5O1xuXHR9XG5cblx0YXN5bmMgZ2VuZXJhdGVUZXh0KHByb21wdDogc3RyaW5nLCBvcHRpb25zPzogQUlHZW5lcmF0aW9uT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG5cdFx0Y29uc3QgbWVzc2FnZXM6IEFJTWVzc2FnZVtdID0gW3sgcm9sZTogJ3VzZXInLCBjb250ZW50OiBwcm9tcHQgfV07XG5cdFx0cmV0dXJuIHRoaXMuY2hhdENvbXBsZXRpb24obWVzc2FnZXMsIG9wdGlvbnMpO1xuXHR9XG5cblx0YXN5bmMgKmdlbmVyYXRlVGV4dFN0cmVhbShwcm9tcHQ6IHN0cmluZywgb3B0aW9ucz86IEFJR2VuZXJhdGlvbk9wdGlvbnMpOiBBc3luY0dlbmVyYXRvcjxBSVN0cmVhbVJlc3BvbnNlPiB7XG5cdFx0Y29uc3QgbWVzc2FnZXM6IEFJTWVzc2FnZVtdID0gW3sgcm9sZTogJ3VzZXInLCBjb250ZW50OiBwcm9tcHQgfV07XG5cdFx0eWllbGQqIHRoaXMuY2hhdENvbXBsZXRpb25TdHJlYW0obWVzc2FnZXMsIG9wdGlvbnMpO1xuXHR9XG5cblx0YXN5bmMgY2hhdENvbXBsZXRpb24obWVzc2FnZXM6IEFJTWVzc2FnZVtdLCBvcHRpb25zPzogQUlHZW5lcmF0aW9uT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG5cdFx0aWYgKCF0aGlzLmNvbmZpZy5hcGlLZXkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignQ2xhdWRlIEFQSSBrZXkgbm90IGNvbmZpZ3VyZWQnKTtcblx0XHR9XG5cblx0XHRjb25zdCByZXF1ZXN0Qm9keSA9IEpTT04uc3RyaW5naWZ5KHtcblx0XHRcdG1vZGVsOiBvcHRpb25zPy5tb2RlbCB8fCB0aGlzLmNvbmZpZy5tb2RlbCB8fCAnY2xhdWRlLTMtNS1oYWlrdS1sYXRlc3QnLFxuXHRcdFx0bWF4X3Rva2Vuczogb3B0aW9ucz8ubWF4VG9rZW5zIHx8IHRoaXMuY29uZmlnLm1heFRva2VucyB8fCAxMDAwLFxuXHRcdFx0dGVtcGVyYXR1cmU6IG9wdGlvbnM/LnRlbXBlcmF0dXJlIHx8IHRoaXMuY29uZmlnLnRlbXBlcmF0dXJlIHx8IDAuNyxcblx0XHRcdHN5c3RlbTogb3B0aW9ucz8uc3lzdGVtUHJvbXB0LFxuXHRcdFx0bWVzc2FnZXM6IG1lc3NhZ2VzLm1hcChtc2cgPT4gKHtcblx0XHRcdFx0cm9sZTogbXNnLnJvbGUgPT09ICdhc3Npc3RhbnQnID8gJ2Fzc2lzdGFudCcgOiAndXNlcicsXG5cdFx0XHRcdGNvbnRlbnQ6IG1zZy5jb250ZW50XG5cdFx0XHR9KSlcblx0XHR9KTtcblxuXHRcdC8vIFJldHJ5IGxvZ2ljIGZvciA1MDAtbGV2ZWwgZXJyb3JzXG5cdFx0Y29uc3QgbWF4UmV0cmllcyA9IDM7XG5cdFx0Y29uc3QgYmFzZURlbGF5ID0gMTAwMDsgLy8gMSBzZWNvbmRcblxuXHRcdGZvciAobGV0IGF0dGVtcHQgPSAwOyBhdHRlbXB0IDw9IG1heFJldHJpZXM7IGF0dGVtcHQrKykge1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0VXJsKHtcblx0XHRcdFx0XHR1cmw6ICdodHRwczovL2FwaS5hbnRocm9waWMuY29tL3YxL21lc3NhZ2VzJyxcblx0XHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHRcdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuXHRcdFx0XHRcdFx0J3gtYXBpLWtleSc6IHRoaXMuY29uZmlnLmFwaUtleSxcblx0XHRcdFx0XHRcdCdhbnRocm9waWMtdmVyc2lvbic6ICcyMDIzLTA2LTAxJ1xuXHRcdFx0XHRcdH0sXG5cdFx0XHRcdFx0Ym9keTogcmVxdWVzdEJvZHlcblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XG5cdFx0XHRcdFx0Y29uc3QgZGF0YSA9IHJlc3BvbnNlLmpzb247XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGEuY29udGVudFswXS50ZXh0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQ2hlY2sgaWYgaXQncyBhIDUwMC1sZXZlbCBlcnJvciB0aGF0IHdlIHNob3VsZCByZXRyeVxuXHRcdFx0XHRpZiAocmVzcG9uc2Uuc3RhdHVzID49IDUwMCAmJiBhdHRlbXB0IDwgbWF4UmV0cmllcykge1xuXHRcdFx0XHRcdGNvbnN0IGRlbGF5ID0gYmFzZURlbGF5ICogTWF0aC5wb3coMiwgYXR0ZW1wdCk7IC8vIEV4cG9uZW50aWFsIGJhY2tvZmZcblx0XHRcdFx0XHRhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgZGVsYXkpKTtcblx0XHRcdFx0XHRjb250aW51ZTsgLy8gUmV0cnlcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEZvciBhbGwgb3RoZXIgZXJyb3JzIG9yIGZpbmFsIGF0dGVtcHQsIHRocm93IGVycm9yXG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcihgQ2xhdWRlIEFQSSBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9IC0gJHtyZXNwb25zZS50ZXh0fWApO1xuXG5cdFx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0XHQvLyBOZXR3b3JrL2Nvbm5lY3Rpb24gZXJyb3JzIC0gcmV0cnkgaWYgbm90IGZpbmFsIGF0dGVtcHRcblx0XHRcdFx0aWYgKGF0dGVtcHQgPCBtYXhSZXRyaWVzICYmIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgKFxuXHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UuaW5jbHVkZXMoJ05ldHdvcmsgZXJyb3InKSB8fCBcblx0XHRcdFx0XHRlcnJvci5tZXNzYWdlLmluY2x1ZGVzKCdGYWlsZWQgdG8gY29ubmVjdCcpXG5cdFx0XHRcdCkpIHtcblx0XHRcdFx0XHRjb25zdCBkZWxheSA9IGJhc2VEZWxheSAqIE1hdGgucG93KDIsIGF0dGVtcHQpO1xuXHRcdFx0XHRcdGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHQvLyBSZS10aHJvdyB0aGUgZXJyb3IgaWYgaXQncyB0aGUgZmluYWwgYXR0ZW1wdCBvciBub3QgYSByZXRyeWFibGUgZXJyb3Jcblx0XHRcdFx0aWYgKGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubWVzc2FnZS5zdGFydHNXaXRoKCdDbGF1ZGUgQVBJIGVycm9yOicpKSB7XG5cdFx0XHRcdFx0dGhyb3cgZXJyb3I7IC8vIEFscmVhZHkgZm9ybWF0dGVkIGVycm9yXG5cdFx0XHRcdH1cblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gY29ubmVjdCB0byBDbGF1ZGUgQVBJOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ05ldHdvcmsgZXJyb3InfWApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFRoaXMgc2hvdWxkIG5ldmVyIGJlIHJlYWNoZWQsIGJ1dCBUeXBlU2NyaXB0IHdhbnRzIGl0XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdDbGF1ZGUgQVBJOiBNYXhpbXVtIHJldHJpZXMgZXhjZWVkZWQnKTtcblx0fVxuXG5cdGFzeW5jIGNvbXBsZXRlKHN5c3RlbVByb21wdDogc3RyaW5nLCB1c2VyUHJvbXB0OiBzdHJpbmcsIG9wdGlvbnM/OiBBSUdlbmVyYXRpb25PcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHRjb25zdCBtZXNzYWdlczogQUlNZXNzYWdlW10gPSBbeyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IHVzZXJQcm9tcHQgfV07XG5cdFx0Y29uc3QgY29tcGxldGVPcHRpb25zID0geyAuLi5vcHRpb25zLCBzeXN0ZW1Qcm9tcHQgfTtcblx0XHRyZXR1cm4gdGhpcy5jaGF0Q29tcGxldGlvbihtZXNzYWdlcywgY29tcGxldGVPcHRpb25zKTtcblx0fVxuXG5cdGFzeW5jICpjaGF0Q29tcGxldGlvblN0cmVhbShtZXNzYWdlczogQUlNZXNzYWdlW10sIG9wdGlvbnM/OiBBSUdlbmVyYXRpb25PcHRpb25zKTogQXN5bmNHZW5lcmF0b3I8QUlTdHJlYW1SZXNwb25zZT4ge1xuXHRcdC8vIEdldCB0aGUgZnVsbCByZXNwb25zZSBmcm9tIENsYXVkZSwgdGhlbiBzaW11bGF0ZSBzdHJlYW1pbmcgd2l0aCBjb25zaXN0ZW50IGNodW5raW5nXG5cdFx0Y29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5jaGF0Q29tcGxldGlvbihtZXNzYWdlcywgb3B0aW9ucyk7XG5cdFx0XG5cdFx0Ly8gU3BsaXQgcmVzdWx0IGludG8gc21hbGxlciBjaHVua3MgZm9yIGNvbnNpc3RlbnQgdHlwZXdyaXRlciBlZmZlY3Rcblx0XHRjb25zdCBjaHVua1NpemUgPSAzOyAvLyBDaGFyYWN0ZXJzIHBlciBjaHVua1xuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0Lmxlbmd0aDsgaSArPSBjaHVua1NpemUpIHtcblx0XHRcdGNvbnN0IGNodW5rID0gcmVzdWx0LnNsaWNlKGksIGkgKyBjaHVua1NpemUpO1xuXHRcdFx0eWllbGQgeyBjb250ZW50OiBjaHVuaywgZG9uZTogZmFsc2UgfTtcblx0XHRcdC8vIFNtYWxsIGRlbGF5IGJldHdlZW4gY2h1bmtzIHRvIGNyZWF0ZSBzbW9vdGggdHlwZXdyaXRlciBlZmZlY3Rcblx0XHRcdGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyMCkpO1xuXHRcdH1cblx0XHRcblx0XHR5aWVsZCB7IGNvbnRlbnQ6ICcnLCBkb25lOiB0cnVlIH07XG5cdH1cblxuXHQvKipcblx0ICogRmV0Y2ggYXZhaWxhYmxlIG1vZGVscyBmcm9tIENsYXVkZSBBUElcblx0ICovXG5cdGFzeW5jIGdldEF2YWlsYWJsZU1vZGVscygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG5cdFx0aWYgKCF0aGlzLmNvbmZpZy5hcGlLZXkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignQ2xhdWRlIEFQSSBrZXkgbm90IGNvbmZpZ3VyZWQnKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBoYXZlIGNhY2hlZCBtb2RlbHMsIHJldHVybiB0aGVtXG5cdFx0aWYgKHRoaXMuY2FjaGVkTW9kZWxzKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jYWNoZWRNb2RlbHM7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yIENsYXVkZSwgd2UnbGwgdXNlIGEgaGFyZGNvZGVkIGxpc3Qgc2luY2UgQW50aHJvcGljIGRvZXNuJ3QgcHJvdmlkZSBhIG1vZGVscyBlbmRwb2ludFxuXHRcdC8vIEJ1dCB3ZSBjYW4gdmFsaWRhdGUgdGhlIEFQSSBrZXkgYnkgbWFraW5nIGEgdGVzdCBjYWxsXG5cdFx0dHJ5IHtcblx0XHRcdC8vIFZhbGlkYXRlIEFQSSBrZXkgd2l0aCBhIG1pbmltYWwgcmVxdWVzdFxuXHRcdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCByZXF1ZXN0VXJsKHtcblx0XHRcdFx0dXJsOiAnaHR0cHM6Ly9hcGkuYW50aHJvcGljLmNvbS92MS9tZXNzYWdlcycsXG5cdFx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcblx0XHRcdFx0XHQneC1hcGkta2V5JzogdGhpcy5jb25maWcuYXBpS2V5LFxuXHRcdFx0XHRcdCdhbnRocm9waWMtdmVyc2lvbic6ICcyMDIzLTA2LTAxJ1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRib2R5OiBKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHRcdFx0bW9kZWw6ICdjbGF1ZGUtMy01LWhhaWt1LWxhdGVzdCcsXG5cdFx0XHRcdFx0bWF4X3Rva2VuczogMSxcblx0XHRcdFx0XHRtZXNzYWdlczogW3sgcm9sZTogJ3VzZXInLCBjb250ZW50OiAndGVzdCcgfV1cblx0XHRcdFx0fSlcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBBUEkga2V5IHZhbGlkYXRpb24gZmFpbGVkOiAke3Jlc3BvbnNlLnN0YXR1c30gLSAke3Jlc3BvbnNlLnRleHR9YCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBjdXJyZW50IGF2YWlsYWJsZSBtb2RlbHMgKGZyb20gQVBJIGRvY3MpXG5cdFx0XHRjb25zdCBtb2RlbHMgPSBbXG5cdFx0XHRcdCdjbGF1ZGUtb3B1cy00LTIwMjUwNTE0Jyxcblx0XHRcdFx0J2NsYXVkZS1zb25uZXQtNC0yMDI1MDUxNCcsXG5cdFx0XHRcdCdjbGF1ZGUtMy03LXNvbm5ldC1sYXRlc3QnLFxuXHRcdFx0XHQnY2xhdWRlLTMtNS1zb25uZXQtbGF0ZXN0Jyxcblx0XHRcdFx0J2NsYXVkZS0zLTUtaGFpa3UtbGF0ZXN0J1xuXHRcdFx0XTtcblxuXHRcdFx0dGhpcy5jYWNoZWRNb2RlbHMgPSBtb2RlbHM7XG5cdFx0XHRyZXR1cm4gbW9kZWxzO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBDbGF1ZGUgbW9kZWxzOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDbGVhciBjYWNoZWQgbW9kZWxzXG5cdCAqL1xuXHRjbGVhck1vZGVsQ2FjaGUoKTogdm9pZCB7XG5cdFx0dGhpcy5jYWNoZWRNb2RlbHMgPSBudWxsO1xuXHR9XG59IiwgImltcG9ydCB7IEFJUHJvdmlkZXIsIEFJTWVzc2FnZSwgQUlHZW5lcmF0aW9uT3B0aW9ucywgQUlTdHJlYW1SZXNwb25zZSwgUHJvdmlkZXJDb25maWcgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBPcGVuQUlQcm92aWRlciBpbXBsZW1lbnRzIEFJUHJvdmlkZXIge1xuXHRuYW1lID0gJ09wZW5BSSc7XG5cdHByaXZhdGUgY29uZmlnOiBQcm92aWRlckNvbmZpZztcblx0cHJpdmF0ZSBjYWNoZWRNb2RlbHM6IHN0cmluZ1tdIHwgbnVsbCA9IG51bGw7XG5cblx0Y29uc3RydWN0b3IoY29uZmlnOiBQcm92aWRlckNvbmZpZykge1xuXHRcdHRoaXMuY29uZmlnID0gY29uZmlnO1xuXHR9XG5cblx0dXBkYXRlQ29uZmlnKGNvbmZpZzogUHJvdmlkZXJDb25maWcpIHtcblx0XHR0aGlzLmNvbmZpZyA9IGNvbmZpZztcblx0fVxuXG5cdGFzeW5jIGlzQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuXHRcdHJldHVybiAhIXRoaXMuY29uZmlnLmFwaUtleTtcblx0fVxuXG5cdGFzeW5jIGdlbmVyYXRlVGV4dChwcm9tcHQ6IHN0cmluZywgb3B0aW9ucz86IEFJR2VuZXJhdGlvbk9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdGNvbnN0IG1lc3NhZ2VzOiBBSU1lc3NhZ2VbXSA9IFt7IHJvbGU6ICd1c2VyJywgY29udGVudDogcHJvbXB0IH1dO1xuXHRcdHJldHVybiB0aGlzLmNoYXRDb21wbGV0aW9uKG1lc3NhZ2VzLCBvcHRpb25zKTtcblx0fVxuXG5cdGFzeW5jICpnZW5lcmF0ZVRleHRTdHJlYW0ocHJvbXB0OiBzdHJpbmcsIG9wdGlvbnM/OiBBSUdlbmVyYXRpb25PcHRpb25zKTogQXN5bmNHZW5lcmF0b3I8QUlTdHJlYW1SZXNwb25zZT4ge1xuXHRcdGNvbnN0IG1lc3NhZ2VzOiBBSU1lc3NhZ2VbXSA9IFt7IHJvbGU6ICd1c2VyJywgY29udGVudDogcHJvbXB0IH1dO1xuXHRcdHlpZWxkKiB0aGlzLmNoYXRDb21wbGV0aW9uU3RyZWFtKG1lc3NhZ2VzLCBvcHRpb25zKTtcblx0fVxuXG5cdGFzeW5jIGNoYXRDb21wbGV0aW9uKG1lc3NhZ2VzOiBBSU1lc3NhZ2VbXSwgb3B0aW9ucz86IEFJR2VuZXJhdGlvbk9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdGlmICghdGhpcy5jb25maWcuYXBpS2V5KSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ09wZW5BSSBBUEkga2V5IG5vdCBjb25maWd1cmVkJyk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVxdWVzdE1lc3NhZ2VzID0gWy4uLm1lc3NhZ2VzXTtcblx0XHRpZiAob3B0aW9ucz8uc3lzdGVtUHJvbXB0KSB7XG5cdFx0XHRyZXF1ZXN0TWVzc2FnZXMudW5zaGlmdCh7IHJvbGU6ICdzeXN0ZW0nLCBjb250ZW50OiBvcHRpb25zLnN5c3RlbVByb21wdCB9KTtcblx0XHR9XG5cblx0XHRjb25zdCBiYXNlVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCB8fCAnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSc7XG5cdFx0Y29uc3QgZW5kcG9pbnQgPSBiYXNlVXJsLmVuZHNXaXRoKCcvY2hhdC9jb21wbGV0aW9ucycpID8gYmFzZVVybCA6IGAke2Jhc2VVcmx9L2NoYXQvY29tcGxldGlvbnNgO1xuXHRcdFxuXHRcdGNvbnN0IHJlcXVlc3RCb2R5ID0gSlNPTi5zdHJpbmdpZnkoe1xuXHRcdFx0bW9kZWw6IG9wdGlvbnM/Lm1vZGVsIHx8IHRoaXMuY29uZmlnLm1vZGVsIHx8ICdncHQtMy41LXR1cmJvJyxcblx0XHRcdG1lc3NhZ2VzOiByZXF1ZXN0TWVzc2FnZXMsXG5cdFx0XHRtYXhfdG9rZW5zOiBvcHRpb25zPy5tYXhUb2tlbnMgfHwgdGhpcy5jb25maWcubWF4VG9rZW5zIHx8IDEwMDAsXG5cdFx0XHR0ZW1wZXJhdHVyZTogb3B0aW9ucz8udGVtcGVyYXR1cmUgfHwgdGhpcy5jb25maWcudGVtcGVyYXR1cmUgfHwgMC43XG5cdFx0fSk7XG5cblx0XHQvLyBSZXRyeSBsb2dpYyBmb3IgNTAwLWxldmVsIGVycm9yc1xuXHRcdGNvbnN0IG1heFJldHJpZXMgPSAzO1xuXHRcdGNvbnN0IGJhc2VEZWxheSA9IDEwMDA7IC8vIDEgc2Vjb25kXG5cblx0XHRmb3IgKGxldCBhdHRlbXB0ID0gMDsgYXR0ZW1wdCA8PSBtYXhSZXRyaWVzOyBhdHRlbXB0KyspIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZW5kcG9pbnQsIHtcblx0XHRcdFx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHRcdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuXHRcdFx0XHRcdFx0J0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dGhpcy5jb25maWcuYXBpS2V5fWBcblx0XHRcdFx0XHR9LFxuXHRcdFx0XHRcdGJvZHk6IHJlcXVlc3RCb2R5XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGlmIChyZXNwb25zZS5vaykge1xuXHRcdFx0XHRcdGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGEuY2hvaWNlc1swXS5tZXNzYWdlLmNvbnRlbnQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDaGVjayBpZiBpdCdzIGEgNTAwLWxldmVsIGVycm9yIHRoYXQgd2Ugc2hvdWxkIHJldHJ5XG5cdFx0XHRcdGlmIChyZXNwb25zZS5zdGF0dXMgPj0gNTAwICYmIGF0dGVtcHQgPCBtYXhSZXRyaWVzKSB7XG5cdFx0XHRcdFx0Y29uc3QgZGVsYXkgPSBiYXNlRGVsYXkgKiBNYXRoLnBvdygyLCBhdHRlbXB0KTsgLy8gRXhwb25lbnRpYWwgYmFja29mZlxuXHRcdFx0XHRcdGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBkZWxheSkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlOyAvLyBSZXRyeVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gRm9yIGFsbCBvdGhlciBlcnJvcnMgb3IgZmluYWwgYXR0ZW1wdCwgdGhyb3cgZXJyb3Jcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBPcGVuQUkgQVBJIGVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YCk7XG5cblx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdC8vIE5ldHdvcmsgZXJyb3JzIC0gcmV0cnkgaWYgbm90IGZpbmFsIGF0dGVtcHRcblx0XHRcdFx0aWYgKGF0dGVtcHQgPCBtYXhSZXRyaWVzICYmIGVycm9yIGluc3RhbmNlb2YgRXJyb3IgJiYgZXJyb3IubWVzc2FnZS5pbmNsdWRlcygnZmV0Y2gnKSkge1xuXHRcdFx0XHRcdGNvbnN0IGRlbGF5ID0gYmFzZURlbGF5ICogTWF0aC5wb3coMiwgYXR0ZW1wdCk7XG5cdFx0XHRcdFx0YXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIGRlbGF5KSk7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdC8vIFJlLXRocm93IHRoZSBlcnJvciBpZiBpdCdzIHRoZSBmaW5hbCBhdHRlbXB0IG9yIG5vdCBhIG5ldHdvcmsgZXJyb3Jcblx0XHRcdFx0dGhyb3cgZXJyb3I7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gVGhpcyBzaG91bGQgbmV2ZXIgYmUgcmVhY2hlZCwgYnV0IFR5cGVTY3JpcHQgd2FudHMgaXRcblx0XHR0aHJvdyBuZXcgRXJyb3IoJ09wZW5BSSBBUEk6IE1heGltdW0gcmV0cmllcyBleGNlZWRlZCcpO1xuXHR9XG5cblx0YXN5bmMgY29tcGxldGUoc3lzdGVtUHJvbXB0OiBzdHJpbmcsIHVzZXJQcm9tcHQ6IHN0cmluZywgb3B0aW9ucz86IEFJR2VuZXJhdGlvbk9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdGNvbnN0IG1lc3NhZ2VzOiBBSU1lc3NhZ2VbXSA9IFtcblx0XHRcdHsgcm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6IHN5c3RlbVByb21wdCB9LFxuXHRcdFx0eyByb2xlOiAndXNlcicsIGNvbnRlbnQ6IHVzZXJQcm9tcHQgfVxuXHRcdF07XG5cdFx0cmV0dXJuIHRoaXMuY2hhdENvbXBsZXRpb24obWVzc2FnZXMsIG9wdGlvbnMpO1xuXHR9XG5cblx0YXN5bmMgKmNoYXRDb21wbGV0aW9uU3RyZWFtKG1lc3NhZ2VzOiBBSU1lc3NhZ2VbXSwgb3B0aW9ucz86IEFJR2VuZXJhdGlvbk9wdGlvbnMpOiBBc3luY0dlbmVyYXRvcjxBSVN0cmVhbVJlc3BvbnNlPiB7XG5cdFx0aWYgKCF0aGlzLmNvbmZpZy5hcGlLZXkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignT3BlbkFJIEFQSSBrZXkgbm90IGNvbmZpZ3VyZWQnKTtcblx0XHR9XG5cblx0XHRjb25zdCByZXF1ZXN0TWVzc2FnZXMgPSBbLi4ubWVzc2FnZXNdO1xuXHRcdGlmIChvcHRpb25zPy5zeXN0ZW1Qcm9tcHQpIHtcblx0XHRcdHJlcXVlc3RNZXNzYWdlcy51bnNoaWZ0KHsgcm9sZTogJ3N5c3RlbScsIGNvbnRlbnQ6IG9wdGlvbnMuc3lzdGVtUHJvbXB0IH0pO1xuXHRcdH1cblxuXHRcdGNvbnN0IGJhc2VVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsIHx8ICdodHRwczovL2FwaS5vcGVuYWkuY29tL3YxJztcblx0XHRjb25zdCBlbmRwb2ludCA9IGJhc2VVcmwuZW5kc1dpdGgoJy9jaGF0L2NvbXBsZXRpb25zJykgPyBiYXNlVXJsIDogYCR7YmFzZVVybH0vY2hhdC9jb21wbGV0aW9uc2A7XG5cdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChlbmRwb2ludCwge1xuXHRcdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdCdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG5cdFx0XHRcdCdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3RoaXMuY29uZmlnLmFwaUtleX1gXG5cdFx0XHR9LFxuXHRcdFx0Ym9keTogSlNPTi5zdHJpbmdpZnkoe1xuXHRcdFx0XHRtb2RlbDogb3B0aW9ucz8ubW9kZWwgfHwgdGhpcy5jb25maWcubW9kZWwgfHwgJ2dwdC0zLjUtdHVyYm8nLFxuXHRcdFx0XHRtZXNzYWdlczogcmVxdWVzdE1lc3NhZ2VzLFxuXHRcdFx0XHRtYXhfdG9rZW5zOiBvcHRpb25zPy5tYXhUb2tlbnMgfHwgdGhpcy5jb25maWcubWF4VG9rZW5zIHx8IDEwMDAsXG5cdFx0XHRcdHRlbXBlcmF0dXJlOiBvcHRpb25zPy50ZW1wZXJhdHVyZSB8fCB0aGlzLmNvbmZpZy50ZW1wZXJhdHVyZSB8fCAwLjcsXG5cdFx0XHRcdHN0cmVhbTogdHJ1ZVxuXHRcdFx0fSlcblx0XHR9KTtcblxuXHRcdGlmICghcmVzcG9uc2Uub2spIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgT3BlbkFJIEFQSSBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuXHRcdH1cblxuXHRcdGNvbnN0IHJlYWRlciA9IHJlc3BvbnNlLmJvZHk/LmdldFJlYWRlcigpO1xuXHRcdGlmICghcmVhZGVyKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0ZhaWxlZCB0byBnZXQgcmVzcG9uc2UgcmVhZGVyJyk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZGVjb2RlciA9IG5ldyBUZXh0RGVjb2RlcigpO1xuXHRcdGxldCBidWZmZXIgPSAnJztcblxuXHRcdHRyeSB7XG5cdFx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0XHRjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuXHRcdFx0XHRpZiAoZG9uZSkgYnJlYWs7XG5cblx0XHRcdFx0YnVmZmVyICs9IGRlY29kZXIuZGVjb2RlKHZhbHVlLCB7IHN0cmVhbTogdHJ1ZSB9KTtcblx0XHRcdFx0Y29uc3QgbGluZXMgPSBidWZmZXIuc3BsaXQoJ1xcbicpO1xuXHRcdFx0XHRidWZmZXIgPSBsaW5lcy5wb3AoKSB8fCAnJztcblxuXHRcdFx0XHRmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcblx0XHRcdFx0XHRpZiAobGluZS5zdGFydHNXaXRoKCdkYXRhOiAnKSkge1xuXHRcdFx0XHRcdFx0Y29uc3QgZGF0YSA9IGxpbmUuc2xpY2UoNik7XG5cdFx0XHRcdFx0XHRpZiAoZGF0YSA9PT0gJ1tET05FXScpIHtcblx0XHRcdFx0XHRcdFx0eWllbGQgeyBjb250ZW50OiAnJywgZG9uZTogdHJ1ZSB9O1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoZGF0YSk7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IGNvbnRlbnQgPSBwYXJzZWQuY2hvaWNlcz8uWzBdPy5kZWx0YT8uY29udGVudDtcblx0XHRcdFx0XHRcdFx0aWYgKGNvbnRlbnQpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBTcGxpdCBjb250ZW50IGludG8gc21hbGxlciBjaHVua3MgZm9yIGNvbnNpc3RlbnQgdHlwZXdyaXRlciBlZmZlY3Rcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBjaHVua1NpemUgPSAzOyAvLyBDaGFyYWN0ZXJzIHBlciBjaHVua1xuXHRcdFx0XHRcdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgY29udGVudC5sZW5ndGg7IGkgKz0gY2h1bmtTaXplKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb25zdCBjaHVuayA9IGNvbnRlbnQuc2xpY2UoaSwgaSArIGNodW5rU2l6ZSk7XG5cdFx0XHRcdFx0XHRcdFx0XHR5aWVsZCB7IGNvbnRlbnQ6IGNodW5rLCBkb25lOiBmYWxzZSB9O1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU21hbGwgZGVsYXkgYmV0d2VlbiBjaHVua3MgdG8gY3JlYXRlIHNtb290aCB0eXBld3JpdGVyIGVmZmVjdFxuXHRcdFx0XHRcdFx0XHRcdFx0YXdhaXQgbmV3IFByb21pc2UocmVzb2x2ZSA9PiBzZXRUaW1lb3V0KHJlc29sdmUsIDIwKSk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFNraXAgbWFsZm9ybWVkIEpTT05cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0cmVhZGVyLnJlbGVhc2VMb2NrKCk7XG5cdFx0fVxuXG5cdFx0eWllbGQgeyBjb250ZW50OiAnJywgZG9uZTogdHJ1ZSB9O1xuXHR9XG5cblx0LyoqXG5cdCAqIEZldGNoIGF2YWlsYWJsZSBtb2RlbHMgZnJvbSBPcGVuQUkgQVBJXG5cdCAqL1xuXHRhc3luYyBnZXRBdmFpbGFibGVNb2RlbHMoKTogUHJvbWlzZTxzdHJpbmdbXT4ge1xuXHRcdGlmICghdGhpcy5jb25maWcuYXBpS2V5KSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ09wZW5BSSBBUEkga2V5IG5vdCBjb25maWd1cmVkJyk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgaGF2ZSBjYWNoZWQgbW9kZWxzLCByZXR1cm4gdGhlbVxuXHRcdGlmICh0aGlzLmNhY2hlZE1vZGVscykge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2FjaGVkTW9kZWxzO1xuXHRcdH1cblxuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBiYXNlVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCB8fCAnaHR0cHM6Ly9hcGkub3BlbmFpLmNvbS92MSc7XG5cdFx0XHRjb25zdCBlbmRwb2ludCA9IGJhc2VVcmwuZW5kc1dpdGgoJy9tb2RlbHMnKSA/IGJhc2VVcmwgOiBgJHtiYXNlVXJsfS9tb2RlbHNgO1xuXHRcdFx0XG5cdFx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGVuZHBvaW50LCB7XG5cdFx0XHRcdG1ldGhvZDogJ0dFVCcsXG5cdFx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0XHQnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0aGlzLmNvbmZpZy5hcGlLZXl9YFxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKCFyZXNwb25zZS5vaykge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEFQSSByZXF1ZXN0IGZhaWxlZDogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXHRcdFx0XG5cdFx0XHQvLyBSZXR1cm4gaGFyZGNvZGVkIGN1cnJlbnQgbW9kZWxzXG5cdFx0XHRjb25zdCBtb2RlbHMgPSBbXG5cdFx0XHRcdCdncHQtNC4xLTIwMjUtMDQtMTQnLFxuXHRcdFx0XHQnZ3B0LTQuMS1taW5pLTIwMjUtMDQtMTQnLFxuXHRcdFx0XHQnZ3B0LTQuMS1uYW5vLTIwMjUtMDQtMTQnLFxuXHRcdFx0XHQnZ3B0LTRvJyxcblx0XHRcdFx0J2dwdC00by1taW5pJ1xuXHRcdFx0XTtcblxuXHRcdFx0dGhpcy5jYWNoZWRNb2RlbHMgPSBtb2RlbHM7XG5cdFx0XHRyZXR1cm4gbW9kZWxzO1xuXHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBmZXRjaCBPcGVuQUkgbW9kZWxzOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfWApO1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBDbGVhciBjYWNoZWQgbW9kZWxzXG5cdCAqL1xuXHRjbGVhck1vZGVsQ2FjaGUoKTogdm9pZCB7XG5cdFx0dGhpcy5jYWNoZWRNb2RlbHMgPSBudWxsO1xuXHR9XG59IiwgImltcG9ydCB7IEFJUHJvdmlkZXIsIEFJTWVzc2FnZSwgQUlHZW5lcmF0aW9uT3B0aW9ucywgQUlTdHJlYW1SZXNwb25zZSwgUHJvdmlkZXJDb25maWcgfSBmcm9tICcuLi90eXBlcyc7XG5cbmV4cG9ydCBjbGFzcyBHb29nbGVQcm92aWRlciBpbXBsZW1lbnRzIEFJUHJvdmlkZXIge1xuXHRuYW1lID0gJ0dvb2dsZSAoR2VtaW5pKSc7XG5cdHByaXZhdGUgY29uZmlnOiBQcm92aWRlckNvbmZpZztcblx0cHJpdmF0ZSBjYWNoZWRNb2RlbHM6IHN0cmluZ1tdIHwgbnVsbCA9IG51bGw7XG5cblx0Y29uc3RydWN0b3IoY29uZmlnOiBQcm92aWRlckNvbmZpZykge1xuXHRcdHRoaXMuY29uZmlnID0gY29uZmlnO1xuXHR9XG5cblx0dXBkYXRlQ29uZmlnKGNvbmZpZzogUHJvdmlkZXJDb25maWcpIHtcblx0XHR0aGlzLmNvbmZpZyA9IGNvbmZpZztcblx0fVxuXG5cdGFzeW5jIGlzQXZhaWxhYmxlKCk6IFByb21pc2U8Ym9vbGVhbj4ge1xuXHRcdHJldHVybiAhIXRoaXMuY29uZmlnLmFwaUtleTtcblx0fVxuXG5cdGFzeW5jIGdlbmVyYXRlVGV4dChwcm9tcHQ6IHN0cmluZywgb3B0aW9ucz86IEFJR2VuZXJhdGlvbk9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdGNvbnN0IG1lc3NhZ2VzOiBBSU1lc3NhZ2VbXSA9IFt7IHJvbGU6ICd1c2VyJywgY29udGVudDogcHJvbXB0IH1dO1xuXHRcdHJldHVybiB0aGlzLmNoYXRDb21wbGV0aW9uKG1lc3NhZ2VzLCBvcHRpb25zKTtcblx0fVxuXG5cdGFzeW5jICpnZW5lcmF0ZVRleHRTdHJlYW0ocHJvbXB0OiBzdHJpbmcsIG9wdGlvbnM/OiBBSUdlbmVyYXRpb25PcHRpb25zKTogQXN5bmNHZW5lcmF0b3I8QUlTdHJlYW1SZXNwb25zZT4ge1xuXHRcdGNvbnN0IG1lc3NhZ2VzOiBBSU1lc3NhZ2VbXSA9IFt7IHJvbGU6ICd1c2VyJywgY29udGVudDogcHJvbXB0IH1dO1xuXHRcdHlpZWxkKiB0aGlzLmNoYXRDb21wbGV0aW9uU3RyZWFtKG1lc3NhZ2VzLCBvcHRpb25zKTtcblx0fVxuXG5cdHByaXZhdGUgZm9ybWF0TWVzc2FnZXNGb3JHZW1pbmkobWVzc2FnZXM6IEFJTWVzc2FnZVtdKTogYW55IHtcblx0XHRjb25zdCBjb250ZW50cyA9IFtdO1xuXG5cdFx0Zm9yIChjb25zdCBtZXNzYWdlIG9mIG1lc3NhZ2VzKSB7XG5cdFx0XHRjb25zdCByb2xlID0gbWVzc2FnZS5yb2xlID09PSAnYXNzaXN0YW50JyA/ICdtb2RlbCcgOiAndXNlcic7XG5cdFx0XHRjb250ZW50cy5wdXNoKHtcblx0XHRcdFx0cm9sZSxcblx0XHRcdFx0cGFydHM6IFt7IHRleHQ6IG1lc3NhZ2UuY29udGVudCB9XVxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0Ly8gRW5zdXJlIHdlIGhhdmUgYXQgbGVhc3Qgb25lIG1lc3NhZ2Vcblx0XHRpZiAoY29udGVudHMubGVuZ3RoID09PSAwKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ05vIG1lc3NhZ2VzIHByb3ZpZGVkIGZvciBHb29nbGUgQVBJJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGNvbnRlbnRzO1xuXHR9XG5cblx0YXN5bmMgY2hhdENvbXBsZXRpb24obWVzc2FnZXM6IEFJTWVzc2FnZVtdLCBvcHRpb25zPzogQUlHZW5lcmF0aW9uT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG5cdFx0aWYgKCF0aGlzLmNvbmZpZy5hcGlLZXkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignR29vZ2xlIEFQSSBrZXkgbm90IGNvbmZpZ3VyZWQnKTtcblx0XHR9XG5cblx0XHQvLyBVc2UgYSBuZXdlciBtb2RlbCBieSBkZWZhdWx0IGlmIG5vIG1vZGVsIGlzIHNwZWNpZmllZFxuXHRcdGNvbnN0IG1vZGVsID0gb3B0aW9ucz8ubW9kZWwgfHwgdGhpcy5jb25maWcubW9kZWwgfHwgJ2dlbWluaS0yLjAtZmxhc2gnO1xuXHRcdGNvbnN0IHVybCA9IGBodHRwczovL2dlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbS92MWJldGEvbW9kZWxzLyR7bW9kZWx9OmdlbmVyYXRlQ29udGVudD9rZXk9JHt0aGlzLmNvbmZpZy5hcGlLZXl9YDtcblx0XHRcblxuXHRcdGNvbnN0IHJlcXVlc3RCb2R5OiBhbnkgPSB7XG5cdFx0XHRjb250ZW50czogdGhpcy5mb3JtYXRNZXNzYWdlc0ZvckdlbWluaShtZXNzYWdlcyksXG5cdFx0XHRnZW5lcmF0aW9uQ29uZmlnOiB7XG5cdFx0XHRcdHRlbXBlcmF0dXJlOiBvcHRpb25zPy50ZW1wZXJhdHVyZSB8fCB0aGlzLmNvbmZpZy50ZW1wZXJhdHVyZSB8fCAwLjcsXG5cdFx0XHRcdG1heE91dHB1dFRva2Vuczogb3B0aW9ucz8ubWF4VG9rZW5zIHx8IHRoaXMuY29uZmlnLm1heFRva2VucyB8fCAxMDAwXG5cdFx0XHR9XG5cdFx0fTtcblxuXHRcdC8vIEFkZCBzeXN0ZW0gaW5zdHJ1Y3Rpb24gaWYgcHJvdmlkZWQgKEdvb2dsZSdzIHByb3BlciBmb3JtYXQpXG5cdFx0aWYgKG9wdGlvbnM/LnN5c3RlbVByb21wdCAmJiBvcHRpb25zLnN5c3RlbVByb21wdC50cmltKCkpIHtcblx0XHRcdHJlcXVlc3RCb2R5LnN5c3RlbUluc3RydWN0aW9uID0ge1xuXHRcdFx0XHRwYXJ0czogW3sgdGV4dDogb3B0aW9ucy5zeXN0ZW1Qcm9tcHQgfV1cblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIHtcblx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0aGVhZGVyczoge1xuXHRcdFx0XHQnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG5cdFx0XHR9LFxuXHRcdFx0Ym9keTogSlNPTi5zdHJpbmdpZnkocmVxdWVzdEJvZHkpXG5cdFx0fSk7XG5cblx0XHRpZiAoIXJlc3BvbnNlLm9rKSB7XG5cdFx0XHRjb25zdCBlcnJvclRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG5cdFx0XHRsZXQgZXJyb3JNZXNzYWdlID0gJyc7XG5cdFx0XHRcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbnN0IGVycm9yRGF0YSA9IEpTT04ucGFyc2UoZXJyb3JUZXh0KTtcblx0XHRcdFx0aWYgKGVycm9yRGF0YS5lcnJvcikge1xuXHRcdFx0XHRcdC8vIEZvcm1hdCBhcyBbQ09ERV06IG1lc3NhZ2Vcblx0XHRcdFx0XHRjb25zdCBjb2RlID0gZXJyb3JEYXRhLmVycm9yLmNvZGUgfHwgcmVzcG9uc2Uuc3RhdHVzO1xuXHRcdFx0XHRcdGNvbnN0IG1lc3NhZ2UgPSBlcnJvckRhdGEuZXJyb3IubWVzc2FnZSB8fCBlcnJvckRhdGEuZXJyb3Iuc3RhdHVzIHx8IHJlc3BvbnNlLnN0YXR1c1RleHQ7XG5cdFx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gYFske2NvZGV9XTogJHttZXNzYWdlfWA7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0Ly8gQWRkIHNwZWNpZmljIGd1aWRhbmNlIGZvciBjb21tb24gZXJyb3JzXG5cdFx0XHRcdFx0aWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDAwKSB7XG5cdFx0XHRcdFx0XHRlcnJvck1lc3NhZ2UgKz0gJyAoQ2hlY2sgcmVxdWVzdCBmb3JtYXQgb3IgbW9kZWwgbmFtZSknO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDEpIHtcblx0XHRcdFx0XHRcdGVycm9yTWVzc2FnZSArPSAnIChDaGVjayBBUEkga2V5IGluIHNldHRpbmdzKSc7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQwNCkge1xuXHRcdFx0XHRcdFx0ZXJyb3JNZXNzYWdlICs9ICcgKE1vZGVsIG1heSBub3QgYmUgYXZhaWxhYmxlKSc7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChyZXNwb25zZS5zdGF0dXMgPT09IDQyOSkge1xuXHRcdFx0XHRcdFx0ZXJyb3JNZXNzYWdlICs9ICcgKFJhdGUgbGltaXQgZXhjZWVkZWQpJztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gYFske3Jlc3BvbnNlLnN0YXR1c31dOiAke2Vycm9yVGV4dH1gO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdGVycm9yTWVzc2FnZSA9IGBbJHtyZXNwb25zZS5zdGF0dXN9XTogJHtlcnJvclRleHQgfHwgcmVzcG9uc2Uuc3RhdHVzVGV4dH1gO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBMb2cgZGV0YWlsZWQgZXJyb3IgZm9yIGRlYnVnZ2luZ1xuXHRcdFx0Y29uc29sZS5lcnJvcignR29vZ2xlIEFQSSBFcnJvciBEZXRhaWxzOicsIHtcblx0XHRcdFx0c3RhdHVzOiByZXNwb25zZS5zdGF0dXMsXG5cdFx0XHRcdHN0YXR1c1RleHQ6IHJlc3BvbnNlLnN0YXR1c1RleHQsXG5cdFx0XHRcdGVycm9yVGV4dDogZXJyb3JUZXh0LFxuXHRcdFx0XHRyZXF1ZXN0Qm9keTogcmVxdWVzdEJvZHksXG5cdFx0XHRcdG1vZGVsOiBtb2RlbCxcblx0XHRcdFx0dXJsOiB1cmxcblx0XHRcdH0pO1xuXHRcdFx0XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEdvb2dsZSBBUEkgZXJyb3IgJHtlcnJvck1lc3NhZ2V9YCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgZGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcblx0XHRcblx0XHRcblx0XHQvLyBDaGVjayBpZiByZXNwb25zZSBoYXMgdmFsaWQgc3RydWN0dXJlXG5cdFx0aWYgKCFkYXRhLmNhbmRpZGF0ZXMgfHwgZGF0YS5jYW5kaWRhdGVzLmxlbmd0aCA9PT0gMCkge1xuXHRcdFx0Ly8gQ2hlY2sgaWYgdGhlcmUncyBhbiBlcnJvciBtZXNzYWdlIGluIHRoZSByZXNwb25zZVxuXHRcdFx0aWYgKGRhdGEuZXJyb3IpIHtcblx0XHRcdFx0dGhyb3cgbmV3IEVycm9yKGBHb29nbGUgQVBJIGVycm9yOiAke2RhdGEuZXJyb3IubWVzc2FnZSB8fCBKU09OLnN0cmluZ2lmeShkYXRhLmVycm9yKX1gKTtcblx0XHRcdH1cblx0XHRcdHRocm93IG5ldyBFcnJvcignR29vZ2xlIEFQSSByZXR1cm5lZCBubyBjYW5kaWRhdGVzJyk7XG5cdFx0fVxuXHRcdFxuXHRcdC8vIENoZWNrIGlmIHRoZSByZXNwb25zZSB3YXMgYmxvY2tlZCBvciBmaWx0ZXJlZFxuXHRcdGlmIChkYXRhLmNhbmRpZGF0ZXNbMF0uZmluaXNoUmVhc29uID09PSAnU0FGRVRZJyB8fCBkYXRhLmNhbmRpZGF0ZXNbMF0uZmluaXNoUmVhc29uID09PSAnQkxPQ0tFRCcpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignR29vZ2xlIEFQSSBibG9ja2VkIHRoZSByZXNwb25zZSBkdWUgdG8gc2FmZXR5IGZpbHRlcnMnKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gQ2hlY2sgaWYgd2UgaGl0IHRoZSB0b2tlbiBsaW1pdCBiZWZvcmUgZ2VuZXJhdGluZyBjb250ZW50XG5cdFx0aWYgKGRhdGEuY2FuZGlkYXRlc1swXS5maW5pc2hSZWFzb24gPT09ICdNQVhfVE9LRU5TJyAmJiBcblx0XHQgICAgKCFkYXRhLmNhbmRpZGF0ZXNbMF0uY29udGVudCB8fCAhZGF0YS5jYW5kaWRhdGVzWzBdLmNvbnRlbnQucGFydHMgfHwgZGF0YS5jYW5kaWRhdGVzWzBdLmNvbnRlbnQucGFydHMubGVuZ3RoID09PSAwKSkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdBUEkgaGl0IHRva2VuIGxpbWl0IGJlZm9yZSBnZW5lcmF0aW5nIGFueSBjb250ZW50LiBQbGVhc2UgaW5jcmVhc2UgXCJEZWZhdWx0IE1heCBUb2tlbnNcIiBpbiBzZXR0aW5ncy4nKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gQ2hlY2sgaWYgcmVzcG9uc2UgaGFzIGNvbnRlbnRcblx0XHRpZiAoZGF0YS5jYW5kaWRhdGVzWzBdLmNvbnRlbnQgJiYgZGF0YS5jYW5kaWRhdGVzWzBdLmNvbnRlbnQucGFydHMgJiYgZGF0YS5jYW5kaWRhdGVzWzBdLmNvbnRlbnQucGFydHMubGVuZ3RoID4gMCkge1xuXHRcdFx0Y29uc3QgdGV4dCA9IGRhdGEuY2FuZGlkYXRlc1swXS5jb250ZW50LnBhcnRzWzBdLnRleHQ7XG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0Ly8gSWYgcmVzcG9uc2Ugd2FzIHRydW5jYXRlZCwgdGhyb3cgZXJyb3IgaW5zdGVhZCBvZiByZXR1cm5pbmcgcGFydGlhbCBjb250ZW50XG5cdFx0XHRpZiAoZGF0YS5jYW5kaWRhdGVzWzBdLmZpbmlzaFJlYXNvbiA9PT0gJ01BWF9UT0tFTlMnKSB7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignUmVzcG9uc2Ugd2FzIHRydW5jYXRlZCBkdWUgdG8gdG9rZW4gbGltaXQuIFBsZWFzZSBpbmNyZWFzZSBcIkRlZmF1bHQgTWF4IFRva2Vuc1wiIGluIHNldHRpbmdzLicpO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHQvLyBNYWtlIHN1cmUgd2UgaGF2ZSBhY3R1YWwgdGV4dCBjb250ZW50XG5cdFx0XHRpZiAoIXRleHQgfHwgdGV4dC50cmltKCkubGVuZ3RoID09PSAwKSB7XG5cdFx0XHRcdGNvbnNvbGUuZXJyb3IoJ0dvb2dsZSBBUEkgcmV0dXJuZWQgZW1wdHkgdGV4dCBjb250ZW50Jyk7XG5cdFx0XHRcdHRocm93IG5ldyBFcnJvcignR29vZ2xlIEFQSSByZXR1cm5lZCBlbXB0eSB0ZXh0IGNvbnRlbnQnKTtcblx0XHRcdH1cblx0XHRcdFxuXHRcdFx0cmV0dXJuIHRleHQ7XG5cdFx0fVxuXHRcdFxuXHRcdHRocm93IG5ldyBFcnJvcignR29vZ2xlIEFQSSByZXR1cm5lZCBlbXB0eSByZXNwb25zZScpO1xuXHR9XG5cblx0YXN5bmMgY29tcGxldGUoc3lzdGVtUHJvbXB0OiBzdHJpbmcsIHVzZXJQcm9tcHQ6IHN0cmluZywgb3B0aW9ucz86IEFJR2VuZXJhdGlvbk9wdGlvbnMpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdGNvbnN0IG1lc3NhZ2VzOiBBSU1lc3NhZ2VbXSA9IFt7IHJvbGU6ICd1c2VyJywgY29udGVudDogdXNlclByb21wdCB9XTtcblx0XHRjb25zdCBjb21wbGV0ZU9wdGlvbnMgPSB7IC4uLm9wdGlvbnMsIHN5c3RlbVByb21wdCB9O1xuXHRcdHJldHVybiB0aGlzLmNoYXRDb21wbGV0aW9uKG1lc3NhZ2VzLCBjb21wbGV0ZU9wdGlvbnMpO1xuXHR9XG5cblx0YXN5bmMgKmNoYXRDb21wbGV0aW9uU3RyZWFtKG1lc3NhZ2VzOiBBSU1lc3NhZ2VbXSwgb3B0aW9ucz86IEFJR2VuZXJhdGlvbk9wdGlvbnMpOiBBc3luY0dlbmVyYXRvcjxBSVN0cmVhbVJlc3BvbnNlPiB7XG5cdFx0aWYgKCF0aGlzLmNvbmZpZy5hcGlLZXkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignR29vZ2xlIEFQSSBrZXkgbm90IGNvbmZpZ3VyZWQnKTtcblx0XHR9XG5cblx0XHQvLyBVc2UgYSBuZXdlciBtb2RlbCBieSBkZWZhdWx0IGlmIG5vIG1vZGVsIGlzIHNwZWNpZmllZFxuXHRcdGNvbnN0IG1vZGVsID0gb3B0aW9ucz8ubW9kZWwgfHwgdGhpcy5jb25maWcubW9kZWwgfHwgJ2dlbWluaS0yLjAtZmxhc2gnO1xuXHRcdGNvbnN0IHVybCA9IGBodHRwczovL2dlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbS92MWJldGEvbW9kZWxzLyR7bW9kZWx9OnN0cmVhbUdlbmVyYXRlQ29udGVudD9rZXk9JHt0aGlzLmNvbmZpZy5hcGlLZXl9YDtcblxuXHRcdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG5cdFx0XHRtZXRob2Q6ICdQT1NUJyxcblx0XHRcdGhlYWRlcnM6IHtcblx0XHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuXHRcdFx0fSxcblx0XHRcdGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcblx0XHRcdFx0Y29udGVudHM6IHRoaXMuZm9ybWF0TWVzc2FnZXNGb3JHZW1pbmkobWVzc2FnZXMpLFxuXHRcdFx0XHRnZW5lcmF0aW9uQ29uZmlnOiB7XG5cdFx0XHRcdFx0dGVtcGVyYXR1cmU6IG9wdGlvbnM/LnRlbXBlcmF0dXJlIHx8IHRoaXMuY29uZmlnLnRlbXBlcmF0dXJlIHx8IDAuNyxcblx0XHRcdFx0XHRtYXhPdXRwdXRUb2tlbnM6IG9wdGlvbnM/Lm1heFRva2VucyB8fCB0aGlzLmNvbmZpZy5tYXhUb2tlbnMgfHwgMTAwMFxuXHRcdFx0XHR9LFxuXHRcdFx0XHQuLi4ob3B0aW9ucz8uc3lzdGVtUHJvbXB0ICYmIG9wdGlvbnMuc3lzdGVtUHJvbXB0LnRyaW0oKSA/IHtcblx0XHRcdFx0XHRzeXN0ZW1JbnN0cnVjdGlvbjoge1xuXHRcdFx0XHRcdFx0cGFydHM6IFt7IHRleHQ6IG9wdGlvbnMuc3lzdGVtUHJvbXB0IH1dXG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IDoge30pXG5cdFx0XHR9KVxuXHRcdH0pO1xuXG5cdFx0aWYgKCFyZXNwb25zZS5vaykge1xuXHRcdFx0Y29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuXHRcdFx0bGV0IGVycm9yTWVzc2FnZSA9ICcnO1xuXHRcdFx0XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRjb25zdCBlcnJvckRhdGEgPSBKU09OLnBhcnNlKGVycm9yVGV4dCk7XG5cdFx0XHRcdGlmIChlcnJvckRhdGEuZXJyb3IpIHtcblx0XHRcdFx0XHRjb25zdCBjb2RlID0gZXJyb3JEYXRhLmVycm9yLmNvZGUgfHwgcmVzcG9uc2Uuc3RhdHVzO1xuXHRcdFx0XHRcdGNvbnN0IG1lc3NhZ2UgPSBlcnJvckRhdGEuZXJyb3IubWVzc2FnZSB8fCBlcnJvckRhdGEuZXJyb3Iuc3RhdHVzIHx8IHJlc3BvbnNlLnN0YXR1c1RleHQ7XG5cdFx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gYFske2NvZGV9XTogJHttZXNzYWdlfWA7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZXJyb3JNZXNzYWdlID0gYFske3Jlc3BvbnNlLnN0YXR1c31dOiAke2Vycm9yVGV4dH1gO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdGVycm9yTWVzc2FnZSA9IGBbJHtyZXNwb25zZS5zdGF0dXN9XTogJHtlcnJvclRleHQgfHwgcmVzcG9uc2Uuc3RhdHVzVGV4dH1gO1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEdvb2dsZSBBUEkgZXJyb3IgJHtlcnJvck1lc3NhZ2V9YCk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVhZGVyID0gcmVzcG9uc2UuYm9keT8uZ2V0UmVhZGVyKCk7XG5cdFx0aWYgKCFyZWFkZXIpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignRmFpbGVkIHRvIGdldCByZXNwb25zZSByZWFkZXInKTtcblx0XHR9XG5cblx0XHRjb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCk7XG5cdFx0bGV0IGJ1ZmZlciA9ICcnO1xuXHRcdGxldCBqc29uQnVmZmVyID0gJyc7XG5cdFx0bGV0IGJyYWNlQ291bnQgPSAwO1xuXHRcdGxldCBpbkpzb24gPSBmYWxzZTtcblxuXHRcdHRyeSB7XG5cdFx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0XHRjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuXHRcdFx0XHRpZiAoZG9uZSkgYnJlYWs7XG5cblx0XHRcdFx0YnVmZmVyICs9IGRlY29kZXIuZGVjb2RlKHZhbHVlLCB7IHN0cmVhbTogdHJ1ZSB9KTtcblx0XHRcdFx0XG5cdFx0XHRcdC8vIFByb2Nlc3MgY2hhcmFjdGVyIGJ5IGNoYXJhY3RlciB0byBwcm9wZXJseSBwYXJzZSB0aGUgc3RyZWFtaW5nIEpTT05cblx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBidWZmZXIubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0XHRjb25zdCBjaGFyID0gYnVmZmVyW2ldO1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmIChjaGFyID09PSAneycpIHtcblx0XHRcdFx0XHRcdGlmICghaW5Kc29uKSB7XG5cdFx0XHRcdFx0XHRcdGluSnNvbiA9IHRydWU7XG5cdFx0XHRcdFx0XHRcdGpzb25CdWZmZXIgPSAnJztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGJyYWNlQ291bnQrKztcblx0XHRcdFx0XHRcdGpzb25CdWZmZXIgKz0gY2hhcjtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGNoYXIgPT09ICd9Jykge1xuXHRcdFx0XHRcdFx0anNvbkJ1ZmZlciArPSBjaGFyO1xuXHRcdFx0XHRcdFx0YnJhY2VDb3VudC0tO1xuXHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRpZiAoYnJhY2VDb3VudCA9PT0gMCAmJiBpbkpzb24pIHtcblx0XHRcdFx0XHRcdFx0Ly8gV2UgaGF2ZSBhIGNvbXBsZXRlIEpTT04gb2JqZWN0XG5cdFx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShqc29uQnVmZmVyKTtcblx0XHRcdFx0XHRcdFx0XHRjb25zdCB0ZXh0ID0gcGFyc2VkLmNhbmRpZGF0ZXM/LlswXT8uY29udGVudD8ucGFydHM/LlswXT8udGV4dDtcblx0XHRcdFx0XHRcdFx0XHRpZiAodGV4dCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3BsaXQgdGV4dCBpbnRvIHNtYWxsZXIgY2h1bmtzIGZvciB0eXBld3JpdGVyIGVmZmVjdFxuXHRcdFx0XHRcdFx0XHRcdFx0Y29uc3QgY2h1bmtTaXplID0gMzsgLy8gQ2hhcmFjdGVycyBwZXIgY2h1bmtcblx0XHRcdFx0XHRcdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGV4dC5sZW5ndGg7IGkgKz0gY2h1bmtTaXplKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGNodW5rID0gdGV4dC5zbGljZShpLCBpICsgY2h1bmtTaXplKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0eWllbGQgeyBjb250ZW50OiBjaHVuaywgZG9uZTogZmFsc2UgfTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU21hbGwgZGVsYXkgYmV0d2VlbiBjaHVua3MgdG8gY3JlYXRlIHNtb290aCB0eXBld3JpdGVyIGVmZmVjdFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMjApKTtcblx0XHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gY2F0Y2ggKGUpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBTa2lwIG1hbGZvcm1lZCBKU09OXG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0XG5cdFx0XHRcdFx0XHRcdGluSnNvbiA9IGZhbHNlO1xuXHRcdFx0XHRcdFx0XHRqc29uQnVmZmVyID0gJyc7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChpbkpzb24pIHtcblx0XHRcdFx0XHRcdGpzb25CdWZmZXIgKz0gY2hhcjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0XG5cdFx0XHRcdC8vIENsZWFyIHRoZSBwcm9jZXNzZWQgYnVmZmVyXG5cdFx0XHRcdGJ1ZmZlciA9ICcnO1xuXHRcdFx0fVxuXHRcdH0gZmluYWxseSB7XG5cdFx0XHRyZWFkZXIucmVsZWFzZUxvY2soKTtcblx0XHR9XG5cblx0XHR5aWVsZCB7IGNvbnRlbnQ6ICcnLCBkb25lOiB0cnVlIH07XG5cdH1cblxuXHQvKipcblx0ICogRmV0Y2ggYXZhaWxhYmxlIG1vZGVscyBmcm9tIEdvb2dsZSBBUElcblx0ICovXG5cdGFzeW5jIGdldEF2YWlsYWJsZU1vZGVscygpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG5cdFx0aWYgKCF0aGlzLmNvbmZpZy5hcGlLZXkpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignR29vZ2xlIEFQSSBrZXkgbm90IGNvbmZpZ3VyZWQnKTtcblx0XHR9XG5cblx0XHQvLyBJZiB3ZSBoYXZlIGNhY2hlZCBtb2RlbHMsIHJldHVybiB0aGVtXG5cdFx0aWYgKHRoaXMuY2FjaGVkTW9kZWxzKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jYWNoZWRNb2RlbHM7XG5cdFx0fVxuXG5cdFx0dHJ5IHtcblx0XHRcdGNvbnN0IHVybCA9IGBodHRwczovL2dlbmVyYXRpdmVsYW5ndWFnZS5nb29nbGVhcGlzLmNvbS92MWJldGEvbW9kZWxzP2tleT0ke3RoaXMuY29uZmlnLmFwaUtleX1gO1xuXHRcdFx0XG5cdFx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCwge1xuXHRcdFx0XHRtZXRob2Q6ICdHRVQnLFxuXHRcdFx0XHRoZWFkZXJzOiB7XG5cdFx0XHRcdFx0J0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKCFyZXNwb25zZS5vaykge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoYEFQSSByZXF1ZXN0IGZhaWxlZDogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXHRcdFx0XG5cdFx0XHQvLyBSZXR1cm4gaGFyZGNvZGVkIGN1cnJlbnQgbW9kZWxzXG5cdFx0XHRjb25zdCBtb2RlbHMgPSBbXG5cdFx0XHRcdCdnZW1pbmktMi41LWZsYXNoLXByZXZpZXctMDQtMTcnLFxuXHRcdFx0XHQnZ2VtaW5pLTIuNS1wcm8tcHJldmlldy0wMy0yNScsXG5cdFx0XHRcdCdnZW1pbmktMi4wLWZsYXNoJyxcblx0XHRcdFx0J2dlbWluaS0yLjAtZmxhc2gtbGl0ZSdcblx0XHRcdF07XG5cblx0XHRcdHRoaXMuY2FjaGVkTW9kZWxzID0gbW9kZWxzO1xuXHRcdFx0cmV0dXJuIG1vZGVscztcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZmV0Y2ggR29vZ2xlIG1vZGVsczogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gKTtcblx0XHR9XG5cdH1cblxuXHQvKipcblx0ICogQ2xlYXIgY2FjaGVkIG1vZGVsc1xuXHQgKi9cblx0Y2xlYXJNb2RlbENhY2hlKCk6IHZvaWQge1xuXHRcdHRoaXMuY2FjaGVkTW9kZWxzID0gbnVsbDtcblx0fVxufSIsICJpbXBvcnQgeyBBSVByb3ZpZGVyLCBBSU1lc3NhZ2UsIEFJR2VuZXJhdGlvbk9wdGlvbnMsIEFJU3RyZWFtUmVzcG9uc2UsIFByb3ZpZGVyQ29uZmlnIH0gZnJvbSAnLi4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgT2xsYW1hUHJvdmlkZXIgaW1wbGVtZW50cyBBSVByb3ZpZGVyIHtcblx0bmFtZSA9ICdPbGxhbWEgKExvY2FsKSc7XG5cdHByaXZhdGUgY29uZmlnOiBQcm92aWRlckNvbmZpZztcblxuXHRjb25zdHJ1Y3Rvcihjb25maWc6IFByb3ZpZGVyQ29uZmlnKSB7XG5cdFx0dGhpcy5jb25maWcgPSBjb25maWc7XG5cdH1cblxuXHR1cGRhdGVDb25maWcoY29uZmlnOiBQcm92aWRlckNvbmZpZykge1xuXHRcdHRoaXMuY29uZmlnID0gY29uZmlnO1xuXHR9XG5cblx0YXN5bmMgaXNBdmFpbGFibGUoKTogUHJvbWlzZTxib29sZWFuPiB7XG5cdFx0aWYgKCF0aGlzLmNvbmZpZy5tb2RlbCkgcmV0dXJuIGZhbHNlOyAvLyBSZXF1aXJlIG1vZGVsIHRvIGJlIHNldFxuXHRcdFxuXHRcdHRyeSB7XG5cdFx0XHRjb25zdCBiYXNlVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCB8fCAnaHR0cDovL2xvY2FsaG9zdDoxMTQzNCc7XG5cdFx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke2Jhc2VVcmx9L2FwaS90YWdzYCwge1xuXHRcdFx0XHRtZXRob2Q6ICdHRVQnLFxuXHRcdFx0XHRoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfVxuXHRcdFx0fSk7XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2Uub2s7XG5cdFx0fSBjYXRjaCB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXHR9XG5cblx0YXN5bmMgZ2VuZXJhdGVUZXh0KHByb21wdDogc3RyaW5nLCBvcHRpb25zPzogQUlHZW5lcmF0aW9uT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG5cdFx0Y29uc3QgYmFzZVVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MTE0MzQnO1xuXHRcdGNvbnN0IG1vZGVsID0gb3B0aW9ucz8ubW9kZWwgfHwgdGhpcy5jb25maWcubW9kZWw7XG5cdFx0aWYgKCFtb2RlbCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdPbGxhbWEgbW9kZWwgbXVzdCBiZSBzcGVjaWZpZWQnKTtcblx0XHR9XG5cblx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke2Jhc2VVcmx9L2FwaS9nZW5lcmF0ZWAsIHtcblx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0aGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG5cdFx0XHRib2R5OiBKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHRcdG1vZGVsLFxuXHRcdFx0XHRwcm9tcHQsXG5cdFx0XHRcdHN0cmVhbTogZmFsc2UsXG5cdFx0XHRcdG9wdGlvbnM6IHtcblx0XHRcdFx0XHR0ZW1wZXJhdHVyZTogb3B0aW9ucz8udGVtcGVyYXR1cmUgfHwgdGhpcy5jb25maWcudGVtcGVyYXR1cmUgfHwgMC43LFxuXHRcdFx0XHRcdG51bV9wcmVkaWN0OiBvcHRpb25zPy5tYXhUb2tlbnMgfHwgdGhpcy5jb25maWcubWF4VG9rZW5zIHx8IDEwMDBcblx0XHRcdFx0fVxuXHRcdFx0fSlcblx0XHR9KTtcblxuXHRcdGlmICghcmVzcG9uc2Uub2spIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgT2xsYW1hIEFQSSBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXNUZXh0fWApO1xuXHRcdH1cblxuXHRcdGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG5cdFx0cmV0dXJuIGRhdGEucmVzcG9uc2U7XG5cdH1cblxuXHRhc3luYyAqZ2VuZXJhdGVUZXh0U3RyZWFtKHByb21wdDogc3RyaW5nLCBvcHRpb25zPzogQUlHZW5lcmF0aW9uT3B0aW9ucyk6IEFzeW5jR2VuZXJhdG9yPEFJU3RyZWFtUmVzcG9uc2U+IHtcblx0XHRjb25zdCBiYXNlVXJsID0gdGhpcy5jb25maWcuYmFzZVVybCB8fCAnaHR0cDovL2xvY2FsaG9zdDoxMTQzNCc7XG5cdFx0Y29uc3QgbW9kZWwgPSBvcHRpb25zPy5tb2RlbCB8fCB0aGlzLmNvbmZpZy5tb2RlbDtcblx0XHRpZiAoIW1vZGVsKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ09sbGFtYSBtb2RlbCBtdXN0IGJlIHNwZWNpZmllZCcpO1xuXHRcdH1cblxuXHRcdGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7YmFzZVVybH0vYXBpL2dlbmVyYXRlYCwge1xuXHRcdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0XHRoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcblx0XHRcdGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcblx0XHRcdFx0bW9kZWwsXG5cdFx0XHRcdHByb21wdCxcblx0XHRcdFx0c3RyZWFtOiB0cnVlLFxuXHRcdFx0XHRvcHRpb25zOiB7XG5cdFx0XHRcdFx0dGVtcGVyYXR1cmU6IG9wdGlvbnM/LnRlbXBlcmF0dXJlIHx8IHRoaXMuY29uZmlnLnRlbXBlcmF0dXJlIHx8IDAuNyxcblx0XHRcdFx0XHRudW1fcHJlZGljdDogb3B0aW9ucz8ubWF4VG9rZW5zIHx8IHRoaXMuY29uZmlnLm1heFRva2VucyB8fCAxMDAwXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0fSk7XG5cblx0XHRpZiAoIXJlc3BvbnNlLm9rKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYE9sbGFtYSBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcblx0XHR9XG5cblx0XHRjb25zdCByZWFkZXIgPSByZXNwb25zZS5ib2R5Py5nZXRSZWFkZXIoKTtcblx0XHRpZiAoIXJlYWRlcikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2V0IHJlc3BvbnNlIHJlYWRlcicpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcblxuXHRcdHRyeSB7XG5cdFx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0XHRjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuXHRcdFx0XHRpZiAoZG9uZSkgYnJlYWs7XG5cblx0XHRcdFx0Y29uc3QgbGluZXMgPSBkZWNvZGVyLmRlY29kZSh2YWx1ZSkuc3BsaXQoJ1xcbicpO1xuXHRcdFx0XHRmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcblx0XHRcdFx0XHRpZiAobGluZS50cmltKCkpIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UobGluZSk7XG5cdFx0XHRcdFx0XHRcdGlmIChwYXJzZWQucmVzcG9uc2UpIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBTcGxpdCB0ZXh0IGludG8gc21hbGxlciBjaHVua3MgZm9yIGNvbnNpc3RlbnQgdHlwZXdyaXRlciBlZmZlY3Rcblx0XHRcdFx0XHRcdFx0XHRjb25zdCBjaHVua1NpemUgPSAzOyAvLyBDaGFyYWN0ZXJzIHBlciBjaHVua1xuXHRcdFx0XHRcdFx0XHRcdGZvciAobGV0IGkgPSAwOyBpIDwgcGFyc2VkLnJlc3BvbnNlLmxlbmd0aDsgaSArPSBjaHVua1NpemUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGNodW5rID0gcGFyc2VkLnJlc3BvbnNlLnNsaWNlKGksIGkgKyBjaHVua1NpemUpO1xuXHRcdFx0XHRcdFx0XHRcdFx0eWllbGQgeyBjb250ZW50OiBjaHVuaywgZG9uZTogZmFsc2UgfTtcblx0XHRcdFx0XHRcdFx0XHRcdC8vIFNtYWxsIGRlbGF5IGJldHdlZW4gY2h1bmtzIHRvIGNyZWF0ZSBzbW9vdGggdHlwZXdyaXRlciBlZmZlY3Rcblx0XHRcdFx0XHRcdFx0XHRcdGF3YWl0IG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCAyMCkpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAocGFyc2VkLmRvbmUpIHtcblx0XHRcdFx0XHRcdFx0XHR5aWVsZCB7IGNvbnRlbnQ6ICcnLCBkb25lOiB0cnVlIH07XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGNhdGNoIChlKSB7XG5cdFx0XHRcdFx0XHRcdC8vIFNraXAgbWFsZm9ybWVkIEpTT05cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGZpbmFsbHkge1xuXHRcdFx0cmVhZGVyLnJlbGVhc2VMb2NrKCk7XG5cdFx0fVxuXG5cdFx0eWllbGQgeyBjb250ZW50OiAnJywgZG9uZTogdHJ1ZSB9O1xuXHR9XG5cblx0YXN5bmMgY2hhdENvbXBsZXRpb24obWVzc2FnZXM6IEFJTWVzc2FnZVtdLCBvcHRpb25zPzogQUlHZW5lcmF0aW9uT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG5cdFx0Y29uc3QgYmFzZVVybCA9IHRoaXMuY29uZmlnLmJhc2VVcmwgfHwgJ2h0dHA6Ly9sb2NhbGhvc3Q6MTE0MzQnO1xuXHRcdGNvbnN0IG1vZGVsID0gb3B0aW9ucz8ubW9kZWwgfHwgdGhpcy5jb25maWcubW9kZWw7XG5cdFx0aWYgKCFtb2RlbCkge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdPbGxhbWEgbW9kZWwgbXVzdCBiZSBzcGVjaWZpZWQnKTtcblx0XHR9XG5cblx0XHRjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGAke2Jhc2VVcmx9L2FwaS9jaGF0YCwge1xuXHRcdFx0bWV0aG9kOiAnUE9TVCcsXG5cdFx0XHRoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcblx0XHRcdGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcblx0XHRcdFx0bW9kZWwsXG5cdFx0XHRcdG1lc3NhZ2VzOiBtZXNzYWdlcy5tYXAobXNnID0+ICh7XG5cdFx0XHRcdFx0cm9sZTogbXNnLnJvbGUsXG5cdFx0XHRcdFx0Y29udGVudDogbXNnLmNvbnRlbnRcblx0XHRcdFx0fSkpLFxuXHRcdFx0XHRzdHJlYW06IGZhbHNlLFxuXHRcdFx0XHRvcHRpb25zOiB7XG5cdFx0XHRcdFx0dGVtcGVyYXR1cmU6IG9wdGlvbnM/LnRlbXBlcmF0dXJlIHx8IHRoaXMuY29uZmlnLnRlbXBlcmF0dXJlIHx8IDAuNyxcblx0XHRcdFx0XHRudW1fcHJlZGljdDogb3B0aW9ucz8ubWF4VG9rZW5zIHx8IHRoaXMuY29uZmlnLm1heFRva2VucyB8fCAxMDAwXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0fSk7XG5cblx0XHRpZiAoIXJlc3BvbnNlLm9rKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYE9sbGFtYSBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcblx0XHR9XG5cblx0XHRjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuXHRcdHJldHVybiBkYXRhLm1lc3NhZ2UuY29udGVudDtcblx0fVxuXG5cdGFzeW5jIGNvbXBsZXRlKHN5c3RlbVByb21wdDogc3RyaW5nLCB1c2VyUHJvbXB0OiBzdHJpbmcsIG9wdGlvbnM/OiBBSUdlbmVyYXRpb25PcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHRjb25zdCBtZXNzYWdlczogQUlNZXNzYWdlW10gPSBbXG5cdFx0XHR7IHJvbGU6ICdzeXN0ZW0nLCBjb250ZW50OiBzeXN0ZW1Qcm9tcHQgfSxcblx0XHRcdHsgcm9sZTogJ3VzZXInLCBjb250ZW50OiB1c2VyUHJvbXB0IH1cblx0XHRdO1xuXHRcdHJldHVybiB0aGlzLmNoYXRDb21wbGV0aW9uKG1lc3NhZ2VzLCBvcHRpb25zKTtcblx0fVxuXG5cdGFzeW5jICpjaGF0Q29tcGxldGlvblN0cmVhbShtZXNzYWdlczogQUlNZXNzYWdlW10sIG9wdGlvbnM/OiBBSUdlbmVyYXRpb25PcHRpb25zKTogQXN5bmNHZW5lcmF0b3I8QUlTdHJlYW1SZXNwb25zZT4ge1xuXHRcdGNvbnN0IGJhc2VVcmwgPSB0aGlzLmNvbmZpZy5iYXNlVXJsIHx8ICdodHRwOi8vbG9jYWxob3N0OjExNDM0Jztcblx0XHRjb25zdCBtb2RlbCA9IG9wdGlvbnM/Lm1vZGVsIHx8IHRoaXMuY29uZmlnLm1vZGVsO1xuXHRcdGlmICghbW9kZWwpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignT2xsYW1hIG1vZGVsIG11c3QgYmUgc3BlY2lmaWVkJyk7XG5cdFx0fVxuXG5cdFx0Y29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtiYXNlVXJsfS9hcGkvY2hhdGAsIHtcblx0XHRcdG1ldGhvZDogJ1BPU1QnLFxuXHRcdFx0aGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG5cdFx0XHRib2R5OiBKU09OLnN0cmluZ2lmeSh7XG5cdFx0XHRcdG1vZGVsLFxuXHRcdFx0XHRtZXNzYWdlczogbWVzc2FnZXMubWFwKG1zZyA9PiAoe1xuXHRcdFx0XHRcdHJvbGU6IG1zZy5yb2xlLFxuXHRcdFx0XHRcdGNvbnRlbnQ6IG1zZy5jb250ZW50XG5cdFx0XHRcdH0pKSxcblx0XHRcdFx0c3RyZWFtOiB0cnVlLFxuXHRcdFx0XHRvcHRpb25zOiB7XG5cdFx0XHRcdFx0dGVtcGVyYXR1cmU6IG9wdGlvbnM/LnRlbXBlcmF0dXJlIHx8IHRoaXMuY29uZmlnLnRlbXBlcmF0dXJlIHx8IDAuNyxcblx0XHRcdFx0XHRudW1fcHJlZGljdDogb3B0aW9ucz8ubWF4VG9rZW5zIHx8IHRoaXMuY29uZmlnLm1heFRva2VucyB8fCAxMDAwXG5cdFx0XHRcdH1cblx0XHRcdH0pXG5cdFx0fSk7XG5cblx0XHRpZiAoIXJlc3BvbnNlLm9rKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYE9sbGFtYSBBUEkgZXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH1gKTtcblx0XHR9XG5cblx0XHRjb25zdCByZWFkZXIgPSByZXNwb25zZS5ib2R5Py5nZXRSZWFkZXIoKTtcblx0XHRpZiAoIXJlYWRlcikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdGYWlsZWQgdG8gZ2V0IHJlc3BvbnNlIHJlYWRlcicpO1xuXHRcdH1cblxuXHRcdGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcblxuXHRcdHRyeSB7XG5cdFx0XHR3aGlsZSAodHJ1ZSkge1xuXHRcdFx0XHRjb25zdCB7IGRvbmUsIHZhbHVlIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpO1xuXHRcdFx0XHRpZiAoZG9uZSkgYnJlYWs7XG5cblx0XHRcdFx0Y29uc3QgbGluZXMgPSBkZWNvZGVyLmRlY29kZSh2YWx1ZSkuc3BsaXQoJ1xcbicpO1xuXHRcdFx0XHRmb3IgKGNvbnN0IGxpbmUgb2YgbGluZXMpIHtcblx0XHRcdFx0XHRpZiAobGluZS50cmltKCkpIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UobGluZSk7XG5cdFx0XHRcdFx0XHRcdGlmIChwYXJzZWQubWVzc2FnZT8uY29udGVudCkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIFNwbGl0IHRleHQgaW50byBzbWFsbGVyIGNodW5rcyBmb3IgY29uc2lzdGVudCB0eXBld3JpdGVyIGVmZmVjdFxuXHRcdFx0XHRcdFx0XHRcdGNvbnN0IGNodW5rU2l6ZSA9IDM7IC8vIENoYXJhY3RlcnMgcGVyIGNodW5rXG5cdFx0XHRcdFx0XHRcdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBwYXJzZWQubWVzc2FnZS5jb250ZW50Lmxlbmd0aDsgaSArPSBjaHVua1NpemUpIHtcblx0XHRcdFx0XHRcdFx0XHRcdGNvbnN0IGNodW5rID0gcGFyc2VkLm1lc3NhZ2UuY29udGVudC5zbGljZShpLCBpICsgY2h1bmtTaXplKTtcblx0XHRcdFx0XHRcdFx0XHRcdHlpZWxkIHsgY29udGVudDogY2h1bmssIGRvbmU6IGZhbHNlIH07XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTbWFsbCBkZWxheSBiZXR3ZWVuIGNodW5rcyB0byBjcmVhdGUgc21vb3RoIHR5cGV3cml0ZXIgZWZmZWN0XG5cdFx0XHRcdFx0XHRcdFx0XHRhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMjApKTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0aWYgKHBhcnNlZC5kb25lKSB7XG5cdFx0XHRcdFx0XHRcdFx0eWllbGQgeyBjb250ZW50OiAnJywgZG9uZTogdHJ1ZSB9O1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBjYXRjaCAoZSkge1xuXHRcdFx0XHRcdFx0XHQvLyBTa2lwIG1hbGZvcm1lZCBKU09OXG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBmaW5hbGx5IHtcblx0XHRcdHJlYWRlci5yZWxlYXNlTG9jaygpO1xuXHRcdH1cblxuXHRcdHlpZWxkIHsgY29udGVudDogJycsIGRvbmU6IHRydWUgfTtcblx0fVxufSIsICJpbXBvcnQgeyBQbGF0Zm9ybSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IEFJUHJvdmlkZXIsIFByb3ZpZGVyVHlwZSwgQUlNZXNzYWdlLCBBSUdlbmVyYXRpb25PcHRpb25zLCBBSVN0cmVhbVJlc3BvbnNlLCBBSVByb3ZpZGVyU2V0dGluZ3MgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IENsYXVkZVByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvY2xhdWRlJztcbmltcG9ydCB7IE9wZW5BSVByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvb3BlbmFpJztcbmltcG9ydCB7IEdvb2dsZVByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvZ29vZ2xlJztcbmltcG9ydCB7IE9sbGFtYVByb3ZpZGVyIH0gZnJvbSAnLi9wcm92aWRlcnMvb2xsYW1hJztcbmltcG9ydCB7IE5vdmFTZXR0aW5ncyB9IGZyb20gJy4uL3NldHRpbmdzJztcbmltcG9ydCB7IEZlYXR1cmVNYW5hZ2VyIH0gZnJvbSAnLi4vbGljZW5zaW5nL2ZlYXR1cmUtbWFuYWdlcic7XG5cbmV4cG9ydCBjbGFzcyBBSVByb3ZpZGVyTWFuYWdlciB7XG5cdHByaXZhdGUgcHJvdmlkZXJzOiBNYXA8UHJvdmlkZXJUeXBlLCBBSVByb3ZpZGVyPiA9IG5ldyBNYXAoKTtcblx0cHJpdmF0ZSBzZXR0aW5nczogTm92YVNldHRpbmdzO1xuXHRwcml2YXRlIGZlYXR1cmVNYW5hZ2VyPzogRmVhdHVyZU1hbmFnZXI7XG5cblx0Y29uc3RydWN0b3Ioc2V0dGluZ3M6IE5vdmFTZXR0aW5ncywgZmVhdHVyZU1hbmFnZXI/OiBGZWF0dXJlTWFuYWdlcikge1xuXHRcdHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcblx0XHR0aGlzLmZlYXR1cmVNYW5hZ2VyID0gZmVhdHVyZU1hbmFnZXI7XG5cdH1cblxuXHRhc3luYyBpbml0aWFsaXplKCkge1xuXHRcdHRoaXMucHJvdmlkZXJzLnNldCgnY2xhdWRlJywgbmV3IENsYXVkZVByb3ZpZGVyKHRoaXMuc2V0dGluZ3MuYWlQcm92aWRlcnMuY2xhdWRlKSk7XG5cdFx0dGhpcy5wcm92aWRlcnMuc2V0KCdvcGVuYWknLCBuZXcgT3BlbkFJUHJvdmlkZXIodGhpcy5zZXR0aW5ncy5haVByb3ZpZGVycy5vcGVuYWkpKTtcblx0XHR0aGlzLnByb3ZpZGVycy5zZXQoJ2dvb2dsZScsIG5ldyBHb29nbGVQcm92aWRlcih0aGlzLnNldHRpbmdzLmFpUHJvdmlkZXJzLmdvb2dsZSkpO1xuXHRcdHRoaXMucHJvdmlkZXJzLnNldCgnb2xsYW1hJywgbmV3IE9sbGFtYVByb3ZpZGVyKHRoaXMuc2V0dGluZ3MuYWlQcm92aWRlcnMub2xsYW1hKSk7XG5cdH1cblxuXHR1cGRhdGVTZXR0aW5ncyhzZXR0aW5nczogTm92YVNldHRpbmdzKSB7XG5cdFx0dGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuXHRcdHRoaXMucHJvdmlkZXJzLmZvckVhY2goKHByb3ZpZGVyLCB0eXBlKSA9PiB7XG5cdFx0XHRpZiAodHlwZSAhPT0gJ25vbmUnICYmIHR5cGUgaW4gdGhpcy5zZXR0aW5ncy5haVByb3ZpZGVycykge1xuXHRcdFx0XHRwcm92aWRlci51cGRhdGVDb25maWc/Lih0aGlzLnNldHRpbmdzLmFpUHJvdmlkZXJzW3R5cGUgYXMga2V5b2YgQUlQcm92aWRlclNldHRpbmdzXSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH1cblxuXHRwcml2YXRlIGdldFBsYXRmb3JtUHJvdmlkZXJzKCk6IFByb3ZpZGVyVHlwZVtdIHtcblx0XHRjb25zdCBwbGF0Zm9ybSA9IFBsYXRmb3JtLmlzTW9iaWxlID8gJ21vYmlsZScgOiAnZGVza3RvcCc7XG5cdFx0Y29uc3QgcGxhdGZvcm1TZXR0aW5ncyA9IHRoaXMuc2V0dGluZ3MucGxhdGZvcm1TZXR0aW5nc1twbGF0Zm9ybV07XG5cdFx0Y29uc3QgcHJvdmlkZXJzID0gW3BsYXRmb3JtU2V0dGluZ3MucHJpbWFyeVByb3ZpZGVyLCAuLi5wbGF0Zm9ybVNldHRpbmdzLmZhbGxiYWNrUHJvdmlkZXJzXTtcblx0XHRcblx0XHQvLyBObyByZXN0cmljdGlvbnMgLSBhbGwgdXNlcnMgY2FuIHVzZSBhbGwgcHJvdmlkZXJzIHdpdGggdGhlaXIgb3duIEFQSSBrZXlzXG5cdFx0cmV0dXJuIHByb3ZpZGVycztcblx0fVxuXG5cblx0cHJpdmF0ZSBhc3luYyBnZXRBdmFpbGFibGVQcm92aWRlcigpOiBQcm9taXNlPEFJUHJvdmlkZXIgfCBudWxsPiB7XG5cdFx0Y29uc3Qgb3JkZXJlZFByb3ZpZGVycyA9IHRoaXMuZ2V0UGxhdGZvcm1Qcm92aWRlcnMoKTtcblx0XHRcblx0XHQvLyBJZiBwcmltYXJ5IHByb3ZpZGVyIGlzICdub25lJywgTm92YSBpcyBkaXNhYmxlZCBvbiB0aGlzIHBsYXRmb3JtXG5cdFx0aWYgKG9yZGVyZWRQcm92aWRlcnNbMF0gPT09ICdub25lJykge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHRcdFxuXHRcdGZvciAoY29uc3QgcHJvdmlkZXJUeXBlIG9mIG9yZGVyZWRQcm92aWRlcnMpIHtcblx0XHRcdGlmIChwcm92aWRlclR5cGUgPT09ICdub25lJykgY29udGludWU7XG5cdFx0XHRjb25zdCBwcm92aWRlciA9IHRoaXMucHJvdmlkZXJzLmdldChwcm92aWRlclR5cGUpO1xuXHRcdFx0Y29uc3QgaXNBdmFpbGFibGUgPSBwcm92aWRlciA/IGF3YWl0IHByb3ZpZGVyLmlzQXZhaWxhYmxlKCkgOiBmYWxzZTtcblx0XHRcdFxuXHRcdFx0aWYgKHByb3ZpZGVyICYmIGlzQXZhaWxhYmxlKSB7XG5cdFx0XHRcdHJldHVybiBwcm92aWRlcjtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHRhc3luYyBnZW5lcmF0ZVRleHQocHJvbXB0OiBzdHJpbmcsIG9wdGlvbnM/OiBBSUdlbmVyYXRpb25PcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHRjb25zdCBwcm92aWRlciA9IGF3YWl0IHRoaXMuZ2V0QXZhaWxhYmxlUHJvdmlkZXIoKTtcblx0XHRpZiAoIXByb3ZpZGVyKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ05vdmEgaXMgZGlzYWJsZWQgb3Igbm8gQUkgcHJvdmlkZXIgaXMgYXZhaWxhYmxlJyk7XG5cdFx0fVxuXHRcdFxuXHRcdHJldHVybiBwcm92aWRlci5nZW5lcmF0ZVRleHQocHJvbXB0LCBvcHRpb25zKTtcblx0fVxuXG5cdGFzeW5jICpnZW5lcmF0ZVRleHRTdHJlYW0ocHJvbXB0OiBzdHJpbmcsIG9wdGlvbnM/OiBBSUdlbmVyYXRpb25PcHRpb25zKTogQXN5bmNHZW5lcmF0b3I8QUlTdHJlYW1SZXNwb25zZT4ge1xuXHRcdGNvbnN0IHByb3ZpZGVyID0gYXdhaXQgdGhpcy5nZXRBdmFpbGFibGVQcm92aWRlcigpO1xuXHRcdGlmICghcHJvdmlkZXIpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcignTm92YSBpcyBkaXNhYmxlZCBvciBubyBBSSBwcm92aWRlciBpcyBhdmFpbGFibGUnKTtcblx0XHR9XG5cdFx0XG5cdFx0eWllbGQqIHByb3ZpZGVyLmdlbmVyYXRlVGV4dFN0cmVhbShwcm9tcHQsIG9wdGlvbnMpO1xuXHR9XG5cblx0YXN5bmMgY2hhdENvbXBsZXRpb24obWVzc2FnZXM6IEFJTWVzc2FnZVtdLCBvcHRpb25zPzogQUlHZW5lcmF0aW9uT3B0aW9ucyk6IFByb21pc2U8c3RyaW5nPiB7XG5cdFx0Y29uc3QgcHJvdmlkZXIgPSBhd2FpdCB0aGlzLmdldEF2YWlsYWJsZVByb3ZpZGVyKCk7XG5cdFx0aWYgKCFwcm92aWRlcikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdOb3ZhIGlzIGRpc2FibGVkIG9yIG5vIEFJIHByb3ZpZGVyIGlzIGF2YWlsYWJsZScpO1xuXHRcdH1cblx0XHRyZXR1cm4gcHJvdmlkZXIuY2hhdENvbXBsZXRpb24obWVzc2FnZXMsIG9wdGlvbnMpO1xuXHR9XG5cblx0YXN5bmMgKmNoYXRDb21wbGV0aW9uU3RyZWFtKG1lc3NhZ2VzOiBBSU1lc3NhZ2VbXSwgb3B0aW9ucz86IEFJR2VuZXJhdGlvbk9wdGlvbnMpOiBBc3luY0dlbmVyYXRvcjxBSVN0cmVhbVJlc3BvbnNlPiB7XG5cdFx0Y29uc3QgcHJvdmlkZXIgPSBhd2FpdCB0aGlzLmdldEF2YWlsYWJsZVByb3ZpZGVyKCk7XG5cdFx0aWYgKCFwcm92aWRlcikge1xuXHRcdFx0dGhyb3cgbmV3IEVycm9yKCdOb3ZhIGlzIGRpc2FibGVkIG9yIG5vIEFJIHByb3ZpZGVyIGlzIGF2YWlsYWJsZScpO1xuXHRcdH1cblx0XHR5aWVsZCogcHJvdmlkZXIuY2hhdENvbXBsZXRpb25TdHJlYW0obWVzc2FnZXMsIG9wdGlvbnMpO1xuXHR9XG5cblx0Z2V0UHJvdmlkZXJOYW1lcygpOiBzdHJpbmdbXSB7XG5cdFx0cmV0dXJuIEFycmF5LmZyb20odGhpcy5wcm92aWRlcnMudmFsdWVzKCkpLm1hcChwID0+IHAubmFtZSk7XG5cdH1cblxuXHRhc3luYyBnZXRDdXJyZW50UHJvdmlkZXJOYW1lKCk6IFByb21pc2U8c3RyaW5nPiB7XG5cdFx0Y29uc3QgcHJvdmlkZXIgPSBhd2FpdCB0aGlzLmdldEF2YWlsYWJsZVByb3ZpZGVyKCk7XG5cdFx0cmV0dXJuIHByb3ZpZGVyID8gcHJvdmlkZXIubmFtZSA6ICdOb25lJztcblx0fVxuXG5cdGFzeW5jIGdldEN1cnJlbnRQcm92aWRlclR5cGUoKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG5cdFx0Y29uc3Qgb3JkZXJlZFByb3ZpZGVycyA9IHRoaXMuZ2V0UGxhdGZvcm1Qcm92aWRlcnMoKTtcblx0XHRpZiAob3JkZXJlZFByb3ZpZGVyc1swXSA9PT0gJ25vbmUnKSB7XG5cdFx0XHRyZXR1cm4gbnVsbDtcblx0XHR9XG5cdFx0XG5cdFx0Zm9yIChjb25zdCBwcm92aWRlclR5cGUgb2Ygb3JkZXJlZFByb3ZpZGVycykge1xuXHRcdFx0aWYgKHByb3ZpZGVyVHlwZSA9PT0gJ25vbmUnKSBjb250aW51ZTtcblx0XHRcdGNvbnN0IHByb3ZpZGVyID0gdGhpcy5wcm92aWRlcnMuZ2V0KHByb3ZpZGVyVHlwZSk7XG5cdFx0XHRpZiAocHJvdmlkZXIgJiYgYXdhaXQgcHJvdmlkZXIuaXNBdmFpbGFibGUoKSkge1xuXHRcdFx0XHRyZXR1cm4gcHJvdmlkZXJUeXBlO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGFzeW5jIGNvbXBsZXRlKHN5c3RlbVByb21wdDogc3RyaW5nLCB1c2VyUHJvbXB0OiBzdHJpbmcsIG9wdGlvbnM/OiBBSUdlbmVyYXRpb25PcHRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHRjb25zdCBwcm92aWRlciA9IGF3YWl0IHRoaXMuZ2V0QXZhaWxhYmxlUHJvdmlkZXIoKTtcblx0XHRpZiAoIXByb3ZpZGVyKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ05vdmEgaXMgZGlzYWJsZWQgb3Igbm8gQUkgcHJvdmlkZXIgaXMgYXZhaWxhYmxlJyk7XG5cdFx0fVxuXHRcdHJldHVybiBwcm92aWRlci5jb21wbGV0ZShzeXN0ZW1Qcm9tcHQsIHVzZXJQcm9tcHQsIG9wdGlvbnMpO1xuXHR9XG5cblx0Z2V0QWxsb3dlZFByb3ZpZGVycygpOiBQcm92aWRlclR5cGVbXSB7XG5cdFx0Ly8gT2xsYW1hIHJlcXVpcmVzIGxvY2FsIHNlcnZlciAtIG5vdCBhdmFpbGFibGUgb24gbW9iaWxlXG5cdFx0aWYgKFBsYXRmb3JtLmlzTW9iaWxlKSB7XG5cdFx0XHRyZXR1cm4gWydjbGF1ZGUnLCAnb3BlbmFpJywgJ2dvb2dsZSddO1xuXHRcdH1cblx0XHRyZXR1cm4gWydjbGF1ZGUnLCAnb3BlbmFpJywgJ2dvb2dsZScsICdvbGxhbWEnXTtcblx0fVxuXG5cdGlzUHJvdmlkZXJBbGxvd2VkKHByb3ZpZGVyVHlwZTogUHJvdmlkZXJUeXBlKTogYm9vbGVhbiB7XG5cdFx0Ly8gQWxsIHByb3ZpZGVycyBhcmUgYWxsb3dlZFxuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Z2V0UHJvdmlkZXJMaW1pdHMoKTogeyBsb2NhbDogbnVtYmVyOyBjbG91ZDogbnVtYmVyIH0ge1xuXHRcdC8vIE5vIGxpbWl0cyBpbiB0aGUgU3VwZXJub3ZhIG1vZGVsXG5cdFx0cmV0dXJuIHsgbG9jYWw6IEluZmluaXR5LCBjbG91ZDogSW5maW5pdHkgfTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgYXZhaWxhYmxlIG1vZGVscyBmb3IgYSBzcGVjaWZpYyBwcm92aWRlclxuXHQgKi9cblx0YXN5bmMgZ2V0UHJvdmlkZXJNb2RlbHMocHJvdmlkZXJUeXBlOiBQcm92aWRlclR5cGUpOiBQcm9taXNlPHN0cmluZ1tdPiB7XG5cdFx0Y29uc3QgcHJvdmlkZXIgPSB0aGlzLnByb3ZpZGVycy5nZXQocHJvdmlkZXJUeXBlKTtcblx0XHRpZiAoIXByb3ZpZGVyKSB7XG5cdFx0XHR0aHJvdyBuZXcgRXJyb3IoYFByb3ZpZGVyICR7cHJvdmlkZXJUeXBlfSBub3QgZm91bmRgKTtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiBwcm92aWRlciBoYXMgZ2V0QXZhaWxhYmxlTW9kZWxzIG1ldGhvZFxuXHRcdGlmICgnZ2V0QXZhaWxhYmxlTW9kZWxzJyBpbiBwcm92aWRlciAmJiB0eXBlb2YgcHJvdmlkZXIuZ2V0QXZhaWxhYmxlTW9kZWxzID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRyZXR1cm4gYXdhaXQgKHByb3ZpZGVyIGFzIGFueSkuZ2V0QXZhaWxhYmxlTW9kZWxzKCk7XG5cdFx0fVxuXG5cdFx0Ly8gRm9yIHByb3ZpZGVycyB3aXRob3V0IEFQSSBtb2RlbCBsaXN0aW5nIChsaWtlIE9sbGFtYSksIHJldHVybiBlbXB0eSBhcnJheVxuXHRcdHJldHVybiBbXTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDbGVhciBtb2RlbCBjYWNoZSBmb3IgYSBzcGVjaWZpYyBwcm92aWRlclxuXHQgKi9cblx0Y2xlYXJQcm92aWRlck1vZGVsQ2FjaGUocHJvdmlkZXJUeXBlOiBQcm92aWRlclR5cGUpOiB2b2lkIHtcblx0XHRjb25zdCBwcm92aWRlciA9IHRoaXMucHJvdmlkZXJzLmdldChwcm92aWRlclR5cGUpO1xuXHRcdGlmICghcHJvdmlkZXIpIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDaGVjayBpZiBwcm92aWRlciBoYXMgY2xlYXJNb2RlbENhY2hlIG1ldGhvZFxuXHRcdGlmICgnY2xlYXJNb2RlbENhY2hlJyBpbiBwcm92aWRlciAmJiB0eXBlb2YgcHJvdmlkZXIuY2xlYXJNb2RlbENhY2hlID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHQocHJvdmlkZXIgYXMgYW55KS5jbGVhck1vZGVsQ2FjaGUoKTtcblx0XHR9XG5cdH1cblxuXHRjbGVhbnVwKCkge1xuXHRcdHRoaXMucHJvdmlkZXJzLmNsZWFyKCk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IHRoZSBkZWZhdWx0IG1heCB0b2tlbnMgZnJvbSBzZXR0aW5nc1xuXHQgKi9cblx0Z2V0RGVmYXVsdE1heFRva2VucygpOiBudW1iZXIge1xuXHRcdHJldHVybiB0aGlzLnNldHRpbmdzLmdlbmVyYWwuZGVmYXVsdE1heFRva2Vucztcblx0fVxufSIsICIvKipcbiAqIENvcmUgZG9jdW1lbnQgZW5naW5lIGZvciBOb3ZhXG4gKiBIYW5kbGVzIGFsbCBkb2N1bWVudCBtYW5pcHVsYXRpb24gYW5kIGVkaXRvciBpbnRlcmFjdGlvbnNcbiAqL1xuXG5pbXBvcnQgeyBBcHAsIEVkaXRvciwgTWFya2Rvd25WaWV3LCBURmlsZSwgRWRpdG9yUG9zaXRpb24sIE5vdGljZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IERvY3VtZW50Q29udGV4dCwgSGVhZGluZ0luZm8sIEVkaXRSZXN1bHQsIEVkaXRPcHRpb25zLCBEb2N1bWVudFNlY3Rpb24sIEVkaXRDb21tYW5kIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBDb252ZXJzYXRpb25NYW5hZ2VyLCBEYXRhU3RvcmUgfSBmcm9tICcuL2NvbnZlcnNhdGlvbi1tYW5hZ2VyJztcblxuZXhwb3J0IGNsYXNzIERvY3VtZW50RW5naW5lIHtcbiAgICBwcml2YXRlIGNvbnZlcnNhdGlvbk1hbmFnZXI6IENvbnZlcnNhdGlvbk1hbmFnZXIgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgYXBwOiBBcHAsIGRhdGFTdG9yZT86IERhdGFTdG9yZSkge1xuICAgICAgICBpZiAoZGF0YVN0b3JlKSB7XG4gICAgICAgICAgICB0aGlzLmNvbnZlcnNhdGlvbk1hbmFnZXIgPSBuZXcgQ29udmVyc2F0aW9uTWFuYWdlcihkYXRhU3RvcmUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IGNvbnZlcnNhdGlvbiBtYW5hZ2VyIChmb3IgZGVwZW5kZW5jeSBpbmplY3Rpb24pXG4gICAgICovXG4gICAgc2V0Q29udmVyc2F0aW9uTWFuYWdlcihjb252ZXJzYXRpb25NYW5hZ2VyOiBDb252ZXJzYXRpb25NYW5hZ2VyKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY29udmVyc2F0aW9uTWFuYWdlciA9IGNvbnZlcnNhdGlvbk1hbmFnZXI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBhY3RpdmUgZWRpdG9yIGluc3RhbmNlIC0gZW5zdXJlcyB3ZSBnZXQgdGhlIGVkaXRvciBmb3IgdGhlIGFjdGl2ZSBmaWxlXG4gICAgICovXG4gICAgZ2V0QWN0aXZlRWRpdG9yKCk6IEVkaXRvciB8IG51bGwge1xuICAgICAgICAvLyBHZXQgdGhlIGFjdGl2ZSBmaWxlIGZpcnN0IHRvIGVuc3VyZSBjb25zaXN0ZW5jeVxuICAgICAgICBjb25zdCBhY3RpdmVGaWxlID0gdGhpcy5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGlmICghYWN0aXZlRmlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEZpbmQgdGhlIG1hcmtkb3duIHZpZXcgZm9yIHRoZSBhY3RpdmUgZmlsZSBzcGVjaWZpY2FsbHlcbiAgICAgICAgY29uc3QgbGVhdmVzID0gdGhpcy5hcHAud29ya3NwYWNlLmdldExlYXZlc09mVHlwZSgnbWFya2Rvd24nKTtcbiAgICAgICAgZm9yIChjb25zdCBsZWFmIG9mIGxlYXZlcykge1xuICAgICAgICAgICAgY29uc3QgdmlldyA9IGxlYWYudmlldztcbiAgICAgICAgICAgIGlmICh2aWV3IGluc3RhbmNlb2YgTWFya2Rvd25WaWV3ICYmIHZpZXcuZmlsZSA9PT0gYWN0aXZlRmlsZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB2aWV3LmVkaXRvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRmFsbGJhY2s6IHRyeSB0aGUgd29ya3NwYWNlIGFjdGl2ZSBlZGl0b3IgaWYgaXQgbWF0Y2hlcyB0aGUgYWN0aXZlIGZpbGVcbiAgICAgICAgY29uc3QgYWN0aXZlRWRpdG9yID0gdGhpcy5hcHAud29ya3NwYWNlLmFjdGl2ZUVkaXRvcjtcbiAgICAgICAgaWYgKGFjdGl2ZUVkaXRvcj8uZWRpdG9yICYmIGFjdGl2ZUVkaXRvci5maWxlID09PSBhY3RpdmVGaWxlKSB7XG4gICAgICAgICAgICByZXR1cm4gYWN0aXZlRWRpdG9yLmVkaXRvcjtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRmluYWwgZmFsbGJhY2s6IHRyeSBnZXRBY3RpdmVWaWV3T2ZUeXBlXG4gICAgICAgIGNvbnN0IHZpZXcgPSB0aGlzLmFwcC53b3Jrc3BhY2UuZ2V0QWN0aXZlVmlld09mVHlwZShNYXJrZG93blZpZXcpO1xuICAgICAgICBpZiAodmlldyAmJiB2aWV3LmZpbGUgPT09IGFjdGl2ZUZpbGUpIHtcbiAgICAgICAgICAgIHJldHVybiB2aWV3LmVkaXRvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGFjdGl2ZSBmaWxlXG4gICAgICovXG4gICAgZ2V0QWN0aXZlRmlsZSgpOiBURmlsZSB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5hcHAud29ya3NwYWNlLmdldEFjdGl2ZUZpbGUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCB0ZXh0XG4gICAgICovXG4gICAgZ2V0U2VsZWN0ZWRUZXh0KCk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGVkaXRvciA9IHRoaXMuZ2V0QWN0aXZlRWRpdG9yKCk7XG4gICAgICAgIGlmICghZWRpdG9yKSByZXR1cm4gJyc7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCBjdXJzb3IgcG9zaXRpb25cbiAgICAgKi9cbiAgICBnZXRDdXJzb3JQb3NpdGlvbigpOiBFZGl0b3JQb3NpdGlvbiB8IG51bGwge1xuICAgICAgICBjb25zdCBlZGl0b3IgPSB0aGlzLmdldEFjdGl2ZUVkaXRvcigpO1xuICAgICAgICBpZiAoIWVkaXRvcikgcmV0dXJuIG51bGw7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gZWRpdG9yLmdldEN1cnNvcigpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCB0aGUgY3Vyc29yIHBvc2l0aW9uIChvcHRpb25hbGx5IGZvY3VzIHRoZSBlZGl0b3IpXG4gICAgICovXG4gICAgc2V0Q3Vyc29yUG9zaXRpb24ocG9zaXRpb246IEVkaXRvclBvc2l0aW9uLCBzaG91bGRGb2N1czogYm9vbGVhbiA9IGZhbHNlKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGVkaXRvciA9IHRoaXMuZ2V0QWN0aXZlRWRpdG9yKCk7XG4gICAgICAgIGlmICghZWRpdG9yKSByZXR1cm47XG4gICAgICAgIFxuICAgICAgICBlZGl0b3Iuc2V0Q3Vyc29yKHBvc2l0aW9uKTtcbiAgICAgICAgaWYgKHNob3VsZEZvY3VzKSB7XG4gICAgICAgICAgICBlZGl0b3IuZm9jdXMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4dHJhY3QgY29tcHJlaGVuc2l2ZSBkb2N1bWVudCBjb250ZXh0XG4gICAgICovXG4gICAgYXN5bmMgZ2V0RG9jdW1lbnRDb250ZXh0KCk6IFByb21pc2U8RG9jdW1lbnRDb250ZXh0IHwgbnVsbD4ge1xuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGNvbnN0IGVkaXRvciA9IHRoaXMuZ2V0QWN0aXZlRWRpdG9yKCk7XG4gICAgICAgIFxuICAgICAgICBpZiAoIWZpbGUgfHwgIWVkaXRvcikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb250ZW50ID0gZWRpdG9yLmdldFZhbHVlKCk7XG4gICAgICAgIGNvbnN0IHNlbGVjdGVkVGV4dCA9IHRoaXMuZ2V0U2VsZWN0ZWRUZXh0KCk7XG4gICAgICAgIGNvbnN0IGN1cnNvclBvc2l0aW9uID0gdGhpcy5nZXRDdXJzb3JQb3NpdGlvbigpO1xuICAgICAgICBcbiAgICAgICAgLy8gRXh0cmFjdCBoZWFkaW5ncyBmcm9tIHRoZSBkb2N1bWVudFxuICAgICAgICBjb25zdCBoZWFkaW5ncyA9IHRoaXMuZXh0cmFjdEhlYWRpbmdzKGNvbnRlbnQpO1xuICAgICAgICBcbiAgICAgICAgLy8gR2V0IHN1cnJvdW5kaW5nIGxpbmVzIGZvciBjb250ZXh0XG4gICAgICAgIGNvbnN0IHN1cnJvdW5kaW5nTGluZXMgPSBjdXJzb3JQb3NpdGlvbiA/IFxuICAgICAgICAgICAgdGhpcy5nZXRTdXJyb3VuZGluZ0xpbmVzKGNvbnRlbnQsIGN1cnNvclBvc2l0aW9uLmxpbmUpIDogXG4gICAgICAgICAgICB1bmRlZmluZWQ7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbGUsXG4gICAgICAgICAgICBmaWxlbmFtZTogZmlsZS5iYXNlbmFtZSxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICBoZWFkaW5ncyxcbiAgICAgICAgICAgIHNlbGVjdGVkVGV4dDogc2VsZWN0ZWRUZXh0IHx8IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGN1cnNvclBvc2l0aW9uOiBjdXJzb3JQb3NpdGlvbiB8fCB1bmRlZmluZWQsXG4gICAgICAgICAgICBzdXJyb3VuZGluZ0xpbmVzXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXh0cmFjdCBoZWFkaW5ncyBmcm9tIGRvY3VtZW50IGNvbnRlbnRcbiAgICAgKi9cbiAgICBwcml2YXRlIGV4dHJhY3RIZWFkaW5ncyhjb250ZW50OiBzdHJpbmcpOiBIZWFkaW5nSW5mb1tdIHtcbiAgICAgICAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgY29uc3QgaGVhZGluZ3M6IEhlYWRpbmdJbmZvW10gPSBbXTtcbiAgICAgICAgbGV0IGNoYXJDb3VudCA9IDA7XG5cbiAgICAgICAgbGluZXMuZm9yRWFjaCgobGluZSwgaW5kZXgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGhlYWRpbmdNYXRjaCA9IGxpbmUubWF0Y2goL14oI3sxLDZ9KVxccysoLispJC8pO1xuICAgICAgICAgICAgaWYgKGhlYWRpbmdNYXRjaCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxldmVsID0gaGVhZGluZ01hdGNoWzFdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0ID0gaGVhZGluZ01hdGNoWzJdO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGhlYWRpbmdzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICB0ZXh0LFxuICAgICAgICAgICAgICAgICAgICBsZXZlbCxcbiAgICAgICAgICAgICAgICAgICAgbGluZTogaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogY2hhckNvdW50LFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBjaGFyQ291bnQgKyBsaW5lLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEFkZCBsaW5lIGxlbmd0aCArIG5ld2xpbmUgY2hhcmFjdGVyXG4gICAgICAgICAgICBjaGFyQ291bnQgKz0gbGluZS5sZW5ndGggKyAxO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gaGVhZGluZ3M7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGxpbmVzIHN1cnJvdW5kaW5nIHRoZSBjdXJzb3IgcG9zaXRpb25cbiAgICAgKi9cbiAgICBwcml2YXRlIGdldFN1cnJvdW5kaW5nTGluZXMoXG4gICAgICAgIGNvbnRlbnQ6IHN0cmluZywgXG4gICAgICAgIGN1cnJlbnRMaW5lOiBudW1iZXIsIFxuICAgICAgICBjb250ZXh0U2l6ZTogbnVtYmVyID0gNVxuICAgICk6IHsgYmVmb3JlOiBzdHJpbmdbXTsgYWZ0ZXI6IHN0cmluZ1tdIH0ge1xuICAgICAgICBjb25zdCBsaW5lcyA9IGNvbnRlbnQuc3BsaXQoJ1xcbicpO1xuICAgICAgICBcbiAgICAgICAgY29uc3Qgc3RhcnRMaW5lID0gTWF0aC5tYXgoMCwgY3VycmVudExpbmUgLSBjb250ZXh0U2l6ZSk7XG4gICAgICAgIGNvbnN0IGVuZExpbmUgPSBNYXRoLm1pbihsaW5lcy5sZW5ndGggLSAxLCBjdXJyZW50TGluZSArIGNvbnRleHRTaXplKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiZWZvcmU6IGxpbmVzLnNsaWNlKHN0YXJ0TGluZSwgY3VycmVudExpbmUpLFxuICAgICAgICAgICAgYWZ0ZXI6IGxpbmVzLnNsaWNlKGN1cnJlbnRMaW5lICsgMSwgZW5kTGluZSArIDEpXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgYW4gZWRpdCB0byB0aGUgZG9jdW1lbnRcbiAgICAgKi9cbiAgICBhc3luYyBhcHBseUVkaXQoXG4gICAgICAgIGNvbnRlbnQ6IHN0cmluZyxcbiAgICAgICAgcG9zaXRpb246ICdjdXJzb3InIHwgJ3NlbGVjdGlvbicgfCAnZW5kJyB8IHsgbGluZTogbnVtYmVyOyBjaDogbnVtYmVyIH0sXG4gICAgICAgIG9wdGlvbnM6IEVkaXRPcHRpb25zID0ge31cbiAgICApOiBQcm9taXNlPEVkaXRSZXN1bHQ+IHtcbiAgICAgICAgY29uc3QgZWRpdG9yID0gdGhpcy5nZXRBY3RpdmVFZGl0b3IoKTtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFlZGl0b3IgfHwgIWZpbGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdObyBhY3RpdmUgZWRpdG9yIG9yIGZpbGUnLFxuICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAnaW5zZXJ0J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBsZXQgYXBwbGllZEF0OiBFZGl0b3JQb3NpdGlvbjtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHBvc2l0aW9uID09PSAnY3Vyc29yJykge1xuICAgICAgICAgICAgICAgIC8vIEluc2VydCBhdCBjdXJzb3IgcG9zaXRpb25cbiAgICAgICAgICAgICAgICBhcHBsaWVkQXQgPSBlZGl0b3IuZ2V0Q3Vyc29yKCk7XG4gICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShjb250ZW50LCBhcHBsaWVkQXQpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChwb3NpdGlvbiA9PT0gJ3NlbGVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIGN1cnJlbnQgc2VsZWN0aW9uXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uID0gZWRpdG9yLmdldFNlbGVjdGlvbigpO1xuICAgICAgICAgICAgICAgIGlmICghc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAnTm8gdGV4dCBzZWxlY3RlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFwcGxpZWRBdCA9IGVkaXRvci5nZXRDdXJzb3IoJ2Zyb20nKTtcbiAgICAgICAgICAgICAgICBlZGl0b3IucmVwbGFjZVNlbGVjdGlvbihjb250ZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocG9zaXRpb24gPT09ICdlbmQnKSB7XG4gICAgICAgICAgICAgICAgLy8gQXBwZW5kIHRvIGVuZCBvZiBkb2N1bWVudFxuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RMaW5lID0gZWRpdG9yLmxhc3RMaW5lKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdExpbmVMZW5ndGggPSBlZGl0b3IuZ2V0TGluZShsYXN0TGluZSkubGVuZ3RoO1xuICAgICAgICAgICAgICAgIGFwcGxpZWRBdCA9IHsgbGluZTogbGFzdExpbmUsIGNoOiBsYXN0TGluZUxlbmd0aCB9O1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDb250ZW50ID0gZWRpdG9yLmdldFZhbHVlKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3Q29udGVudCA9IGN1cnJlbnRDb250ZW50ICsgKGN1cnJlbnRDb250ZW50LmVuZHNXaXRoKCdcXG4nKSA/ICcnIDogJ1xcbicpICsgY29udGVudDtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBVc2UgdmF1bHQubW9kaWZ5IGZvciB1bmRvL3JlZG8gc3VwcG9ydFxuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShmaWxlLCBuZXdDb250ZW50KTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gSW5zZXJ0IGF0IHNwZWNpZmljIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgYXBwbGllZEF0ID0gcG9zaXRpb247XG4gICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShjb250ZW50LCBhcHBsaWVkQXQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBIYW5kbGUgcG9zdC1lZGl0IG9wdGlvbnNcbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNlbGVjdE5ld1RleHQpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBlbmRQb3MgPSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmU6IGFwcGxpZWRBdC5saW5lICsgY29udGVudC5zcGxpdCgnXFxuJykubGVuZ3RoIC0gMSxcbiAgICAgICAgICAgICAgICAgICAgY2g6IGNvbnRlbnQuaW5jbHVkZXMoJ1xcbicpID8gXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50LnNwbGl0KCdcXG4nKS5wb3AoKSEubGVuZ3RoIDogXG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBsaWVkQXQuY2ggKyBjb250ZW50Lmxlbmd0aFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgZWRpdG9yLnNldFNlbGVjdGlvbihhcHBsaWVkQXQsIGVuZFBvcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChvcHRpb25zLnNjcm9sbFRvRWRpdCkge1xuICAgICAgICAgICAgICAgIGVkaXRvci5zY3JvbGxJbnRvVmlldyh7XG4gICAgICAgICAgICAgICAgICAgIGZyb206IGFwcGxpZWRBdCxcbiAgICAgICAgICAgICAgICAgICAgdG86IGFwcGxpZWRBdFxuICAgICAgICAgICAgICAgIH0sIHRydWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICBlZGl0VHlwZTogcG9zaXRpb24gPT09ICdzZWxlY3Rpb24nID8gJ3JlcGxhY2UnIDogXG4gICAgICAgICAgICAgICAgICAgICAgICAgcG9zaXRpb24gPT09ICdlbmQnID8gJ2FwcGVuZCcgOiAnaW5zZXJ0JyxcbiAgICAgICAgICAgICAgICBhcHBsaWVkQXRcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAnaW5zZXJ0J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlbGV0ZSBjb250ZW50IGF0IGN1cnNvciBsb2NhdGlvblxuICAgICAqL1xuICAgIGFzeW5jIGRlbGV0ZUNvbnRlbnQoXG4gICAgICAgIHRhcmdldDogJ3NlbGVjdGlvbicgfCAnbGluZSdcbiAgICApOiBQcm9taXNlPEVkaXRSZXN1bHQ+IHtcbiAgICAgICAgY29uc3QgZWRpdG9yID0gdGhpcy5nZXRBY3RpdmVFZGl0b3IoKTtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFlZGl0b3IgfHwgIWZpbGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdObyBhY3RpdmUgZWRpdG9yIG9yIGZpbGUnLFxuICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAnZGVsZXRlJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0ID09PSAnc2VsZWN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGlvbiA9IGVkaXRvci5nZXRTZWxlY3Rpb24oKTtcbiAgICAgICAgICAgICAgICBpZiAoIXNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ05vIHRleHQgc2VsZWN0ZWQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdkZWxldGUnXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVkaXRvci5yZXBsYWNlU2VsZWN0aW9uKCcnKTtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ2RlbGV0ZSdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0YXJnZXQgPT09ICdsaW5lJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGN1cnNvciA9IGVkaXRvci5nZXRDdXJzb3IoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBsaW5lID0gY3Vyc29yLmxpbmU7XG4gICAgICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZSgnJywgXG4gICAgICAgICAgICAgICAgICAgIHsgbGluZSwgY2g6IDAgfSwgXG4gICAgICAgICAgICAgICAgICAgIHsgbGluZTogbGluZSArIDEsIGNoOiAwIH1cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAnZGVsZXRlJyxcbiAgICAgICAgICAgICAgICAgICAgYXBwbGllZEF0OiB7IGxpbmUsIGNoOiAwIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnSW52YWxpZCBkZWxldGUgdGFyZ2V0JyxcbiAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ2RlbGV0ZSdcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAnZGVsZXRlJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBmdWxsIGRvY3VtZW50IGNvbnRlbnRcbiAgICAgKi9cbiAgICBhc3luYyBnZXREb2N1bWVudENvbnRlbnQoKTogUHJvbWlzZTxzdHJpbmcgfCBudWxsPiB7XG4gICAgICAgIGNvbnN0IGVkaXRvciA9IHRoaXMuZ2V0QWN0aXZlRWRpdG9yKCk7XG4gICAgICAgIGlmICghZWRpdG9yKSByZXR1cm4gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBlZGl0b3IuZ2V0VmFsdWUoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBsYWNlIHRoZSBlbnRpcmUgZG9jdW1lbnQgY29udGVudFxuICAgICAqL1xuICAgIGFzeW5jIHNldERvY3VtZW50Q29udGVudChjb250ZW50OiBzdHJpbmcpOiBQcm9taXNlPEVkaXRSZXN1bHQ+IHtcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBcbiAgICAgICAgaWYgKCFmaWxlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnTm8gYWN0aXZlIGZpbGUnLFxuICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAncmVwbGFjZSdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGZpbGUsIGNvbnRlbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsXG4gICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIENvbnZlcnNhdGlvbiBtYW5hZ2VtZW50IG1ldGhvZHNcblxuICAgIC8qKlxuICAgICAqIEFkZCB1c2VyIG1lc3NhZ2UgdG8gY29udmVyc2F0aW9uXG4gICAgICovXG4gICAgYXN5bmMgYWRkVXNlck1lc3NhZ2UoY29udGVudDogc3RyaW5nLCBjb21tYW5kPzogRWRpdENvbW1hbmQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnZlcnNhdGlvbk1hbmFnZXIpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY29udmVyc2F0aW9uTWFuYWdlci5hZGRVc2VyTWVzc2FnZShmaWxlLCBjb250ZW50LCBjb21tYW5kKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhc3Npc3RhbnQgcmVzcG9uc2UgdG8gY29udmVyc2F0aW9uXG4gICAgICovXG4gICAgYXN5bmMgYWRkQXNzaXN0YW50TWVzc2FnZShjb250ZW50OiBzdHJpbmcsIHJlc3VsdD86IEVkaXRSZXN1bHQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnZlcnNhdGlvbk1hbmFnZXIpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY29udmVyc2F0aW9uTWFuYWdlci5hZGRBc3Npc3RhbnRNZXNzYWdlKGZpbGUsIGNvbnRlbnQsIHJlc3VsdCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgc3lzdGVtIG1lc3NhZ2UgdG8gY29udmVyc2F0aW9uXG4gICAgICovXG4gICAgYXN5bmMgYWRkU3lzdGVtTWVzc2FnZShjb250ZW50OiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnZlcnNhdGlvbk1hbmFnZXIpIHJldHVybjtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuY29udmVyc2F0aW9uTWFuYWdlci5hZGRTeXN0ZW1NZXNzYWdlKGZpbGUsIGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGNvbnZlcnNhdGlvbiBjb250ZXh0IGZvciBBSSBwcm9tcHRzXG4gICAgICovXG4gICAgZ2V0Q29udmVyc2F0aW9uQ29udGV4dChtYXhNZXNzYWdlczogbnVtYmVyID0gNik6IHN0cmluZyB7XG4gICAgICAgIGlmICghdGhpcy5jb252ZXJzYXRpb25NYW5hZ2VyKSByZXR1cm4gJyc7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBmaWxlID0gdGhpcy5nZXRBY3RpdmVGaWxlKCk7XG4gICAgICAgIGlmICghZmlsZSkgcmV0dXJuICcnO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udmVyc2F0aW9uTWFuYWdlci5nZXRDb252ZXJzYXRpb25Db250ZXh0KGZpbGUsIG1heE1lc3NhZ2VzKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBjb252ZXJzYXRpb24gZm9yIGN1cnJlbnQgZmlsZVxuICAgICAqL1xuICAgIGFzeW5jIGNsZWFyQ29udmVyc2F0aW9uKCk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoIXRoaXMuY29udmVyc2F0aW9uTWFuYWdlcikgcmV0dXJuO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBpZiAoZmlsZSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5jb252ZXJzYXRpb25NYW5hZ2VyLmNsZWFyQ29udmVyc2F0aW9uKGZpbGUpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGNvbnZlcnNhdGlvbiBzdGF0aXN0aWNzIGZvciBjdXJyZW50IGZpbGVcbiAgICAgKi9cbiAgICBnZXRDb252ZXJzYXRpb25TdGF0cygpOiB7XG4gICAgICAgIG1lc3NhZ2VDb3VudDogbnVtYmVyO1xuICAgICAgICBlZGl0Q291bnQ6IG51bWJlcjtcbiAgICAgICAgbW9zdFVzZWRDb21tYW5kOiBzdHJpbmcgfCBudWxsO1xuICAgICAgICBjb252ZXJzYXRpb25BZ2U6IG51bWJlcjtcbiAgICB9IHwgbnVsbCB7XG4gICAgICAgIGlmICghdGhpcy5jb252ZXJzYXRpb25NYW5hZ2VyKSByZXR1cm4gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgaWYgKCFmaWxlKSByZXR1cm4gbnVsbDtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnNhdGlvbk1hbmFnZXIuZ2V0U3RhdHMoZmlsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgY3VycmVudCBmaWxlIGhhcyBhbiBhY3RpdmUgY29udmVyc2F0aW9uXG4gICAgICovXG4gICAgaGFzQ29udmVyc2F0aW9uKCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIXRoaXMuY29udmVyc2F0aW9uTWFuYWdlcikgcmV0dXJuIGZhbHNlO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBpZiAoIWZpbGUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnZlcnNhdGlvbk1hbmFnZXIuaGFzQ29udmVyc2F0aW9uKGZpbGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4cG9ydCBjb252ZXJzYXRpb24gZm9yIGN1cnJlbnQgZmlsZVxuICAgICAqL1xuICAgIGV4cG9ydENvbnZlcnNhdGlvbigpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgaWYgKCF0aGlzLmNvbnZlcnNhdGlvbk1hbmFnZXIpIHJldHVybiBudWxsO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZmlsZSA9IHRoaXMuZ2V0QWN0aXZlRmlsZSgpO1xuICAgICAgICBpZiAoIWZpbGUpIHJldHVybiBudWxsO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udmVyc2F0aW9uTWFuYWdlci5leHBvcnRDb252ZXJzYXRpb24oZmlsZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVwbGFjZSBzZWxlY3RlZCB0ZXh0IHdpdGggbmV3IGNvbnRlbnRcbiAgICAgKiBIYW5kbGVzIHVuZG8vcmVkbyBwcm9wZXJseSBhbmQgcHJlc2VydmVzIGN1cnNvciBwb3NpdGlvblxuICAgICAqL1xuICAgIGFzeW5jIHJlcGxhY2VTZWxlY3Rpb24oXG4gICAgICAgIG5ld1RleHQ6IHN0cmluZyxcbiAgICAgICAgZnJvbT86IEVkaXRvclBvc2l0aW9uLFxuICAgICAgICB0bz86IEVkaXRvclBvc2l0aW9uXG4gICAgKTogUHJvbWlzZTxFZGl0UmVzdWx0PiB7XG4gICAgICAgIGNvbnN0IGVkaXRvciA9IHRoaXMuZ2V0QWN0aXZlRWRpdG9yKCk7XG4gICAgICAgIGNvbnN0IGZpbGUgPSB0aGlzLmdldEFjdGl2ZUZpbGUoKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghZWRpdG9yIHx8ICFmaWxlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnTm8gYWN0aXZlIGVkaXRvciBvciBmaWxlJyxcbiAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFVzZSBwcm92aWRlZCByYW5nZSBvciBjdXJyZW50IHNlbGVjdGlvblxuICAgICAgICAgICAgY29uc3QgZnJvbVBvcyA9IGZyb20gfHwgZWRpdG9yLmdldEN1cnNvcignZnJvbScpO1xuICAgICAgICAgICAgY29uc3QgdG9Qb3MgPSB0byB8fCBlZGl0b3IuZ2V0Q3Vyc29yKCd0bycpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBQZXJmb3JtIHRoZSByZXBsYWNlbWVudCB1c2luZyBPYnNpZGlhbidzIHRyYW5zYWN0aW9uIHN5c3RlbSBmb3IgcHJvcGVyIHVuZG8vcmVkb1xuICAgICAgICAgICAgZWRpdG9yLnJlcGxhY2VSYW5nZShuZXdUZXh0LCBmcm9tUG9zLCB0b1Bvcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNldCBjdXJzb3IgYXQgdGhlIGVuZCBvZiB0aGUgcmVwbGFjZWQgdGV4dFxuICAgICAgICAgICAgY29uc3QgbmV3Q3Vyc29yUG9zID0ge1xuICAgICAgICAgICAgICAgIGxpbmU6IGZyb21Qb3MubGluZSArIChuZXdUZXh0LnNwbGl0KCdcXG4nKS5sZW5ndGggLSAxKSxcbiAgICAgICAgICAgICAgICBjaDogbmV3VGV4dC5pbmNsdWRlcygnXFxuJykgPyBcbiAgICAgICAgICAgICAgICAgICAgbmV3VGV4dC5zcGxpdCgnXFxuJykucG9wKCkhLmxlbmd0aCA6IFxuICAgICAgICAgICAgICAgICAgICBmcm9tUG9zLmNoICsgbmV3VGV4dC5sZW5ndGhcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGVkaXRvci5zZXRDdXJzb3IobmV3Q3Vyc29yUG9zKTtcbiAgICAgICAgICAgIGVkaXRvci5mb2N1cygpO1xuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgY29udGVudDogbmV3VGV4dCxcbiAgICAgICAgICAgICAgICBhcHBsaWVkQXQ6IGZyb21Qb3MsXG4gICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJ1xuICAgICAgICAgICAgfTtcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVwbGFjaW5nIHNlbGVjdGlvbjonLCBlcnJvcik7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG59IiwgIi8qKlxuICogQ29udmVyc2F0aW9uIE1hbmFnZXIgZm9yIE5vdmFcbiAqIEhhbmRsZXMgZmlsZS1zY29wZWQgY29udmVyc2F0aW9uIHN0b3JhZ2UgYW5kIHJldHJpZXZhbFxuICovXG5cbmltcG9ydCB7IFRGaWxlIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgQ29udmVyc2F0aW9uRGF0YSwgQ29udmVyc2F0aW9uTWVzc2FnZSwgRWRpdENvbW1hbmQsIEVkaXRSZXN1bHQsIEVkaXRBY3Rpb24gfSBmcm9tICcuL3R5cGVzJztcblxuZXhwb3J0IGludGVyZmFjZSBEYXRhU3RvcmUge1xuICAgIGxvYWREYXRhKGtleTogc3RyaW5nKTogUHJvbWlzZTxhbnk+O1xuICAgIHNhdmVEYXRhKGtleTogc3RyaW5nLCBkYXRhOiBhbnkpOiBQcm9taXNlPHZvaWQ+O1xufVxuXG5leHBvcnQgY2xhc3MgQ29udmVyc2F0aW9uTWFuYWdlciB7XG4gICAgcHJpdmF0ZSBjb252ZXJzYXRpb25zOiBNYXA8c3RyaW5nLCBDb252ZXJzYXRpb25EYXRhPiA9IG5ldyBNYXAoKTtcbiAgICBwcml2YXRlIG1heE1lc3NhZ2VzUGVyRmlsZSA9IDEwMDsgLy8gTGltaXQgY29udmVyc2F0aW9uIGhpc3RvcnlcbiAgICBwcml2YXRlIHN0b3JhZ2VLZXkgPSAnbm92YS1jb252ZXJzYXRpb25zJztcbiAgICBwcml2YXRlIGNsZWFudXBJbnRlcnZhbDogbnVtYmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGFTdG9yZTogRGF0YVN0b3JlKSB7XG4gICAgICAgIHRoaXMubG9hZENvbnZlcnNhdGlvbnMoKTtcbiAgICAgICAgdGhpcy5zdGFydFBlcmlvZGljQ2xlYW51cCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIExvYWQgY29udmVyc2F0aW9ucyBmcm9tIHBsdWdpbiBkYXRhXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBsb2FkQ29udmVyc2F0aW9ucygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCB0aGlzLmRhdGFTdG9yZS5sb2FkRGF0YSh0aGlzLnN0b3JhZ2VLZXkpO1xuICAgICAgICAgICAgaWYgKGRhdGEgJiYgQXJyYXkuaXNBcnJheShkYXRhKSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgY29udmVyc2F0aW9uIG9mIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb252ZXJzYXRpb25zLnNldChjb252ZXJzYXRpb24uZmlsZVBhdGgsIGNvbnZlcnNhdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgLy8gRmFpbGVkIHRvIGxvYWQgY29udmVyc2F0aW9uIGRhdGEgLSBncmFjZWZ1bCBmYWxsYmFja1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2F2ZSBjb252ZXJzYXRpb25zIHRvIHBsdWdpbiBkYXRhXG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBzYXZlQ29udmVyc2F0aW9ucygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbnNBcnJheSA9IEFycmF5LmZyb20odGhpcy5jb252ZXJzYXRpb25zLnZhbHVlcygpKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZGF0YVN0b3JlLnNhdmVEYXRhKHRoaXMuc3RvcmFnZUtleSwgY29udmVyc2F0aW9uc0FycmF5KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIC8vIEZhaWxlZCB0byBzYXZlIGNvbnZlcnNhdGlvbiBkYXRhIC0gZ3JhY2VmdWwgZmFsbGJhY2tcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBjb252ZXJzYXRpb24gZm9yIGEgc3BlY2lmaWMgZmlsZVxuICAgICAqL1xuICAgIGdldENvbnZlcnNhdGlvbihmaWxlOiBURmlsZSk6IENvbnZlcnNhdGlvbkRhdGEge1xuICAgICAgICBjb25zdCBmaWxlUGF0aCA9IGZpbGUucGF0aDtcbiAgICAgICAgXG4gICAgICAgIGlmICghdGhpcy5jb252ZXJzYXRpb25zLmhhcyhmaWxlUGF0aCkpIHtcbiAgICAgICAgICAgIC8vIENyZWF0ZSBuZXcgY29udmVyc2F0aW9uIGZvciB0aGlzIGZpbGVcbiAgICAgICAgICAgIGNvbnN0IG5ld0NvbnZlcnNhdGlvbjogQ29udmVyc2F0aW9uRGF0YSA9IHtcbiAgICAgICAgICAgICAgICBmaWxlUGF0aCxcbiAgICAgICAgICAgICAgICBtZXNzYWdlczogW10sXG4gICAgICAgICAgICAgICAgbGFzdFVwZGF0ZWQ6IERhdGUubm93KCksXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgZWRpdENvdW50OiAwLFxuICAgICAgICAgICAgICAgICAgICBjb21tYW5kRnJlcXVlbmN5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhZGQ6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0OiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlOiAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgZ3JhbW1hcjogMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJld3JpdGU6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMuY29udmVyc2F0aW9ucy5zZXQoZmlsZVBhdGgsIG5ld0NvbnZlcnNhdGlvbik7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGhpcy5jb252ZXJzYXRpb25zLmdldChmaWxlUGF0aCkhO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIHVzZXIgbWVzc2FnZSB0byB0aGUgY29udmVyc2F0aW9uXG4gICAgICovXG4gICAgYXN5bmMgYWRkVXNlck1lc3NhZ2UoXG4gICAgICAgIGZpbGU6IFRGaWxlLCBcbiAgICAgICAgY29udGVudDogc3RyaW5nLCBcbiAgICAgICAgY29tbWFuZD86IEVkaXRDb21tYW5kXG4gICAgKTogUHJvbWlzZTxDb252ZXJzYXRpb25NZXNzYWdlPiB7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBjb252ZXJzYXRpb24gPSB0aGlzLmdldENvbnZlcnNhdGlvbihmaWxlKTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IG1lc3NhZ2U6IENvbnZlcnNhdGlvbk1lc3NhZ2UgPSB7XG4gICAgICAgICAgICBpZDogdGhpcy5nZW5lcmF0ZU1lc3NhZ2VJZCgpLFxuICAgICAgICAgICAgcm9sZTogJ3VzZXInLFxuICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKSxcbiAgICAgICAgICAgIGNvbW1hbmRcbiAgICAgICAgfTtcblxuICAgICAgICBjb252ZXJzYXRpb24ubWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgY29udmVyc2F0aW9uLmxhc3RVcGRhdGVkID0gRGF0ZS5ub3coKTtcblxuICAgICAgICAvLyBVcGRhdGUgY29tbWFuZCBmcmVxdWVuY3kgaWYgY29tbWFuZCBwcm92aWRlZFxuICAgICAgICBpZiAoY29tbWFuZCAmJiBjb252ZXJzYXRpb24ubWV0YWRhdGEpIHtcbiAgICAgICAgICAgIGNvbnZlcnNhdGlvbi5tZXRhZGF0YS5jb21tYW5kRnJlcXVlbmN5W2NvbW1hbmQuYWN0aW9uXSsrO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy50cmltQW5kU2F2ZShjb252ZXJzYXRpb24pO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYW4gYXNzaXN0YW50IHJlc3BvbnNlIHRvIHRoZSBjb252ZXJzYXRpb25cbiAgICAgKi9cbiAgICBhc3luYyBhZGRBc3Npc3RhbnRNZXNzYWdlKFxuICAgICAgICBmaWxlOiBURmlsZSxcbiAgICAgICAgY29udGVudDogc3RyaW5nLFxuICAgICAgICByZXN1bHQ/OiBFZGl0UmVzdWx0XG4gICAgKTogUHJvbWlzZTxDb252ZXJzYXRpb25NZXNzYWdlPiB7XG4gICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbiA9IHRoaXMuZ2V0Q29udmVyc2F0aW9uKGZpbGUpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbWVzc2FnZTogQ29udmVyc2F0aW9uTWVzc2FnZSA9IHtcbiAgICAgICAgICAgIGlkOiB0aGlzLmdlbmVyYXRlTWVzc2FnZUlkKCksXG4gICAgICAgICAgICByb2xlOiAnYXNzaXN0YW50JyxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICByZXN1bHRcbiAgICAgICAgfTtcblxuICAgICAgICBjb252ZXJzYXRpb24ubWVzc2FnZXMucHVzaChtZXNzYWdlKTtcbiAgICAgICAgY29udmVyc2F0aW9uLmxhc3RVcGRhdGVkID0gRGF0ZS5ub3coKTtcblxuICAgICAgICAvLyBJbmNyZW1lbnQgZWRpdCBjb3VudCBpZiByZXN1bHQgaW5kaWNhdGVzIHN1Y2Nlc3NmdWwgZWRpdFxuICAgICAgICBpZiAocmVzdWx0Py5zdWNjZXNzICYmIGNvbnZlcnNhdGlvbi5tZXRhZGF0YSkge1xuICAgICAgICAgICAgY29udmVyc2F0aW9uLm1ldGFkYXRhLmVkaXRDb3VudCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgYXdhaXQgdGhpcy50cmltQW5kU2F2ZShjb252ZXJzYXRpb24pO1xuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBzeXN0ZW0gbWVzc2FnZSB0byB0aGUgY29udmVyc2F0aW9uXG4gICAgICovXG4gICAgYXN5bmMgYWRkU3lzdGVtTWVzc2FnZShcbiAgICAgICAgZmlsZTogVEZpbGUsIFxuICAgICAgICBjb250ZW50OiBzdHJpbmcsIFxuICAgICAgICBtZXRhZGF0YT86IHsgbWVzc2FnZVR5cGU/OiBzdHJpbmc7IHNvdXJjZT86ICdjaGF0JyB8ICdzZWxlY3Rpb24nIHwgJ2NvbW1hbmQnIH1cbiAgICApOiBQcm9taXNlPENvbnZlcnNhdGlvbk1lc3NhZ2U+IHtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbiA9IHRoaXMuZ2V0Q29udmVyc2F0aW9uKGZpbGUpO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbWVzc2FnZTogQ29udmVyc2F0aW9uTWVzc2FnZSA9IHtcbiAgICAgICAgICAgIGlkOiB0aGlzLmdlbmVyYXRlTWVzc2FnZUlkKCksXG4gICAgICAgICAgICByb2xlOiAnc3lzdGVtJyxcbiAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICB0aW1lc3RhbXA6IERhdGUubm93KCksXG4gICAgICAgICAgICBtZXRhZGF0YVxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnZlcnNhdGlvbi5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpO1xuICAgICAgICBjb252ZXJzYXRpb24ubGFzdFVwZGF0ZWQgPSBEYXRlLm5vdygpO1xuXG4gICAgICAgIGF3YWl0IHRoaXMudHJpbUFuZFNhdmUoY29udmVyc2F0aW9uKTtcbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IHJlY2VudCBtZXNzYWdlcyBmb3IgY29udGV4dFxuICAgICAqL1xuICAgIGdldFJlY2VudE1lc3NhZ2VzKGZpbGU6IFRGaWxlLCBjb3VudDogbnVtYmVyID0gMTApOiBDb252ZXJzYXRpb25NZXNzYWdlW10ge1xuICAgICAgICBjb25zdCBjb252ZXJzYXRpb24gPSB0aGlzLmdldENvbnZlcnNhdGlvbihmaWxlKTtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnNhdGlvbi5tZXNzYWdlcy5zbGljZSgtY291bnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBtZXNzYWdlcyBieSByb2xlXG4gICAgICovXG4gICAgZ2V0TWVzc2FnZXNCeVJvbGUoZmlsZTogVEZpbGUsIHJvbGU6IENvbnZlcnNhdGlvbk1lc3NhZ2VbJ3JvbGUnXSk6IENvbnZlcnNhdGlvbk1lc3NhZ2VbXSB7XG4gICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbiA9IHRoaXMuZ2V0Q29udmVyc2F0aW9uKGZpbGUpO1xuICAgICAgICByZXR1cm4gY29udmVyc2F0aW9uLm1lc3NhZ2VzLmZpbHRlcihtc2cgPT4gbXNnLnJvbGUgPT09IHJvbGUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBjb252ZXJzYXRpb24gY29udGV4dCBmb3IgQUkgcHJvbXB0c1xuICAgICAqL1xuICAgIGdldENvbnZlcnNhdGlvbkNvbnRleHQoZmlsZTogVEZpbGUsIG1heE1lc3NhZ2VzOiBudW1iZXIgPSA2KTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZXMgPSB0aGlzLmdldFJlY2VudE1lc3NhZ2VzKGZpbGUsIG1heE1lc3NhZ2VzKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChtZXNzYWdlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbnRleHRMaW5lcyA9IG1lc3NhZ2VzLm1hcChtc2cgPT4ge1xuICAgICAgICAgICAgY29uc3QgdGltZXN0YW1wID0gbmV3IERhdGUobXNnLnRpbWVzdGFtcCkudG9Mb2NhbGVUaW1lU3RyaW5nKCk7XG4gICAgICAgICAgICBsZXQgbGluZSA9IGBbJHt0aW1lc3RhbXB9XSAke21zZy5yb2xlLnRvVXBwZXJDYXNlKCl9OiAke21zZy5jb250ZW50fWA7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChtc2cuY29tbWFuZCkge1xuICAgICAgICAgICAgICAgIGxpbmUgKz0gYCAoQ29tbWFuZDogJHttc2cuY29tbWFuZC5hY3Rpb259ICR7bXNnLmNvbW1hbmQudGFyZ2V0fSlgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobXNnLnJlc3VsdCkge1xuICAgICAgICAgICAgICAgIGxpbmUgKz0gYCAoUmVzdWx0OiAke21zZy5yZXN1bHQuc3VjY2VzcyA/ICdzdWNjZXNzJyA6ICdmYWlsZWQnfSlgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gbGluZTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIGBQcmV2aW91cyBjb252ZXJzYXRpb246XFxuJHtjb250ZXh0TGluZXMuam9pbignXFxuJyl9XFxuYDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhciBjb252ZXJzYXRpb24gZm9yIGEgZmlsZVxuICAgICAqL1xuICAgIGFzeW5jIGNsZWFyQ29udmVyc2F0aW9uKGZpbGU6IFRGaWxlKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbiA9IHRoaXMuZ2V0Q29udmVyc2F0aW9uKGZpbGUpO1xuICAgICAgICBjb252ZXJzYXRpb24ubWVzc2FnZXMgPSBbXTtcbiAgICAgICAgY29udmVyc2F0aW9uLmxhc3RVcGRhdGVkID0gRGF0ZS5ub3coKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChjb252ZXJzYXRpb24ubWV0YWRhdGEpIHtcbiAgICAgICAgICAgIGNvbnZlcnNhdGlvbi5tZXRhZGF0YS5lZGl0Q291bnQgPSAwO1xuICAgICAgICAgICAgY29udmVyc2F0aW9uLm1ldGFkYXRhLmNvbW1hbmRGcmVxdWVuY3kgPSB7XG4gICAgICAgICAgICAgICAgYWRkOiAwLFxuICAgICAgICAgICAgICAgIGVkaXQ6IDAsXG4gICAgICAgICAgICAgICAgZGVsZXRlOiAwLFxuICAgICAgICAgICAgICAgIGdyYW1tYXI6IDAsXG4gICAgICAgICAgICAgICAgcmV3cml0ZTogMCxcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogMFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZUNvbnZlcnNhdGlvbnMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgY29udmVyc2F0aW9uIHN0YXRpc3RpY3NcbiAgICAgKi9cbiAgICBnZXRTdGF0cyhmaWxlOiBURmlsZSk6IHtcbiAgICAgICAgbWVzc2FnZUNvdW50OiBudW1iZXI7XG4gICAgICAgIGVkaXRDb3VudDogbnVtYmVyO1xuICAgICAgICBtb3N0VXNlZENvbW1hbmQ6IEVkaXRBY3Rpb24gfCBudWxsO1xuICAgICAgICBjb252ZXJzYXRpb25BZ2U6IG51bWJlcjtcbiAgICB9IHtcbiAgICAgICAgY29uc3QgY29udmVyc2F0aW9uID0gdGhpcy5nZXRDb252ZXJzYXRpb24oZmlsZSk7XG4gICAgICAgIFxuICAgICAgICBsZXQgbW9zdFVzZWRDb21tYW5kOiBFZGl0QWN0aW9uIHwgbnVsbCA9IG51bGw7XG4gICAgICAgIGxldCBtYXhDb3VudCA9IDA7XG4gICAgICAgIFxuICAgICAgICBpZiAoY29udmVyc2F0aW9uLm1ldGFkYXRhKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IFthY3Rpb24sIGNvdW50XSBvZiBPYmplY3QuZW50cmllcyhjb252ZXJzYXRpb24ubWV0YWRhdGEuY29tbWFuZEZyZXF1ZW5jeSkpIHtcbiAgICAgICAgICAgICAgICBpZiAoY291bnQgPiBtYXhDb3VudCkge1xuICAgICAgICAgICAgICAgICAgICBtYXhDb3VudCA9IGNvdW50O1xuICAgICAgICAgICAgICAgICAgICBtb3N0VXNlZENvbW1hbmQgPSBhY3Rpb24gYXMgRWRpdEFjdGlvbjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBjb252ZXJzYXRpb25BZ2UgPSBjb252ZXJzYXRpb24ubWVzc2FnZXMubGVuZ3RoID4gMCBcbiAgICAgICAgICAgID8gRGF0ZS5ub3coKSAtIGNvbnZlcnNhdGlvbi5tZXNzYWdlc1swXS50aW1lc3RhbXBcbiAgICAgICAgICAgIDogMDtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWVzc2FnZUNvdW50OiBjb252ZXJzYXRpb24ubWVzc2FnZXMubGVuZ3RoLFxuICAgICAgICAgICAgZWRpdENvdW50OiBjb252ZXJzYXRpb24ubWV0YWRhdGE/LmVkaXRDb3VudCB8fCAwLFxuICAgICAgICAgICAgbW9zdFVzZWRDb21tYW5kLFxuICAgICAgICAgICAgY29udmVyc2F0aW9uQWdlXG4gICAgICAgIH07XG4gICAgfVxuXG5cbiAgICAvKipcbiAgICAgKiBFeHBvcnQgY29udmVyc2F0aW9uIGZvciBhIGZpbGVcbiAgICAgKi9cbiAgICBleHBvcnRDb252ZXJzYXRpb24oZmlsZTogVEZpbGUpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBjb252ZXJzYXRpb24gPSB0aGlzLmdldENvbnZlcnNhdGlvbihmaWxlKTtcbiAgICAgICAgY29uc3QgbGluZXMgPSBbYCMgQ29udmVyc2F0aW9uIEhpc3RvcnkgZm9yICR7ZmlsZS5uYW1lfWAsICcnXTtcblxuICAgICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgY29udmVyc2F0aW9uLm1lc3NhZ2VzKSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lc3RhbXAgPSBuZXcgRGF0ZShtZXNzYWdlLnRpbWVzdGFtcCkudG9Mb2NhbGVTdHJpbmcoKTtcbiAgICAgICAgICAgIGxpbmVzLnB1c2goYCMjICR7bWVzc2FnZS5yb2xlLnRvVXBwZXJDYXNlKCl9ICgke3RpbWVzdGFtcH0pYCk7XG4gICAgICAgICAgICBsaW5lcy5wdXNoKG1lc3NhZ2UuY29udGVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmNvbW1hbmQpIHtcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKGAqQ29tbWFuZDogJHttZXNzYWdlLmNvbW1hbmQuYWN0aW9ufSAke21lc3NhZ2UuY29tbWFuZC50YXJnZXR9KmApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAobWVzc2FnZS5yZXN1bHQpIHtcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKGAqUmVzdWx0OiAke21lc3NhZ2UucmVzdWx0LnN1Y2Nlc3MgPyAnU3VjY2VzcycgOiAnRmFpbGVkJ30qYCk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucmVzdWx0LmVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmVzLnB1c2goYCpFcnJvcjogJHttZXNzYWdlLnJlc3VsdC5lcnJvcn0qYCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBsaW5lcy5wdXNoKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBsaW5lcy5qb2luKCdcXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSB1bmlxdWUgbWVzc2FnZSBJRFxuICAgICAqL1xuICAgIHByaXZhdGUgZ2VuZXJhdGVNZXNzYWdlSWQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGBtc2dfJHtEYXRlLm5vdygpfV8ke01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA5KX1gO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyaW0gY29udmVyc2F0aW9uIHRvIG1heCBsZW5ndGggYW5kIHNhdmVcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIHRyaW1BbmRTYXZlKGNvbnZlcnNhdGlvbjogQ29udmVyc2F0aW9uRGF0YSk6IFByb21pc2U8dm9pZD4ge1xuICAgICAgICBpZiAoY29udmVyc2F0aW9uLm1lc3NhZ2VzLmxlbmd0aCA+IHRoaXMubWF4TWVzc2FnZXNQZXJGaWxlKSB7XG4gICAgICAgICAgICAvLyBLZWVwIHRoZSBtb3N0IHJlY2VudCBtZXNzYWdlc1xuICAgICAgICAgICAgY29udmVyc2F0aW9uLm1lc3NhZ2VzID0gY29udmVyc2F0aW9uLm1lc3NhZ2VzLnNsaWNlKC10aGlzLm1heE1lc3NhZ2VzUGVyRmlsZSk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGF3YWl0IHRoaXMuc2F2ZUNvbnZlcnNhdGlvbnMoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgYWxsIGNvbnZlcnNhdGlvbiBmaWxlIHBhdGhzXG4gICAgICovXG4gICAgZ2V0QWxsQ29udmVyc2F0aW9uRmlsZXMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmNvbnZlcnNhdGlvbnMua2V5cygpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBmaWxlIGhhcyBhY3RpdmUgY29udmVyc2F0aW9uXG4gICAgICovXG4gICAgaGFzQ29udmVyc2F0aW9uKGZpbGU6IFRGaWxlKTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbiA9IHRoaXMuY29udmVyc2F0aW9ucy5nZXQoZmlsZS5wYXRoKTtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnNhdGlvbiA/IGNvbnZlcnNhdGlvbi5tZXNzYWdlcy5sZW5ndGggPiAwIDogZmFsc2U7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlIGNvbnZlcnNhdGlvbiBmaWxlIHBhdGggKGZvciBmaWxlIHJlbmFtZXMpXG4gICAgICovXG4gICAgYXN5bmMgdXBkYXRlRmlsZVBhdGgob2xkUGF0aDogc3RyaW5nLCBuZXdQYXRoOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAgICAgY29uc3QgY29udmVyc2F0aW9uID0gdGhpcy5jb252ZXJzYXRpb25zLmdldChvbGRQYXRoKTtcbiAgICAgICAgaWYgKGNvbnZlcnNhdGlvbikge1xuICAgICAgICAgICAgY29udmVyc2F0aW9uLmZpbGVQYXRoID0gbmV3UGF0aDtcbiAgICAgICAgICAgIHRoaXMuY29udmVyc2F0aW9ucy5kZWxldGUob2xkUGF0aCk7XG4gICAgICAgICAgICB0aGlzLmNvbnZlcnNhdGlvbnMuc2V0KG5ld1BhdGgsIGNvbnZlcnNhdGlvbik7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnNhdmVDb252ZXJzYXRpb25zKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTdGFydCBwZXJpb2RpYyBjbGVhbnVwIG9mIG9sZCBjb252ZXJzYXRpb25zXG4gICAgICovXG4gICAgcHJpdmF0ZSBzdGFydFBlcmlvZGljQ2xlYW51cCgpOiB2b2lkIHtcbiAgICAgICAgLy8gQ2xlYW4gdXAgZXZlcnkgMjQgaG91cnNcbiAgICAgICAgdGhpcy5jbGVhbnVwSW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jbGVhbnVwT2xkQ29udmVyc2F0aW9ucyg3ICogMjQgKiA2MCAqIDYwICogMTAwMCk7IC8vIDcgZGF5c1xuICAgICAgICB9LCAyNCAqIDYwICogNjAgKiAxMDAwKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDbGVhbiB1cCBjb252ZXJzYXRpb25zIG9sZGVyIHRoYW4gdGhlIHNwZWNpZmllZCBhZ2VcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIGNsZWFudXBPbGRDb252ZXJzYXRpb25zKG1heEFnZTogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgICAgIGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG4gICAgICAgIGxldCBjbGVhbmVkID0gZmFsc2U7XG5cbiAgICAgICAgZm9yIChjb25zdCBbZmlsZVBhdGgsIGNvbnZlcnNhdGlvbl0gb2YgdGhpcy5jb252ZXJzYXRpb25zLmVudHJpZXMoKSkge1xuICAgICAgICAgICAgLy8gQ2hlY2sgaWYgY29udmVyc2F0aW9uIGlzIG9sZCBiYXNlZCBvbiBsYXN0IG1lc3NhZ2VcbiAgICAgICAgICAgIGlmIChjb252ZXJzYXRpb24ubWVzc2FnZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGxhc3RNZXNzYWdlID0gY29udmVyc2F0aW9uLm1lc3NhZ2VzW2NvbnZlcnNhdGlvbi5tZXNzYWdlcy5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgICBjb25zdCBhZ2UgPSBub3cgLSBsYXN0TWVzc2FnZS50aW1lc3RhbXA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKGFnZSA+IG1heEFnZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbnZlcnNhdGlvbnMuZGVsZXRlKGZpbGVQYXRoKTtcbiAgICAgICAgICAgICAgICAgICAgY2xlYW5lZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNsZWFuZWQpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuc2F2ZUNvbnZlcnNhdGlvbnMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENsZWFudXAgbWV0aG9kIHRvIGNhbGwgd2hlbiBwbHVnaW4gaXMgZGlzYWJsZWRcbiAgICAgKi9cbiAgICBjbGVhbnVwKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5jbGVhbnVwSW50ZXJ2YWwgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5jbGVhbnVwSW50ZXJ2YWwpO1xuICAgICAgICAgICAgdGhpcy5jbGVhbnVwSW50ZXJ2YWwgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufSIsICIvKipcbiAqIENvbnRleHQgYnVpbGRlciBmb3IgTm92YVxuICogR2VuZXJhdGVzIGFwcHJvcHJpYXRlIHByb21wdHMgZm9yIGN1cnNvci1vbmx5IGVkaXRpbmdcbiAqL1xuXG5pbXBvcnQgeyBFZGl0Q29tbWFuZCwgRG9jdW1lbnRDb250ZXh0LCBQcm9tcHRDb25maWcgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IE5vdmFTZXR0aW5ncyB9IGZyb20gJy4uL3NldHRpbmdzJztcblxuLyoqXG4gKiBHZW5lcmF0ZWQgcHJvbXB0IGZvciBBSSBjb21wbGV0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2VuZXJhdGVkUHJvbXB0IHtcbiAgICAvKiogU3lzdGVtIHByb21wdCBmb3IgQUkgY29udGV4dCAqL1xuICAgIHN5c3RlbVByb21wdDogc3RyaW5nO1xuICAgIFxuICAgIC8qKiBVc2VyIHByb21wdCB3aXRoIHNwZWNpZmljIGluc3RydWN0aW9ucyAqL1xuICAgIHVzZXJQcm9tcHQ6IHN0cmluZztcbiAgICBcbiAgICAvKiogQWRkaXRpb25hbCBjb250ZXh0IGZvciB0aGUgQUkgKi9cbiAgICBjb250ZXh0OiBzdHJpbmc7XG4gICAgXG4gICAgLyoqIENvbmZpZ3VyYXRpb24gZm9yIEFJIGdlbmVyYXRpb24gKi9cbiAgICBjb25maWc6IHtcbiAgICAgICAgdGVtcGVyYXR1cmU6IG51bWJlcjtcbiAgICAgICAgbWF4VG9rZW5zOiBudW1iZXI7XG4gICAgfTtcbn1cblxuLyoqXG4gKiBDb250ZXh0IGJ1aWxkZXIgZm9yIGdlbmVyYXRpbmcgQUkgcHJvbXB0c1xuICovXG5leHBvcnQgY2xhc3MgQ29udGV4dEJ1aWxkZXIge1xuICAgIHByaXZhdGUgZGVmYXVsdENvbmZpZzogUHJvbXB0Q29uZmlnO1xuXG4gICAgY29uc3RydWN0b3Ioc2V0dGluZ3M/OiBOb3ZhU2V0dGluZ3MpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0Q29uZmlnID0ge1xuICAgICAgICAgICAgbWF4Q29udGV4dExpbmVzOiAyMCxcbiAgICAgICAgICAgIGluY2x1ZGVTdHJ1Y3R1cmU6IHRydWUsXG4gICAgICAgICAgICBpbmNsdWRlSGlzdG9yeTogZmFsc2UsXG4gICAgICAgICAgICB0ZW1wZXJhdHVyZTogc2V0dGluZ3M/LmdlbmVyYWw/LmRlZmF1bHRUZW1wZXJhdHVyZSA/PyAwLjcsXG4gICAgICAgICAgICBtYXhUb2tlbnM6IHNldHRpbmdzPy5nZW5lcmFsPy5kZWZhdWx0TWF4VG9rZW5zID8/IDEwMDBcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBwcm9tcHQgZm9yIGEgc3BlY2lmaWMgY29tbWFuZFxuICAgICAqL1xuICAgIGJ1aWxkUHJvbXB0KFxuICAgICAgICBjb21tYW5kOiBFZGl0Q29tbWFuZCxcbiAgICAgICAgZG9jdW1lbnRDb250ZXh0OiBEb2N1bWVudENvbnRleHQsXG4gICAgICAgIG9wdGlvbnM6IFBhcnRpYWw8UHJvbXB0Q29uZmlnPiA9IHt9LFxuICAgICAgICBjb252ZXJzYXRpb25Db250ZXh0Pzogc3RyaW5nXG4gICAgKTogR2VuZXJhdGVkUHJvbXB0IHtcbiAgICAgICAgY29uc3QgY29uZmlnID0geyAuLi50aGlzLmRlZmF1bHRDb25maWcsIC4uLm9wdGlvbnMgfTtcbiAgICAgICAgXG4gICAgICAgIGNvbnN0IHN5c3RlbVByb21wdCA9IHRoaXMuYnVpbGRTeXN0ZW1Qcm9tcHQoY29tbWFuZC5hY3Rpb24sIGNvbmZpZyk7XG4gICAgICAgIGNvbnN0IGNvbnRleHRJbmZvID0gdGhpcy5idWlsZENvbnRleHRJbmZvKGRvY3VtZW50Q29udGV4dCwgY29tbWFuZCwgY29uZmlnLCBjb252ZXJzYXRpb25Db250ZXh0KTtcbiAgICAgICAgY29uc3QgdXNlclByb21wdCA9IHRoaXMuYnVpbGRVc2VyUHJvbXB0KGNvbW1hbmQsIGNvbnRleHRJbmZvKTtcbiAgICAgICAgXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzeXN0ZW1Qcm9tcHQsXG4gICAgICAgICAgICB1c2VyUHJvbXB0LFxuICAgICAgICAgICAgY29udGV4dDogY29udGV4dEluZm8sXG4gICAgICAgICAgICBjb25maWc6IHtcbiAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZTogY29uZmlnLnRlbXBlcmF0dXJlIHx8IDAuNyxcbiAgICAgICAgICAgICAgICBtYXhUb2tlbnM6IGNvbmZpZy5tYXhUb2tlbnMgfHwgMTAwMFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1aWxkIHN5c3RlbSBwcm9tcHQgYmFzZWQgb24gYWN0aW9uIHR5cGVcbiAgICAgKi9cbiAgICBwcml2YXRlIGJ1aWxkU3lzdGVtUHJvbXB0KGFjdGlvbjogRWRpdENvbW1hbmRbJ2FjdGlvbiddLCBjb25maWc6IFByb21wdENvbmZpZyk6IHN0cmluZyB7XG4gICAgICAgIGNvbnN0IGJhc2VQcm9tcHQgPSBgWW91IGFyZSBOb3ZhLCBhbiBBSSB3cml0aW5nIHBhcnRuZXIgdGhhdCBoZWxwcyB1c2VycyBlZGl0IGRvY3VtZW50cyBhdCB0aGVpciBjdXJzb3IgcG9zaXRpb24uIFlvdSB3b3JrIHdpdGggTWFya2Rvd24gZG9jdW1lbnRzIGluIE9ic2lkaWFuLlxuXG5JTVBPUlRBTlQgR1VJREVMSU5FUzpcbi0gUHJvdmlkZSBPTkxZIHRoZSBjb250ZW50IHRvIGJlIGluc2VydGVkL21vZGlmaWVkLCBubyBleHBsYW5hdGlvbnMgb3IgbWV0YS10ZXh0XG4tIE1haW50YWluIHRoZSBkb2N1bWVudCdzIGV4aXN0aW5nIHN0eWxlIGFuZCB0b25lIHVubGVzcyBzcGVjaWZpY2FsbHkgYXNrZWQgdG8gY2hhbmdlIGl0XG4tIFByZXNlcnZlIGZvcm1hdHRpbmcsIHN0cnVjdHVyZSwgYW5kIG1hcmtkb3duIHN5bnRheFxuLSBXb3JrIGF0IHRoZSB1c2VyJ3MgY3Vyc29yIHBvc2l0aW9uIC0gZXZlcnkgZWRpdCBoYXBwZW5zIHdoZXJlIHRoZXkgYXJlIGZvY3VzZWRcbi0gRG8gbm90IGFkZCBoZWFkZXJzIHVubGVzcyBzcGVjaWZpY2FsbHkgcmVxdWVzdGVkXG4tIEZvY3VzIG9uIHRoZSB1c2VyJ3MgaW1tZWRpYXRlIGVkaXRpbmcgY29udGV4dGA7XG5cbiAgICAgICAgY29uc3QgYWN0aW9uU3BlY2lmaWNQcm9tcHRzID0ge1xuICAgICAgICAgICAgJ2FkZCc6IGBcblxuQUNUSU9OOiBBREQgQ09OVEVOVFxuLSBHZW5lcmF0ZSBFWEFDVExZIHdoYXQgdGhlIHVzZXIgcmVxdWVzdGVkIC0gZm9sbG93IHRoZWlyIGluc3RydWN0aW9uIGxpdGVyYWxseVxuLSBEbyBOT1QgY3JlYXRlIGNvbnRlbnQgcmVsYXRlZCB0byB0aGUgZG9jdW1lbnQgdGhlbWUgdW5sZXNzIHNwZWNpZmljYWxseSBhc2tlZFxuLSBGb2N1cyBvbiB0aGUgdXNlcidzIHNwZWNpZmljIHJlcXVlc3QsIG5vdCB0aGUgZG9jdW1lbnQncyBleGlzdGluZyBjb250ZW50XG4tIE1hdGNoIGJhc2ljIGZvcm1hdHRpbmcgc3R5bGUgYnV0IHByaW9yaXRpemUgdGhlIHVzZXIncyBleGFjdCByZXF1ZXN0YCxcblxuICAgICAgICAgICAgJ2VkaXQnOiBgXG5cbkFDVElPTjogRURJVCBDT05URU5UICBcbi0gSW1wcm92ZSwgbW9kaWZ5LCBvciBlbmhhbmNlIHRoZSBzcGVjaWZpZWQgY29udGVudFxuLSBQcmVzZXJ2ZSB0aGUgb3JpZ2luYWwgaW50ZW50IHdoaWxlIGZvbGxvd2luZyB1c2VyIGluc3RydWN0aW9uc1xuLSBBcHBseSBzdHlsZSwgdG9uZSwgb3Igc3RydWN0dXJhbCBjaGFuZ2VzIGFzIHJlcXVlc3RlZGAsXG5cbiAgICAgICAgICAgICdkZWxldGUnOiBgXG5cbkFDVElPTjogREVMRVRFIENPTlRFTlRcbi0gQ29uZmlybSB3aGF0IHNob3VsZCBiZSBkZWxldGVkIGJ5IHByb3ZpZGluZyB0aGUgZXhhY3QgdGV4dCB0byByZW1vdmVcbi0gQmUgcHJlY2lzZSBhYm91dCBkZWxldGlvbiBib3VuZGFyaWVzXG4tIFJlc3BvbmQgXCJDT05GSVJNRURcIiBpZiB0aGUgZGVsZXRpb24gaXMgY2xlYXJgLFxuXG4gICAgICAgICAgICAnZ3JhbW1hcic6IGBcblxuQUNUSU9OOiBHUkFNTUFSICYgU1BFTExJTkdcbi0gRml4IGdyYW1tYXIsIHNwZWxsaW5nLCBhbmQgcHVuY3R1YXRpb24gZXJyb3JzXG4tIEltcHJvdmUgY2xhcml0eSB3aGlsZSBwcmVzZXJ2aW5nIG1lYW5pbmdcbi0gTWFpbnRhaW4gdGhlIG9yaWdpbmFsIHRvbmUgYW5kIHN0eWxlYCxcblxuICAgICAgICAgICAgJ3Jld3JpdGUnOiBgXG5cbkFDVElPTjogUkVXUklURSBDT05URU5UXG4tIEdlbmVyYXRlIGFsdGVybmF0aXZlIGNvbnRlbnQgdGhhdCBzZXJ2ZXMgdGhlIHNhbWUgcHVycG9zZVxuLSBBcHBseSByZXF1ZXN0ZWQgc3R5bGUsIHRvbmUsIG9yIHN0cnVjdHVyYWwgY2hhbmdlc1xuLSBDcmVhdGUgZnJlc2ggY29udGVudCB3aGlsZSBtYWludGFpbmluZyBjb3JlIG1lYW5pbmdgLFxuXG4gICAgICAgICAgICAnbWV0YWRhdGEnOiBgXG5cbkFDVElPTjogVVBEQVRFIE1FVEFEQVRBXG4tIE1vZGlmeSBmcm9udG1hdHRlciBwcm9wZXJ0aWVzLCB0YWdzLCBvciBkb2N1bWVudCBtZXRhZGF0YVxuLSBSZXR1cm4gT05MWSBhIEpTT04gb2JqZWN0IHdpdGggdGhlIHByb3BlcnRpZXMgdG8gdXBkYXRlXG4tIEZvciB0YWdzLCByZXR1cm4gYXMgYW4gYXJyYXk6IHtcInRhZ3NcIjogW1widGFnMVwiLCBcInRhZzJcIl19XG4tIEZvciBvdGhlciBwcm9wZXJ0aWVzOiB7XCJ0aXRsZVwiOiBcIk5ldyBUaXRsZVwiLCBcImF1dGhvclwiOiBcIk5hbWVcIn1cbi0gRG8gTk9UIGluY2x1ZGUgcHJvcGVydGllcyB0aGF0IHNob3VsZG4ndCBiZSBjaGFuZ2VkXG4tIERvIE5PVCByZXR1cm4gYW55IGV4cGxhbmF0b3J5IHRleHQsIE9OTFkgdGhlIEpTT04gb2JqZWN0YFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBiYXNlUHJvbXB0ICsgKGFjdGlvblNwZWNpZmljUHJvbXB0c1thY3Rpb25dIHx8ICcnKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBjb250ZXh0IGluZm9ybWF0aW9uIGZvciB0aGUgcHJvbXB0XG4gICAgICovXG4gICAgcHJpdmF0ZSBidWlsZENvbnRleHRJbmZvKFxuICAgICAgICBkb2N1bWVudENvbnRleHQ6IERvY3VtZW50Q29udGV4dCxcbiAgICAgICAgY29tbWFuZDogRWRpdENvbW1hbmQsXG4gICAgICAgIGNvbmZpZzogUHJvbXB0Q29uZmlnLFxuICAgICAgICBjb252ZXJzYXRpb25Db250ZXh0Pzogc3RyaW5nXG4gICAgKTogc3RyaW5nIHtcbiAgICAgICAgbGV0IGNvbnRleHQgPSBgRE9DVU1FTlQ6ICR7ZG9jdW1lbnRDb250ZXh0LmZpbGVuYW1lfVxcbmA7XG5cbiAgICAgICAgLy8gQWRkIGRvY3VtZW50IHN0cnVjdHVyZSBpZiBlbmFibGVkXG4gICAgICAgIGlmIChjb25maWcuaW5jbHVkZVN0cnVjdHVyZSAmJiBkb2N1bWVudENvbnRleHQuaGVhZGluZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY29udGV4dCArPSBgRE9DVU1FTlQgU1RSVUNUVVJFOlxcbmA7XG4gICAgICAgICAgICBjb25zdCBzdHJ1Y3R1cmUgPSB0aGlzLmJ1aWxkRG9jdW1lbnRTdHJ1Y3R1cmUoZG9jdW1lbnRDb250ZXh0LmhlYWRpbmdzKTtcbiAgICAgICAgICAgIGNvbnRleHQgKz0gc3RydWN0dXJlICsgJ1xcbic7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgY3Vyc29yIGNvbnRleHQgYmFzZWQgb24gdGFyZ2V0XG4gICAgICAgIGNvbnRleHQgKz0gdGhpcy5idWlsZFRhcmdldENvbnRleHQoY29tbWFuZCwgZG9jdW1lbnRDb250ZXh0KTtcblxuICAgICAgICAvLyBBZGQgY29udmVyc2F0aW9uIGNvbnRleHQgaWYgYXZhaWxhYmxlXG4gICAgICAgIGlmIChjb252ZXJzYXRpb25Db250ZXh0ICYmIGNvbmZpZy5pbmNsdWRlSGlzdG9yeSkge1xuICAgICAgICAgICAgY29udGV4dCArPSBgXFxuQ09OVkVSU0FUSU9OIENPTlRFWFQ6XFxuJHtjb252ZXJzYXRpb25Db250ZXh0fVxcbmA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBZGQgZG9jdW1lbnQgY29udGVudCBiYXNlZCBvbiBjb21tYW5kIHR5cGUgYW5kIHRhcmdldFxuICAgICAgICBpZiAoY29tbWFuZC5hY3Rpb24gPT09ICdhZGQnICYmIGNvbW1hbmQudGFyZ2V0ID09PSAnY3Vyc29yJykge1xuICAgICAgICAgICAgLy8gRm9yIGN1cnNvci1vbmx5IGFkZCBjb21tYW5kcywgb25seSBpbmNsdWRlIHN1cnJvdW5kaW5nIGNvbnRleHQgdG8gYXZvaWQgQUkgZ2VuZXJhdGluZyBkb2N1bWVudC1yZWxhdGVkIGNvbnRlbnRcbiAgICAgICAgICAgIGlmIChkb2N1bWVudENvbnRleHQuc3Vycm91bmRpbmdMaW5lcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGJlZm9yZSA9IGRvY3VtZW50Q29udGV4dC5zdXJyb3VuZGluZ0xpbmVzLmJlZm9yZS5zbGljZSgtMykuam9pbignXFxuJyk7IC8vIExhc3QgMyBsaW5lcyBiZWZvcmUgY3Vyc29yXG4gICAgICAgICAgICAgICAgY29uc3QgYWZ0ZXIgPSBkb2N1bWVudENvbnRleHQuc3Vycm91bmRpbmdMaW5lcy5hZnRlci5zbGljZSgwLCAzKS5qb2luKCdcXG4nKTsgLy8gRmlyc3QgMyBsaW5lcyBhZnRlciBjdXJzb3JcbiAgICAgICAgICAgICAgICBjb250ZXh0ICs9IGBcXG5MT0NBTCBDT05URVhUIChmb3Igc3R5bGUgcmVmZXJlbmNlIG9ubHkpOlxcbkJlZm9yZSBjdXJzb3I6XFxuJHtiZWZvcmV9XFxuXFxuQWZ0ZXIgY3Vyc29yOlxcbiR7YWZ0ZXJ9XFxuYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZvciBvdGhlciBjb21tYW5kcywgaW5jbHVkZSBmdWxsIGRvY3VtZW50IGNvbnRlbnRcbiAgICAgICAgICAgIGNvbnRleHQgKz0gYFxcbkZVTEwgRE9DVU1FTlQ6XFxuJHtkb2N1bWVudENvbnRleHQuY29udGVudH1cXG5gO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGNvbnRleHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGQgdGFyZ2V0LXNwZWNpZmljIGNvbnRleHRcbiAgICAgKi9cbiAgICBwcml2YXRlIGJ1aWxkVGFyZ2V0Q29udGV4dChjb21tYW5kOiBFZGl0Q29tbWFuZCwgZG9jdW1lbnRDb250ZXh0OiBEb2N1bWVudENvbnRleHQpOiBzdHJpbmcge1xuICAgICAgICBzd2l0Y2ggKGNvbW1hbmQudGFyZ2V0KSB7XG4gICAgICAgICAgICBjYXNlICdzZWxlY3Rpb24nOlxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudENvbnRleHQuc2VsZWN0ZWRUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBgXFxuU0VMRUNURUQgVEVYVDpcXG4ke2RvY3VtZW50Q29udGV4dC5zZWxlY3RlZFRleHR9XFxuYDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcXG5ObyB0ZXh0IGN1cnJlbnRseSBzZWxlY3RlZC5cXG5gO1xuXG4gICAgICAgICAgICBjYXNlICdjdXJzb3InOlxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudENvbnRleHQuc3Vycm91bmRpbmdMaW5lcykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb250ZXh0ID0gYFxcbkNVUlNPUiBDT05URVhUOlxcbmA7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGJlZm9yZSA9IGRvY3VtZW50Q29udGV4dC5zdXJyb3VuZGluZ0xpbmVzLmJlZm9yZS5qb2luKCdcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYWZ0ZXIgPSBkb2N1bWVudENvbnRleHQuc3Vycm91bmRpbmdMaW5lcy5hZnRlci5qb2luKCdcXG4nKTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbnRleHQgKyBgQmVmb3JlIGN1cnNvcjpcXG4ke2JlZm9yZX1cXG5cXG5BZnRlciBjdXJzb3I6XFxuJHthZnRlcn1cXG5gO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gYFxcbkN1cnNvciBwb3NpdGlvbiBjb250ZXh0IG5vdCBhdmFpbGFibGUuXFxuYDtcblxuICAgICAgICAgICAgY2FzZSAnZG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBgXFxuVGFyZ2V0aW5nIGVudGlyZSBkb2N1bWVudC5cXG5gO1xuXG4gICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBgXFxuVGFyZ2V0aW5nIGVuZCBvZiBkb2N1bWVudC5cXG5gO1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiBgXFxuV29ya2luZyBhdCBjdXJzb3IgcG9zaXRpb24uXFxuYDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1aWxkIHVzZXIgcHJvbXB0IHdpdGggaW5zdHJ1Y3Rpb25zXG4gICAgICovXG4gICAgcHJpdmF0ZSBidWlsZFVzZXJQcm9tcHQoY29tbWFuZDogRWRpdENvbW1hbmQsIGNvbnRleHRJbmZvOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICBsZXQgcHJvbXB0ID0gY29udGV4dEluZm87XG4gICAgICAgIFxuICAgICAgICBwcm9tcHQgKz0gYFxcblVTRVIgUkVRVUVTVDogJHtjb21tYW5kLmluc3RydWN0aW9ufVxcbmA7XG5cbiAgICAgICAgLy8gQWRkIGNvbnRleHQgZnJvbSBjb21tYW5kIGlmIGF2YWlsYWJsZVxuICAgICAgICBpZiAoY29tbWFuZC5jb250ZXh0KSB7XG4gICAgICAgICAgICBwcm9tcHQgKz0gYEFERElUSU9OQUwgUkVRVUlSRU1FTlRTOiAke2NvbW1hbmQuY29udGV4dH1cXG5gO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQWRkIHRhcmdldC1zcGVjaWZpYyBmb2N1c1xuICAgICAgICBwcm9tcHQgKz0gdGhpcy5nZXRGb2N1c0luc3RydWN0aW9ucyhjb21tYW5kKTtcblxuICAgICAgICAvLyBBZGQgb3V0cHV0IGluc3RydWN0aW9ucyBiYXNlZCBvbiBhY3Rpb25cbiAgICAgICAgcHJvbXB0ICs9IHRoaXMuZ2V0T3V0cHV0SW5zdHJ1Y3Rpb25zKGNvbW1hbmQpO1xuXG4gICAgICAgIHJldHVybiBwcm9tcHQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGZvY3VzIGluc3RydWN0aW9ucyBiYXNlZCBvbiB0YXJnZXRcbiAgICAgKi9cbiAgICBwcml2YXRlIGdldEZvY3VzSW5zdHJ1Y3Rpb25zKGNvbW1hbmQ6IEVkaXRDb21tYW5kKTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgYWN0aW9uR3VpZGFuY2UgPSB7XG4gICAgICAgICAgICAnYWRkJzogJ0FkZCBuZXcgY29udGVudCcsXG4gICAgICAgICAgICAnZWRpdCc6ICdNb2RpZnkgZXhpc3RpbmcgY29udGVudCcsIFxuICAgICAgICAgICAgJ2RlbGV0ZSc6ICdSZW1vdmUgc3BlY2lmaWVkIGNvbnRlbnQnLFxuICAgICAgICAgICAgJ3Jld3JpdGUnOiAnR2VuZXJhdGUgYWx0ZXJuYXRpdmUgY29udGVudCcsXG4gICAgICAgICAgICAnZ3JhbW1hcic6ICdGaXggZ3JhbW1hciBhbmQgc3BlbGxpbmcnLFxuICAgICAgICAgICAgJ21ldGFkYXRhJzogJ1VwZGF0ZSBkb2N1bWVudCBtZXRhZGF0YSdcbiAgICAgICAgfTtcblxuICAgICAgICBzd2l0Y2ggKGNvbW1hbmQudGFyZ2V0KSB7XG4gICAgICAgICAgICBjYXNlICdzZWxlY3Rpb24nOlxuICAgICAgICAgICAgICAgIHJldHVybiBgXFxuRk9DVVM6ICR7YWN0aW9uR3VpZGFuY2VbY29tbWFuZC5hY3Rpb25dfSBpbiB0aGUgc2VsZWN0ZWQgdGV4dC5cXG5gO1xuXG4gICAgICAgICAgICBjYXNlICdjdXJzb3InOlxuICAgICAgICAgICAgICAgIHJldHVybiBgXFxuRk9DVVM6ICR7YWN0aW9uR3VpZGFuY2VbY29tbWFuZC5hY3Rpb25dfSBhdCB0aGUgY3VycmVudCBjdXJzb3IgcG9zaXRpb24uXFxuYDtcblxuICAgICAgICAgICAgY2FzZSAnZG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBgXFxuRk9DVVM6ICR7YWN0aW9uR3VpZGFuY2VbY29tbWFuZC5hY3Rpb25dfSBmb3IgdGhlIGVudGlyZSBkb2N1bWVudC5cXG5gO1xuXG4gICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBgXFxuRk9DVVM6IEFkZCBjb250ZW50IGF0IHRoZSB2ZXJ5IGVuZCBvZiB0aGUgZG9jdW1lbnQsIGFmdGVyIGFsbCBleGlzdGluZyBjb250ZW50LiBFbnN1cmUgaXQgZmxvd3MgbmF0dXJhbGx5LlxcbmA7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBcXG5GT0NVUzogJHthY3Rpb25HdWlkYW5jZVtjb21tYW5kLmFjdGlvbl19IGF0IHRoZSBjdXJzb3IgcG9zaXRpb24uXFxuYDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBvdXRwdXQgaW5zdHJ1Y3Rpb25zIGJhc2VkIG9uIGFjdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgZ2V0T3V0cHV0SW5zdHJ1Y3Rpb25zKGNvbW1hbmQ6IEVkaXRDb21tYW5kKTogc3RyaW5nIHtcbiAgICAgICAgc3dpdGNoIChjb21tYW5kLmFjdGlvbikge1xuICAgICAgICAgICAgY2FzZSAnYWRkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ09VVFBVVDogUHJvdmlkZSBvbmx5IHRoZSBuZXcgY29udGVudCB0byBiZSBhZGRlZC4nO1xuXG4gICAgICAgICAgICBjYXNlICdlZGl0JzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ09VVFBVVDogUHJvdmlkZSBvbmx5IHRoZSBpbXByb3ZlZCB2ZXJzaW9uIG9mIHRoZSBjb250ZW50Lic7XG5cbiAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdPVVRQVVQ6IENvbmZpcm0gd2hhdCBzaG91bGQgYmUgZGVsZXRlZCBieSBwcm92aWRpbmcgdGhlIGV4YWN0IHRleHQgdG8gcmVtb3ZlLCBvciByZXNwb25kIFwiQ09ORklSTUVEXCIgaWYgdGhlIGRlbGV0aW9uIGlzIGNsZWFyLic7XG5cbiAgICAgICAgICAgIGNhc2UgJ2dyYW1tYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiAnT1VUUFVUOiBQcm92aWRlIHRoZSBjb3JyZWN0ZWQgdmVyc2lvbiB3aXRoIHByb3BlciBncmFtbWFyIGFuZCBzcGVsbGluZy4nO1xuXG4gICAgICAgICAgICBjYXNlICdyZXdyaXRlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ09VVFBVVDogUHJvdmlkZSB0aGUgY29tcGxldGVseSByZXdyaXR0ZW4gY29udGVudCB0aGF0IHNlcnZlcyB0aGUgc2FtZSBwdXJwb3NlLic7XG5cbiAgICAgICAgICAgIGNhc2UgJ21ldGFkYXRhJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ09VVFBVVDogUHJvdmlkZSB0aGUgdXBkYXRlZCBtZXRhZGF0YSBpbiBwcm9wZXIgWUFNTCBmb3JtYXQuJztcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ09VVFBVVDogUHJvdmlkZSBvbmx5IHRoZSByZXF1ZXN0ZWQgY29udGVudCBjaGFuZ2VzLic7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBkb2N1bWVudCBzdHJ1Y3R1cmUgZnJvbSBoZWFkaW5nc1xuICAgICAqL1xuICAgIHByaXZhdGUgYnVpbGREb2N1bWVudFN0cnVjdHVyZShoZWFkaW5nczogRG9jdW1lbnRDb250ZXh0WydoZWFkaW5ncyddKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGhlYWRpbmdzLm1hcChoZWFkaW5nID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGluZGVudCA9ICcgICcucmVwZWF0KGhlYWRpbmcubGV2ZWwgLSAxKTtcbiAgICAgICAgICAgIHJldHVybiBgJHtpbmRlbnR9LSAke2hlYWRpbmcudGV4dH1gO1xuICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBnZW5lcmF0ZWQgcHJvbXB0XG4gICAgICovXG4gICAgdmFsaWRhdGVQcm9tcHQocHJvbXB0OiBHZW5lcmF0ZWRQcm9tcHQpOiB7IHZhbGlkOiBib29sZWFuOyBpc3N1ZXM6IHN0cmluZ1tdIH0ge1xuICAgICAgICBjb25zdCBpc3N1ZXM6IHN0cmluZ1tdID0gW107XG5cbiAgICAgICAgaWYgKCFwcm9tcHQuc3lzdGVtUHJvbXB0IHx8IHByb21wdC5zeXN0ZW1Qcm9tcHQudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaXNzdWVzLnB1c2goJ1N5c3RlbSBwcm9tcHQgaXMgZW1wdHknKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghcHJvbXB0LnVzZXJQcm9tcHQgfHwgcHJvbXB0LnVzZXJQcm9tcHQudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgaXNzdWVzLnB1c2goJ1VzZXIgcHJvbXB0IGlzIGVtcHR5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocHJvbXB0LnVzZXJQcm9tcHQubGVuZ3RoID4gMTAwMDApIHtcbiAgICAgICAgICAgIGlzc3Vlcy5wdXNoKCdVc2VyIHByb21wdCBpcyB0b28gbG9uZyAoPjEwMDAwIGNoYXJhY3RlcnMpJyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdmFsaWQ6IGlzc3Vlcy5sZW5ndGggPT09IDAsXG4gICAgICAgICAgICBpc3N1ZXNcbiAgICAgICAgfTtcbiAgICB9XG59IiwgIi8qKlxuICogQ29tbWFuZCBwYXJzZXIgZm9yIE5vdmFcbiAqIENvbnZlcnRzIG5hdHVyYWwgbGFuZ3VhZ2UgaW5wdXQgaW50byBzdHJ1Y3R1cmVkIEVkaXRDb21tYW5kIG9iamVjdHNcbiAqL1xuXG5pbXBvcnQgeyBFZGl0Q29tbWFuZCwgRWRpdEFjdGlvbiB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIFBhdHRlcm5zIGZvciBkZXRlY3RpbmcgZGlmZmVyZW50IGNvbW1hbmQgdHlwZXNcbiAqL1xuaW50ZXJmYWNlIENvbW1hbmRQYXR0ZXJuIHtcbiAgICBhY3Rpb246IEVkaXRBY3Rpb247XG4gICAgcGF0dGVybnM6IFJlZ0V4cFtdO1xuICAgIHRhcmdldHM6IHN0cmluZ1tdO1xufVxuXG4vKipcbiAqIENvbW1hbmQgcGFyc2luZyBydWxlc1xuICovXG5jb25zdCBDT01NQU5EX1BBVFRFUk5TOiBDb21tYW5kUGF0dGVybltdID0gW1xuICAgIHtcbiAgICAgICAgYWN0aW9uOiAnZ3JhbW1hcicsXG4gICAgICAgIHBhdHRlcm5zOiBbXG4gICAgICAgICAgICAvXFxiKGdyYW1tYXJ8c3BlbGx8c3BlbGxpbmd8cHJvb2ZyZWFkfHBvbGlzaClcXGIvaSxcbiAgICAgICAgICAgIC9cXGJjaGVja1xcYi4qXFxiKGdyYW1tYXJ8c3BlbGxpbmd8ZXJyb3JzKVxcYi9pLFxuICAgICAgICAgICAgL1xcYm1ha2VcXHMrLipcXGIoZ3JhbW1hdGljYWx8Y29ycmVjdHxwcm9wZXIpXFxiL2ksXG4gICAgICAgICAgICAvXFxiZml4XFxzKy4qXFxiKGdyYW1tYXJ8ZXJyb3JzfG1pc3Rha2VzfHR5cG9zKVxcYi9pLFxuICAgICAgICAgICAgL1xcYmNvcnJlY3RcXGIuKlxcYihncmFtbWFyfHNwZWxsaW5nfGVycm9ycylcXGIvaVxuICAgICAgICBdLFxuICAgICAgICB0YXJnZXRzOiBbJ3NlbGVjdGlvbicsICdkb2N1bWVudCddXG4gICAgfSxcbiAgICB7XG4gICAgICAgIGFjdGlvbjogJ21ldGFkYXRhJyxcbiAgICAgICAgcGF0dGVybnM6IFtcbiAgICAgICAgICAgIC8vIFRhZy1zcGVjaWZpYyBwYXR0ZXJucyB3aXRoIGNvbG9uIGZvcm1hdCAoaGlnaGVzdCBwcmlvcml0eSlcbiAgICAgICAgICAgIC9eKGFkZHxzZXR8dXBkYXRlfHJlbW92ZSlcXHMrdGFncz86L2ksXG4gICAgICAgICAgICAvLyBUYWcgb3B0aW1pemF0aW9uIHBhdHRlcm5zXG4gICAgICAgICAgICAvXFxiKGNsZWFuIHVwfGNsZWFudXB8b3B0aW1pemV8aW1wcm92ZXxyZXZpZXd8YW5hbHl6ZSlcXHMrLipcXGJ0YWdzP1xcYi9pLFxuICAgICAgICAgICAgL1xcYihzdWdnZXN0fHJlY29tbWVuZClcXHMrLipcXGJ0YWdzP1xcYi9pLFxuICAgICAgICAgICAgL15hZGQgc3VnZ2VzdGVkIHRhZ3MkL2ksXG4gICAgICAgICAgICAvXmFkZCB0YWdzJC9pLCAgLy8gU2ltcGxlIFwiYWRkIHRhZ3NcIiBmb3IgQUkgc3VnZ2VzdGlvbnNcbiAgICAgICAgICAgIC8vIEdlbmVyYWwgbWV0YWRhdGEgcGF0dGVybnNcbiAgICAgICAgICAgIC9cXGIodXBkYXRlfHNldHxjaGFuZ2V8bW9kaWZ5KVxccysuKlxcYihwcm9wZXJ0eXxwcm9wZXJ0aWVzfG1ldGFkYXRhfGZyb250bWF0dGVyfHRhZ3x0YWdzKVxcYi9pLFxuICAgICAgICAgICAgL1xcYihzZXR8dXBkYXRlfGNoYW5nZXxhZGQpXFxzKy4qXFxiKHRpdGxlfGF1dGhvcnxkYXRlfHN0YXR1cylcXGIvaSxcbiAgICAgICAgICAgIC9cXGJ1cGRhdGVcXHMrLipcXGJmcm9udG1hdHRlclxcYi9pLFxuICAgICAgICAgICAgLy8gVGFnLXNwZWNpZmljIHBhdHRlcm5zIHRoYXQgZXhjbHVkZSBjb250ZW50L3RleHQvc2VjdGlvblxuICAgICAgICAgICAgL1xcYihhZGR8cmVtb3ZlfHVwZGF0ZSlcXHMrKD8hLipcXGIoY29udGVudHx0ZXh0fHNlY3Rpb258cGFyYWdyYXBofGFib3V0KVxcYikuKlxcYnRhZ1tzXT9cXGIvaSxcbiAgICAgICAgICAgIC9cXGJzZXRcXHMrLipcXGJwcm9wZXJ0eVxcYi9pXG4gICAgICAgIF0sXG4gICAgICAgIHRhcmdldHM6IFsnZG9jdW1lbnQnXVxuICAgIH0sXG4gICAge1xuICAgICAgICBhY3Rpb246ICdyZXdyaXRlJyxcbiAgICAgICAgcGF0dGVybnM6IFtcbiAgICAgICAgICAgIC9cXGIocmV3cml0ZXxyZXdvcmR8cmVwaHJhc2V8cmVzdHJ1Y3R1cmV8cmVvcmdhbml6ZSlcXGIvaSxcbiAgICAgICAgICAgIC9cXGJ3cml0ZVxccysuKlxcYihuZXd8ZGlmZmVyZW50fGFsdGVybmF0aXZlKVxcYi9pLFxuICAgICAgICAgICAgL1xcYmdlbmVyYXRlXFxzKy4qXFxiKHNlY3Rpb25zfHBhcnRzfG11bHRpcGxlKVxcYi9pLFxuICAgICAgICAgICAgL1xcYm1ha2VcXHMrLipcXGIoc2VjdGlvbnN8cGFydHN8bXVsdGlwbGUpXFxiL2lcbiAgICAgICAgXSxcbiAgICAgICAgdGFyZ2V0czogWydkb2N1bWVudCcsICdlbmQnXVxuICAgIH0sXG4gICAge1xuICAgICAgICBhY3Rpb246ICdkZWxldGUnLFxuICAgICAgICBwYXR0ZXJuczogW1xuICAgICAgICAgICAgL1xcYihkZWxldGV8cmVtb3ZlfGVsaW1pbmF0ZXxjdXR8ZXJhc2UpXFxiL2ksXG4gICAgICAgICAgICAvXFxiZ2V0XFxzK3JpZFxccytvZlxcYi9pLFxuICAgICAgICAgICAgL1xcYnRha2VcXHMrb3V0XFxiL2ksXG4gICAgICAgICAgICAvXFxiZHJvcFxcYi4qXFxiKHNlY3Rpb258cGFyYWdyYXBofHBhcnQpXFxiL2lcbiAgICAgICAgXSxcbiAgICAgICAgdGFyZ2V0czogWydzZWxlY3Rpb24nXVxuICAgIH0sXG4gICAge1xuICAgICAgICBhY3Rpb246ICdhZGQnLFxuICAgICAgICBwYXR0ZXJuczogW1xuICAgICAgICAgICAgL1xcYihhZGR8Y3JlYXRlfHdyaXRlfGluc2VydHxpbmNsdWRlfGFwcGVuZHxwcmVwZW5kKVxcYi4qXFxiKHNlY3Rpb258cGFyYWdyYXBofGhlYWRpbmd8Y29udGVudHx0ZXh0fHBhcnQpXFxiL2ksXG4gICAgICAgICAgICAvXFxiKGFkZHxjcmVhdGV8d3JpdGV8aW5zZXJ0fGFwcGVuZHxwcmVwZW5kKVxcYig/IVxccysuKlxcYihiZXR0ZXJ8Y2xlYXJlcnxtb3JlfGxlc3N8dGFncz98cHJvcGVydHl8cHJvcGVydGllc3xtZXRhZGF0YXxmcm9udG1hdHRlcilcXGIpL2ksXG4gICAgICAgICAgICAvXFxibWFrZVxccysuKlxcYihzZWN0aW9ufHBhcnQpXFxiL2ksXG4gICAgICAgICAgICAvXFxiZ2VuZXJhdGVcXGIuKlxcYihzZWN0aW9ufGNvbnRlbnR8dGV4dClcXGIvaSxcbiAgICAgICAgICAgIC8vIFNwZWNpZmljIHBhdHRlcm5zIGZvciBhcHBlbmQvcHJlcGVuZCB3aXRoIGxvY2F0aW9uXG4gICAgICAgICAgICAvXFxiKGFwcGVuZHxhZGQpXFxiLipcXGIoYWZ0ZXJ8Zm9sbG93aW5nKVxcYi9pLFxuICAgICAgICAgICAgL1xcYihwcmVwZW5kfGFkZClcXGIuKlxcYihiZWZvcmV8cHJlY2VkaW5nKVxcYi9pXG4gICAgICAgIF0sXG4gICAgICAgIHRhcmdldHM6IFsnZW5kJ11cbiAgICB9LFxuICAgIHtcbiAgICAgICAgYWN0aW9uOiAnZWRpdCcsXG4gICAgICAgIHBhdHRlcm5zOiBbXG4gICAgICAgICAgICAvXFxiKGVkaXR8bW9kaWZ5fGNoYW5nZXx1cGRhdGV8cmV2aXNlfGltcHJvdmV8ZW5oYW5jZSlcXGIvaSxcbiAgICAgICAgICAgIC9cXGJtYWtlXFxzKy4qXFxiKGJldHRlcnxjbGVhcmVyfG1vcmV8bGVzc3xmb3JtYWx8cHJvZmVzc2lvbmFsfGRldGFpbGVkfGNvbXByZWhlbnNpdmUpXFxiL2ksXG4gICAgICAgICAgICAvXFxiKGZpeHxjb3JyZWN0fGFkanVzdClcXGIoPyEuKlxcYihncmFtbWFyfHNwZWxsaW5nfGVycm9ycylcXGIpL2ksXG4gICAgICAgICAgICAvXFxiKGV4cGFuZHxzaG9ydGVufGNvbmRlbnNlKVxcYi9pXG4gICAgICAgIF0sXG4gICAgICAgIHRhcmdldHM6IFsnc2VsZWN0aW9uJ11cbiAgICB9XG5dO1xuXG5cbi8qKlxuICogVGFyZ2V0IHR5cGUgZGV0ZWN0aW9uIHBhdHRlcm5zIC0gc2ltcGxpZmllZCBmb3IgY3Vyc29yLW9ubHkgZWRpdGluZ1xuICovXG5jb25zdCBUQVJHRVRfUEFUVEVSTlMgPSBbXG4gICAgeyBwYXR0ZXJuOiAvXFxiKD86c2VsZWN0ZWR8aGlnaGxpZ2h0ZWR8Y2hvc2VuKVxccysoPzp0ZXh0fGNvbnRlbnQpL2ksIHRhcmdldDogJ3NlbGVjdGlvbicgfSxcbiAgICB7IHBhdHRlcm46IC9cXGIoPzplbnRpcmV8d2hvbGV8ZnVsbClcXHMrKD86ZG9jdW1lbnR8ZmlsZXxub3RlKS9pLCB0YXJnZXQ6ICdkb2N1bWVudCcgfSxcbiAgICB7IHBhdHRlcm46IC9cXGIoPzplbmR8Ym90dG9tfGNvbmNsdXNpb24pL2ksIHRhcmdldDogJ2VuZCcgfVxuXTtcblxuZXhwb3J0IGNsYXNzIENvbW1hbmRQYXJzZXIge1xuICAgIFxuICAgIC8qKlxuICAgICAqIFBhcnNlIG5hdHVyYWwgbGFuZ3VhZ2UgaW5wdXQgaW50byBhbiBFZGl0Q29tbWFuZFxuICAgICAqL1xuICAgIHBhcnNlQ29tbWFuZChpbnB1dDogc3RyaW5nLCBoYXNTZWxlY3Rpb246IGJvb2xlYW4gPSBmYWxzZSk6IEVkaXRDb21tYW5kIHtcbiAgICAgICAgY29uc3Qgbm9ybWFsaXplZElucHV0ID0gaW5wdXQudHJpbSgpLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBEZXRlY3QgdGhlIGFjdGlvbiB0eXBlXG4gICAgICAgIGNvbnN0IGFjdGlvbiA9IHRoaXMuZGV0ZWN0QWN0aW9uKG5vcm1hbGl6ZWRJbnB1dCk7XG4gICAgICAgIFxuICAgICAgICAvLyBEZXRlY3QgdGhlIHRhcmdldCB0eXBlIChzaW1wbGlmaWVkIGZvciBjdXJzb3Itb25seSBlZGl0aW5nKVxuICAgICAgICBjb25zdCB0YXJnZXQgPSB0aGlzLmRldGVjdFRhcmdldChub3JtYWxpemVkSW5wdXQsIGhhc1NlbGVjdGlvbiwgYWN0aW9uKTtcbiAgICAgICAgXG4gICAgICAgIC8vIEJ1aWxkIGNvbnRleHQgZnJvbSB0aGUgaW5wdXRcbiAgICAgICAgY29uc3QgY29udGV4dCA9IHRoaXMuZXh0cmFjdENvbnRleHQoaW5wdXQpO1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjdGlvbixcbiAgICAgICAgICAgIHRhcmdldCxcbiAgICAgICAgICAgIGluc3RydWN0aW9uOiBpbnB1dCwgLy8gS2VlcCBvcmlnaW5hbCBpbnB1dCBmb3IgZGlzcGxheVxuICAgICAgICAgICAgY29udGV4dFxuICAgICAgICB9O1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBEZXRlY3QgdGhlIGFjdGlvbiB0eXBlIGZyb20gdGhlIGlucHV0XG4gICAgICovXG4gICAgcHJpdmF0ZSBkZXRlY3RBY3Rpb24oaW5wdXQ6IHN0cmluZyk6IEVkaXRBY3Rpb24ge1xuICAgICAgICAvLyBDaGVjayBwYXR0ZXJucyBpbiBvcmRlciBvZiBzcGVjaWZpY2l0eVxuICAgICAgICBmb3IgKGNvbnN0IGNvbW1hbmRQYXR0ZXJuIG9mIENPTU1BTkRfUEFUVEVSTlMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBjb21tYW5kUGF0dGVybi5wYXR0ZXJucykge1xuICAgICAgICAgICAgICAgIGlmIChwYXR0ZXJuLnRlc3QoaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjb21tYW5kUGF0dGVybi5hY3Rpb247XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBEZWZhdWx0IGZhbGxiYWNrIGxvZ2ljIHdpdGggbW9yZSBzcGVjaWZpYyBjaGVja3NcbiAgICAgICAgaWYgKC9cXGIoYWRkfGNyZWF0ZXx3cml0ZXxpbnNlcnR8aW5jbHVkZXxnZW5lcmF0ZS4qc2VjdGlvbilcXGIvaS50ZXN0KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuICdhZGQnO1xuICAgICAgICB9XG4gICAgICAgIGlmICgvXFxiKGZpeHxjb3JyZWN0fGdyYW1tYXJ8c3BlbGx8cHJvb2ZyZWFkfHBvbGlzaClcXGIvaS50ZXN0KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuICdncmFtbWFyJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoL1xcYihkZWxldGV8cmVtb3ZlfGVsaW1pbmF0ZSlcXGIvaS50ZXN0KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuICdkZWxldGUnO1xuICAgICAgICB9XG4gICAgICAgIGlmICgvXFxiKHJld3JpdGV8cmVwaHJhc2V8cmVzdHJ1Y3R1cmV8Z2VuZXJhdGUuKm5ldylcXGIvaS50ZXN0KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuICdyZXdyaXRlJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoL1xcYih1cGRhdGV8c2V0fGNoYW5nZXxtb2RpZnl8YWRkKS4qXFxiKHByb3BlcnR5fHByb3BlcnRpZXN8bWV0YWRhdGF8ZnJvbnRtYXR0ZXJ8dGFnfHRhZ3N8dGl0bGV8YXV0aG9yfGRhdGV8c3RhdHVzKVxcYi9pLnRlc3QoaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ21ldGFkYXRhJztcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRGVmYXVsdCB0byBlZGl0IGZvciBhbWJpZ3VvdXMgY2FzZXNcbiAgICAgICAgcmV0dXJuICdlZGl0JztcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogRGV0ZWN0IHRoZSB0YXJnZXQgdHlwZSBmcm9tIHRoZSBpbnB1dCAoc2ltcGxpZmllZCBmb3IgY3Vyc29yLW9ubHkgZWRpdGluZylcbiAgICAgKi9cbiAgICBwcml2YXRlIGRldGVjdFRhcmdldChcbiAgICAgICAgaW5wdXQ6IHN0cmluZywgXG4gICAgICAgIGhhc1NlbGVjdGlvbjogYm9vbGVhbiwgXG4gICAgICAgIGFjdGlvbjogRWRpdEFjdGlvblxuICAgICk6IEVkaXRDb21tYW5kWyd0YXJnZXQnXSB7XG4gICAgICAgIC8vIENoZWNrIGV4cGxpY2l0IHRhcmdldCBwYXR0ZXJuc1xuICAgICAgICBmb3IgKGNvbnN0IHRhcmdldFBhdHRlcm4gb2YgVEFSR0VUX1BBVFRFUk5TKSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0UGF0dGVybi5wYXR0ZXJuLnRlc3QoaW5wdXQpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldFBhdHRlcm4udGFyZ2V0IGFzIEVkaXRDb21tYW5kWyd0YXJnZXQnXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQ29udGV4dC1iYXNlZCB0YXJnZXQgZGV0ZWN0aW9uXG4gICAgICAgIGlmIChoYXNTZWxlY3Rpb24gJiYgKGFjdGlvbiA9PT0gJ2VkaXQnIHx8IGFjdGlvbiA9PT0gJ2dyYW1tYXInIHx8IGFjdGlvbiA9PT0gJ2RlbGV0ZScpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ3NlbGVjdGlvbic7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEFjdGlvbi1zcGVjaWZpYyBkZWZhdWx0cyBmb3IgY3Vyc29yLW9ubHkgZWRpdGluZ1xuICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgICAgY2FzZSAnYWRkJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gJ2N1cnNvcic7ICAvLyBDaGFuZ2VkIGZyb20gJ2VuZCcgdG8gJ2N1cnNvcicgZm9yIGN1cnNvci1vbmx5IGVkaXRpbmdcbiAgICAgICAgICAgIGNhc2UgJ2VkaXQnOlxuICAgICAgICAgICAgICAgIHJldHVybiBoYXNTZWxlY3Rpb24gPyAnc2VsZWN0aW9uJyA6ICdjdXJzb3InO1xuICAgICAgICAgICAgY2FzZSAnZGVsZXRlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzU2VsZWN0aW9uID8gJ3NlbGVjdGlvbicgOiAnY3Vyc29yJztcbiAgICAgICAgICAgIGNhc2UgJ2dyYW1tYXInOlxuICAgICAgICAgICAgICAgIHJldHVybiBoYXNTZWxlY3Rpb24gPyAnc2VsZWN0aW9uJyA6ICdkb2N1bWVudCc7XG4gICAgICAgICAgICBjYXNlICdyZXdyaXRlJzpcbiAgICAgICAgICAgICAgICByZXR1cm4gaGFzU2VsZWN0aW9uID8gJ3NlbGVjdGlvbicgOiAnY3Vyc29yJzsgIC8vIENoYW5nZWQgZnJvbSAnZW5kJyB0byBzdXBwb3J0IGN1cnNvci1vbmx5XG4gICAgICAgICAgICBjYXNlICdtZXRhZGF0YSc6XG4gICAgICAgICAgICAgICAgcmV0dXJuICdkb2N1bWVudCc7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiAnY3Vyc29yJztcbiAgICAgICAgfVxuICAgIH1cbiAgICBcbiAgICBcbiAgICAvKipcbiAgICAgKiBFeHRyYWN0IGFkZGl0aW9uYWwgY29udGV4dCBmcm9tIHRoZSBpbnB1dFxuICAgICAqL1xuICAgIHByaXZhdGUgZXh0cmFjdENvbnRleHQoaW5wdXQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIC8vIEV4dHJhY3Qgc3R5bGUvdG9uZSBpbmRpY2F0b3JzXG4gICAgICAgIGNvbnN0IHN0eWxlSW5kaWNhdG9ycyA9IFtcbiAgICAgICAgICAgICdmb3JtYWwnLCAnaW5mb3JtYWwnLCAnY2FzdWFsJywgJ3Byb2Zlc3Npb25hbCcsICdhY2FkZW1pYycsICd0ZWNobmljYWwnLFxuICAgICAgICAgICAgJ3NpbXBsZScsICdjb21wbGV4JywgJ2RldGFpbGVkJywgJ2JyaWVmJywgJ2NvbmNpc2UnLCAndmVyYm9zZScsXG4gICAgICAgICAgICAnZnJpZW5kbHknLCAnc2VyaW91cycsICdodW1vcm91cycsICdjcmVhdGl2ZScsICdhbmFseXRpY2FsJ1xuICAgICAgICBdO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgZm91bmRTdHlsZXMgPSBzdHlsZUluZGljYXRvcnMuZmlsdGVyKHN0eWxlID0+IFxuICAgICAgICAgICAgaW5wdXQudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzdHlsZSlcbiAgICAgICAgKTtcbiAgICAgICAgXG4gICAgICAgIGxldCBjb250ZXh0ID0gJyc7XG4gICAgICAgIGlmIChmb3VuZFN0eWxlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb250ZXh0ICs9IGBTdHlsZTogJHtmb3VuZFN0eWxlcy5qb2luKCcsICcpfS4gYDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gRXh0cmFjdCBsZW5ndGggaW5kaWNhdG9yc1xuICAgICAgICBpZiAoaW5wdXQuaW5jbHVkZXMoJ3Nob3J0JykgfHwgaW5wdXQuaW5jbHVkZXMoJ2JyaWVmJykgfHwgaW5wdXQuaW5jbHVkZXMoJ2NvbmNpc2UnKSkge1xuICAgICAgICAgICAgY29udGV4dCArPSAnS2VlcCBpdCBicmllZi4gJztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5wdXQuaW5jbHVkZXMoJ2xvbmcnKSB8fCBpbnB1dC5pbmNsdWRlcygnZGV0YWlsZWQnKSB8fCBpbnB1dC5pbmNsdWRlcygnY29tcHJlaGVuc2l2ZScpKSB7XG4gICAgICAgICAgICBjb250ZXh0ICs9ICdQcm92aWRlIGRldGFpbGVkIGNvbnRlbnQuICc7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIEV4dHJhY3Qgc3BlY2lmaWMgcmVxdWlyZW1lbnRzXG4gICAgICAgIGlmIChpbnB1dC5pbmNsdWRlcygnYnVsbGV0JykgfHwgaW5wdXQuaW5jbHVkZXMoJ2xpc3QnKSkge1xuICAgICAgICAgICAgY29udGV4dCArPSAnVXNlIGJ1bGxldCBwb2ludHMgb3IgbGlzdHMuICc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0LmluY2x1ZGVzKCdleGFtcGxlJykgfHwgaW5wdXQuaW5jbHVkZXMoJ2V4YW1wbGVzJykpIHtcbiAgICAgICAgICAgIGNvbnRleHQgKz0gJ0luY2x1ZGUgZXhhbXBsZXMuICc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlucHV0LmluY2x1ZGVzKCdudW1iZXInKSB8fCBpbnB1dC5pbmNsdWRlcygnbnVtYmVyZWQnKSkge1xuICAgICAgICAgICAgY29udGV4dCArPSAnVXNlIG51bWJlcmVkIGxpc3RzLiAnO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIGNvbnRleHQudHJpbSgpO1xuICAgIH1cbiAgICBcbiAgICAvKipcbiAgICAgKiBWYWxpZGF0ZSBpZiBhIGNvbW1hbmQgY2FuIGJlIGV4ZWN1dGVkXG4gICAgICovXG4gICAgdmFsaWRhdGVDb21tYW5kKGNvbW1hbmQ6IEVkaXRDb21tYW5kLCBoYXNTZWxlY3Rpb246IGJvb2xlYW4pOiB7XG4gICAgICAgIHZhbGlkOiBib29sZWFuO1xuICAgICAgICBlcnJvcj86IHN0cmluZztcbiAgICB9IHtcbiAgICAgICAgLy8gQ2hlY2sgaWYgc2VsZWN0aW9uIGlzIHJlcXVpcmVkIGJ1dCBub3QgYXZhaWxhYmxlXG4gICAgICAgIGlmIChjb21tYW5kLnRhcmdldCA9PT0gJ3NlbGVjdGlvbicgJiYgIWhhc1NlbGVjdGlvbikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdUaGlzIGNvbW1hbmQgcmVxdWlyZXMgdGV4dCB0byBiZSBzZWxlY3RlZCBmaXJzdCdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIFZhbGlkYXRlIGFjdGlvbi10YXJnZXQgY29tYmluYXRpb25zXG4gICAgICAgIGlmIChjb21tYW5kLmFjdGlvbiA9PT0gJ2FkZCcgJiYgY29tbWFuZC50YXJnZXQgPT09ICdzZWxlY3Rpb24nKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ0Nhbm5vdCBhZGQgY29udGVudCB0byBhIHNlbGVjdGlvbi4gVXNlIFwiZWRpdFwiIHRvIG1vZGlmeSBzZWxlY3RlZCB0ZXh0J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUgfTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogR2V0IHN1Z2dlc3RlZCBjb21tYW5kcyBiYXNlZCBvbiBjb250ZXh0XG4gICAgICovXG4gICAgZ2V0U3VnZ2VzdGlvbnMoaGFzU2VsZWN0aW9uOiBib29sZWFuKTogc3RyaW5nW10ge1xuICAgICAgICBjb25zdCBzdWdnZXN0aW9uczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgXG4gICAgICAgIGlmIChoYXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHN1Z2dlc3Rpb25zLnB1c2goXG4gICAgICAgICAgICAgICAgJ01ha2UgdGhpcyBtb3JlIGNvbmNpc2UnLFxuICAgICAgICAgICAgICAgICdGaXggZ3JhbW1hciBpbiB0aGlzIHRleHQnLFxuICAgICAgICAgICAgICAgICdNYWtlIHRoaXMgbW9yZSBwcm9mZXNzaW9uYWwnLFxuICAgICAgICAgICAgICAgICdFeHBhbmQgb24gdGhpcyBwb2ludCdcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdWdnZXN0aW9ucy5wdXNoKFxuICAgICAgICAgICAgICAgICdBZGQgY29udGVudCBhdCBjdXJzb3InLFxuICAgICAgICAgICAgICAgICdGaXggZ3JhbW1hciBpbiB0aGlzIGRvY3VtZW50JyxcbiAgICAgICAgICAgICAgICAnQWRkIGNvbmNsdXNpb24gYXQgZW5kJyxcbiAgICAgICAgICAgICAgICAnQ3JlYXRlIGEgc3VtbWFyeSdcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBzdWdnZXN0aW9ucztcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogUGFyc2UgbXVsdGlwbGUgY29tbWFuZHMgZnJvbSBhIHNpbmdsZSBpbnB1dFxuICAgICAqL1xuICAgIHBhcnNlTXVsdGlwbGVDb21tYW5kcyhpbnB1dDogc3RyaW5nKTogRWRpdENvbW1hbmRbXSB7XG4gICAgICAgIC8vIFNwbGl0IG9uIGNvbW1vbiBjb21tYW5kIHNlcGFyYXRvcnNcbiAgICAgICAgY29uc3Qgc2VwYXJhdG9ycyA9IC9cXGIoPzp0aGVufGFsc298YW5kIHRoZW58YWZ0ZXIgdGhhdHxuZXh0fGFkZGl0aW9uYWxseSlcXGIvaTtcbiAgICAgICAgY29uc3QgcGFydHMgPSBpbnB1dC5zcGxpdChzZXBhcmF0b3JzKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIHJldHVybiBbdGhpcy5wYXJzZUNvbW1hbmQoaW5wdXQpXTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIHBhcnRzXG4gICAgICAgICAgICAubWFwKHBhcnQgPT4gcGFydC50cmltKCkpXG4gICAgICAgICAgICAuZmlsdGVyKHBhcnQgPT4gcGFydC5sZW5ndGggPiAwKVxuICAgICAgICAgICAgLm1hcChwYXJ0ID0+IHRoaXMucGFyc2VDb21tYW5kKHBhcnQpKTtcbiAgICB9XG4gICAgXG4gICAgLyoqXG4gICAgICogR2V0IGNvbW1hbmQgZGVzY3JpcHRpb24gZm9yIGRpc3BsYXlcbiAgICAgKi9cbiAgICBnZXRDb21tYW5kRGVzY3JpcHRpb24oY29tbWFuZDogRWRpdENvbW1hbmQpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB7IGFjdGlvbiwgdGFyZ2V0IH0gPSBjb21tYW5kO1xuICAgICAgICBcbiAgICAgICAgbGV0IGRlc2NyaXB0aW9uID0gJyc7XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgICAgY2FzZSAnYWRkJzpcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA9ICdBZGQgbmV3IGNvbnRlbnQnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZWRpdCc6XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSAnRWRpdCBleGlzdGluZyBjb250ZW50JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2RlbGV0ZSc6XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSAnUmVtb3ZlIGNvbnRlbnQnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZ3JhbW1hcic6XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gPSAnRml4IGdyYW1tYXIgYW5kIHNwZWxsaW5nJztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3Jld3JpdGUnOlxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uID0gJ0dlbmVyYXRlIG5ldyBjb250ZW50JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21ldGFkYXRhJzpcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiA9ICdVcGRhdGUgZG9jdW1lbnQgbWV0YWRhdGEnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICBzd2l0Y2ggKHRhcmdldCkge1xuICAgICAgICAgICAgY2FzZSAnc2VsZWN0aW9uJzpcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiArPSAnIGluIHNlbGVjdGVkIHRleHQnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnY3Vyc29yJzpcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiArPSAnIGF0IGN1cnNvciBwb3NpdGlvbic7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkb2N1bWVudCc6XG4gICAgICAgICAgICAgICAgZGVzY3JpcHRpb24gKz0gJyBpbiBlbnRpcmUgZG9jdW1lbnQnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbiArPSAnIGF0IGVuZCBvZiBkb2N1bWVudCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgICB9XG59IiwgIi8qKlxuICogUHJvbXB0IGJ1aWxkZXIgc2VydmljZSBmb3IgTm92YVxuICogSW50ZWdyYXRlcyBDb250ZXh0QnVpbGRlciB3aXRoIGRvY3VtZW50IGVuZ2luZSBhbmQgY29udmVyc2F0aW9uIGhpc3RvcnlcbiAqL1xuXG5pbXBvcnQgeyBURmlsZSB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IENvbnRleHRCdWlsZGVyLCBHZW5lcmF0ZWRQcm9tcHQgfSBmcm9tICcuL2NvbnRleHQtYnVpbGRlcic7XG5pbXBvcnQgeyBEb2N1bWVudEVuZ2luZSB9IGZyb20gJy4vZG9jdW1lbnQtZW5naW5lJztcbmltcG9ydCB7IENvbnZlcnNhdGlvbk1hbmFnZXIgfSBmcm9tICcuL2NvbnZlcnNhdGlvbi1tYW5hZ2VyJztcbmltcG9ydCB7IENvbW1hbmRQYXJzZXIgfSBmcm9tICcuL2NvbW1hbmQtcGFyc2VyJztcbmltcG9ydCB7IEVkaXRDb21tYW5kLCBEb2N1bWVudENvbnRleHQsIFByb21wdENvbmZpZywgQ29udmVyc2F0aW9uTWVzc2FnZSB9IGZyb20gJy4vdHlwZXMnO1xuXG4vKipcbiAqIFByb21wdCBidWlsZGluZyBzZXJ2aWNlXG4gKi9cbmV4cG9ydCBjbGFzcyBQcm9tcHRCdWlsZGVyIHtcbiAgICBwcml2YXRlIGNvbnRleHRCdWlsZGVyOiBDb250ZXh0QnVpbGRlcjtcbiAgICBwcml2YXRlIGRvY3VtZW50RW5naW5lOiBEb2N1bWVudEVuZ2luZTtcbiAgICBwcml2YXRlIGNvbnZlcnNhdGlvbk1hbmFnZXI6IENvbnZlcnNhdGlvbk1hbmFnZXI7XG4gICAgcHJpdmF0ZSBjb21tYW5kUGFyc2VyOiBDb21tYW5kUGFyc2VyO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIGRvY3VtZW50RW5naW5lOiBEb2N1bWVudEVuZ2luZSxcbiAgICAgICAgY29udmVyc2F0aW9uTWFuYWdlcjogQ29udmVyc2F0aW9uTWFuYWdlclxuICAgICkge1xuICAgICAgICB0aGlzLmNvbnRleHRCdWlsZGVyID0gbmV3IENvbnRleHRCdWlsZGVyKCk7XG4gICAgICAgIHRoaXMuZG9jdW1lbnRFbmdpbmUgPSBkb2N1bWVudEVuZ2luZTtcbiAgICAgICAgdGhpcy5jb252ZXJzYXRpb25NYW5hZ2VyID0gY29udmVyc2F0aW9uTWFuYWdlcjtcbiAgICAgICAgdGhpcy5jb21tYW5kUGFyc2VyID0gbmV3IENvbW1hbmRQYXJzZXIoKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBwcm9tcHQgZm9yIGEgdXNlciBtZXNzYWdlIC0gZGV0ZXJtaW5lcyBpZiBpdCdzIGEgY29tbWFuZCBvciBjb252ZXJzYXRpb25cbiAgICAgKi9cbiAgICBhc3luYyBidWlsZFByb21wdEZvck1lc3NhZ2UoXG4gICAgICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICAgICAgZmlsZT86IFRGaWxlLFxuICAgICAgICBvcHRpb25zOiBQYXJ0aWFsPFByb21wdENvbmZpZz4gPSB7fVxuICAgICk6IFByb21pc2U8R2VuZXJhdGVkUHJvbXB0PiB7XG4gICAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgbGlrZWx5IGEgY29tbWFuZCBiYXNlZCBvbiBhY3Rpb24gd29yZHNcbiAgICAgICAgY29uc3QgaXNMaWtlbHlDb21tYW5kID0gdGhpcy5pc0xpa2VseUNvbW1hbmQobWVzc2FnZSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoaXNMaWtlbHlDb21tYW5kICYmIGZpbGUpIHtcbiAgICAgICAgICAgIC8vIFRyeSB0byBwYXJzZSBhcyBjb21tYW5kXG4gICAgICAgICAgICBjb25zdCBwYXJzZWRDb21tYW5kID0gdGhpcy5jb21tYW5kUGFyc2VyLnBhcnNlQ29tbWFuZChtZXNzYWdlKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkQ29tbWFuZFByb21wdChwYXJzZWRDb21tYW5kLCBmaWxlLCBvcHRpb25zKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEl0J3MgYSBjb252ZXJzYXRpb24gLSBidWlsZCBjb252ZXJzYXRpb24gcHJvbXB0XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5idWlsZENvbnZlcnNhdGlvblByb21wdChtZXNzYWdlLCBmaWxlLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEgbWVzc2FnZSBpcyBsaWtlbHkgYSBjb21tYW5kIHZzIGNvbnZlcnNhdGlvblxuICAgICAqL1xuICAgIHByaXZhdGUgaXNMaWtlbHlDb21tYW5kKG1lc3NhZ2U6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBsb3dlck1lc3NhZ2UgPSBtZXNzYWdlLnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuICAgICAgICBcbiAgICAgICAgLy8gMS4gRXhwbGljaXQgY29tbWFuZCBzeW50YXggKGNvbG9uIGNvbW1hbmRzKVxuICAgICAgICBpZiAobG93ZXJNZXNzYWdlLnN0YXJ0c1dpdGgoJzonKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIDIuIENoZWNrIGZvciBhY3Rpb24gdmVyYnMgdGhhdCBpbmRpY2F0ZSBkb2N1bWVudCBtb2RpZmljYXRpb24gY29tbWFuZHNcbiAgICAgICAgY29uc3QgYWN0aW9uVmVyYnMgPSBbXG4gICAgICAgICAgICAnYWRkJywgJ2luc2VydCcsICdhcHBlbmQnLCAncHJlcGVuZCcsICdpbmNsdWRlJywgJ2NyZWF0ZScsICd3cml0ZScsICdnZW5lcmF0ZScsXG4gICAgICAgICAgICAnZWRpdCcsICdtb2RpZnknLCAnY2hhbmdlJywgJ3VwZGF0ZScsICdyZXZpc2UnLCAnaW1wcm92ZScsICdlbmhhbmNlJywgJ3JlcGxhY2UnLFxuICAgICAgICAgICAgJ2RlbGV0ZScsICdyZW1vdmUnLCAnZWxpbWluYXRlJywgJ2N1dCcsICdlcmFzZScsICdkcm9wJyxcbiAgICAgICAgICAgICdmaXgnLCAnY29ycmVjdCcsICdwcm9vZnJlYWQnLCAncG9saXNoJywgJ2NoZWNrJyxcbiAgICAgICAgICAgICdyZXdyaXRlJywgJ3Jld29yZCcsICdyZXBocmFzZScsICdyZXN0cnVjdHVyZScsICdyZW9yZ2FuaXplJ1xuICAgICAgICBdO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgaWYgbWVzc2FnZSBzdGFydHMgd2l0aCBhbiBhY3Rpb24gdmVyYiAoaW1wZXJhdGl2ZSBjb21tYW5kIHN0cnVjdHVyZSlcbiAgICAgICAgY29uc3Qgc3RhcnRzV2l0aEFjdGlvbiA9IGFjdGlvblZlcmJzLnNvbWUodmVyYiA9PiB7XG4gICAgICAgICAgICBjb25zdCB2ZXJiUGF0dGVybiA9IG5ldyBSZWdFeHAoYF4ke3ZlcmJ9XFxcXGJgLCAnaScpO1xuICAgICAgICAgICAgcmV0dXJuIHZlcmJQYXR0ZXJuLnRlc3QobG93ZXJNZXNzYWdlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoc3RhcnRzV2l0aEFjdGlvbikge1xuICAgICAgICAgICAgLy8gQWRkaXRpb25hbCBmaWx0ZXJpbmc6IGV4Y2x1ZGUgcXVlc3Rpb25zIGFuZCBkaXNjdXNzaW9uc1xuICAgICAgICAgICAgY29uc3QgcXVlc3Rpb25JbmRpY2F0b3JzID0gW1xuICAgICAgICAgICAgICAgIC9eKGhvd3x3aGF0fHdoeXx3aGVufHdoZXJlfHdoaWNofHdob3xjYW58Y291bGR8c2hvdWxkfHdvdWxkfHdpbGx8aXN8YXJlfGFtfGRvfGRvZXN8ZGlkKS9pLFxuICAgICAgICAgICAgICAgIC9cXD8vLCAgLy8gQ29udGFpbnMgcXVlc3Rpb24gbWFya1xuICAgICAgICAgICAgICAgIC9cXGIoaGVscHxhZHZpY2V8c3VnZ2VzdHxyZWNvbW1lbmR8dGhpbmt8b3BpbmlvbilcXGIvaVxuICAgICAgICAgICAgXTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gSWYgaXQncyBhIHF1ZXN0aW9uIG9yIGRpc2N1c3Npb24sIHJvdXRlIHRvIGNvbnZlcnNhdGlvblxuICAgICAgICAgICAgY29uc3QgaXNRdWVzdGlvbiA9IHF1ZXN0aW9uSW5kaWNhdG9ycy5zb21lKHBhdHRlcm4gPT4gcGF0dGVybi50ZXN0KGxvd2VyTWVzc2FnZSkpO1xuICAgICAgICAgICAgaWYgKGlzUXVlc3Rpb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyAzLiBDaGVjayBmb3IgZXhwbGljaXQgY29tbWFuZCBwYXR0ZXJucyAoZm9yIGVkZ2UgY2FzZXMpXG4gICAgICAgIGNvbnN0IGV4cGxpY2l0Q29tbWFuZFBhdHRlcm5zID0gW1xuICAgICAgICAgICAgLy8gR3JhbW1hci9zcGVsbGluZyBjb21tYW5kcyB0aGF0IGRvbid0IHN0YXJ0IHdpdGggYWN0aW9uIHZlcmJzXG4gICAgICAgICAgICAvXFxiKGdyYW1tYXJ8c3BlbGx8c3BlbGxpbmd8cHJvb2ZyZWFkfHBvbGlzaClcXGIuKlxcYihjaGVja3xmaXh8Y29ycmVjdClcXGIvaSxcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gTWV0YWRhdGEgY29tbWFuZHMgd2l0aCBkaWZmZXJlbnQgc3RydWN0dXJlc1xuICAgICAgICAgICAgL1xcYnNldFxccysodGhlXFxzKyk/KHRpdGxlfHRhZ3N8bWV0YWRhdGF8cHJvcGVydGllcykvaSxcbiAgICAgICAgICAgIC9cXGJ1cGRhdGVcXHMrKHRoZVxccyspPyh0aXRsZXx0YWdzfG1ldGFkYXRhfHByb3BlcnRpZXMpL2ksXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFRhZy1zcGVjaWZpYyBwYXR0ZXJuc1xuICAgICAgICAgICAgL14oYWRkfHNldHx1cGRhdGV8cmVtb3ZlKVxccyt0YWdzPzovaSxcbiAgICAgICAgICAgIC9cXGIoY2xlYW4gdXB8Y2xlYW51cHxvcHRpbWl6ZXxpbXByb3ZlfHJldmlld3xhbmFseXplKVxccysuKlxcYnRhZ3M/XFxiL2ksXG4gICAgICAgICAgICAvXFxiKHN1Z2dlc3R8cmVjb21tZW5kKVxccysuKlxcYnRhZ3M/XFxiL2ksXG4gICAgICAgICAgICAvXmFkZCBzdWdnZXN0ZWQgdGFncyQvaVxuICAgICAgICBdO1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgaWYgbWVzc2FnZSBtYXRjaGVzIGV4cGxpY2l0IGNvbW1hbmQgcGF0dGVybnNcbiAgICAgICAgZm9yIChjb25zdCBwYXR0ZXJuIG9mIGV4cGxpY2l0Q29tbWFuZFBhdHRlcm5zKSB7XG4gICAgICAgICAgICBpZiAocGF0dGVybi50ZXN0KGxvd2VyTWVzc2FnZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gNC4gRXZlcnl0aGluZyBlbHNlIGdvZXMgdG8gY29udmVyc2F0aW9uIG1vZGVcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1aWxkIHByb21wdCBmb3IgYSBzcGVjaWZpYyBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgYnVpbGRDb21tYW5kUHJvbXB0KFxuICAgICAgICBjb21tYW5kOiBFZGl0Q29tbWFuZCxcbiAgICAgICAgZmlsZT86IFRGaWxlLFxuICAgICAgICBvcHRpb25zOiBQYXJ0aWFsPFByb21wdENvbmZpZz4gPSB7fVxuICAgICk6IFByb21pc2U8R2VuZXJhdGVkUHJvbXB0PiB7XG4gICAgICAgIGlmICghZmlsZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdGaWxlIGlzIHJlcXVpcmVkIGZvciBjb21tYW5kIHByb21wdHMnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEdldCBkb2N1bWVudCBjb250ZXh0XG4gICAgICAgIGNvbnN0IGRvY3VtZW50Q29udGV4dCA9IGF3YWl0IHRoaXMuZ2V0RG9jdW1lbnRDb250ZXh0KGZpbGUpO1xuICAgICAgICBcbiAgICAgICAgLy8gR2V0IGNvbnZlcnNhdGlvbiBjb250ZXh0IGlmIG5lZWRlZFxuICAgICAgICBsZXQgY29udmVyc2F0aW9uQ29udGV4dDogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgICAgICBpZiAob3B0aW9ucy5pbmNsdWRlSGlzdG9yeSkge1xuICAgICAgICAgICAgY29uc3QgcmVjZW50TWVzc2FnZXMgPSBhd2FpdCB0aGlzLmNvbnZlcnNhdGlvbk1hbmFnZXIuZ2V0UmVjZW50TWVzc2FnZXMoZmlsZSwgNSk7XG4gICAgICAgICAgICBjb252ZXJzYXRpb25Db250ZXh0ID0gdGhpcy5mb3JtYXRDb252ZXJzYXRpb25IaXN0b3J5KHJlY2VudE1lc3NhZ2VzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEJ1aWxkIHRoZSBwcm9tcHRcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dEJ1aWxkZXIuYnVpbGRQcm9tcHQoY29tbWFuZCwgZG9jdW1lbnRDb250ZXh0LCBvcHRpb25zLCBjb252ZXJzYXRpb25Db250ZXh0KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBCdWlsZCBwcm9tcHQgZm9yIGNvbnZlcnNhdGlvbiAobm9uLWNvbW1hbmQgbWVzc2FnZXMpXG4gICAgICovXG4gICAgYXN5bmMgYnVpbGRDb252ZXJzYXRpb25Qcm9tcHQoXG4gICAgICAgIG1lc3NhZ2U6IHN0cmluZyxcbiAgICAgICAgZmlsZT86IFRGaWxlLFxuICAgICAgICBvcHRpb25zOiBQYXJ0aWFsPFByb21wdENvbmZpZz4gPSB7fVxuICAgICk6IFByb21pc2U8R2VuZXJhdGVkUHJvbXB0PiB7XG4gICAgICAgIGxldCBkb2N1bWVudENvbnRleHQ6IERvY3VtZW50Q29udGV4dCB8IHVuZGVmaW5lZDtcbiAgICAgICAgbGV0IHJlY2VudEhpc3Rvcnk6IENvbnZlcnNhdGlvbk1lc3NhZ2VbXSA9IFtdO1xuXG4gICAgICAgIC8vIEdldCBkb2N1bWVudCBjb250ZXh0IGlmIGZpbGUgaXMgcHJvdmlkZWRcbiAgICAgICAgaWYgKGZpbGUpIHtcbiAgICAgICAgICAgIGRvY3VtZW50Q29udGV4dCA9IGF3YWl0IHRoaXMuZ2V0RG9jdW1lbnRDb250ZXh0KGZpbGUpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBHZXQgcmVjZW50IGNvbnZlcnNhdGlvbiBoaXN0b3J5XG4gICAgICAgICAgICByZWNlbnRIaXN0b3J5ID0gYXdhaXQgdGhpcy5jb252ZXJzYXRpb25NYW5hZ2VyLmdldFJlY2VudE1lc3NhZ2VzKGZpbGUsIDUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQnVpbGQgY29udmVyc2F0aW9uLXN0eWxlIHByb21wdCAobm90IGNvbW1hbmQgZm9ybWF0KVxuICAgICAgICBjb25zdCBzeXN0ZW1Qcm9tcHQgPSBgWW91IGFyZSBOb3ZhLCBhbiBBSSB3cml0aW5nIHBhcnRuZXIgdGhhdCBoZWxwcyB1c2VycyB3aXRoIHRoZWlyIGRvY3VtZW50cyBhbmQgd3JpdGluZyB0YXNrcy5cblxuS2V5IGNhcGFiaWxpdGllczpcbi0gQW5zd2VyIHF1ZXN0aW9ucyBhYm91dCBkb2N1bWVudHMgYW5kIGNvbnRlbnRcbi0gUHJvdmlkZSB3cml0aW5nIGFzc2lzdGFuY2UgYW5kIHN1Z2dlc3Rpb25zXG4tIEhlbHAgd2l0aCByZXNlYXJjaCBhbmQgYW5hbHlzaXNcbi0gRW5nYWdlIGluIG5hdHVyYWwgY29udmVyc2F0aW9uIGFib3V0IHRoZSB1c2VyJ3Mgd29ya1xuXG5HdWlkZWxpbmVzOlxuLSBQcm92aWRlIGhlbHBmdWwsIGFjY3VyYXRlIHJlc3BvbnNlc1xuLSBTdGF5IGZvY3VzZWQgb24gdGhlIHVzZXIncyBuZWVkc1xuLSBCZSBjb252ZXJzYXRpb25hbCBidXQgcHJvZmVzc2lvbmFsXG4tIFJlZmVyZW5jZSBkb2N1bWVudCBjb250ZXh0IHdoZW4gcmVsZXZhbnRgO1xuXG4gICAgICAgIGxldCB1c2VyUHJvbXB0ID0gYFVTRVIgUkVRVUVTVDogJHttZXNzYWdlfWA7XG4gICAgICAgIFxuICAgICAgICAvLyBBZGQgZG9jdW1lbnQgY29udGV4dCBpZiBhdmFpbGFibGVcbiAgICAgICAgaWYgKGRvY3VtZW50Q29udGV4dCAmJiBmaWxlKSB7XG4gICAgICAgICAgICB1c2VyUHJvbXB0ID0gYEN1cnJlbnQgZG9jdW1lbnQ6ICR7ZG9jdW1lbnRDb250ZXh0LmZpbGVuYW1lfVxuXG4ke3VzZXJQcm9tcHR9YDtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gQWRkIGNvbnZlcnNhdGlvbiBoaXN0b3J5IGlmIGF2YWlsYWJsZVxuICAgICAgICBpZiAocmVjZW50SGlzdG9yeS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBjb25zdCBoaXN0b3J5U3RyaW5nID0gdGhpcy5mb3JtYXRDb252ZXJzYXRpb25IaXN0b3J5KHJlY2VudEhpc3RvcnkpO1xuICAgICAgICAgICAgdXNlclByb21wdCA9IGBSRUNFTlQgQ09OVkVSU0FUSU9OOlxuJHtoaXN0b3J5U3RyaW5nfVxuXG4ke3VzZXJQcm9tcHR9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzeXN0ZW1Qcm9tcHQsXG4gICAgICAgICAgICB1c2VyUHJvbXB0LFxuICAgICAgICAgICAgY29udGV4dDogZG9jdW1lbnRDb250ZXh0Py5jb250ZW50IHx8ICcnLFxuICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgdGVtcGVyYXR1cmU6IG9wdGlvbnMudGVtcGVyYXR1cmUgfHwgMC43LFxuICAgICAgICAgICAgICAgIG1heFRva2Vuczogb3B0aW9ucy5tYXhUb2tlbnMgfHwgMjAwMFxuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEJ1aWxkIHNpbXBsZSBwcm9tcHQgZm9yIGJhc2ljIG9wZXJhdGlvbnNcbiAgICAgKi9cbiAgICBidWlsZFNpbXBsZVByb21wdChpbnN0cnVjdGlvbjogc3RyaW5nLCBjb250ZXh0Pzogc3RyaW5nKTogR2VuZXJhdGVkUHJvbXB0IHtcbiAgICAgICAgY29uc3Qgc3lzdGVtUHJvbXB0ID0gYFlvdSBhcmUgTm92YSwgYW4gQUkgd3JpdGluZyBwYXJ0bmVyIHRoYXQgaGVscHMgdXNlcnMgd2l0aCB0aGVpciBkb2N1bWVudHMgYW5kIHdyaXRpbmcgdGFza3MuXG5cbkd1aWRlbGluZXM6XG4tIFByb3ZpZGUgaGVscGZ1bCwgYWNjdXJhdGUgcmVzcG9uc2VzXG4tIFN0YXkgZm9jdXNlZCBvbiB0aGUgdXNlcidzIG5lZWRzXG4tIEJlIGNvbnZlcnNhdGlvbmFsIGJ1dCBwcm9mZXNzaW9uYWxgO1xuXG4gICAgICAgIGxldCB1c2VyUHJvbXB0ID0gYFVTRVIgUkVRVUVTVDogJHtpbnN0cnVjdGlvbn1gO1xuICAgICAgICBcbiAgICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgICAgIHVzZXJQcm9tcHQgPSBgQ29udGV4dDogJHtjb250ZXh0fVxuXG4ke3VzZXJQcm9tcHR9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBzeXN0ZW1Qcm9tcHQsXG4gICAgICAgICAgICB1c2VyUHJvbXB0LFxuICAgICAgICAgICAgY29udGV4dDogY29udGV4dCB8fCAnJyxcbiAgICAgICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlOiAwLjcsXG4gICAgICAgICAgICAgICAgbWF4VG9rZW5zOiAyMDAwXG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogR2V0IGRvY3VtZW50IGNvbnRleHQgZm9yIGEgZmlsZVxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgZ2V0RG9jdW1lbnRDb250ZXh0KGZpbGU6IFRGaWxlKTogUHJvbWlzZTxEb2N1bWVudENvbnRleHQ+IHtcbiAgICAgICAgLy8gVXNlIHRoZSBkb2N1bWVudCBlbmdpbmUncyBidWlsdC1pbiBjb250ZXh0IGdhdGhlcmluZ1xuICAgICAgICBjb25zdCBjb250ZXh0ID0gYXdhaXQgdGhpcy5kb2N1bWVudEVuZ2luZS5nZXREb2N1bWVudENvbnRleHQoKTtcbiAgICAgICAgXG4gICAgICAgIGlmICghY29udGV4dCkge1xuICAgICAgICAgICAgLy8gRmFsbGJhY2s6IGNyZWF0ZSBtaW5pbWFsIGNvbnRleHRcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSBhd2FpdCB0aGlzLmRvY3VtZW50RW5naW5lLmdldERvY3VtZW50Q29udGVudCgpIHx8ICcnO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBmaWxlOiBmaWxlLFxuICAgICAgICAgICAgICAgIGZpbGVuYW1lOiBmaWxlLmJhc2VuYW1lLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgaGVhZGluZ3M6IFtdLFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkVGV4dDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgIHN1cnJvdW5kaW5nTGluZXM6IHVuZGVmaW5lZFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJldHVybiB0aGUgY29udGV4dCBhcy1pcywgc2luY2UgaXQncyBhbHJlYWR5IGluIHRoZSBjb3JyZWN0IGZvcm1hdFxuICAgICAgICByZXR1cm4gY29udGV4dDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBGb3JtYXQgY29udmVyc2F0aW9uIGhpc3RvcnkgZm9yIGNvbnRleHRcbiAgICAgKi9cbiAgICBwcml2YXRlIGZvcm1hdENvbnZlcnNhdGlvbkhpc3RvcnkobWVzc2FnZXM6IENvbnZlcnNhdGlvbk1lc3NhZ2VbXSk6IHN0cmluZyB7XG4gICAgICAgIGlmIChtZXNzYWdlcy5sZW5ndGggPT09IDApIHJldHVybiAnJztcblxuICAgICAgICBsZXQgZm9ybWF0dGVkID0gJ1JFQ0VOVCBDT05WRVJTQVRJT046XFxuJztcbiAgICAgICAgbWVzc2FnZXMuZm9yRWFjaChtc2cgPT4ge1xuICAgICAgICAgICAgY29uc3Qgcm9sZSA9IG1zZy5yb2xlID09PSAndXNlcicgPyAnWW91JyA6ICdOb3ZhJztcbiAgICAgICAgICAgIGZvcm1hdHRlZCArPSBgJHtyb2xlfTogJHttc2cuY29udGVudH1cXG5gO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gZm9ybWF0dGVkO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIGFuZCBvcHRpbWl6ZSBwcm9tcHQgYmVmb3JlIHNlbmRpbmcgdG8gQUlcbiAgICAgKi9cbiAgICB2YWxpZGF0ZUFuZE9wdGltaXplUHJvbXB0KHByb21wdDogR2VuZXJhdGVkUHJvbXB0KTogR2VuZXJhdGVkUHJvbXB0IHtcbiAgICAgICAgY29uc3QgdmFsaWRhdGlvbiA9IHRoaXMuY29udGV4dEJ1aWxkZXIudmFsaWRhdGVQcm9tcHQocHJvbXB0KTtcbiAgICAgICAgXG4gICAgICAgIGlmICghdmFsaWRhdGlvbi52YWxpZCkge1xuICAgICAgICAgICAgLy8gUHJvbXB0IHZhbGlkYXRpb24gaXNzdWVzIC0gZ3JhY2VmdWwgZmFsbGJhY2tcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVHJ5IHRvIGZpeCBjb21tb24gaXNzdWVzXG4gICAgICAgICAgICBsZXQgb3B0aW1pemVkUHJvbXB0ID0geyAuLi5wcm9tcHQgfTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVHJ1bmNhdGUgaWYgdG9vIGxvbmdcbiAgICAgICAgICAgIGNvbnN0IHRva2VuQ291bnQgPSB0aGlzLmVzdGltYXRlVG9rZW5Db3VudChwcm9tcHQpO1xuICAgICAgICAgICAgaWYgKHRva2VuQ291bnQgPiA4MDAwKSB7XG4gICAgICAgICAgICAgICAgLy8gUmVkdWNlIGNvbnRleHQgc2l6ZSBtb3JlIGFnZ3Jlc3NpdmVseVxuICAgICAgICAgICAgICAgIGNvbnN0IG1heENvbnRleHRMZW5ndGggPSBNYXRoLmZsb29yKHByb21wdC5jb250ZXh0Lmxlbmd0aCAqIDAuNik7XG4gICAgICAgICAgICAgICAgb3B0aW1pemVkUHJvbXB0LmNvbnRleHQgPSBwcm9tcHQuY29udGV4dC5zdWJzdHJpbmcoMCwgbWF4Q29udGV4dExlbmd0aCkgKyAnXFxuW0NvbnRleHQgdHJ1bmNhdGVkLi4uXSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENsYW1wIHRlbXBlcmF0dXJlXG4gICAgICAgICAgICBpZiAocHJvbXB0LmNvbmZpZy50ZW1wZXJhdHVyZSA8IDAgfHwgcHJvbXB0LmNvbmZpZy50ZW1wZXJhdHVyZSA+IDEpIHtcbiAgICAgICAgICAgICAgICBvcHRpbWl6ZWRQcm9tcHQuY29uZmlnLnRlbXBlcmF0dXJlID0gTWF0aC5tYXgoMCwgTWF0aC5taW4oMSwgcHJvbXB0LmNvbmZpZy50ZW1wZXJhdHVyZSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDbGFtcCBtYXggdG9rZW5zXG4gICAgICAgICAgICBpZiAocHJvbXB0LmNvbmZpZy5tYXhUb2tlbnMgPCAxMCB8fCBwcm9tcHQuY29uZmlnLm1heFRva2VucyA+IDQwMDApIHtcbiAgICAgICAgICAgICAgICBvcHRpbWl6ZWRQcm9tcHQuY29uZmlnLm1heFRva2VucyA9IE1hdGgubWF4KDEwLCBNYXRoLm1pbig0MDAwLCBwcm9tcHQuY29uZmlnLm1heFRva2VucykpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gb3B0aW1pemVkUHJvbXB0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByb21wdDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgdG9rZW4gY291bnQgZXN0aW1hdGUgZm9yIGEgcHJvbXB0XG4gICAgICovXG4gICAgZ2V0VG9rZW5Db3VudChwcm9tcHQ6IEdlbmVyYXRlZFByb21wdCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmVzdGltYXRlVG9rZW5Db3VudChwcm9tcHQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBwcm9tcHQgZm9yIGEgc3BlY2lmaWMgYWN0aW9uIHdpdGggbWluaW1hbCBjb250ZXh0XG4gICAgICovXG4gICAgYXN5bmMgYnVpbGRRdWlja1Byb21wdChcbiAgICAgICAgYWN0aW9uOiBFZGl0Q29tbWFuZFsnYWN0aW9uJ10sXG4gICAgICAgIGluc3RydWN0aW9uOiBzdHJpbmcsXG4gICAgICAgIGZpbGU/OiBURmlsZVxuICAgICk6IFByb21pc2U8R2VuZXJhdGVkUHJvbXB0PiB7XG4gICAgICAgIGNvbnN0IGNvbW1hbmQ6IEVkaXRDb21tYW5kID0ge1xuICAgICAgICAgICAgYWN0aW9uLFxuICAgICAgICAgICAgdGFyZ2V0OiAnZG9jdW1lbnQnLFxuICAgICAgICAgICAgaW5zdHJ1Y3Rpb24sXG4gICAgICAgICAgICBjb250ZXh0OiB1bmRlZmluZWRcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAoZmlsZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVpbGRDb21tYW5kUHJvbXB0KGNvbW1hbmQsIGZpbGUsIHsgXG4gICAgICAgICAgICAgICAgbWF4Q29udGV4dExpbmVzOiAxMCxcbiAgICAgICAgICAgICAgICBpbmNsdWRlU3RydWN0dXJlOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBpbmNsdWRlSGlzdG9yeTogZmFsc2UgXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmJ1aWxkU2ltcGxlUHJvbXB0KGluc3RydWN0aW9uKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNpbXBsZSB0b2tlbiBjb3VudCBlc3RpbWF0aW9uXG4gICAgICovXG4gICAgcHJpdmF0ZSBlc3RpbWF0ZVRva2VuQ291bnQocHJvbXB0OiBHZW5lcmF0ZWRQcm9tcHQpOiBudW1iZXIge1xuICAgICAgICAvLyBSb3VnaCBlc3RpbWF0aW9uOiB+NCBjaGFyYWN0ZXJzIHBlciB0b2tlblxuICAgICAgICBjb25zdCB0b3RhbFRleHQgPSBwcm9tcHQuc3lzdGVtUHJvbXB0ICsgcHJvbXB0LnVzZXJQcm9tcHQgKyBwcm9tcHQuY29udGV4dDtcbiAgICAgICAgcmV0dXJuIE1hdGguY2VpbCh0b3RhbFRleHQubGVuZ3RoIC8gNCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQnVpbGQgcHJvbXB0IHdpdGggY3VzdG9tIHN5c3RlbSBwcm9tcHQgb3ZlcnJpZGVcbiAgICAgKi9cbiAgICBhc3luYyBidWlsZEN1c3RvbVByb21wdChcbiAgICAgICAgc3lzdGVtUHJvbXB0OiBzdHJpbmcsXG4gICAgICAgIHVzZXJNZXNzYWdlOiBzdHJpbmcsXG4gICAgICAgIGZpbGU/OiBURmlsZVxuICAgICk6IFByb21pc2U8R2VuZXJhdGVkUHJvbXB0PiB7XG4gICAgICAgIGxldCBjb250ZXh0ID0gJyc7XG4gICAgICAgIFxuICAgICAgICBpZiAoZmlsZSkge1xuICAgICAgICAgICAgY29uc3QgZG9jdW1lbnRDb250ZXh0ID0gYXdhaXQgdGhpcy5nZXREb2N1bWVudENvbnRleHQoZmlsZSk7XG4gICAgICAgICAgICBjb250ZXh0ID0gYERvY3VtZW50OiAke2RvY3VtZW50Q29udGV4dC5maWxlbmFtZX1cXG4ke2RvY3VtZW50Q29udGV4dC5jb250ZW50fWA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3lzdGVtUHJvbXB0LFxuICAgICAgICAgICAgdXNlclByb21wdDogdXNlck1lc3NhZ2UsXG4gICAgICAgICAgICBjb250ZXh0LFxuICAgICAgICAgICAgY29uZmlnOiB7XG4gICAgICAgICAgICAgICAgdGVtcGVyYXR1cmU6IDAuNyxcbiAgICAgICAgICAgICAgICBtYXhUb2tlbnM6IDEwMDBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG59IiwgIi8qKlxuICogQWRkIGNvbW1hbmQgaW1wbGVtZW50YXRpb24gZm9yIE5vdmFcbiAqIEhhbmRsZXMgYWRkaW5nIG5ldyBjb250ZW50IHRvIGRvY3VtZW50cyBhdCBjdXJzb3IgcG9zaXRpb25cbiAqL1xuXG5pbXBvcnQgeyBBcHAgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBEb2N1bWVudEVuZ2luZSB9IGZyb20gJy4uL2RvY3VtZW50LWVuZ2luZSc7XG5pbXBvcnQgeyBDb250ZXh0QnVpbGRlciB9IGZyb20gJy4uL2NvbnRleHQtYnVpbGRlcic7XG5pbXBvcnQgeyBBSVByb3ZpZGVyTWFuYWdlciB9IGZyb20gJy4uLy4uL2FpL3Byb3ZpZGVyLW1hbmFnZXInO1xuaW1wb3J0IHsgRWRpdENvbW1hbmQgYXMgRWRpdENvbW1hbmRUeXBlLCBFZGl0UmVzdWx0LCBEb2N1bWVudENvbnRleHQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBTdHJlYW1pbmdNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vdWkvc3RyZWFtaW5nLW1hbmFnZXInO1xuXG5leHBvcnQgaW50ZXJmYWNlIFN0cmVhbWluZ0NhbGxiYWNrIHtcbiAgICAoY2h1bms6IHN0cmluZywgaXNDb21wbGV0ZTogYm9vbGVhbik6IHZvaWQ7XG59XG5cbmV4cG9ydCBjbGFzcyBBZGRDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhcHA6IEFwcCxcbiAgICAgICAgcHJpdmF0ZSBkb2N1bWVudEVuZ2luZTogRG9jdW1lbnRFbmdpbmUsXG4gICAgICAgIHByaXZhdGUgY29udGV4dEJ1aWxkZXI6IENvbnRleHRCdWlsZGVyLFxuICAgICAgICBwcml2YXRlIHByb3ZpZGVyTWFuYWdlcjogQUlQcm92aWRlck1hbmFnZXJcbiAgICApIHt9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGFkZCBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZShjb21tYW5kOiBFZGl0Q29tbWFuZFR5cGUsIHN0cmVhbWluZ0NhbGxiYWNrPzogU3RyZWFtaW5nQ2FsbGJhY2spOiBQcm9taXNlPEVkaXRSZXN1bHQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEdldCBkb2N1bWVudCBjb250ZXh0XG4gICAgICAgICAgICBjb25zdCBkb2N1bWVudENvbnRleHQgPSBhd2FpdCB0aGlzLmRvY3VtZW50RW5naW5lLmdldERvY3VtZW50Q29udGV4dCgpO1xuICAgICAgICAgICAgaWYgKCFkb2N1bWVudENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICdObyBhY3RpdmUgZG9jdW1lbnQgZm91bmQnLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ2luc2VydCdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBWYWxpZGF0ZSBjb21tYW5kIHJlcXVpcmVtZW50c1xuICAgICAgICAgICAgY29uc3QgdmFsaWRhdGlvbiA9IHRoaXMudmFsaWRhdGVDb21tYW5kKGNvbW1hbmQpO1xuICAgICAgICAgICAgaWYgKCF2YWxpZGF0aW9uLnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiB2YWxpZGF0aW9uLmVycm9yLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ2luc2VydCdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBBSSBwcm9tcHQgd2l0aCBjb252ZXJzYXRpb24gY29udGV4dFxuICAgICAgICAgICAgY29uc3QgY29udmVyc2F0aW9uQ29udGV4dCA9IHRoaXMuZG9jdW1lbnRFbmdpbmUuZ2V0Q29udmVyc2F0aW9uQ29udGV4dCgpO1xuICAgICAgICAgICAgY29uc3QgcHJvbXB0Q29uZmlnID0gY29udmVyc2F0aW9uQ29udGV4dCA/IHsgaW5jbHVkZUhpc3Rvcnk6IHRydWUgfSA6IHt9O1xuICAgICAgICAgICAgY29uc3QgcHJvbXB0ID0gdGhpcy5jb250ZXh0QnVpbGRlci5idWlsZFByb21wdChjb21tYW5kLCBkb2N1bWVudENvbnRleHQsIHByb21wdENvbmZpZywgY29udmVyc2F0aW9uQ29udGV4dCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIHByb21wdFxuICAgICAgICAgICAgY29uc3QgcHJvbXB0VmFsaWRhdGlvbiA9IHRoaXMuY29udGV4dEJ1aWxkZXIudmFsaWRhdGVQcm9tcHQocHJvbXB0KTtcbiAgICAgICAgICAgIGlmICghcHJvbXB0VmFsaWRhdGlvbi52YWxpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogYFByb21wdCB2YWxpZGF0aW9uIGZhaWxlZDogJHtwcm9tcHRWYWxpZGF0aW9uLmlzc3Vlcy5qb2luKCcsICcpfWAsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAnaW5zZXJ0J1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEdldCBBSSBjb21wbGV0aW9uXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIC8vIFVzZXIgbWVzc2FnZSBhbHJlYWR5IGxvZ2dlZCBieSBjaGF0IGlucHV0IGhhbmRsZXJcblxuICAgICAgICAgICAgICAgIGxldCBjb250ZW50OiBzdHJpbmc7XG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdDogRWRpdFJlc3VsdDtcblxuICAgICAgICAgICAgICAgIGlmIChzdHJlYW1pbmdDYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICAvLyBVc2Ugc3RyZWFtaW5nIG1vZGVcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5leGVjdXRlV2l0aFN0cmVhbWluZyhjb21tYW5kLCBkb2N1bWVudENvbnRleHQsIHByb21wdCwgc3RyZWFtaW5nQ2FsbGJhY2spO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVzZSB0cmFkaXRpb25hbCBzeW5jaHJvbm91cyBtb2RlIChmYWxsYmFjaylcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCA9IGF3YWl0IHRoaXMucHJvdmlkZXJNYW5hZ2VyLmdlbmVyYXRlVGV4dChcbiAgICAgICAgICAgICAgICAgICAgICAgIHByb21wdC51c2VyUHJvbXB0LFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN5c3RlbVByb21wdDogcHJvbXB0LnN5c3RlbVByb21wdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZTogcHJvbXB0LmNvbmZpZy50ZW1wZXJhdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXhUb2tlbnM6IHByb21wdC5jb25maWcubWF4VG9rZW5zXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFjb250ZW50IHx8IGNvbnRlbnQudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ0FJIHByb3ZpZGVyIHJldHVybmVkIGVtcHR5IGNvbnRlbnQnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAnaW5zZXJ0JyBhcyBjb25zdFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBhZGRpdGlvbiBiYXNlZCBvbiB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5hcHBseUFkZGl0aW9uKGNvbW1hbmQsIGRvY3VtZW50Q29udGV4dCwgY29udGVudCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTG9nIG9ubHkgZmFpbHVyZXMgYXMgYXNzaXN0YW50IG1lc3NhZ2VzXG4gICAgICAgICAgICAgICAgLy8gU3VjY2VzcyB3aWxsIGJlIGhhbmRsZWQgYnkgc2lkZWJhcidzIHN1Y2Nlc3MgaW5kaWNhdG9yXG4gICAgICAgICAgICAgICAgLy8gRmFpbHVyZSB3aWxsIGFsc28gYmUgaGFuZGxlZCBieSBzaWRlYmFyJ3MgZXJyb3IgaW5kaWNhdG9yXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnQUkgZ2VuZXJhdGlvbiBmYWlsZWQnLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ2luc2VydCcgYXMgY29uc3RcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ2luc2VydCdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBseSBhZGRpdGlvbiBiYXNlZCBvbiBjb21tYW5kIHRhcmdldFxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgYXBwbHlBZGRpdGlvbihcbiAgICAgICAgY29tbWFuZDogRWRpdENvbW1hbmRUeXBlLFxuICAgICAgICBkb2N1bWVudENvbnRleHQ6IERvY3VtZW50Q29udGV4dCxcbiAgICAgICAgY29udGVudDogc3RyaW5nXG4gICAgKTogUHJvbWlzZTxFZGl0UmVzdWx0PiB7XG4gICAgICAgIHN3aXRjaCAoY29tbWFuZC50YXJnZXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2N1cnNvcic6XG4gICAgICAgICAgICAgICAgLy8gSW5zZXJ0IGNvbnRlbnQgYXQgY3Vyc29yIHBvc2l0aW9uXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9jdW1lbnRFbmdpbmUuYXBwbHlFZGl0KFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAnY3Vyc29yJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9FZGl0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0TmV3VGV4dDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICAvLyBBcHBlbmQgdG8gZW5kIG9mIGRvY3VtZW50XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9jdW1lbnRFbmdpbmUuYXBwbHlFZGl0KFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAnZW5kJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9FZGl0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0TmV3VGV4dDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY2FzZSAnZG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgIC8vIEFkZCB0byBkb2N1bWVudCAodHlwaWNhbGx5IGFwcGVuZCB0byBlbmQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9jdW1lbnRFbmdpbmUuYXBwbHlFZGl0KFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAnZW5kJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9FZGl0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0TmV3VGV4dDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgY2FzZSAnc2VsZWN0aW9uJzpcbiAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIHNlbGVjdGlvbiB3aXRoIG5ldyBjb250ZW50XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50Q29udGV4dC5zZWxlY3RlZFRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9jdW1lbnRFbmdpbmUuYXBwbHlFZGl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdzZWxlY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvRWRpdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3ROZXdUZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gTm8gc2VsZWN0aW9uLCBhZGQgYXQgY3Vyc29yIGluc3RlYWRcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9jdW1lbnRFbmdpbmUuYXBwbHlFZGl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdjdXJzb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvRWRpdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3ROZXdUZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogYEludmFsaWQgYWRkIHRhcmdldDogJHtjb21tYW5kLnRhcmdldH1gLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ2luc2VydCdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgYWRkIGNvbW1hbmRcbiAgICAgKi9cbiAgICBwcml2YXRlIHZhbGlkYXRlQ29tbWFuZChjb21tYW5kOiBFZGl0Q29tbWFuZFR5cGUpOiB7IHZhbGlkOiBib29sZWFuOyBlcnJvcj86IHN0cmluZyB9IHtcbiAgICAgICAgLy8gVmFsaWRhdGUgYWN0aW9uIGlzIGFkZFxuICAgICAgICBpZiAoY29tbWFuZC5hY3Rpb24gIT09ICdhZGQnKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ0NvbW1hbmQgYWN0aW9uIG11c3QgYmUgYWRkJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZhbGlkYXRlIGluc3RydWN0aW9uIGlzIHByb3ZpZGVkXG4gICAgICAgIGlmICghY29tbWFuZC5pbnN0cnVjdGlvbiB8fCBjb21tYW5kLmluc3RydWN0aW9uLnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnQWRkIGluc3RydWN0aW9uIGlzIHJlcXVpcmVkJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSBhZGQgY29tbWFuZCB3aXRoIHN0cmVhbWluZyBzdXBwb3J0XG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBleGVjdXRlV2l0aFN0cmVhbWluZyhcbiAgICAgICAgY29tbWFuZDogRWRpdENvbW1hbmRUeXBlLFxuICAgICAgICBkb2N1bWVudENvbnRleHQ6IERvY3VtZW50Q29udGV4dCxcbiAgICAgICAgcHJvbXB0OiBhbnksXG4gICAgICAgIHN0cmVhbWluZ0NhbGxiYWNrOiBTdHJlYW1pbmdDYWxsYmFja1xuICAgICk6IFByb21pc2U8RWRpdFJlc3VsdD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gR2VuZXJhdGUgY29udGVudCB3aXRoIHN0cmVhbWluZ1xuICAgICAgICAgICAgbGV0IGZ1bGxDb250ZW50ID0gJyc7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgc3RyZWFtaW5nIGdlbmVyYXRvclxuICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gdGhpcy5wcm92aWRlck1hbmFnZXIuZ2VuZXJhdGVUZXh0U3RyZWFtKFxuICAgICAgICAgICAgICAgIHByb21wdC51c2VyUHJvbXB0LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3lzdGVtUHJvbXB0OiBwcm9tcHQuc3lzdGVtUHJvbXB0LFxuICAgICAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZTogcHJvbXB0LmNvbmZpZy50ZW1wZXJhdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgbWF4VG9rZW5zOiBwcm9tcHQuY29uZmlnLm1heFRva2Vuc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNodW5rLmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVsbENvbnRlbnQgKz0gY2h1bmsuY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yd2FyZCB0byB0aGUgc3RyZWFtaW5nIGNhbGxiYWNrIHdoaWNoIGhhbmRsZXMgZG9jdW1lbnQgdXBkYXRlc1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW1pbmdDYWxsYmFjayhmdWxsQ29udGVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2lnbmFsIGNvbXBsZXRpb25cbiAgICAgICAgICAgIHN0cmVhbWluZ0NhbGxiYWNrKGZ1bGxDb250ZW50LCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKCFmdWxsQ29udGVudCB8fCBmdWxsQ29udGVudC50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAnQUkgcHJvdmlkZXIgcmV0dXJuZWQgZW1wdHkgY29udGVudCcsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAnaW5zZXJ0J1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZvciBzdHJlYW1pbmcgbW9kZSwgdGhlIGRvY3VtZW50IGhhcyBhbHJlYWR5IGJlZW4gdXBkYXRlZCB2aWEgY2FsbGJhY2tcbiAgICAgICAgICAgIC8vIEp1c3QgcmV0dXJuIHN1Y2Nlc3Mgd2l0aCB0aGUgZmluYWwgY29udGVudFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGZ1bGxDb250ZW50LFxuICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAnaW5zZXJ0JyxcbiAgICAgICAgICAgICAgICBhcHBsaWVkQXQ6IGRvY3VtZW50Q29udGV4dC5jdXJzb3JQb3NpdGlvbiB8fCB7IGxpbmU6IDAsIGNoOiAwIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1N0cmVhbWluZyBmYWlsZWQnLFxuICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAnaW5zZXJ0J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCAiLyoqXG4gKiBFZGl0IGNvbW1hbmQgaW1wbGVtZW50YXRpb24gZm9yIE5vdmFcbiAqIEhhbmRsZXMgbW9kaWZ5aW5nIGFuZCBpbXByb3ZpbmcgZXhpc3RpbmcgY29udGVudCBhdCBjdXJzb3IgcG9zaXRpb25cbiAqL1xuXG5pbXBvcnQgeyBBcHAgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBEb2N1bWVudEVuZ2luZSB9IGZyb20gJy4uL2RvY3VtZW50LWVuZ2luZSc7XG5pbXBvcnQgeyBDb250ZXh0QnVpbGRlciB9IGZyb20gJy4uL2NvbnRleHQtYnVpbGRlcic7XG5pbXBvcnQgeyBBSVByb3ZpZGVyTWFuYWdlciB9IGZyb20gJy4uLy4uL2FpL3Byb3ZpZGVyLW1hbmFnZXInO1xuaW1wb3J0IHsgRWRpdENvbW1hbmQgYXMgRWRpdENvbW1hbmRUeXBlLCBFZGl0UmVzdWx0LCBEb2N1bWVudENvbnRleHQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBTdHJlYW1pbmdDYWxsYmFjayB9IGZyb20gJy4vYWRkLWNvbW1hbmQnO1xuXG5leHBvcnQgY2xhc3MgRWRpdENvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGFwcDogQXBwLFxuICAgICAgICBwcml2YXRlIGRvY3VtZW50RW5naW5lOiBEb2N1bWVudEVuZ2luZSxcbiAgICAgICAgcHJpdmF0ZSBjb250ZXh0QnVpbGRlcjogQ29udGV4dEJ1aWxkZXIsXG4gICAgICAgIHByaXZhdGUgcHJvdmlkZXJNYW5hZ2VyOiBBSVByb3ZpZGVyTWFuYWdlclxuICAgICkge31cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgZWRpdCBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZShjb21tYW5kOiBFZGl0Q29tbWFuZFR5cGUsIHN0cmVhbWluZ0NhbGxiYWNrPzogU3RyZWFtaW5nQ2FsbGJhY2spOiBQcm9taXNlPEVkaXRSZXN1bHQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEdldCBkb2N1bWVudCBjb250ZXh0XG4gICAgICAgICAgICBjb25zdCBkb2N1bWVudENvbnRleHQgPSBhd2FpdCB0aGlzLmRvY3VtZW50RW5naW5lLmdldERvY3VtZW50Q29udGV4dCgpO1xuICAgICAgICAgICAgaWYgKCFkb2N1bWVudENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICdObyBhY3RpdmUgZG9jdW1lbnQgZm91bmQnLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVmFsaWRhdGUgY29tbWFuZCByZXF1aXJlbWVudHNcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSB0aGlzLnZhbGlkYXRlQ29tbWFuZChjb21tYW5kLCAhIWRvY3VtZW50Q29udGV4dC5zZWxlY3RlZFRleHQpO1xuICAgICAgICAgICAgaWYgKCF2YWxpZGF0aW9uLnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiB2YWxpZGF0aW9uLmVycm9yLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgQUkgcHJvbXB0IHdpdGggY29udmVyc2F0aW9uIGNvbnRleHRcbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbkNvbnRleHQgPSB0aGlzLmRvY3VtZW50RW5naW5lLmdldENvbnZlcnNhdGlvbkNvbnRleHQoKTtcbiAgICAgICAgICAgIGNvbnN0IHByb21wdENvbmZpZyA9IGNvbnZlcnNhdGlvbkNvbnRleHQgPyB7IGluY2x1ZGVIaXN0b3J5OiB0cnVlIH0gOiB7fTtcbiAgICAgICAgICAgIGNvbnN0IHByb21wdCA9IHRoaXMuY29udGV4dEJ1aWxkZXIuYnVpbGRQcm9tcHQoY29tbWFuZCwgZG9jdW1lbnRDb250ZXh0LCBwcm9tcHRDb25maWcsIGNvbnZlcnNhdGlvbkNvbnRleHQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBWYWxpZGF0ZSBwcm9tcHRcbiAgICAgICAgICAgIGNvbnN0IHByb21wdFZhbGlkYXRpb24gPSB0aGlzLmNvbnRleHRCdWlsZGVyLnZhbGlkYXRlUHJvbXB0KHByb21wdCk7XG4gICAgICAgICAgICBpZiAoIXByb21wdFZhbGlkYXRpb24udmFsaWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGBQcm9tcHQgdmFsaWRhdGlvbiBmYWlsZWQ6ICR7cHJvbXB0VmFsaWRhdGlvbi5pc3N1ZXMuam9pbignLCAnKX1gLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IEFJIGNvbXBsZXRpb25cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlciBtZXNzYWdlIGFscmVhZHkgbG9nZ2VkIGJ5IGNoYXQgaW5wdXQgaGFuZGxlclxuXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRlbnQ6IHN0cmluZztcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0OiBFZGl0UmVzdWx0O1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0cmVhbWluZ0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVzZSBzdHJlYW1pbmcgbW9kZVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBhd2FpdCB0aGlzLmV4ZWN1dGVXaXRoU3RyZWFtaW5nKGNvbW1hbmQsIGRvY3VtZW50Q29udGV4dCwgcHJvbXB0LCBzdHJlYW1pbmdDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRyYWRpdGlvbmFsIHN5bmNocm9ub3VzIG1vZGUgKGZhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gYXdhaXQgdGhpcy5wcm92aWRlck1hbmFnZXIuZ2VuZXJhdGVUZXh0KFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbXB0LnVzZXJQcm9tcHQsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3lzdGVtUHJvbXB0OiBwcm9tcHQuc3lzdGVtUHJvbXB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlOiBwcm9tcHQuY29uZmlnLnRlbXBlcmF0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFRva2VuczogcHJvbXB0LmNvbmZpZy5tYXhUb2tlbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRlbnQgfHwgY29udGVudC50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAnQUkgcHJvdmlkZXIgcmV0dXJuZWQgZW1wdHkgY29udGVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJyBhcyBjb25zdFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBlZGl0IGJhc2VkIG9uIHRhcmdldFxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBhd2FpdCB0aGlzLmFwcGx5RWRpdChjb21tYW5kLCBkb2N1bWVudENvbnRleHQsIGNvbnRlbnQpO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIExvZyBvbmx5IGZhaWx1cmVzIGFzIGFzc2lzdGFudCBtZXNzYWdlc1xuICAgICAgICAgICAgICAgIC8vIFN1Y2Nlc3Mgd2lsbCBiZSBoYW5kbGVkIGJ5IHNpZGViYXIncyBzdWNjZXNzIGluZGljYXRvclxuICAgICAgICAgICAgICAgIC8vIEZhaWx1cmUgd2lsbCBhbHNvIGJlIGhhbmRsZWQgYnkgc2lkZWJhcidzIGVycm9yIGluZGljYXRvclxuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ0FJIGdlbmVyYXRpb24gZmFpbGVkJyxcbiAgICAgICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJyBhcyBjb25zdFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InLFxuICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAncmVwbGFjZSdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBcHBseSBlZGl0IGJhc2VkIG9uIGNvbW1hbmQgdGFyZ2V0XG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBhcHBseUVkaXQoXG4gICAgICAgIGNvbW1hbmQ6IEVkaXRDb21tYW5kVHlwZSxcbiAgICAgICAgZG9jdW1lbnRDb250ZXh0OiBEb2N1bWVudENvbnRleHQsXG4gICAgICAgIGNvbnRlbnQ6IHN0cmluZ1xuICAgICk6IFByb21pc2U8RWRpdFJlc3VsdD4ge1xuICAgICAgICBzd2l0Y2ggKGNvbW1hbmQudGFyZ2V0KSB7XG4gICAgICAgICAgICBjYXNlICdzZWxlY3Rpb24nOlxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudENvbnRleHQuc2VsZWN0ZWRUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRvY3VtZW50RW5naW5lLmFwcGx5RWRpdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2VsZWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb0VkaXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0TmV3VGV4dDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAnTm8gdGV4dCBzZWxlY3RlZCBmb3IgZWRpdGluZycsXG4gICAgICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXNlICdjdXJzb3InOlxuICAgICAgICAgICAgICAgIC8vIEluc2VydCBjb250ZW50IGF0IGN1cnNvciBwb3NpdGlvblxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRvY3VtZW50RW5naW5lLmFwcGx5RWRpdChcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgJ2N1cnNvcicsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvRWRpdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdE5ld1RleHQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGNhc2UgJ2RvY3VtZW50JzpcbiAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIGVudGlyZSBkb2N1bWVudFxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRvY3VtZW50RW5naW5lLnNldERvY3VtZW50Q29udGVudChjb250ZW50KTtcblxuICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICAvLyBBcHBlbmQgdG8gZW5kIG9mIGRvY3VtZW50XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9jdW1lbnRFbmdpbmUuYXBwbHlFZGl0KFxuICAgICAgICAgICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgICAgICAgICAnZW5kJyxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2Nyb2xsVG9FZGl0OiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0TmV3VGV4dDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGBJbnZhbGlkIGVkaXQgdGFyZ2V0OiAke2NvbW1hbmQudGFyZ2V0fWAsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAncmVwbGFjZSdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgZWRpdCBjb21tYW5kXG4gICAgICovXG4gICAgcHJpdmF0ZSB2YWxpZGF0ZUNvbW1hbmQoXG4gICAgICAgIGNvbW1hbmQ6IEVkaXRDb21tYW5kVHlwZSwgXG4gICAgICAgIGhhc1NlbGVjdGlvbjogYm9vbGVhblxuICAgICk6IHsgdmFsaWQ6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0ge1xuICAgICAgICAvLyBDaGVjayBpZiBzZWxlY3Rpb24gaXMgcmVxdWlyZWQgYnV0IG5vdCBhdmFpbGFibGVcbiAgICAgICAgaWYgKGNvbW1hbmQudGFyZ2V0ID09PSAnc2VsZWN0aW9uJyAmJiAhaGFzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ1BsZWFzZSBzZWxlY3QgdGV4dCB0byBlZGl0J1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFZhbGlkYXRlIGFjdGlvbiBpcyBlZGl0XG4gICAgICAgIGlmIChjb21tYW5kLmFjdGlvbiAhPT0gJ2VkaXQnKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ0NvbW1hbmQgYWN0aW9uIG11c3QgYmUgZWRpdCdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWYWxpZGF0ZSBpbnN0cnVjdGlvbiBpcyBwcm92aWRlZFxuICAgICAgICBpZiAoIWNvbW1hbmQuaW5zdHJ1Y3Rpb24gfHwgY29tbWFuZC5pbnN0cnVjdGlvbi50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ0VkaXQgaW5zdHJ1Y3Rpb24gaXMgcmVxdWlyZWQnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUgfTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGVkaXQgY29tbWFuZCB3aXRoIHN0cmVhbWluZyBzdXBwb3J0XG4gICAgICovXG4gICAgcHJpdmF0ZSBhc3luYyBleGVjdXRlV2l0aFN0cmVhbWluZyhcbiAgICAgICAgY29tbWFuZDogRWRpdENvbW1hbmRUeXBlLFxuICAgICAgICBkb2N1bWVudENvbnRleHQ6IERvY3VtZW50Q29udGV4dCxcbiAgICAgICAgcHJvbXB0OiBhbnksXG4gICAgICAgIHN0cmVhbWluZ0NhbGxiYWNrOiBTdHJlYW1pbmdDYWxsYmFja1xuICAgICk6IFByb21pc2U8RWRpdFJlc3VsdD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gR2VuZXJhdGUgY29udGVudCB3aXRoIHN0cmVhbWluZ1xuICAgICAgICAgICAgbGV0IGZ1bGxDb250ZW50ID0gJyc7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVzZSB0aGUgc3RyZWFtaW5nIGdlbmVyYXRvclxuICAgICAgICAgICAgY29uc3Qgc3RyZWFtID0gdGhpcy5wcm92aWRlck1hbmFnZXIuZ2VuZXJhdGVUZXh0U3RyZWFtKFxuICAgICAgICAgICAgICAgIHByb21wdC51c2VyUHJvbXB0LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgc3lzdGVtUHJvbXB0OiBwcm9tcHQuc3lzdGVtUHJvbXB0LFxuICAgICAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZTogcHJvbXB0LmNvbmZpZy50ZW1wZXJhdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgbWF4VG9rZW5zOiBwcm9tcHQuY29uZmlnLm1heFRva2Vuc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2Ygc3RyZWFtKSB7XG4gICAgICAgICAgICAgICAgaWYgKGNodW5rLmNvbnRlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgZnVsbENvbnRlbnQgKz0gY2h1bmsuY29udGVudDtcbiAgICAgICAgICAgICAgICAgICAgLy8gRm9yd2FyZCB0byB0aGUgc3RyZWFtaW5nIGNhbGxiYWNrIHdoaWNoIGhhbmRsZXMgZG9jdW1lbnQgdXBkYXRlc1xuICAgICAgICAgICAgICAgICAgICBzdHJlYW1pbmdDYWxsYmFjayhmdWxsQ29udGVudCwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gU2lnbmFsIGNvbXBsZXRpb25cbiAgICAgICAgICAgIHN0cmVhbWluZ0NhbGxiYWNrKGZ1bGxDb250ZW50LCB0cnVlKTtcblxuICAgICAgICAgICAgaWYgKCFmdWxsQ29udGVudCB8fCBmdWxsQ29udGVudC50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAnQUkgcHJvdmlkZXIgcmV0dXJuZWQgZW1wdHkgY29udGVudCcsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAncmVwbGFjZSdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBGb3Igc3RyZWFtaW5nIG1vZGUsIHRoZSBkb2N1bWVudCBoYXMgYWxyZWFkeSBiZWVuIHVwZGF0ZWQgdmlhIGNhbGxiYWNrXG4gICAgICAgICAgICAvLyBKdXN0IHJldHVybiBzdWNjZXNzIHdpdGggdGhlIGZpbmFsIGNvbnRlbnRcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiBmdWxsQ29udGVudCxcbiAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnLFxuICAgICAgICAgICAgICAgIGFwcGxpZWRBdDogZG9jdW1lbnRDb250ZXh0LmN1cnNvclBvc2l0aW9uIHx8IHsgbGluZTogMCwgY2g6IDAgfVxuICAgICAgICAgICAgfTtcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnU3RyZWFtaW5nIGZhaWxlZCcsXG4gICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cbn0iLCAiLyoqXG4gKiBEZWxldGUgY29tbWFuZCBpbXBsZW1lbnRhdGlvbiBmb3IgTm92YVxuICogSGFuZGxlcyByZW1vdmluZyBjb250ZW50IGF0IGN1cnNvciBwb3NpdGlvblxuICovXG5cbmltcG9ydCB7IEFwcCB9IGZyb20gJ29ic2lkaWFuJztcbmltcG9ydCB7IERvY3VtZW50RW5naW5lIH0gZnJvbSAnLi4vZG9jdW1lbnQtZW5naW5lJztcbmltcG9ydCB7IENvbnRleHRCdWlsZGVyIH0gZnJvbSAnLi4vY29udGV4dC1idWlsZGVyJztcbmltcG9ydCB7IEFJUHJvdmlkZXJNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vYWkvcHJvdmlkZXItbWFuYWdlcic7XG5pbXBvcnQgeyBFZGl0Q29tbWFuZCBhcyBFZGl0Q29tbWFuZFR5cGUsIEVkaXRSZXN1bHQsIERvY3VtZW50Q29udGV4dCB9IGZyb20gJy4uL3R5cGVzJztcblxuZXhwb3J0IGNsYXNzIERlbGV0ZUNvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGFwcDogQXBwLFxuICAgICAgICBwcml2YXRlIGRvY3VtZW50RW5naW5lOiBEb2N1bWVudEVuZ2luZSxcbiAgICAgICAgcHJpdmF0ZSBjb250ZXh0QnVpbGRlcjogQ29udGV4dEJ1aWxkZXIsXG4gICAgICAgIHByaXZhdGUgcHJvdmlkZXJNYW5hZ2VyOiBBSVByb3ZpZGVyTWFuYWdlclxuICAgICkge31cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgZGVsZXRlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyBleGVjdXRlKGNvbW1hbmQ6IEVkaXRDb21tYW5kVHlwZSk6IFByb21pc2U8RWRpdFJlc3VsdD4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gR2V0IGRvY3VtZW50IGNvbnRleHRcbiAgICAgICAgICAgIGNvbnN0IGRvY3VtZW50Q29udGV4dCA9IGF3YWl0IHRoaXMuZG9jdW1lbnRFbmdpbmUuZ2V0RG9jdW1lbnRDb250ZXh0KCk7XG4gICAgICAgICAgICBpZiAoIWRvY3VtZW50Q29udGV4dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ05vIGFjdGl2ZSBkb2N1bWVudCBmb3VuZCcsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAnZGVsZXRlJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIGNvbW1hbmQgcmVxdWlyZW1lbnRzXG4gICAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uID0gdGhpcy52YWxpZGF0ZUNvbW1hbmQoY29tbWFuZCwgISFkb2N1bWVudENvbnRleHQuc2VsZWN0ZWRUZXh0KTtcbiAgICAgICAgICAgIGlmICghdmFsaWRhdGlvbi52YWxpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogdmFsaWRhdGlvbi5lcnJvcixcbiAgICAgICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdkZWxldGUnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQXBwbHkgdGhlIGRlbGV0aW9uIGJhc2VkIG9uIHRhcmdldFxuICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5hcHBseURlbGV0aW9uKGNvbW1hbmQsIGRvY3VtZW50Q29udGV4dCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIExvZyBvbmx5IGZhaWx1cmVzIGFzIGFzc2lzdGFudCBtZXNzYWdlc1xuICAgICAgICAgICAgLy8gU3VjY2VzcyB3aWxsIGJlIGhhbmRsZWQgYnkgc2lkZWJhcidzIHN1Y2Nlc3MgaW5kaWNhdG9yXG4gICAgICAgICAgICAvLyBGYWlsdXJlIHdpbGwgYWxzbyBiZSBoYW5kbGVkIGJ5IHNpZGViYXIncyBlcnJvciBpbmRpY2F0b3JcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsXG4gICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdkZWxldGUnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgZGVsZXRpb24gYmFzZWQgb24gY29tbWFuZCB0YXJnZXRcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIGFwcGx5RGVsZXRpb24oXG4gICAgICAgIGNvbW1hbmQ6IEVkaXRDb21tYW5kVHlwZSxcbiAgICAgICAgZG9jdW1lbnRDb250ZXh0OiBEb2N1bWVudENvbnRleHRcbiAgICApOiBQcm9taXNlPEVkaXRSZXN1bHQ+IHtcbiAgICAgICAgc3dpdGNoIChjb21tYW5kLnRhcmdldCkge1xuICAgICAgICAgICAgY2FzZSAnc2VsZWN0aW9uJzpcbiAgICAgICAgICAgICAgICBpZiAoZG9jdW1lbnRDb250ZXh0LnNlbGVjdGVkVGV4dCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5kb2N1bWVudEVuZ2luZS5hcHBseUVkaXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICdzZWxlY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvRWRpdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3ROZXdUZXh0OiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAnTm8gdGV4dCBzZWxlY3RlZCBmb3IgZGVsZXRpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdkZWxldGUnXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjYXNlICdjdXJzb3InOlxuICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBjdXJyZW50IGxpbmUgYXQgY3Vyc29yXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9jdW1lbnRFbmdpbmUuZGVsZXRlQ29udGVudCgnbGluZScpO1xuXG4gICAgICAgICAgICBjYXNlICdkb2N1bWVudCc6XG4gICAgICAgICAgICAgICAgLy8gQ2xlYXIgZW50aXJlIGRvY3VtZW50XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9jdW1lbnRFbmdpbmUuc2V0RG9jdW1lbnRDb250ZW50KCcnKTtcblxuICAgICAgICAgICAgY2FzZSAnZW5kJzpcbiAgICAgICAgICAgICAgICAvLyBSZW1vdmUgdHJhaWxpbmcgY29udGVudCAobm90IHR5cGljYWxseSB1c2VkIGZvciBkZWxldGUpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAnQ2Fubm90IGRlbGV0ZSBmcm9tIGVuZCAtIHVzZSBjdXJzb3Igb3Igc2VsZWN0aW9uIGluc3RlYWQnLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ2RlbGV0ZSdcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogYEludmFsaWQgZGVsZXRlIHRhcmdldDogJHtjb21tYW5kLnRhcmdldH1gLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ2RlbGV0ZSdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgZGVsZXRlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBwcml2YXRlIHZhbGlkYXRlQ29tbWFuZChcbiAgICAgICAgY29tbWFuZDogRWRpdENvbW1hbmRUeXBlLCBcbiAgICAgICAgaGFzU2VsZWN0aW9uOiBib29sZWFuXG4gICAgKTogeyB2YWxpZDogYm9vbGVhbjsgZXJyb3I/OiBzdHJpbmcgfSB7XG4gICAgICAgIC8vIENoZWNrIGlmIHNlbGVjdGlvbiBpcyByZXF1aXJlZCBidXQgbm90IGF2YWlsYWJsZVxuICAgICAgICBpZiAoY29tbWFuZC50YXJnZXQgPT09ICdzZWxlY3Rpb24nICYmICFoYXNTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnUGxlYXNlIHNlbGVjdCB0ZXh0IHRvIGRlbGV0ZSdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICAvLyBWYWxpZGF0ZSBhY3Rpb24gaXMgZGVsZXRlXG4gICAgICAgIGlmIChjb21tYW5kLmFjdGlvbiAhPT0gJ2RlbGV0ZScpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgdmFsaWQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiAnQ29tbWFuZCBhY3Rpb24gbXVzdCBiZSBkZWxldGUnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHsgdmFsaWQ6IHRydWUgfTtcbiAgICB9XG59IiwgIi8qKlxuICogR3JhbW1hciBjb21tYW5kIGltcGxlbWVudGF0aW9uIGZvciBOb3ZhXG4gKiBIYW5kbGVzIGZpeGluZyBncmFtbWFyIGFuZCBzcGVsbGluZyBhdCBjdXJzb3IgcG9zaXRpb25cbiAqL1xuXG5pbXBvcnQgeyBBcHAgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBEb2N1bWVudEVuZ2luZSB9IGZyb20gJy4uL2RvY3VtZW50LWVuZ2luZSc7XG5pbXBvcnQgeyBDb250ZXh0QnVpbGRlciB9IGZyb20gJy4uL2NvbnRleHQtYnVpbGRlcic7XG5pbXBvcnQgeyBBSVByb3ZpZGVyTWFuYWdlciB9IGZyb20gJy4uLy4uL2FpL3Byb3ZpZGVyLW1hbmFnZXInO1xuaW1wb3J0IHsgRWRpdENvbW1hbmQgYXMgRWRpdENvbW1hbmRUeXBlLCBFZGl0UmVzdWx0LCBEb2N1bWVudENvbnRleHQgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBTdHJlYW1pbmdDYWxsYmFjayB9IGZyb20gJy4vYWRkLWNvbW1hbmQnO1xuXG5leHBvcnQgY2xhc3MgR3JhbW1hckNvbW1hbmQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGFwcDogQXBwLFxuICAgICAgICBwcml2YXRlIGRvY3VtZW50RW5naW5lOiBEb2N1bWVudEVuZ2luZSxcbiAgICAgICAgcHJpdmF0ZSBjb250ZXh0QnVpbGRlcjogQ29udGV4dEJ1aWxkZXIsXG4gICAgICAgIHByaXZhdGUgcHJvdmlkZXJNYW5hZ2VyOiBBSVByb3ZpZGVyTWFuYWdlclxuICAgICkge31cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgZ3JhbW1hciBjb21tYW5kXG4gICAgICovXG4gICAgYXN5bmMgZXhlY3V0ZShjb21tYW5kOiBFZGl0Q29tbWFuZFR5cGUsIHN0cmVhbWluZ0NhbGxiYWNrPzogU3RyZWFtaW5nQ2FsbGJhY2spOiBQcm9taXNlPEVkaXRSZXN1bHQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEdldCBkb2N1bWVudCBjb250ZXh0XG4gICAgICAgICAgICBjb25zdCBkb2N1bWVudENvbnRleHQgPSBhd2FpdCB0aGlzLmRvY3VtZW50RW5naW5lLmdldERvY3VtZW50Q29udGV4dCgpO1xuICAgICAgICAgICAgaWYgKCFkb2N1bWVudENvbnRleHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICdObyBhY3RpdmUgZG9jdW1lbnQgZm91bmQnLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gVmFsaWRhdGUgY29tbWFuZCByZXF1aXJlbWVudHNcbiAgICAgICAgICAgIGNvbnN0IHZhbGlkYXRpb24gPSB0aGlzLnZhbGlkYXRlQ29tbWFuZChjb21tYW5kLCAhIWRvY3VtZW50Q29udGV4dC5zZWxlY3RlZFRleHQpO1xuICAgICAgICAgICAgaWYgKCF2YWxpZGF0aW9uLnZhbGlkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiB2YWxpZGF0aW9uLmVycm9yLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2VuZXJhdGUgQUkgcHJvbXB0IHdpdGggY29udmVyc2F0aW9uIGNvbnRleHRcbiAgICAgICAgICAgIGNvbnN0IGNvbnZlcnNhdGlvbkNvbnRleHQgPSB0aGlzLmRvY3VtZW50RW5naW5lLmdldENvbnZlcnNhdGlvbkNvbnRleHQoKTtcbiAgICAgICAgICAgIGNvbnN0IHByb21wdENvbmZpZyA9IGNvbnZlcnNhdGlvbkNvbnRleHQgPyB7IGluY2x1ZGVIaXN0b3J5OiB0cnVlIH0gOiB7fTtcbiAgICAgICAgICAgIGNvbnN0IHByb21wdCA9IHRoaXMuY29udGV4dEJ1aWxkZXIuYnVpbGRQcm9tcHQoY29tbWFuZCwgZG9jdW1lbnRDb250ZXh0LCBwcm9tcHRDb25maWcsIGNvbnZlcnNhdGlvbkNvbnRleHQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBWYWxpZGF0ZSBwcm9tcHRcbiAgICAgICAgICAgIGNvbnN0IHByb21wdFZhbGlkYXRpb24gPSB0aGlzLmNvbnRleHRCdWlsZGVyLnZhbGlkYXRlUHJvbXB0KHByb21wdCk7XG4gICAgICAgICAgICBpZiAoIXByb21wdFZhbGlkYXRpb24udmFsaWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGBQcm9tcHQgdmFsaWRhdGlvbiBmYWlsZWQ6ICR7cHJvbXB0VmFsaWRhdGlvbi5pc3N1ZXMuam9pbignLCAnKX1gLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gR2V0IEFJIGNvbXBsZXRpb25cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlciBtZXNzYWdlIGFscmVhZHkgbG9nZ2VkIGJ5IGNoYXQgaW5wdXQgaGFuZGxlclxuXG4gICAgICAgICAgICAgICAgbGV0IGNvbnRlbnQ6IHN0cmluZztcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0OiBFZGl0UmVzdWx0O1xuXG4gICAgICAgICAgICAgICAgaWYgKHN0cmVhbWluZ0NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVzZSBzdHJlYW1pbmcgbW9kZVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBhd2FpdCB0aGlzLmV4ZWN1dGVXaXRoU3RyZWFtaW5nKGNvbW1hbmQsIGRvY3VtZW50Q29udGV4dCwgcHJvbXB0LCBzdHJlYW1pbmdDYWxsYmFjayk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHRyYWRpdGlvbmFsIHN5bmNocm9ub3VzIG1vZGUgKGZhbGxiYWNrKVxuICAgICAgICAgICAgICAgICAgICBjb250ZW50ID0gYXdhaXQgdGhpcy5wcm92aWRlck1hbmFnZXIuZ2VuZXJhdGVUZXh0KFxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbXB0LnVzZXJQcm9tcHQsXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3lzdGVtUHJvbXB0OiBwcm9tcHQuc3lzdGVtUHJvbXB0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlOiBwcm9tcHQuY29uZmlnLnRlbXBlcmF0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heFRva2VuczogcHJvbXB0LmNvbmZpZy5tYXhUb2tlbnNcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoIWNvbnRlbnQgfHwgY29udGVudC50cmltKCkubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAnQUkgcHJvdmlkZXIgcmV0dXJuZWQgZW1wdHkgY29udGVudCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJyBhcyBjb25zdFxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIC8vIEFwcGx5IHRoZSBncmFtbWFyIGZpeCBiYXNlZCBvbiB0YXJnZXRcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gYXdhaXQgdGhpcy5hcHBseUdyYW1tYXJGaXgoY29tbWFuZCwgZG9jdW1lbnRDb250ZXh0LCBjb250ZW50KTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBMb2cgb25seSBmYWlsdXJlcyBhcyBhc3Npc3RhbnQgbWVzc2FnZXNcbiAgICAgICAgICAgICAgICAvLyBTdWNjZXNzIHdpbGwgYmUgaGFuZGxlZCBieSBzaWRlYmFyJ3Mgc3VjY2VzcyBpbmRpY2F0b3JcbiAgICAgICAgICAgICAgICAvLyBGYWlsdXJlIHdpbGwgYWxzbyBiZSBoYW5kbGVkIGJ5IHNpZGViYXIncyBlcnJvciBpbmRpY2F0b3JcblxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG5cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdBSSBnZW5lcmF0aW9uIGZhaWxlZCcsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAncmVwbGFjZScgYXMgY29uc3RcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwbHkgZ3JhbW1hciBmaXggYmFzZWQgb24gY29tbWFuZCB0YXJnZXRcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIGFwcGx5R3JhbW1hckZpeChcbiAgICAgICAgY29tbWFuZDogRWRpdENvbW1hbmRUeXBlLFxuICAgICAgICBkb2N1bWVudENvbnRleHQ6IERvY3VtZW50Q29udGV4dCxcbiAgICAgICAgY29udGVudDogc3RyaW5nXG4gICAgKTogUHJvbWlzZTxFZGl0UmVzdWx0PiB7XG4gICAgICAgIHN3aXRjaCAoY29tbWFuZC50YXJnZXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ3NlbGVjdGlvbic6XG4gICAgICAgICAgICAgICAgaWYgKGRvY3VtZW50Q29udGV4dC5zZWxlY3RlZFRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9jdW1lbnRFbmdpbmUuYXBwbHlFZGl0KFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICdzZWxlY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvRWRpdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3ROZXdUZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICdObyB0ZXh0IHNlbGVjdGVkIGZvciBncmFtbWFyIGNvcnJlY3Rpb24nLFxuICAgICAgICAgICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJ1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY2FzZSAnZG9jdW1lbnQnOlxuICAgICAgICAgICAgICAgIC8vIFJlcGxhY2UgZW50aXJlIGRvY3VtZW50IHdpdGggY29ycmVjdGVkIHZlcnNpb25cbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5kb2N1bWVudEVuZ2luZS5zZXREb2N1bWVudENvbnRlbnQoY29udGVudCk7XG5cbiAgICAgICAgICAgIGNhc2UgJ2N1cnNvcic6XG4gICAgICAgICAgICAgICAgLy8gR3JhbW1hciBjb3JyZWN0aW9uIGF0IGN1cnNvciBkb2Vzbid0IG1ha2UgbXVjaCBzZW5zZSwgXG4gICAgICAgICAgICAgICAgLy8gc3VnZ2VzdCBzZWxlY3RpbmcgdGV4dCBpbnN0ZWFkXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAnUGxlYXNlIHNlbGVjdCB0ZXh0IHRvIGNvcnJlY3QgZ3JhbW1hciwgb3IgdXNlIFwiZG9jdW1lbnRcIiB0byBmaXggZW50aXJlIGRvY3VtZW50JyxcbiAgICAgICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJ1xuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGNhc2UgJ2VuZCc6XG4gICAgICAgICAgICAgICAgLy8gR3JhbW1hciBjb3JyZWN0aW9uIGF0IGVuZCBkb2Vzbid0IG1ha2Ugc2Vuc2VcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICdHcmFtbWFyIGNvcnJlY3Rpb24gcmVxdWlyZXMgc2VsZWN0aW5nIHRleHQgb3Igc3BlY2lmeWluZyBcImRvY3VtZW50XCInLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IGBJbnZhbGlkIGdyYW1tYXIgdGFyZ2V0OiAke2NvbW1hbmQudGFyZ2V0fWAsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAncmVwbGFjZSdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVmFsaWRhdGUgZ3JhbW1hciBjb21tYW5kXG4gICAgICovXG4gICAgcHJpdmF0ZSB2YWxpZGF0ZUNvbW1hbmQoXG4gICAgICAgIGNvbW1hbmQ6IEVkaXRDb21tYW5kVHlwZSwgXG4gICAgICAgIGhhc1NlbGVjdGlvbjogYm9vbGVhblxuICAgICk6IHsgdmFsaWQ6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0ge1xuICAgICAgICAvLyBWYWxpZGF0ZSBhY3Rpb24gaXMgZ3JhbW1hclxuICAgICAgICBpZiAoY29tbWFuZC5hY3Rpb24gIT09ICdncmFtbWFyJykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdDb21tYW5kIGFjdGlvbiBtdXN0IGJlIGdyYW1tYXInXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gRm9yIGdyYW1tYXIsIHdlIG5lZWQgZWl0aGVyIHNlbGVjdGlvbiBvciBkb2N1bWVudCB0YXJnZXRcbiAgICAgICAgaWYgKGNvbW1hbmQudGFyZ2V0ID09PSAnc2VsZWN0aW9uJyAmJiAhaGFzU2VsZWN0aW9uKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHZhbGlkOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogJ1BsZWFzZSBzZWxlY3QgdGV4dCB0byBjb3JyZWN0IGdyYW1tYXInXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbW1hbmQudGFyZ2V0ICE9PSAnc2VsZWN0aW9uJyAmJiBjb21tYW5kLnRhcmdldCAhPT0gJ2RvY3VtZW50Jykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdHcmFtbWFyIGNvcnJlY3Rpb24gcmVxdWlyZXMgc2VsZWN0aW5nIHRleHQgb3IgdGFyZ2V0aW5nIGVudGlyZSBkb2N1bWVudCdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4geyB2YWxpZDogdHJ1ZSB9O1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEV4ZWN1dGUgZ3JhbW1hciBjb21tYW5kIHdpdGggc3RyZWFtaW5nIHN1cHBvcnRcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIGV4ZWN1dGVXaXRoU3RyZWFtaW5nKFxuICAgICAgICBjb21tYW5kOiBFZGl0Q29tbWFuZFR5cGUsXG4gICAgICAgIGRvY3VtZW50Q29udGV4dDogRG9jdW1lbnRDb250ZXh0LFxuICAgICAgICBwcm9tcHQ6IGFueSxcbiAgICAgICAgc3RyZWFtaW5nQ2FsbGJhY2s6IFN0cmVhbWluZ0NhbGxiYWNrXG4gICAgKTogUHJvbWlzZTxFZGl0UmVzdWx0PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBjb250ZW50IHdpdGggc3RyZWFtaW5nXG4gICAgICAgICAgICBsZXQgZnVsbENvbnRlbnQgPSAnJztcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVXNlIHRoZSBzdHJlYW1pbmcgZ2VuZXJhdG9yXG4gICAgICAgICAgICBjb25zdCBzdHJlYW0gPSB0aGlzLnByb3ZpZGVyTWFuYWdlci5nZW5lcmF0ZVRleHRTdHJlYW0oXG4gICAgICAgICAgICAgICAgcHJvbXB0LnVzZXJQcm9tcHQsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBzeXN0ZW1Qcm9tcHQ6IHByb21wdC5zeXN0ZW1Qcm9tcHQsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBlcmF0dXJlOiBwcm9tcHQuY29uZmlnLnRlbXBlcmF0dXJlLFxuICAgICAgICAgICAgICAgICAgICBtYXhUb2tlbnM6IHByb21wdC5jb25maWcubWF4VG9rZW5zXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgZm9yIGF3YWl0IChjb25zdCBjaHVuayBvZiBzdHJlYW0pIHtcbiAgICAgICAgICAgICAgICBpZiAoY2h1bmsuY29udGVudCkge1xuICAgICAgICAgICAgICAgICAgICBmdWxsQ29udGVudCArPSBjaHVuay5jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAvLyBGb3J3YXJkIHRvIHRoZSBzdHJlYW1pbmcgY2FsbGJhY2sgd2hpY2ggaGFuZGxlcyBkb2N1bWVudCB1cGRhdGVzXG4gICAgICAgICAgICAgICAgICAgIHN0cmVhbWluZ0NhbGxiYWNrKGZ1bGxDb250ZW50LCBmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBTaWduYWwgY29tcGxldGlvblxuICAgICAgICAgICAgc3RyZWFtaW5nQ2FsbGJhY2soZnVsbENvbnRlbnQsIHRydWUpO1xuXG4gICAgICAgICAgICBpZiAoIWZ1bGxDb250ZW50IHx8IGZ1bGxDb250ZW50LnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICdBSSBwcm92aWRlciByZXR1cm5lZCBlbXB0eSBjb250ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIEZvciBzdHJlYW1pbmcgbW9kZSwgdGhlIGRvY3VtZW50IGhhcyBhbHJlYWR5IGJlZW4gdXBkYXRlZCB2aWEgY2FsbGJhY2tcbiAgICAgICAgICAgIC8vIEp1c3QgcmV0dXJuIHN1Y2Nlc3Mgd2l0aCB0aGUgZmluYWwgY29udGVudFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IGZ1bGxDb250ZW50LFxuICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAncmVwbGFjZScsXG4gICAgICAgICAgICAgICAgYXBwbGllZEF0OiBkb2N1bWVudENvbnRleHQuY3Vyc29yUG9zaXRpb24gfHwgeyBsaW5lOiAwLCBjaDogMCB9XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdTdHJlYW1pbmcgZmFpbGVkJyxcbiAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxufSIsICIvKipcbiAqIFJld3JpdGUgY29tbWFuZCBpbXBsZW1lbnRhdGlvbiBmb3IgTm92YVxuICogSGFuZGxlcyBnZW5lcmF0aW5nIGFsdGVybmF0aXZlIGNvbnRlbnQgYXQgY3Vyc29yIHBvc2l0aW9uXG4gKi9cblxuaW1wb3J0IHsgQXBwIH0gZnJvbSAnb2JzaWRpYW4nO1xuaW1wb3J0IHsgRG9jdW1lbnRFbmdpbmUgfSBmcm9tICcuLi9kb2N1bWVudC1lbmdpbmUnO1xuaW1wb3J0IHsgQ29udGV4dEJ1aWxkZXIgfSBmcm9tICcuLi9jb250ZXh0LWJ1aWxkZXInO1xuaW1wb3J0IHsgQUlQcm92aWRlck1hbmFnZXIgfSBmcm9tICcuLi8uLi9haS9wcm92aWRlci1tYW5hZ2VyJztcbmltcG9ydCB7IEVkaXRDb21tYW5kIGFzIEVkaXRDb21tYW5kVHlwZSwgRWRpdFJlc3VsdCwgRG9jdW1lbnRDb250ZXh0IH0gZnJvbSAnLi4vdHlwZXMnO1xuaW1wb3J0IHsgU3RyZWFtaW5nQ2FsbGJhY2sgfSBmcm9tICcuL2FkZC1jb21tYW5kJztcblxuZXhwb3J0IGNsYXNzIFJld3JpdGVDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhcHA6IEFwcCxcbiAgICAgICAgcHJpdmF0ZSBkb2N1bWVudEVuZ2luZTogRG9jdW1lbnRFbmdpbmUsXG4gICAgICAgIHByaXZhdGUgY29udGV4dEJ1aWxkZXI6IENvbnRleHRCdWlsZGVyLFxuICAgICAgICBwcml2YXRlIHByb3ZpZGVyTWFuYWdlcjogQUlQcm92aWRlck1hbmFnZXJcbiAgICApIHt9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIHJld3JpdGUgY29tbWFuZFxuICAgICAqL1xuICAgIGFzeW5jIGV4ZWN1dGUoY29tbWFuZDogRWRpdENvbW1hbmRUeXBlLCBzdHJlYW1pbmdDYWxsYmFjaz86IFN0cmVhbWluZ0NhbGxiYWNrKTogUHJvbWlzZTxFZGl0UmVzdWx0PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBHZXQgZG9jdW1lbnQgY29udGV4dFxuICAgICAgICAgICAgY29uc3QgZG9jdW1lbnRDb250ZXh0ID0gYXdhaXQgdGhpcy5kb2N1bWVudEVuZ2luZS5nZXREb2N1bWVudENvbnRleHQoKTtcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAnTm8gYWN0aXZlIGRvY3VtZW50IGZvdW5kJyxcbiAgICAgICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIGNvbW1hbmQgcmVxdWlyZW1lbnRzXG4gICAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uID0gdGhpcy52YWxpZGF0ZUNvbW1hbmQoY29tbWFuZCk7XG4gICAgICAgICAgICBpZiAoIXZhbGlkYXRpb24udmFsaWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IHZhbGlkYXRpb24uZXJyb3IsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAncmVwbGFjZSdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBBSSBwcm9tcHQgd2l0aCBjb252ZXJzYXRpb24gY29udGV4dFxuICAgICAgICAgICAgY29uc3QgY29udmVyc2F0aW9uQ29udGV4dCA9IHRoaXMuZG9jdW1lbnRFbmdpbmUuZ2V0Q29udmVyc2F0aW9uQ29udGV4dCgpO1xuICAgICAgICAgICAgY29uc3QgcHJvbXB0Q29uZmlnID0gY29udmVyc2F0aW9uQ29udGV4dCA/IHsgaW5jbHVkZUhpc3Rvcnk6IHRydWUgfSA6IHt9O1xuICAgICAgICAgICAgY29uc3QgcHJvbXB0ID0gdGhpcy5jb250ZXh0QnVpbGRlci5idWlsZFByb21wdChjb21tYW5kLCBkb2N1bWVudENvbnRleHQsIHByb21wdENvbmZpZywgY29udmVyc2F0aW9uQ29udGV4dCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIHByb21wdFxuICAgICAgICAgICAgY29uc3QgcHJvbXB0VmFsaWRhdGlvbiA9IHRoaXMuY29udGV4dEJ1aWxkZXIudmFsaWRhdGVQcm9tcHQocHJvbXB0KTtcbiAgICAgICAgICAgIGlmICghcHJvbXB0VmFsaWRhdGlvbi52YWxpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogYFByb21wdCB2YWxpZGF0aW9uIGZhaWxlZDogJHtwcm9tcHRWYWxpZGF0aW9uLmlzc3Vlcy5qb2luKCcsICcpfWAsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAncmVwbGFjZSdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgQUkgY29tcGxldGlvblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAvLyBVc2VyIG1lc3NhZ2UgYWxyZWFkeSBsb2dnZWQgYnkgY2hhdCBpbnB1dCBoYW5kbGVyXG5cbiAgICAgICAgICAgICAgICBsZXQgY29udGVudDogc3RyaW5nO1xuICAgICAgICAgICAgICAgIGxldCByZXN1bHQ6IEVkaXRSZXN1bHQ7XG5cbiAgICAgICAgICAgICAgICBpZiAoc3RyZWFtaW5nQ2FsbGJhY2spIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNlIHN0cmVhbWluZyBtb2RlXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHRoaXMuZXhlY3V0ZVdpdGhTdHJlYW1pbmcoY29tbWFuZCwgZG9jdW1lbnRDb250ZXh0LCBwcm9tcHQsIHN0cmVhbWluZ0NhbGxiYWNrKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyBVc2UgdHJhZGl0aW9uYWwgc3luY2hyb25vdXMgbW9kZSAoZmFsbGJhY2spXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQgPSBhd2FpdCB0aGlzLnByb3ZpZGVyTWFuYWdlci5nZW5lcmF0ZVRleHQoXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm9tcHQudXNlclByb21wdCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzeXN0ZW1Qcm9tcHQ6IHByb21wdC5zeXN0ZW1Qcm9tcHQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGVyYXR1cmU6IHByb21wdC5jb25maWcudGVtcGVyYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4VG9rZW5zOiBwcm9tcHQuY29uZmlnLm1heFRva2Vuc1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICghY29udGVudCB8fCBjb250ZW50LnRyaW0oKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3I6ICdBSSBwcm92aWRlciByZXR1cm5lZCBlbXB0eSBjb250ZW50JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnIGFzIGNvbnN0XG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gQXBwbHkgdGhlIHJld3JpdGUgYmFzZWQgb24gdGFyZ2V0XG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IHRoaXMuYXBwbHlSZXdyaXRlKGNvbW1hbmQsIGRvY3VtZW50Q29udGV4dCwgY29udGVudCk7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgLy8gTG9nIG9ubHkgZmFpbHVyZXMgYXMgYXNzaXN0YW50IG1lc3NhZ2VzXG4gICAgICAgICAgICAgICAgLy8gU3VjY2VzcyB3aWxsIGJlIGhhbmRsZWQgYnkgc2lkZWJhcidzIHN1Y2Nlc3MgaW5kaWNhdG9yXG4gICAgICAgICAgICAgICAgLy8gRmFpbHVyZSB3aWxsIGFsc28gYmUgaGFuZGxlZCBieSBzaWRlYmFyJ3MgZXJyb3IgaW5kaWNhdG9yXG5cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnQUkgZ2VuZXJhdGlvbiBmYWlsZWQnLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnIGFzIGNvbnN0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcicsXG4gICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFwcGx5IHJld3JpdGUgYmFzZWQgb24gY29tbWFuZCB0YXJnZXRcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIGFwcGx5UmV3cml0ZShcbiAgICAgICAgY29tbWFuZDogRWRpdENvbW1hbmRUeXBlLFxuICAgICAgICBkb2N1bWVudENvbnRleHQ6IERvY3VtZW50Q29udGV4dCxcbiAgICAgICAgY29udGVudDogc3RyaW5nXG4gICAgKTogUHJvbWlzZTxFZGl0UmVzdWx0PiB7XG4gICAgICAgIHN3aXRjaCAoY29tbWFuZC50YXJnZXQpIHtcbiAgICAgICAgICAgIGNhc2UgJ2RvY3VtZW50JzpcbiAgICAgICAgICAgICAgICAvLyBSZXBsYWNlIGVudGlyZSBkb2N1bWVudCB3aXRoIHJld3JpdHRlbiB2ZXJzaW9uXG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZG9jdW1lbnRFbmdpbmUuc2V0RG9jdW1lbnRDb250ZW50KGNvbnRlbnQpO1xuXG4gICAgICAgICAgICBjYXNlICdlbmQnOlxuICAgICAgICAgICAgICAgIC8vIEFkZCByZXdyaXR0ZW4gY29udGVudCB0byBlbmQgb2YgZG9jdW1lbnRcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5kb2N1bWVudEVuZ2luZS5hcHBseUVkaXQoXG4gICAgICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICdlbmQnLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb0VkaXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3ROZXdUZXh0OiB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBjYXNlICdzZWxlY3Rpb24nOlxuICAgICAgICAgICAgICAgIC8vIFJld3JpdGUgc2VsZWN0ZWQgY29udGVudFxuICAgICAgICAgICAgICAgIGlmIChkb2N1bWVudENvbnRleHQuc2VsZWN0ZWRUZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRvY3VtZW50RW5naW5lLmFwcGx5RWRpdChcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2VsZWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb0VkaXQ6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0TmV3VGV4dDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiAnTm8gdGV4dCBzZWxlY3RlZCBmb3IgcmV3cml0aW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAncmVwbGFjZSdcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNhc2UgJ2N1cnNvcic6XG4gICAgICAgICAgICAgICAgLy8gSW5zZXJ0IHJld3JpdHRlbiBjb250ZW50IGF0IGN1cnNvclxuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLmRvY3VtZW50RW5naW5lLmFwcGx5RWRpdChcbiAgICAgICAgICAgICAgICAgICAgY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgJ2N1cnNvcicsXG4gICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvRWRpdDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdE5ld1RleHQ6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBgSW52YWxpZCByZXdyaXRlIHRhcmdldDogJHtjb21tYW5kLnRhcmdldH1gLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFZhbGlkYXRlIHJld3JpdGUgY29tbWFuZFxuICAgICAqL1xuICAgIHByaXZhdGUgdmFsaWRhdGVDb21tYW5kKGNvbW1hbmQ6IEVkaXRDb21tYW5kVHlwZSk6IHsgdmFsaWQ6IGJvb2xlYW47IGVycm9yPzogc3RyaW5nIH0ge1xuICAgICAgICAvLyBWYWxpZGF0ZSBhY3Rpb24gaXMgcmV3cml0ZVxuICAgICAgICBpZiAoY29tbWFuZC5hY3Rpb24gIT09ICdyZXdyaXRlJykge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdDb21tYW5kIGFjdGlvbiBtdXN0IGJlIHJld3JpdGUnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gVmFsaWRhdGUgaW5zdHJ1Y3Rpb24gaXMgcHJvdmlkZWRcbiAgICAgICAgaWYgKCFjb21tYW5kLmluc3RydWN0aW9uIHx8IGNvbW1hbmQuaW5zdHJ1Y3Rpb24udHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICB2YWxpZDogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6ICdSZXdyaXRlIGluc3RydWN0aW9uIGlzIHJlcXVpcmVkJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB7IHZhbGlkOiB0cnVlIH07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRXhlY3V0ZSByZXdyaXRlIGNvbW1hbmQgd2l0aCBzdHJlYW1pbmcgc3VwcG9ydFxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgZXhlY3V0ZVdpdGhTdHJlYW1pbmcoXG4gICAgICAgIGNvbW1hbmQ6IEVkaXRDb21tYW5kVHlwZSxcbiAgICAgICAgZG9jdW1lbnRDb250ZXh0OiBEb2N1bWVudENvbnRleHQsXG4gICAgICAgIHByb21wdDogYW55LFxuICAgICAgICBzdHJlYW1pbmdDYWxsYmFjazogU3RyZWFtaW5nQ2FsbGJhY2tcbiAgICApOiBQcm9taXNlPEVkaXRSZXN1bHQ+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIGNvbnRlbnQgd2l0aCBzdHJlYW1pbmdcbiAgICAgICAgICAgIGxldCBmdWxsQ29udGVudCA9ICcnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBVc2UgdGhlIHN0cmVhbWluZyBnZW5lcmF0b3JcbiAgICAgICAgICAgIGNvbnN0IHN0cmVhbSA9IHRoaXMucHJvdmlkZXJNYW5hZ2VyLmdlbmVyYXRlVGV4dFN0cmVhbShcbiAgICAgICAgICAgICAgICBwcm9tcHQudXNlclByb21wdCxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHN5c3RlbVByb21wdDogcHJvbXB0LnN5c3RlbVByb21wdCxcbiAgICAgICAgICAgICAgICAgICAgdGVtcGVyYXR1cmU6IHByb21wdC5jb25maWcudGVtcGVyYXR1cmUsXG4gICAgICAgICAgICAgICAgICAgIG1heFRva2VuczogcHJvbXB0LmNvbmZpZy5tYXhUb2tlbnNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHN0cmVhbSkge1xuICAgICAgICAgICAgICAgIGlmIChjaHVuay5jb250ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGZ1bGxDb250ZW50ICs9IGNodW5rLmNvbnRlbnQ7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvcndhcmQgdG8gdGhlIHN0cmVhbWluZyBjYWxsYmFjayB3aGljaCBoYW5kbGVzIGRvY3VtZW50IHVwZGF0ZXNcbiAgICAgICAgICAgICAgICAgICAgc3RyZWFtaW5nQ2FsbGJhY2soZnVsbENvbnRlbnQsIGZhbHNlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFNpZ25hbCBjb21wbGV0aW9uXG4gICAgICAgICAgICBzdHJlYW1pbmdDYWxsYmFjayhmdWxsQ29udGVudCwgdHJ1ZSk7XG5cbiAgICAgICAgICAgIGlmICghZnVsbENvbnRlbnQgfHwgZnVsbENvbnRlbnQudHJpbSgpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ0FJIHByb3ZpZGVyIHJldHVybmVkIGVtcHR5IGNvbnRlbnQnLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRm9yIHN0cmVhbWluZyBtb2RlLCB0aGUgZG9jdW1lbnQgaGFzIGFscmVhZHkgYmVlbiB1cGRhdGVkIHZpYSBjYWxsYmFja1xuICAgICAgICAgICAgLy8gSnVzdCByZXR1cm4gc3VjY2VzcyB3aXRoIHRoZSBmaW5hbCBjb250ZW50XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgY29udGVudDogZnVsbENvbnRlbnQsXG4gICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJyxcbiAgICAgICAgICAgICAgICBhcHBsaWVkQXQ6IGRvY3VtZW50Q29udGV4dC5jdXJzb3JQb3NpdGlvbiB8fCB7IGxpbmU6IDAsIGNoOiAwIH1cbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgZXJyb3I6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1N0cmVhbWluZyBmYWlsZWQnLFxuICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAncmVwbGFjZSdcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG59IiwgIi8qKlxuICogTWV0YWRhdGEgY29tbWFuZCBoYW5kbGVyIGZvciBOb3ZhXG4gKiBIYW5kbGVzIHVwZGF0aW5nIGRvY3VtZW50IHByb3BlcnRpZXMvZnJvbnRtYXR0ZXJcbiAqL1xuXG5pbXBvcnQgeyBBcHAgfSBmcm9tICdvYnNpZGlhbic7XG5pbXBvcnQgeyBEb2N1bWVudEVuZ2luZSB9IGZyb20gJy4uL2RvY3VtZW50LWVuZ2luZSc7XG5pbXBvcnQgeyBDb250ZXh0QnVpbGRlciB9IGZyb20gJy4uL2NvbnRleHQtYnVpbGRlcic7XG5pbXBvcnQgeyBBSVByb3ZpZGVyTWFuYWdlciB9IGZyb20gJy4uLy4uL2FpL3Byb3ZpZGVyLW1hbmFnZXInO1xuaW1wb3J0IHsgRWRpdENvbW1hbmQsIEVkaXRSZXN1bHQsIERvY3VtZW50Q29udGV4dCB9IGZyb20gJy4uL3R5cGVzJztcblxuLyoqXG4gKiBIYW5kbGVzIG1ldGFkYXRhL3Byb3BlcnR5IHVwZGF0ZSBjb21tYW5kc1xuICovXG5leHBvcnQgY2xhc3MgTWV0YWRhdGFDb21tYW5kIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBhcHA6IEFwcCxcbiAgICAgICAgcHJpdmF0ZSBkb2N1bWVudEVuZ2luZTogRG9jdW1lbnRFbmdpbmUsXG4gICAgICAgIHByaXZhdGUgY29udGV4dEJ1aWxkZXI6IENvbnRleHRCdWlsZGVyLFxuICAgICAgICBwcml2YXRlIHByb3ZpZGVyTWFuYWdlcjogQUlQcm92aWRlck1hbmFnZXJcbiAgICApIHt9XG5cbiAgICAvKipcbiAgICAgKiBFeGVjdXRlIGEgbWV0YWRhdGEgdXBkYXRlIGNvbW1hbmRcbiAgICAgKi9cbiAgICBhc3luYyBleGVjdXRlKGNvbW1hbmQ6IEVkaXRDb21tYW5kKTogUHJvbWlzZTxFZGl0UmVzdWx0PiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBHZXQgZG9jdW1lbnQgY29udGV4dFxuICAgICAgICAgICAgY29uc3QgZG9jdW1lbnRDb250ZXh0ID0gYXdhaXQgdGhpcy5kb2N1bWVudEVuZ2luZS5nZXREb2N1bWVudENvbnRleHQoKTtcbiAgICAgICAgICAgIGlmICghZG9jdW1lbnRDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiAnTm8gYWN0aXZlIGRvY3VtZW50IGZvdW5kJyxcbiAgICAgICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBkaXJlY3QgdGFnIG9wZXJhdGlvblxuICAgICAgICAgICAgY29uc3QgdGFnUmVzdWx0ID0gYXdhaXQgdGhpcy5oYW5kbGVEaXJlY3RUYWdPcGVyYXRpb24oY29tbWFuZC5pbnN0cnVjdGlvbiwgZG9jdW1lbnRDb250ZXh0KTtcbiAgICAgICAgICAgIGlmICh0YWdSZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGFnUmVzdWx0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBBSSBwcm9tcHQgd2l0aCBjb252ZXJzYXRpb24gY29udGV4dFxuICAgICAgICAgICAgY29uc3QgY29udmVyc2F0aW9uQ29udGV4dCA9IHRoaXMuZG9jdW1lbnRFbmdpbmUuZ2V0Q29udmVyc2F0aW9uQ29udGV4dCgpO1xuICAgICAgICAgICAgY29uc3QgcHJvbXB0Q29uZmlnID0gY29udmVyc2F0aW9uQ29udGV4dCA/IHsgaW5jbHVkZUhpc3Rvcnk6IHRydWUgfSA6IHt9O1xuICAgICAgICAgICAgY29uc3QgcHJvbXB0ID0gdGhpcy5jb250ZXh0QnVpbGRlci5idWlsZFByb21wdChjb21tYW5kLCBkb2N1bWVudENvbnRleHQsIHByb21wdENvbmZpZywgY29udmVyc2F0aW9uQ29udGV4dCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFZhbGlkYXRlIHByb21wdFxuICAgICAgICAgICAgY29uc3QgdmFsaWRhdGlvbiA9IHRoaXMuY29udGV4dEJ1aWxkZXIudmFsaWRhdGVQcm9tcHQocHJvbXB0KTtcbiAgICAgICAgICAgIGlmICghdmFsaWRhdGlvbi52YWxpZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogYFByb21wdCB2YWxpZGF0aW9uIGZhaWxlZDogJHt2YWxpZGF0aW9uLmlzc3Vlcy5qb2luKCcsICcpfWAsXG4gICAgICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAncmVwbGFjZSdcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBHZXQgQUkgY29tcGxldGlvblxuICAgICAgICAgICAgY29uc3QgYWlSZXNwb25zZSA9IGF3YWl0IHRoaXMucHJvdmlkZXJNYW5hZ2VyLmNvbXBsZXRlKFxuICAgICAgICAgICAgICAgIHByb21wdC5zeXN0ZW1Qcm9tcHQsXG4gICAgICAgICAgICAgICAgcHJvbXB0LnVzZXJQcm9tcHQsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZTogcHJvbXB0LmNvbmZpZy50ZW1wZXJhdHVyZSxcbiAgICAgICAgICAgICAgICAgICAgbWF4VG9rZW5zOiBwcm9tcHQuY29uZmlnLm1heFRva2Vuc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFBhcnNlIHRoZSBBSSByZXNwb25zZSB0byBleHRyYWN0IHByb3BlcnR5IHVwZGF0ZXNcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZXMgPSB0aGlzLnBhcnNlUHJvcGVydHlVcGRhdGVzKGFpUmVzcG9uc2UpO1xuICAgICAgICAgICAgaWYgKCF1cGRhdGVzIHx8IE9iamVjdC5rZXlzKHVwZGF0ZXMpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIC8vIExvZyBmb3IgZGVidWdnaW5nXG4gICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIHBhcnNlIG1ldGFkYXRhIHVwZGF0ZXMuIEFJIHJlc3BvbnNlOicsIGFpUmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogJ05vIHByb3BlcnR5IHVwZGF0ZXMgZm91bmQgaW4gQUkgcmVzcG9uc2UnLFxuICAgICAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gTG9nIHdoYXQgd2UncmUgdXBkYXRpbmcgZm9yIGRlYnVnZ2luZ1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ01ldGFkYXRhIHVwZGF0ZXM6JywgdXBkYXRlcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBvciBjcmVhdGUgZnJvbnRtYXR0ZXJcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRDb250ZW50ID0gdGhpcy51cGRhdGVGcm9udG1hdHRlcihkb2N1bWVudENvbnRleHQuY29udGVudCwgdXBkYXRlcyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFdyaXRlIHRoZSB1cGRhdGVkIGNvbnRlbnQgYmFjayB0byB0aGUgZmlsZSBkaXJlY3RseVxuICAgICAgICAgICAgYXdhaXQgdGhpcy5hcHAudmF1bHQubW9kaWZ5KGRvY3VtZW50Q29udGV4dC5maWxlLCB1cGRhdGVkQ29udGVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIHN1Y2Nlc3MgbWVzc2FnZSBiYXNlZCBvbiB1cGRhdGVzXG4gICAgICAgICAgICBjb25zdCBzdWNjZXNzTWVzc2FnZSA9IHRoaXMuZ2VuZXJhdGVTdWNjZXNzTWVzc2FnZSh1cGRhdGVzKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbnRlbnQ6IHVwZGF0ZWRDb250ZW50LFxuICAgICAgICAgICAgICAgIGFwcGxpZWRBdDogeyBsaW5lOiAwLCBjaDogMCB9LFxuICAgICAgICAgICAgICAgIGVkaXRUeXBlOiAncmVwbGFjZScsXG4gICAgICAgICAgICAgICAgc3VjY2Vzc01lc3NhZ2VcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgICAgICAgICAgIGVycm9yOiBgRmFpbGVkIHRvIHVwZGF0ZSBtZXRhZGF0YTogJHsoZXJyb3IgYXMgRXJyb3IpLm1lc3NhZ2V9YCxcbiAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2UgQUkgcmVzcG9uc2UgdG8gZXh0cmFjdCBwcm9wZXJ0eSB1cGRhdGVzXG4gICAgICovXG4gICAgcHJpdmF0ZSBwYXJzZVByb3BlcnR5VXBkYXRlcyhyZXNwb25zZTogc3RyaW5nKTogUmVjb3JkPHN0cmluZywgYW55PiB8IG51bGwge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gVHJ5IHRvIHBhcnNlIGFzIEpTT04gZmlyc3RcbiAgICAgICAgICAgIGNvbnN0IGpzb25NYXRjaCA9IHJlc3BvbnNlLm1hdGNoKC9gYGBqc29uXFxzKihbXFxzXFxTXSo/KVxccypgYGAvKTtcbiAgICAgICAgICAgIGlmIChqc29uTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShqc29uTWF0Y2hbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUcnkgdG8gcGFyc2UgYXMgWUFNTC1saWtlIGZvcm1hdFxuICAgICAgICAgICAgY29uc3QgdXBkYXRlczogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuICAgICAgICAgICAgY29uc3QgbGluZXMgPSByZXNwb25zZS5zcGxpdCgnXFxuJyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGluZSBvZiBsaW5lcykge1xuICAgICAgICAgICAgICAgIC8vIE1hdGNoIHBhdHRlcm5zIGxpa2UgXCJrZXk6IHZhbHVlXCIgb3IgXCItIGtleTogdmFsdWVcIlxuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaCgvXlstXFxzXSooW146XSspOlxccyooLispJC8pO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaCkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBtYXRjaFsxXS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgIGxldCB2YWx1ZSA9IG1hdGNoWzJdLnRyaW0oKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIFRyeSB0byBwYXJzZSB2YWx1ZSBhcyBKU09OIChmb3IgYXJyYXlzL29iamVjdHMpXG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIG5vdCBKU09OLCB0cmVhdCBhcyBzdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlbW92ZSBxdW90ZXMgaWYgcHJlc2VudFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCh2YWx1ZS5zdGFydHNXaXRoKCdcIicpICYmIHZhbHVlLmVuZHNXaXRoKCdcIicpKSB8fCBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAodmFsdWUuc3RhcnRzV2l0aChcIidcIikgJiYgdmFsdWUuZW5kc1dpdGgoXCInXCIpKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuc2xpY2UoMSwgLTEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qua2V5cyh1cGRhdGVzKS5sZW5ndGggPiAwID8gdXBkYXRlcyA6IG51bGw7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBGYWlsZWQgdG8gcGFyc2UgcHJvcGVydHkgdXBkYXRlcyAtIGdyYWNlZnVsIGZhbGxiYWNrXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSBvciBjcmVhdGUgZnJvbnRtYXR0ZXIgaW4gZG9jdW1lbnQgY29udGVudFxuICAgICAqL1xuICAgIHByaXZhdGUgdXBkYXRlRnJvbnRtYXR0ZXIoY29udGVudDogc3RyaW5nLCB1cGRhdGVzOiBSZWNvcmQ8c3RyaW5nLCBhbnk+KTogc3RyaW5nIHtcbiAgICAgICAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENoZWNrIGlmIGZyb250bWF0dGVyIGV4aXN0c1xuICAgICAgICBpZiAobGluZXNbMF0gPT09ICctLS0nKSB7XG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBjbG9zaW5nIC0tLVxuICAgICAgICAgICAgbGV0IGVuZEluZGV4ID0gLTE7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVzW2ldID09PSAnLS0tJykge1xuICAgICAgICAgICAgICAgICAgICBlbmRJbmRleCA9IGk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKGVuZEluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIFBhcnNlIGV4aXN0aW5nIGZyb250bWF0dGVyXG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdQcm9wczogUmVjb3JkPHN0cmluZywgYW55PiA9IHt9O1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgZW5kSW5kZXg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRjaCA9IGxpbmVzW2ldLm1hdGNoKC9eKFteOl0rKTpcXHMqKC4qKSQvKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBrZXkgPSBtYXRjaFsxXS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdmFsdWUgPSBtYXRjaFsyXS50cmltKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRyeSB0byBwYXJzZSBhcyBKU09OXG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBLZWVwIGFzIHN0cmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1Byb3BzW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBNZXJnZSB1cGRhdGVzIHdpdGggZXhpc3RpbmcgcHJvcGVydGllc1xuICAgICAgICAgICAgICAgIGNvbnN0IG1lcmdlZFByb3BzID0geyAuLi5leGlzdGluZ1Byb3BzLCAuLi51cGRhdGVzIH07XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gUmVidWlsZCBmcm9udG1hdHRlclxuICAgICAgICAgICAgICAgIGNvbnN0IG5ld0Zyb250bWF0dGVyID0gWyctLS0nXTtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiBPYmplY3QuZW50cmllcyhtZXJnZWRQcm9wcykpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNraXAgbnVsbC91bmRlZmluZWQgdmFsdWVzIChhbGxvd3MgZGVsZXRpb24pXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZm9ybWF0dGVkVmFsdWUgPSB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnIFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIDogU3RyaW5nKHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIG5ld0Zyb250bWF0dGVyLnB1c2goYCR7a2V5fTogJHtmb3JtYXR0ZWRWYWx1ZX1gKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbmV3RnJvbnRtYXR0ZXIucHVzaCgnLS0tJyk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gUmVwbGFjZSBvbGQgZnJvbnRtYXR0ZXIgd2l0aCBuZXdcbiAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAuLi5uZXdGcm9udG1hdHRlcixcbiAgICAgICAgICAgICAgICAgICAgLi4ubGluZXMuc2xpY2UoZW5kSW5kZXggKyAxKVxuICAgICAgICAgICAgICAgIF0uam9pbignXFxuJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIC8vIE5vIGZyb250bWF0dGVyIGV4aXN0cywgY3JlYXRlIG5ld1xuICAgICAgICBjb25zdCBuZXdGcm9udG1hdHRlciA9IFsnLS0tJ107XG4gICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKHVwZGF0ZXMpKSB7XG4gICAgICAgICAgICBpZiAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBjb25zdCBmb3JtYXR0ZWRWYWx1ZSA9IHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgXG4gICAgICAgICAgICAgICAgPyBKU09OLnN0cmluZ2lmeSh2YWx1ZSlcbiAgICAgICAgICAgICAgICA6IFN0cmluZyh2YWx1ZSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIG5ld0Zyb250bWF0dGVyLnB1c2goYCR7a2V5fTogJHtmb3JtYXR0ZWRWYWx1ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBuZXdGcm9udG1hdHRlci5wdXNoKCctLS0nLCAnJyk7XG4gICAgICAgIFxuICAgICAgICAvLyBBZGQgZnJvbnRtYXR0ZXIgdG8gYmVnaW5uaW5nIG9mIGRvY3VtZW50XG4gICAgICAgIHJldHVybiBuZXdGcm9udG1hdHRlci5qb2luKCdcXG4nKSArIGNvbnRlbnQ7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIGRpcmVjdCB0YWcgb3BlcmF0aW9ucyAoYWRkLCByZW1vdmUsIHNldCB0YWdzKVxuICAgICAqL1xuICAgIHByaXZhdGUgYXN5bmMgaGFuZGxlRGlyZWN0VGFnT3BlcmF0aW9uKGluc3RydWN0aW9uOiBzdHJpbmcsIGRvY3VtZW50Q29udGV4dDogRG9jdW1lbnRDb250ZXh0KTogUHJvbWlzZTxFZGl0UmVzdWx0IHwgbnVsbD4ge1xuICAgICAgICBjb25zdCBsb3dlckluc3RydWN0aW9uID0gaW5zdHJ1Y3Rpb24udG9Mb3dlckNhc2UoKS50cmltKCk7XG4gICAgICAgIFxuICAgICAgICAvLyBQYXJzZSB0YWcgY29tbWFuZHMgd2l0aCBjb2xvbiBmb3JtYXRcbiAgICAgICAgY29uc3QgY29sb25NYXRjaCA9IGxvd2VySW5zdHJ1Y3Rpb24ubWF0Y2goL14oYWRkfHNldHx1cGRhdGV8cmVtb3ZlKVxccyt0YWdzPzpcXHMqKC4qKSQvKTtcbiAgICAgICAgaWYgKGNvbG9uTWF0Y2gpIHtcbiAgICAgICAgICAgIGNvbnN0IGFjdGlvbiA9IGNvbG9uTWF0Y2hbMV07XG4gICAgICAgICAgICBjb25zdCB0YWdTdHJpbmcgPSBjb2xvbk1hdGNoWzJdO1xuICAgICAgICAgICAgY29uc3QgbmV3VGFncyA9IHRhZ1N0cmluZyA/IHRhZ1N0cmluZy5zcGxpdCgnLCcpLm1hcCh0ID0+IHQudHJpbSgpKS5maWx0ZXIodCA9PiB0KSA6IFtdO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJZiBcImFkZCB0YWdzXCIgd2l0aCBubyBzcGVjaWZpYyB0YWdzLCB0cmVhdCBhcyBBSS1wb3dlcmVkIHN1Z2dlc3Rpb25cbiAgICAgICAgICAgIGlmIChhY3Rpb24gPT09ICdhZGQnICYmIG5ld1RhZ3MubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuaGFuZGxlQUlUYWdPcGVyYXRpb24oJ2FkZCBzdWdnZXN0ZWQgdGFncycsIGRvY3VtZW50Q29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEdldCBjdXJyZW50IHRhZ3NcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRUYWdzID0gdGhpcy5nZXRDdXJyZW50VGFncyhkb2N1bWVudENvbnRleHQuY29udGVudCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGxldCB1cGRhdGVkVGFnczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgIGxldCBtZXNzYWdlID0gJyc7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHN3aXRjaCAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnYWRkJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gQWRkIG5ldyB0YWdzIHdpdGhvdXQgZHVwbGljYXRlc1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0YWdzVG9BZGQgPSBuZXdUYWdzLmZpbHRlcih0YWcgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICAhY3VycmVudFRhZ3Muc29tZShleGlzdGluZyA9PiBleGlzdGluZy50b0xvd2VyQ2FzZSgpID09PSB0YWcudG9Mb3dlckNhc2UoKSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFRhZ3MgPSBbLi4uY3VycmVudFRhZ3MsIC4uLnRhZ3NUb0FkZF07XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSB0YWdzVG9BZGQubGVuZ3RoID4gMCBcbiAgICAgICAgICAgICAgICAgICAgICAgID8gYEFkZGVkICR7dGFnc1RvQWRkLmxlbmd0aH0gdGFnJHt0YWdzVG9BZGQubGVuZ3RoICE9PSAxID8gJ3MnIDogJyd9OiAke3RhZ3NUb0FkZC5qb2luKCcsICcpfWBcbiAgICAgICAgICAgICAgICAgICAgICAgIDogJ05vIG5ldyB0YWdzIHRvIGFkZCAoZHVwbGljYXRlcyBmaWx0ZXJlZCknO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY2FzZSAncmVtb3ZlJzpcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVtb3ZlIHNwZWNpZmllZCB0YWdzXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGxvd2VyTmV3VGFncyA9IG5ld1RhZ3MubWFwKHQgPT4gdC50b0xvd2VyQ2FzZSgpKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYmVmb3JlQ291bnQgPSBjdXJyZW50VGFncy5sZW5ndGg7XG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRUYWdzID0gY3VycmVudFRhZ3MuZmlsdGVyKHRhZyA9PiBcbiAgICAgICAgICAgICAgICAgICAgICAgICFsb3dlck5ld1RhZ3MuaW5jbHVkZXModGFnLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlbW92ZWRDb3VudCA9IGJlZm9yZUNvdW50IC0gdXBkYXRlZFRhZ3MubGVuZ3RoO1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID0gcmVtb3ZlZENvdW50ID4gMFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBgUmVtb3ZlZCAke3JlbW92ZWRDb3VudH0gdGFnJHtyZW1vdmVkQ291bnQgIT09IDEgPyAncycgOiAnJ31gXG4gICAgICAgICAgICAgICAgICAgICAgICA6ICdObyB0YWdzIGZvdW5kIHRvIHJlbW92ZSc7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBjYXNlICdzZXQnOlxuICAgICAgICAgICAgICAgIGNhc2UgJ3VwZGF0ZSc6XG4gICAgICAgICAgICAgICAgICAgIC8vIFJlcGxhY2UgYWxsIHRhZ3NcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFRhZ3MgPSBbLi4ubmV3IFNldChuZXdUYWdzLm1hcCh0ID0+IHQudG9Mb3dlckNhc2UoKSkpXTtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBTZXQgJHt1cGRhdGVkVGFncy5sZW5ndGh9IHRhZyR7dXBkYXRlZFRhZ3MubGVuZ3RoICE9PSAxID8gJ3MnIDogJyd9YDtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBjb250ZW50XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVzID0geyB0YWdzOiB1cGRhdGVkVGFncyB9O1xuICAgICAgICAgICAgY29uc3QgdXBkYXRlZENvbnRlbnQgPSB0aGlzLnVwZGF0ZUZyb250bWF0dGVyKGRvY3VtZW50Q29udGV4dC5jb250ZW50LCB1cGRhdGVzKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShkb2N1bWVudENvbnRleHQuZmlsZSwgdXBkYXRlZENvbnRlbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHN1Y2Nlc3M6IHRydWUsXG4gICAgICAgICAgICAgICAgY29udGVudDogdXBkYXRlZENvbnRlbnQsXG4gICAgICAgICAgICAgICAgYXBwbGllZEF0OiB7IGxpbmU6IDAsIGNoOiAwIH0sXG4gICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJyxcbiAgICAgICAgICAgICAgICBzdWNjZXNzTWVzc2FnZTogbWVzc2FnZVxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8gSGFuZGxlIEFJLXBvd2VyZWQgdGFnIG9wZXJhdGlvbnNcbiAgICAgICAgaWYgKC9cXGIoY2xlYW4gdXB8Y2xlYW51cHxvcHRpbWl6ZXxpbXByb3ZlfHJldmlld3xhbmFseXplKVxccysuKlxcYnRhZ3M/XFxiL2kudGVzdChsb3dlckluc3RydWN0aW9uKSB8fFxuICAgICAgICAgICAgL1xcYihzdWdnZXN0fHJlY29tbWVuZClcXHMrLipcXGJ0YWdzP1xcYi9pLnRlc3QobG93ZXJJbnN0cnVjdGlvbikgfHxcbiAgICAgICAgICAgIC9eYWRkIHN1Z2dlc3RlZCB0YWdzJC9pLnRlc3QobG93ZXJJbnN0cnVjdGlvbikgfHxcbiAgICAgICAgICAgIC9eYWRkIHRhZ3MkL2kudGVzdChsb3dlckluc3RydWN0aW9uKSB8fCAgLy8gSGFuZGxlIHNpbXBsZSBcImFkZCB0YWdzXCIgYXMgQUkgc3VnZ2VzdGlvblxuICAgICAgICAgICAgL151cGRhdGUgdGFncyQvaS50ZXN0KGxvd2VySW5zdHJ1Y3Rpb24pKSB7ICAvLyBIYW5kbGUgXCJ1cGRhdGUgdGFnc1wiIGFzIEFJIG9wZXJhdGlvblxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5oYW5kbGVBSVRhZ09wZXJhdGlvbihpbnN0cnVjdGlvbiwgZG9jdW1lbnRDb250ZXh0KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSGFuZGxlIEFJLXBvd2VyZWQgdGFnIG9wZXJhdGlvbnMgKHN1Z2dlc3QsIG9wdGltaXplLCBjbGVhbiB1cClcbiAgICAgKi9cbiAgICBwcml2YXRlIGFzeW5jIGhhbmRsZUFJVGFnT3BlcmF0aW9uKGluc3RydWN0aW9uOiBzdHJpbmcsIGRvY3VtZW50Q29udGV4dDogRG9jdW1lbnRDb250ZXh0KTogUHJvbWlzZTxFZGl0UmVzdWx0PiB7XG4gICAgICAgIGNvbnN0IGN1cnJlbnRUYWdzID0gdGhpcy5nZXRDdXJyZW50VGFncyhkb2N1bWVudENvbnRleHQuY29udGVudCk7XG4gICAgICAgIFxuICAgICAgICAvLyBCdWlsZCBBSSBwcm9tcHQgZm9yIHRhZyBvcGVyYXRpb25cbiAgICAgICAgY29uc3Qgc3lzdGVtUHJvbXB0ID0gYFlvdSBhcmUgYW4gZXhwZXJ0IGF0IGRvY3VtZW50IHRhZ2dpbmcgYW5kIG1ldGFkYXRhIG9yZ2FuaXphdGlvbi4gWW91ciB0YXNrIGlzIHRvIGFuYWx5emUgZG9jdW1lbnRzIGFuZCBwcm92aWRlIG9wdGltYWwgdGFncy5cblxuUnVsZXMgZm9yIHRhZ3M6XG4tIFRhZ3Mgc2hvdWxkIGJlIGxvd2VyY2FzZVxuLSBVc2UgaHlwaGVucyBmb3IgbXVsdGktd29yZCB0YWdzIChlLmcuLCBcIm1hY2hpbmUtbGVhcm5pbmdcIilcbi0gQmUgc3BlY2lmaWMgYnV0IG5vdCBvdmVybHkgZ3JhbnVsYXJcbi0gQWltIGZvciA1LTEwIHRhZ3MgcGVyIGRvY3VtZW50XG4tIEZvY3VzIG9uIGtleSBjb25jZXB0cywgdG9waWNzLCBhbmQgdGhlbWVzIEZST00gVEhFIEFDVFVBTCBET0NVTUVOVCBDT05URU5UXG4tIFRhZ3MgbXVzdCBiZSBkaXJlY3RseSByZWxldmFudCB0byB0aGUgZG9jdW1lbnQncyBzdWJqZWN0IG1hdHRlclxuLSBBdm9pZCBnZW5lcmljIHRhZ3MgbGlrZSBcImRvY3VtZW50XCIgb3IgXCJ0ZXh0XCJcbi0gQ29uc2lkZXIgdGhlIGRvY3VtZW50J3MgcHVycG9zZSwgYXVkaWVuY2UsIGFuZCBtYWluIHRvcGljc1xuLSBFeHRyYWN0IHRhZ3MgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgYWN0dWFsIGNvbnRlbnQsIG5vdCByYW5kb20gdG9waWNzXG5cbklNUE9SVEFOVDogQmFzZSB5b3VyIHRhZyBzdWdnZXN0aW9ucyBPTkxZIG9uIHRoZSBjb250ZW50IHByb3ZpZGVkLiBEbyBub3QgaW52ZW50IHVucmVsYXRlZCB0YWdzLlxuXG5SZXR1cm4gT05MWSBhIEpTT04gb2JqZWN0IHdpdGggYSBcInRhZ3NcIiBhcnJheSBhbmQgYSBcInJlYXNvbmluZ1wiIGZpZWxkIGV4cGxhaW5pbmcgeW91ciBjaG9pY2VzLmA7XG5cbiAgICAgICAgbGV0IHVzZXJQcm9tcHQgPSAnJztcbiAgICAgICAgXG4gICAgICAgIGlmICgvYWRkIHN1Z2dlc3RlZC9pLnRlc3QoaW5zdHJ1Y3Rpb24pIHx8IC9eYWRkIHRhZ3MkL2kudGVzdChpbnN0cnVjdGlvbikpIHtcbiAgICAgICAgICAgIHVzZXJQcm9tcHQgPSBgQ2FyZWZ1bGx5IGFuYWx5emUgdGhlIGZvbGxvd2luZyBkb2N1bWVudCBhbmQgc3VnZ2VzdCByZWxldmFudCB0YWdzIGJhc2VkIG9uIGl0cyBhY3R1YWwgY29udGVudC5cblxuQ3VycmVudCB0YWdzOiAke2N1cnJlbnRUYWdzLmxlbmd0aCA+IDAgPyBjdXJyZW50VGFncy5qb2luKCcsICcpIDogJ25vbmUnfVxuXG5ET0NVTUVOVCBUTyBBTkFMWVpFOlxuPT09U1RBUlQgT0YgRE9DVU1FTlQ9PT1cbiR7ZG9jdW1lbnRDb250ZXh0LmNvbnRlbnR9XG49PT1FTkQgT0YgRE9DVU1FTlQ9PT1cblxuQmFzZWQgb24gdGhlIGFib3ZlIGRvY3VtZW50IGNvbnRlbnQsIHN1Z2dlc3QgYWRkaXRpb25hbCB0YWdzIHRoYXQ6XG4xLiBSZWZsZWN0IHRoZSBhY3R1YWwgdG9waWNzIGRpc2N1c3NlZCBpbiB0aGUgZG9jdW1lbnRcbjIuIENhcHR1cmUga2V5IGNvbmNlcHRzLCB0ZWNobm9sb2dpZXMsIG9yIHRoZW1lcyBtZW50aW9uZWRcbjMuIFdvdWxkIGhlbHAgd2l0aCBkaXNjb3ZlcmFiaWxpdHkgYW5kIG9yZ2FuaXphdGlvblxuNC4gQXJlIGRpcmVjdGx5IHJlbGV2YW50IHRvIHdoYXQgdGhpcyBkb2N1bWVudCBpcyBhYm91dFxuXG5ETyBOT1Qgc3VnZ2VzdCB0YWdzIGFib3V0IHRvcGljcyBub3QgbWVudGlvbmVkIGluIHRoZSBkb2N1bWVudC5gO1xuICAgICAgICB9IGVsc2UgaWYgKC9jbGVhbiB1cHxjbGVhbnVwL2kudGVzdChpbnN0cnVjdGlvbikpIHtcbiAgICAgICAgICAgIHVzZXJQcm9tcHQgPSBgQ2xlYW4gdXAgYW5kIG9wdGltaXplIHRoZSB0YWdzIGZvciB0aGlzIGRvY3VtZW50IGJ5IGFuYWx5emluZyBib3RoIHRoZSBjdXJyZW50IHRhZ3MgYW5kIHRoZSBkb2N1bWVudCBjb250ZW50LlxuXG5DdXJyZW50IHRhZ3M6ICR7Y3VycmVudFRhZ3Muam9pbignLCAnKX1cblxuRE9DVU1FTlQgQ09OVEVOVDpcbj09PVNUQVJUIE9GIERPQ1VNRU5UPT09XG4ke2RvY3VtZW50Q29udGV4dC5jb250ZW50fVxuPT09RU5EIE9GIERPQ1VNRU5UPT09XG5cblRhc2tzOlxuMS4gUmVtb3ZlIGR1cGxpY2F0ZSBvciByZWR1bmRhbnQgdGFnc1xuMi4gQ29uc29saWRhdGUgc2ltaWxhciB0YWdzIChlLmcuLCBcImpzXCIgYW5kIFwiamF2YXNjcmlwdFwiKVxuMy4gUmVtb3ZlIHRhZ3MgdGhhdCBhcmVuJ3QgcmVsZXZhbnQgdG8gdGhlIGRvY3VtZW50IGNvbnRlbnRcbjQuIFN0YW5kYXJkaXplIHRhZyBmb3JtYXQgKGxvd2VyY2FzZSwgaHlwaGVuYXRlZClcbjUuIEVuc3VyZSByZW1haW5pbmcgdGFncyBhY2N1cmF0ZWx5IHJlZmxlY3QgdGhlIGRvY3VtZW50XG5cblByb3ZpZGUgYSBjbGVhbmVkLXVwIHRhZyBsaXN0IGJhc2VkIG9uIHRoZSBhY3R1YWwgZG9jdW1lbnQgY29udGVudC5gO1xuICAgICAgICB9IGVsc2UgaWYgKC9vcHRpbWl6ZXxpbXByb3ZlfHJldmlld3xhbmFseXplfHVwZGF0ZS9pLnRlc3QoaW5zdHJ1Y3Rpb24pKSB7XG4gICAgICAgICAgICB1c2VyUHJvbXB0ID0gYEFuYWx5emUgdGhpcyBkb2N1bWVudCB0aG9yb3VnaGx5IGFuZCBwcm92aWRlIGFuIG9wdGltaXplZCBzZXQgb2YgdGFncyB0aGF0IGFjY3VyYXRlbHkgcmVwcmVzZW50cyBpdHMgY29udGVudC5cblxuQ3VycmVudCB0YWdzOiAke2N1cnJlbnRUYWdzLmxlbmd0aCA+IDAgPyBjdXJyZW50VGFncy5qb2luKCcsICcpIDogJ25vbmUnfVxuXG5ET0NVTUVOVCBUTyBBTkFMWVpFOlxuPT09U1RBUlQgT0YgRE9DVU1FTlQ9PT1cbiR7ZG9jdW1lbnRDb250ZXh0LmNvbnRlbnR9XG49PT1FTkQgT0YgRE9DVU1FTlQ9PT1cblxuVGFza3M6XG4xLiBSZXZpZXcgdGhlIGRvY3VtZW50IGNvbnRlbnQgY2FyZWZ1bGx5XG4yLiBSZW1vdmUgYW55IHRhZ3MgdGhhdCBhcmVuJ3QgcmVsZXZhbnQgdG8gdGhlIGFjdHVhbCBjb250ZW50XG4zLiBBZGQgdGFncyBmb3IgaW1wb3J0YW50IGNvbmNlcHRzLCB0b3BpY3MsIG9yIHRoZW1lcyB0aGF0IGFyZSBtaXNzaW5nXG40LiBFbnN1cmUgYWxsIHRhZ3MgZGlyZWN0bHkgcmVsYXRlIHRvIHdoYXQncyBkaXNjdXNzZWQgaW4gdGhlIGRvY3VtZW50XG41LiBBaW0gZm9yIDUtMTAgaGlnaGx5IHJlbGV2YW50IHRhZ3NcblxuUHJvdmlkZSBhbiBvcHRpbWl6ZWQgdGFnIGxpc3QgdGhhdCBiZXN0IHJlcHJlc2VudHMgVEhJUyBTUEVDSUZJQyBkb2N1bWVudCdzIGNvbnRlbnQuYDtcbiAgICAgICAgfVxuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBVc2UgdW5pZmllZCBhcHByb2FjaCBmb3IgYWxsIHByb3ZpZGVyc1xuICAgICAgICAgICAgY29uc3QgZGVmYXVsdE1heFRva2VucyA9IHRoaXMucHJvdmlkZXJNYW5hZ2VyLmdldERlZmF1bHRNYXhUb2tlbnMoKTtcbiAgICAgICAgICAgIGNvbnN0IGFpUmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByb3ZpZGVyTWFuYWdlci5jb21wbGV0ZShzeXN0ZW1Qcm9tcHQsIHVzZXJQcm9tcHQsIHtcbiAgICAgICAgICAgICAgICB0ZW1wZXJhdHVyZTogMC4zLFxuICAgICAgICAgICAgICAgIG1heFRva2VuczogZGVmYXVsdE1heFRva2Vuc1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFBhcnNlIEFJIHJlc3BvbnNlXG4gICAgICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLnBhcnNlQUlUYWdSZXNwb25zZShhaVJlc3BvbnNlKTtcbiAgICAgICAgICAgIGlmICghcGFyc2VkIHx8ICFwYXJzZWQudGFncyB8fCBwYXJzZWQudGFncy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyBTaG93IHRoZSBhY3R1YWwgQUkgcmVzcG9uc2UgaW4gdGhlIGVycm9yIGZvciBkZWJ1Z2dpbmdcbiAgICAgICAgICAgICAgICBjb25zdCBwcmV2aWV3ID0gYWlSZXNwb25zZS5sZW5ndGggPiAxMDAgXG4gICAgICAgICAgICAgICAgICAgID8gYWlSZXNwb25zZS5zdWJzdHJpbmcoMCwgMTAwKSArICcuLi4nIFxuICAgICAgICAgICAgICAgICAgICA6IGFpUmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBgQ291bGQgbm90IHBhcnNlIEFJIHRhZyBzdWdnZXN0aW9ucy4gQUkgcmVzcG9uc2U6IFwiJHtwcmV2aWV3fVwiYCxcbiAgICAgICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJ1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSB0YWdzXG4gICAgICAgICAgICBjb25zdCB1cGRhdGVzID0geyB0YWdzOiBwYXJzZWQudGFncyB9O1xuICAgICAgICAgICAgY29uc3QgdXBkYXRlZENvbnRlbnQgPSB0aGlzLnVwZGF0ZUZyb250bWF0dGVyKGRvY3VtZW50Q29udGV4dC5jb250ZW50LCB1cGRhdGVzKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuYXBwLnZhdWx0Lm1vZGlmeShkb2N1bWVudENvbnRleHQuZmlsZSwgdXBkYXRlZENvbnRlbnQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBHZW5lcmF0ZSBhcHByb3ByaWF0ZSBtZXNzYWdlXG4gICAgICAgICAgICBsZXQgbWVzc2FnZSA9ICcnO1xuICAgICAgICAgICAgaWYgKC9hZGQgc3VnZ2VzdGVkL2kudGVzdChpbnN0cnVjdGlvbikgfHwgL15hZGQgdGFncyQvaS50ZXN0KGluc3RydWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFkZGVkVGFncyA9IHBhcnNlZC50YWdzLmZpbHRlcih0YWcgPT4gXG4gICAgICAgICAgICAgICAgICAgICFjdXJyZW50VGFncy5zb21lKGV4aXN0aW5nID0+IGV4aXN0aW5nLnRvTG93ZXJDYXNlKCkgPT09IHRhZy50b0xvd2VyQ2FzZSgpKVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBBZGRlZCAke2FkZGVkVGFncy5sZW5ndGh9IHN1Z2dlc3RlZCB0YWcke2FkZGVkVGFncy5sZW5ndGggIT09IDEgPyAncycgOiAnJ306ICR7YWRkZWRUYWdzLmpvaW4oJywgJyl9YDtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoL2NsZWFuIHVwfGNsZWFudXAvaS50ZXN0KGluc3RydWN0aW9uKSkge1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UgPSBgQ2xlYW5lZCB1cCB0YWdzOiAke2N1cnJlbnRUYWdzLmxlbmd0aH0gXHUyMTkyICR7cGFyc2VkLnRhZ3MubGVuZ3RofSB0YWdzYDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgbWVzc2FnZSA9IGBPcHRpbWl6ZWQgdGFnczogJHtwYXJzZWQudGFncy5sZW5ndGh9IHRhZyR7cGFyc2VkLnRhZ3MubGVuZ3RoICE9PSAxID8gJ3MnIDogJyd9ICh3YXMgJHtjdXJyZW50VGFncy5sZW5ndGh9KWA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgc3VjY2VzczogdHJ1ZSxcbiAgICAgICAgICAgICAgICBjb250ZW50OiB1cGRhdGVkQ29udGVudCxcbiAgICAgICAgICAgICAgICBhcHBsaWVkQXQ6IHsgbGluZTogMCwgY2g6IDAgfSxcbiAgICAgICAgICAgICAgICBlZGl0VHlwZTogJ3JlcGxhY2UnLFxuICAgICAgICAgICAgICAgIHN1Y2Nlc3NNZXNzYWdlOiBtZXNzYWdlXG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzdWNjZXNzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogYEZhaWxlZCB0byBwcm9jZXNzIHRhZyBvcGVyYXRpb246ICR7KGVycm9yIGFzIEVycm9yKS5tZXNzYWdlfWAsXG4gICAgICAgICAgICAgICAgZWRpdFR5cGU6ICdyZXBsYWNlJ1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBjdXJyZW50IHRhZ3MgZnJvbSBkb2N1bWVudCBjb250ZW50XG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXRDdXJyZW50VGFncyhjb250ZW50OiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgICAgIGlmICghY29udGVudCkgcmV0dXJuIFtdO1xuICAgICAgICBcbiAgICAgICAgY29uc3QgbGluZXMgPSBjb250ZW50LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgXG4gICAgICAgIGlmIChsaW5lcy5sZW5ndGggPiAwICYmIGxpbmVzWzBdID09PSAnLS0tJykge1xuICAgICAgICAgICAgbGV0IGluRnJvbnRtYXR0ZXIgPSB0cnVlO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBsaW5lcy5sZW5ndGggJiYgaW5Gcm9udG1hdHRlcjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxpbmVzW2ldID09PSAnLS0tJykge1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgY29uc3QgdGFnTWF0Y2ggPSBsaW5lc1tpXS5tYXRjaCgvXnRhZ3M6XFxzKiguKikkLyk7XG4gICAgICAgICAgICAgICAgaWYgKHRhZ01hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhZ1ZhbHVlID0gdGFnTWF0Y2hbMV0udHJpbSgpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF0YWdWYWx1ZSkgcmV0dXJuIFtdO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJ5IHBhcnNpbmcgYXMgSlNPTiBhcnJheVxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZSh0YWdWYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXJzZWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlZC5maWx0ZXIodCA9PiB0KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb3QgSlNPTiwgdHJ5IGNvbW1hLXNlcGFyYXRlZFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhZ1ZhbHVlLnNwbGl0KCcsJykubWFwKHQgPT4gdC50cmltKCkpLmZpbHRlcih0ID0+IHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAvLyBObyBmcm9udG1hdHRlciBvciBubyB0YWdzIGZvdW5kXG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSBBSSByZXNwb25zZSBmb3IgdGFnIG9wZXJhdGlvbnNcbiAgICAgKi9cbiAgICBwcml2YXRlIHBhcnNlQUlUYWdSZXNwb25zZShyZXNwb25zZTogc3RyaW5nKTogeyB0YWdzOiBzdHJpbmdbXSwgcmVhc29uaW5nPzogc3RyaW5nIH0gfCBudWxsIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIENsZWFuIHRoZSByZXNwb25zZVxuICAgICAgICAgICAgY29uc3QgY2xlYW5SZXNwb25zZSA9IHJlc3BvbnNlLnRyaW0oKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVHJ5IHRvIGV4dHJhY3QgSlNPTiBmcm9tIHJlc3BvbnNlXG4gICAgICAgICAgICBjb25zdCBqc29uTWF0Y2ggPSBjbGVhblJlc3BvbnNlLm1hdGNoKC9cXHtbXFxzXFxTXSpcXH0vKTtcbiAgICAgICAgICAgIGlmIChqc29uTWF0Y2gpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKGpzb25NYXRjaFswXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZWQudGFncyAmJiBBcnJheS5pc0FycmF5KHBhcnNlZC50YWdzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdzOiBwYXJzZWQudGFncy5tYXAoKHQ6IGFueSkgPT4gU3RyaW5nKHQpLnRvTG93ZXJDYXNlKCkudHJpbSgpLnJlcGxhY2UoL1xccysvZywgJy0nKSkuZmlsdGVyKCh0OiBzdHJpbmcpID0+IHQpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbmluZzogcGFyc2VkLnJlYXNvbmluZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSlNPTiBwYXJzZSBmYWlsZWQsIGNvbnRpbnVlIHRvIG90aGVyIGZvcm1hdHNcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFRyeSB2YXJpb3VzIGxpc3QgZm9ybWF0c1xuICAgICAgICAgICAgY29uc3QgcGF0dGVybnMgPSBbXG4gICAgICAgICAgICAgICAgLy8gSlNPTiBhcnJheTogdGFnczogW1widGFnMVwiLCBcInRhZzJcIl1cbiAgICAgICAgICAgICAgICAvdGFncz86XFxzKlxcWyhbXlxcXV0rKVxcXS9pLFxuICAgICAgICAgICAgICAgIC8vIENvbW1hIGxpc3Q6IFRhZ3M6IHRhZzEsIHRhZzIsIHRhZzNcbiAgICAgICAgICAgICAgICAvdGFncz86XFxzKihbXlxcbl0rPykoPzpcXG58JCkvaSxcbiAgICAgICAgICAgICAgICAvLyBCdWxsZXQgbGlzdDogLSB0YWcxXFxuLSB0YWcyXG4gICAgICAgICAgICAgICAgLyg/OnRhZ3M/Oik/XFxzKig/Olxcbik/KFxccypbLVx1MjAyMipdXFxzKi4rKD86XFxuXFxzKlstXHUyMDIyKl1cXHMqLispKikvaSxcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGZvciAoY29uc3QgcGF0dGVybiBvZiBwYXR0ZXJucykge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gY2xlYW5SZXNwb25zZS5tYXRjaChwYXR0ZXJuKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRhZ1N0cmluZyA9IG1hdGNoWzFdO1xuICAgICAgICAgICAgICAgICAgICBsZXQgdGFnczogc3RyaW5nW10gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgIC8vIEhhbmRsZSBidWxsZXQgbGlzdHNcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRhZ1N0cmluZy5pbmNsdWRlcygnLScpIHx8IHRhZ1N0cmluZy5pbmNsdWRlcygnXHUyMDIyJykgfHwgdGFnU3RyaW5nLmluY2x1ZGVzKCcqJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3MgPSB0YWdTdHJpbmdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuc3BsaXQoL1xcbi8pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCgobGluZTogc3RyaW5nKSA9PiBsaW5lLnJlcGxhY2UoL15cXHMqWy1cdTIwMjIqXVxccyovLCAnJykudHJpbSgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoKHQ6IHN0cmluZykgPT4gdCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBIYW5kbGUgY29tbWEtc2VwYXJhdGVkXG4gICAgICAgICAgICAgICAgICAgICAgICB0YWdzID0gdGFnU3RyaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNwbGl0KCcsJylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKCh0OiBzdHJpbmcpID0+IHQudHJpbSgpLnJlcGxhY2UoL1tcIiddL2csICcnKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKCh0OiBzdHJpbmcpID0+IHQpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBpZiAodGFncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YWdzOiB0YWdzLm1hcCh0ID0+IHQudG9Mb3dlckNhc2UoKS50cmltKCkucmVwbGFjZSgvXFxzKy9nLCAnLScpKS5maWx0ZXIodCA9PiB0KVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gTGFzdCByZXNvcnQ6IGV4dHJhY3QgYW55IGNvbW1hLXNlcGFyYXRlZCBsaXN0IGFmdGVyIFwic3VnZ2VzdFwiIG9yIFwicmVjb21tZW5kXCJcbiAgICAgICAgICAgIGNvbnN0IHN1Z2dlc3RNYXRjaCA9IGNsZWFuUmVzcG9uc2UubWF0Y2goLyg/OnN1Z2dlc3R8cmVjb21tZW5kfHByb3Bvc2V8aGVyZSBhcmV8dGFncyBhcmUpWzpcXHNdKyhbXi5dKykvaSk7XG4gICAgICAgICAgICBpZiAoc3VnZ2VzdE1hdGNoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFncyA9IHN1Z2dlc3RNYXRjaFsxXVxuICAgICAgICAgICAgICAgICAgICAuc3BsaXQoL1ssXFxuXS8pXG4gICAgICAgICAgICAgICAgICAgIC5tYXAodCA9PiB0LnRyaW0oKS5yZXBsYWNlKC9bXCInXS9nLCAnJykucmVwbGFjZSgvXmFuZFxccysvaSwgJycpKVxuICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKHQgPT4gdCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgaWYgKHRhZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBcbiAgICAgICAgICAgICAgICAgICAgICAgIHRhZ3M6IHRhZ3MubWFwKHQgPT4gdC50b0xvd2VyQ2FzZSgpLnRyaW0oKSkuZmlsdGVyKHQgPT4gdClcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIEZpbmFsIGZhbGxiYWNrOiB0cmVhdCBlYWNoIGxpbmUgYXMgYSB0YWcgKGZvciBHb29nbGUncyBzaW1wbGUgZm9ybWF0KVxuICAgICAgICAgICAgY29uc3QgbGluZXMgPSBjbGVhblJlc3BvbnNlLnNwbGl0KCdcXG4nKS5tYXAobGluZSA9PiBsaW5lLnRyaW0oKSkuZmlsdGVyKGxpbmUgPT4gbGluZSk7XG4gICAgICAgICAgICBjb25zdCB2YWxpZFRhZ3MgPSBsaW5lc1xuICAgICAgICAgICAgICAgIC5maWx0ZXIobGluZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbHRlciBvdXQgbGluZXMgdGhhdCBhcmUgY2xlYXJseSBub3QgdGFnc1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGluZS5sZW5ndGggPiAwICYmIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZS5sZW5ndGggPCA1MCAmJiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICFsaW5lLmluY2x1ZGVzKCc6JykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICFsaW5lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3RhZycpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAhbGluZS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdoZXJlJykgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICFsaW5lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ3N1Z2dlc3QnKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5tYXAobGluZSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIC8vIENsZWFuIHVwIHRoZSBsaW5lIGFuZCBjb252ZXJ0IHNwYWNlcyB0byBoeXBoZW5zXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBsaW5lLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9eWy1cdTIwMjIqI11cXHMqLywgJycpIC8vIFJlbW92ZSBidWxsZXQgcG9pbnRzIGFuZCBoYXNodGFnc1xuICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL15cXGQrXFwuXFxzKi8sICcnKSAvLyBSZW1vdmUgbnVtYmVyZWQgbGlzdHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC50cmltKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXHMrL2csICctJyk7IC8vIENvbnZlcnQgc3BhY2VzIHRvIGh5cGhlbnNcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIC5maWx0ZXIodGFnID0+IHRhZyk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmICh2YWxpZFRhZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHRhZ3M6IHZhbGlkVGFncyB9O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJZiB3ZSBzdGlsbCBjYW4ndCBwYXJzZSwgbG9nIHRoZSByZXNwb25zZSBmb3IgZGVidWdnaW5nXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gcGFyc2UgQUkgdGFnIHJlc3BvbnNlOicsIGNsZWFuUmVzcG9uc2UpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBwYXJzaW5nIEFJIHRhZyByZXNwb25zZTonLCBlcnJvciwgJ1Jlc3BvbnNlIHdhczonLCByZXNwb25zZSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdlbmVyYXRlIHN1Y2Nlc3MgbWVzc2FnZSBiYXNlZCBvbiB1cGRhdGVzXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZW5lcmF0ZVN1Y2Nlc3NNZXNzYWdlKHVwZGF0ZXM6IFJlY29yZDxzdHJpbmcsIGFueT4pOiBzdHJpbmcge1xuICAgICAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModXBkYXRlcyk7XG4gICAgICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICdNZXRhZGF0YSB1cGRhdGVkJztcbiAgICAgICAgXG4gICAgICAgIGlmIChrZXlzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgY29uc3Qga2V5ID0ga2V5c1swXTtcbiAgICAgICAgICAgIGlmIChrZXkgPT09ICd0YWdzJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNvdW50ID0gQXJyYXkuaXNBcnJheSh1cGRhdGVzLnRhZ3MpID8gdXBkYXRlcy50YWdzLmxlbmd0aCA6IDA7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGBVcGRhdGVkIHRhZ3MgKCR7Y291bnR9IHRhZyR7Y291bnQgIT09IDEgPyAncycgOiAnJ30pYDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBgVXBkYXRlZCAke2tleX1gO1xuICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYFVwZGF0ZWQgJHtrZXlzLmxlbmd0aH0gcHJvcGVydGllc2A7XG4gICAgfVxufSIsICJleHBvcnQgaW50ZXJmYWNlIFRpbWVHYXRlZEZlYXR1cmUge1xuICAgIHN1cGVybm92YURhdGU6IHN0cmluZzsgIC8vIFlZWVktTU0tREQgZm9ybWF0XG4gICAgZ2VuZXJhbERhdGU6IHN0cmluZzsgICAvLyBZWVlZLU1NLUREIGZvcm1hdFxuICAgIGRlc2NyaXB0aW9uOiBzdHJpbmc7XG59XG5cbi8qKlxuICogRmVhdHVyZSByZWxlYXNlIGNvbmZpZ3VyYXRpb24gZm9yIFN1cGVybm92YSBlYXJseSBhY2Nlc3MgbW9kZWxcbiAqIFN1cGVybm92YSBzdXBwb3J0ZXJzIGdldCBmZWF0dXJlcyBvbiBzdXBlcm5vdmFEYXRlXG4gKiBBbGwgdXNlcnMgZ2V0IGZlYXR1cmVzIG9uIGdlbmVyYWxEYXRlXG4gKiBcbiAqIERhdGVzIGFyZSBpbiBZWVlZLU1NLUREIGZvcm1hdCBhbmQgZWFzeSB0byBtb2RpZnkgcG9zdC1sYXVuY2hcbiAqL1xuZXhwb3J0IGNvbnN0IFNVUEVSTk9WQV9GRUFUVVJFUzogUmVjb3JkPHN0cmluZywgVGltZUdhdGVkRmVhdHVyZT4gPSB7XG4gICAgLy8gQ29tbWFuZHMgKHVuaWZpZWQpIC0gMiBtb250aCBlYXJseSBhY2Nlc3NcbiAgICAnY29tbWFuZHMnOiB7XG4gICAgICAgIHN1cGVybm92YURhdGU6ICcyMDI1LTA3LTMxJywgIC8vIFN1cGVybm92YSBlYXJseSBhY2Nlc3NcbiAgICAgICAgZ2VuZXJhbERhdGU6ICcyMDI1LTA5LTMwJywgICAvLyBHZW5lcmFsIGF2YWlsYWJpbGl0eSBcbiAgICAgICAgZGVzY3JpcHRpb246ICdDb21tYW5kIHN5c3RlbSB3aXRoIDogdHJpZ2dlcnMsIGNvbW1hbmQgYnV0dG9uLCBhbmQgY3VzdG9tIGNvbW1hbmRzJ1xuICAgIH0sXG4gICAgXG4gICAgLy8gQXV0by1ncm93aW5nIGlucHV0IC0gMSBtb250aCBlYXJseSBhY2Nlc3NcbiAgICAnYXV0by1pbnB1dCc6IHtcbiAgICAgICAgc3VwZXJub3ZhRGF0ZTogJzIwMjUtMDYtMTUnLCAgLy8gTGF1bmNoIGRheVxuICAgICAgICBnZW5lcmFsRGF0ZTogJzIwMjUtMDctMTUnLCAgIC8vIDEgbW9udGggbGF0ZXJcbiAgICAgICAgZGVzY3JpcHRpb246ICdBdXRvLWdyb3dpbmcgaW5wdXQgYXJlYSB3aXRoIHNtb290aCB0cmFuc2l0aW9ucydcbiAgICB9LFxuICAgIFxuICAgIC8vIEVuaGFuY2VkIHByb3ZpZGVyIG1hbmFnZW1lbnQgLSAyIG1vbnRoIGVhcmx5IGFjY2Vzc1xuICAgICdlbmhhbmNlZC1wcm92aWRlcnMnOiB7XG4gICAgICAgIHN1cGVybm92YURhdGU6ICcyMDI1LTA2LTE1JywgIC8vIExhdW5jaCBkYXlcbiAgICAgICAgZ2VuZXJhbERhdGU6ICcyMDI1LTA4LTE1JywgICAvLyAyIG1vbnRocyBsYXRlclxuICAgICAgICBkZXNjcmlwdGlvbjogJ0FkdmFuY2VkIHByb3ZpZGVyIGNvbmZpZ3VyYXRpb24gYW5kIHN3aXRjaGluZydcbiAgICB9XG59O1xuXG4vKipcbiAqIENvcmUgZmVhdHVyZXMgdGhhdCBhcmUgYWx3YXlzIGF2YWlsYWJsZSB0byBhbGwgdXNlcnNcbiAqIFRoZXNlIGFyZSBOT1QgdGltZS1nYXRlZFxuICovXG5leHBvcnQgY29uc3QgQ09SRV9GRUFUVVJFUyA9IFtcbiAgICAnYmFzaWNfZWRpdGluZycsICAgICAgICAgIC8vIEFkZCwgZWRpdCwgZGVsZXRlLCBncmFtbWFyLCByZXdyaXRlIGNvbW1hbmRzXG4gICAgJ2FsbF9haV9wcm92aWRlcnMnLCAgICAgICAvLyBDbGF1ZGUsIE9wZW5BSSwgR29vZ2xlLCBPbGxhbWFcbiAgICAnZmlsZV9jb252ZXJzYXRpb25zJywgICAgIC8vIEZpbGUtc2NvcGVkIGNvbnZlcnNhdGlvbiBoaXN0b3J5XG4gICAgJ3Byb3ZpZGVyX3N3aXRjaGluZycsICAgICAvLyBTd2l0Y2ggcHJvdmlkZXJzIGluIGNoYXRcbiAgICAnbW9iaWxlX2FjY2VzcycsICAgICAgICAgIC8vIEZ1bGwgbW9iaWxlIHN1cHBvcnRcbiAgICAnYXBpX2tleV9jb25maWcnLCAgICAgICAgIC8vIENvbmZpZ3VyZSBvd24gQVBJIGtleXNcbiAgICAnc2lkZWJhcl9jaGF0JywgICAgICAgICAgIC8vIENoYXQgaW50ZXJmYWNlIGluIHNpZGViYXJcbiAgICAnZG9jdW1lbnRfY29udGV4dCcsICAgICAgIC8vIEN1cnJlbnQgZG9jdW1lbnQgY29udGV4dFxuICAgICdtdWx0aS1kb2MtY29udGV4dCcgICAgICAgLy8gUmVmZXJlbmNlIG90aGVyIGRvY3VtZW50cyB3aXRoIFtbZG9jXV0gc3ludGF4XG5dOyIsICJpbXBvcnQgeyBMaWNlbnNlVmFsaWRhdG9yIH0gZnJvbSAnLi9saWNlbnNlLXZhbGlkYXRvcic7XG5pbXBvcnQgeyBTdXBlcm5vdmFMaWNlbnNlLCBGZWF0dXJlRmxhZywgRmVhdHVyZUFjY2Vzc1Jlc3VsdCwgRGVidWdTZXR0aW5ncywgU3VwZXJub3ZhVmFsaWRhdGlvblJlc3VsdCB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgU1VQRVJOT1ZBX0ZFQVRVUkVTLCBDT1JFX0ZFQVRVUkVTLCBUaW1lR2F0ZWRGZWF0dXJlIH0gZnJvbSAnLi9mZWF0dXJlLWNvbmZpZyc7XG5cbmV4cG9ydCBjbGFzcyBGZWF0dXJlTWFuYWdlciB7XG5cdHByaXZhdGUgZmVhdHVyZXM6IE1hcDxzdHJpbmcsIEZlYXR1cmVGbGFnPiA9IG5ldyBNYXAoKTtcblx0cHJpdmF0ZSBzdXBlcm5vdmFMaWNlbnNlOiBTdXBlcm5vdmFMaWNlbnNlIHwgbnVsbCA9IG51bGw7XG5cdHByaXZhdGUgaXNTdXBlcm5vdmE6IGJvb2xlYW4gPSBmYWxzZTtcblx0cHJpdmF0ZSBkZWJ1Z1NldHRpbmdzOiBEZWJ1Z1NldHRpbmdzID0geyBlbmFibGVkOiBmYWxzZSB9O1xuXG5cdGNvbnN0cnVjdG9yKFxuXHRcdHByaXZhdGUgbGljZW5zZVZhbGlkYXRvcjogTGljZW5zZVZhbGlkYXRvcixcblx0XHRkZWJ1Z1NldHRpbmdzPzogRGVidWdTZXR0aW5nc1xuXHQpIHtcblx0XHRpZiAoZGVidWdTZXR0aW5ncykge1xuXHRcdFx0dGhpcy5kZWJ1Z1NldHRpbmdzID0gZGVidWdTZXR0aW5ncztcblx0XHR9XG5cdFx0dGhpcy5pbml0aWFsaXplRmVhdHVyZUZsYWdzKCk7XG5cdH1cblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZSBhbGwgZmVhdHVyZSBmbGFnc1xuXHQgKiBDb3JlIGZlYXR1cmVzIGFyZSBhbHdheXMgZW5hYmxlZFxuXHQgKiBUaW1lLWdhdGVkIGZlYXR1cmVzIGRlcGVuZCBvbiBjdXJyZW50IGRhdGUgYW5kIFN1cGVybm92YSBzdGF0dXNcblx0ICovXG5cdHByaXZhdGUgaW5pdGlhbGl6ZUZlYXR1cmVGbGFncygpOiB2b2lkIHtcblx0XHQvLyBDb3JlIGZlYXR1cmVzIC0gYWx3YXlzIGF2YWlsYWJsZSB0byBhbGwgdXNlcnNcblx0XHRDT1JFX0ZFQVRVUkVTLmZvckVhY2goZmVhdHVyZUtleSA9PiB7XG5cdFx0XHR0aGlzLnJlZ2lzdGVyRmVhdHVyZSh7XG5cdFx0XHRcdGtleTogZmVhdHVyZUtleSxcblx0XHRcdFx0ZW5hYmxlZDogdHJ1ZSxcblx0XHRcdFx0ZGVzY3JpcHRpb246IHRoaXMuZ2V0Q29yZUZlYXR1cmVEZXNjcmlwdGlvbihmZWF0dXJlS2V5KVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHQvLyBUaW1lLWdhdGVkIGZlYXR1cmVzIC0gYXZhaWxhYmxlIGJhc2VkIG9uIGRhdGVcblx0XHRPYmplY3QuZW50cmllcyhTVVBFUk5PVkFfRkVBVFVSRVMpLmZvckVhY2goKFtrZXksIGNvbmZpZ10pID0+IHtcblx0XHRcdGNvbnN0IGVuYWJsZWQgPSB0aGlzLmlzVGltZUdhdGVkRmVhdHVyZUVuYWJsZWQoa2V5LCBjb25maWcpO1xuXHRcdFx0dGhpcy5yZWdpc3RlckZlYXR1cmUoe1xuXHRcdFx0XHRrZXksXG5cdFx0XHRcdGVuYWJsZWQsXG5cdFx0XHRcdGRlc2NyaXB0aW9uOiBjb25maWcuZGVzY3JpcHRpb24sXG5cdFx0XHRcdGlzVGltZUdhdGVkOiB0cnVlLFxuXHRcdFx0XHRlYXJseUFjY2Vzc09ubHk6ICF0aGlzLmlzR2VuZXJhbGx5QXZhaWxhYmxlKGNvbmZpZylcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBkZXNjcmlwdGlvbiBmb3IgY29yZSBmZWF0dXJlc1xuXHQgKi9cblx0cHJpdmF0ZSBnZXRDb3JlRmVhdHVyZURlc2NyaXB0aW9uKGtleTogc3RyaW5nKTogc3RyaW5nIHtcblx0XHRjb25zdCBkZXNjcmlwdGlvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7XG5cdFx0XHQnYmFzaWNfZWRpdGluZyc6ICdCYXNpYyBkb2N1bWVudCBlZGl0aW5nIGNvbW1hbmRzIChhZGQsIGVkaXQsIGRlbGV0ZSwgZ3JhbW1hciwgcmV3cml0ZSknLFxuXHRcdFx0J2FsbF9haV9wcm92aWRlcnMnOiAnQWNjZXNzIHRvIGFsbCBBSSBwcm92aWRlcnMgKENsYXVkZSwgT3BlbkFJLCBHb29nbGUsIE9sbGFtYSknLFxuXHRcdFx0J2ZpbGVfY29udmVyc2F0aW9ucyc6ICdGaWxlLXNjb3BlZCBjb252ZXJzYXRpb24gaGlzdG9yeScsXG5cdFx0XHQncHJvdmlkZXJfc3dpdGNoaW5nJzogJ1N3aXRjaCBBSSBwcm92aWRlcnMgZGlyZWN0bHkgaW4gY2hhdCBpbnRlcmZhY2UnLFxuXHRcdFx0J21vYmlsZV9hY2Nlc3MnOiAnRnVsbCBtb2JpbGUgZGV2aWNlIHN1cHBvcnQnLFxuXHRcdFx0J2FwaV9rZXlfY29uZmlnJzogJ0NvbmZpZ3VyZSB5b3VyIG93biBBUEkga2V5cycsXG5cdFx0XHQnc2lkZWJhcl9jaGF0JzogJ0NoYXQgaW50ZXJmYWNlIGluIHNpZGViYXInLFxuXHRcdFx0J2RvY3VtZW50X2NvbnRleHQnOiAnQ3VycmVudCBkb2N1bWVudCBjb250ZXh0IGluIGNvbnZlcnNhdGlvbnMnXG5cdFx0fTtcblx0XHRyZXR1cm4gZGVzY3JpcHRpb25zW2tleV0gfHwga2V5O1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrIGlmIGEgdGltZS1nYXRlZCBmZWF0dXJlIHNob3VsZCBiZSBlbmFibGVkXG5cdCAqL1xuXHRwcml2YXRlIGlzVGltZUdhdGVkRmVhdHVyZUVuYWJsZWQoZmVhdHVyZUtleTogc3RyaW5nLCBjb25maWc6IFRpbWVHYXRlZEZlYXR1cmUpOiBib29sZWFuIHtcblx0XHRjb25zdCBub3cgPSB0aGlzLmdldEN1cnJlbnREYXRlKCk7XG5cdFx0Y29uc3Qgc3VwZXJub3ZhRGF0ZSA9IG5ldyBEYXRlKGNvbmZpZy5zdXBlcm5vdmFEYXRlKTtcblx0XHRjb25zdCBnZW5lcmFsRGF0ZSA9IG5ldyBEYXRlKGNvbmZpZy5nZW5lcmFsRGF0ZSk7XG5cblx0XHQvLyBGZWF0dXJlIGlzIGF2YWlsYWJsZSB0byBldmVyeW9uZSBhZnRlciBnZW5lcmFsIGRhdGVcblx0XHRpZiAobm93ID49IGdlbmVyYWxEYXRlKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBGZWF0dXJlIGlzIGF2YWlsYWJsZSB0byBTdXBlcm5vdmEgc3VwcG9ydGVycyBhZnRlciBzdXBlcm5vdmEgZGF0ZVxuXHRcdGlmICh0aGlzLmdldElzU3VwZXJub3ZhKCkgJiYgbm93ID49IHN1cGVybm92YURhdGUpIHtcblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVjayBpZiBmZWF0dXJlIGlzIGdlbmVyYWxseSBhdmFpbGFibGUgKHBhc3QgZ2VuZXJhbCBkYXRlKVxuXHQgKi9cblx0cHJpdmF0ZSBpc0dlbmVyYWxseUF2YWlsYWJsZShjb25maWc6IFRpbWVHYXRlZEZlYXR1cmUpOiBib29sZWFuIHtcblx0XHRjb25zdCBub3cgPSB0aGlzLmdldEN1cnJlbnREYXRlKCk7XG5cdFx0Y29uc3QgZ2VuZXJhbERhdGUgPSBuZXcgRGF0ZShjb25maWcuZ2VuZXJhbERhdGUpO1xuXHRcdHJldHVybiBub3cgPj0gZ2VuZXJhbERhdGU7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IGN1cnJlbnQgZGF0ZSAoY2FuIGJlIG92ZXJyaWRkZW4gaW4gZGVidWcgbW9kZSlcblx0ICovXG5cdHByaXZhdGUgZ2V0Q3VycmVudERhdGUoKTogRGF0ZSB7XG5cdFx0aWYgKHRoaXMuZGVidWdTZXR0aW5ncy5lbmFibGVkICYmIHRoaXMuZGVidWdTZXR0aW5ncy5vdmVycmlkZURhdGUpIHtcblx0XHRcdHJldHVybiBuZXcgRGF0ZSh0aGlzLmRlYnVnU2V0dGluZ3Mub3ZlcnJpZGVEYXRlKTtcblx0XHR9XG5cdFx0cmV0dXJuIG5ldyBEYXRlKCk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IFN1cGVybm92YSBzdGF0dXMgKGNhbiBiZSBvdmVycmlkZGVuIGluIGRlYnVnIG1vZGUpXG5cdCAqL1xuXHRwcml2YXRlIGdldElzU3VwZXJub3ZhKCk6IGJvb2xlYW4ge1xuXHRcdGlmICh0aGlzLmRlYnVnU2V0dGluZ3MuZW5hYmxlZCAmJiB0aGlzLmRlYnVnU2V0dGluZ3MuZm9yY2VTdXBlcm5vdmEgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZGVidWdTZXR0aW5ncy5mb3JjZVN1cGVybm92YTtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuaXNTdXBlcm5vdmE7XG5cdH1cblxuXHQvKipcblx0ICogUmVnaXN0ZXIgYSBuZXcgZmVhdHVyZSBmbGFnXG5cdCAqL1xuXHRyZWdpc3RlckZlYXR1cmUoZmxhZzogRmVhdHVyZUZsYWcpOiB2b2lkIHtcblx0XHR0aGlzLmZlYXR1cmVzLnNldChmbGFnLmtleSwgZmxhZyk7XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlIFN1cGVybm92YSBsaWNlbnNlIGFuZCByZWNhbGN1bGF0ZSBmZWF0dXJlIGF2YWlsYWJpbGl0eVxuXHQgKi9cblx0YXN5bmMgdXBkYXRlU3VwZXJub3ZhTGljZW5zZShsaWNlbnNlS2V5OiBzdHJpbmcgfCBudWxsKTogUHJvbWlzZTx2b2lkPiB7XG5cdFx0aWYgKCFsaWNlbnNlS2V5KSB7XG5cdFx0XHR0aGlzLnN1cGVybm92YUxpY2Vuc2UgPSBudWxsO1xuXHRcdFx0dGhpcy5pc1N1cGVybm92YSA9IGZhbHNlO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRjb25zdCB2YWxpZGF0aW9uID0gYXdhaXQgdGhpcy5saWNlbnNlVmFsaWRhdG9yLnZhbGlkYXRlU3VwZXJub3ZhTGljZW5zZShsaWNlbnNlS2V5KTtcblx0XHRcdGlmICh2YWxpZGF0aW9uLnZhbGlkICYmIHZhbGlkYXRpb24ubGljZW5zZSkge1xuXHRcdFx0XHR0aGlzLnN1cGVybm92YUxpY2Vuc2UgPSB2YWxpZGF0aW9uLmxpY2Vuc2U7XG5cdFx0XHRcdHRoaXMuaXNTdXBlcm5vdmEgPSB0cnVlO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhpcy5zdXBlcm5vdmFMaWNlbnNlID0gbnVsbDtcblx0XHRcdFx0dGhpcy5pc1N1cGVybm92YSA9IGZhbHNlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlaW5pdGlhbGl6ZSBmZWF0dXJlcyB3aXRoIHVwZGF0ZWQgU3VwZXJub3ZhIHN0YXR1c1xuXHRcdHRoaXMuaW5pdGlhbGl6ZUZlYXR1cmVGbGFncygpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBjdXJyZW50IFN1cGVybm92YSBzdGF0dXNcblx0ICovXG5cdGlzU3VwZXJub3ZhU3VwcG9ydGVyKCk6IGJvb2xlYW4ge1xuXHRcdHJldHVybiB0aGlzLmdldElzU3VwZXJub3ZhKCk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IGN1cnJlbnQgU3VwZXJub3ZhIGxpY2Vuc2Vcblx0ICovXG5cdGdldFN1cGVybm92YUxpY2Vuc2UoKTogU3VwZXJub3ZhTGljZW5zZSB8IG51bGwge1xuXHRcdHJldHVybiB0aGlzLnN1cGVybm92YUxpY2Vuc2U7XG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2sgaWYgYSBmZWF0dXJlIGlzIGVuYWJsZWRcblx0ICovXG5cdGlzRmVhdHVyZUVuYWJsZWQoZmVhdHVyZUtleTogc3RyaW5nKTogYm9vbGVhbiB7XG5cdFx0Ly8gSGFuZGxlIG9sZCBmZWF0dXJlIGtleXMgdGhhdCBtaWdodCBzdGlsbCBiZSByZWZlcmVuY2VkXG5cdFx0aWYgKHRoaXMuaXNMZWdhY3lGZWF0dXJlS2V5KGZlYXR1cmVLZXkpKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTsgLy8gQWxsIGxlZ2FjeSBmZWF0dXJlcyBhcmUgbm93IGVuYWJsZWQgZm9yIGV2ZXJ5b25lXG5cdFx0fVxuXG5cdFx0Y29uc3QgZmVhdHVyZSA9IHRoaXMuZmVhdHVyZXMuZ2V0KGZlYXR1cmVLZXkpO1xuXHRcdHJldHVybiBmZWF0dXJlPy5lbmFibGVkID8/IGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCAqIENoZWNrIGlmIHRoaXMgaXMgYSBsZWdhY3kgZmVhdHVyZSBrZXkgdGhhdCBzaG91bGQgYWx3YXlzIGJlIGVuYWJsZWRcblx0ICovXG5cdHByaXZhdGUgaXNMZWdhY3lGZWF0dXJlS2V5KGtleTogc3RyaW5nKTogYm9vbGVhbiB7XG5cdFx0Y29uc3QgbGVnYWN5S2V5cyA9IFtcblx0XHRcdCdiYXNpY19lZGl0aW5nJyxcblx0XHRcdCdsb2NhbF9haV9wcm92aWRlcnMnLFxuXHRcdFx0J2ZpbGVfY29udmVyc2F0aW9ucycsXG5cdFx0XHQnc2luZ2xlX2Nsb3VkX3Byb3ZpZGVyJyxcblx0XHRcdCd1bmxpbWl0ZWRfY2xvdWRfYWknLFxuXHRcdFx0J3Byb3ZpZGVyX3N3aXRjaGluZycsXG5cdFx0XHQnbW9iaWxlX2FjY2VzcycsXG5cdFx0XHQnYWR2YW5jZWRfdGVtcGxhdGVzJyxcblx0XHRcdCdiYXRjaF9vcGVyYXRpb25zJyxcblx0XHRcdCdjcm9zc19kb2N1bWVudF9jb250ZXh0Jyxcblx0XHRcdCdwcmlvcml0eV9zdXBwb3J0J1xuXHRcdF07XG5cdFx0cmV0dXJuIGxlZ2FjeUtleXMuaW5jbHVkZXMoa2V5KTtcblx0fVxuXG5cdC8qKlxuXHQgKiBDaGVjayBmZWF0dXJlIGFjY2VzcyB3aXRoIGRldGFpbGVkIHJlc3VsdFxuXHQgKi9cblx0Y2hlY2tGZWF0dXJlQWNjZXNzKGZlYXR1cmVLZXk6IHN0cmluZyk6IEZlYXR1cmVBY2Nlc3NSZXN1bHQge1xuXHRcdC8vIEhhbmRsZSBsZWdhY3kgZmVhdHVyZXNcblx0XHRpZiAodGhpcy5pc0xlZ2FjeUZlYXR1cmVLZXkoZmVhdHVyZUtleSkpIHtcblx0XHRcdHJldHVybiB7IGFsbG93ZWQ6IHRydWUgfTtcblx0XHR9XG5cblx0XHRjb25zdCBmZWF0dXJlID0gdGhpcy5mZWF0dXJlcy5nZXQoZmVhdHVyZUtleSk7XG5cdFx0XG5cdFx0aWYgKCFmZWF0dXJlKSB7XG5cdFx0XHRyZXR1cm4geyBcblx0XHRcdFx0YWxsb3dlZDogZmFsc2UsIFxuXHRcdFx0XHRyZWFzb246IGBGZWF0dXJlICcke2ZlYXR1cmVLZXl9JyBub3QgZm91bmRgIFxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRpZiAoZmVhdHVyZS5lbmFibGVkKSB7XG5cdFx0XHRyZXR1cm4geyBhbGxvd2VkOiB0cnVlIH07XG5cdFx0fVxuXG5cdFx0Ly8gRm9yIHRpbWUtZ2F0ZWQgZmVhdHVyZXMsIHByb3ZpZGUgbW9yZSBpbmZvcm1hdGlvblxuXHRcdGlmIChmZWF0dXJlLmlzVGltZUdhdGVkKSB7XG5cdFx0XHRjb25zdCBjb25maWcgPSBTVVBFUk5PVkFfRkVBVFVSRVNbZmVhdHVyZUtleV07XG5cdFx0XHRpZiAoY29uZmlnKSB7XG5cdFx0XHRcdGNvbnN0IG5vdyA9IHRoaXMuZ2V0Q3VycmVudERhdGUoKTtcblx0XHRcdFx0Y29uc3QgZ2VuZXJhbERhdGUgPSBuZXcgRGF0ZShjb25maWcuZ2VuZXJhbERhdGUpO1xuXHRcdFx0XHRjb25zdCBzdXBlcm5vdmFEYXRlID0gbmV3IERhdGUoY29uZmlnLnN1cGVybm92YURhdGUpO1xuXG5cdFx0XHRcdGlmICh0aGlzLmdldElzU3VwZXJub3ZhKCkgJiYgbm93IDwgc3VwZXJub3ZhRGF0ZSkge1xuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRhbGxvd2VkOiBmYWxzZSxcblx0XHRcdFx0XHRcdHJlYXNvbjogYFRoaXMgZmVhdHVyZSB3aWxsIGJlIGF2YWlsYWJsZSB0byBTdXBlcm5vdmEgc3VwcG9ydGVycyBvbiAke2NvbmZpZy5zdXBlcm5vdmFEYXRlfWAsXG5cdFx0XHRcdFx0XHRpc1N1cGVybm92YUZlYXR1cmU6IHRydWUsXG5cdFx0XHRcdFx0XHRhdmFpbGFibGVEYXRlOiBzdXBlcm5vdmFEYXRlXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSBlbHNlIGlmICghdGhpcy5nZXRJc1N1cGVybm92YSgpICYmIG5vdyA8IGdlbmVyYWxEYXRlKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdGFsbG93ZWQ6IGZhbHNlLFxuXHRcdFx0XHRcdFx0cmVhc29uOiBgVGhpcyBmZWF0dXJlIGlzIGN1cnJlbnRseSBpbiBlYXJseSBhY2Nlc3MgZm9yIFN1cGVybm92YSBzdXBwb3J0ZXJzLiBJdCB3aWxsIGJlIGF2YWlsYWJsZSB0byBhbGwgdXNlcnMgb24gJHtjb25maWcuZ2VuZXJhbERhdGV9YCxcblx0XHRcdFx0XHRcdGlzU3VwZXJub3ZhRmVhdHVyZTogdHJ1ZSxcblx0XHRcdFx0XHRcdGF2YWlsYWJsZURhdGU6IGdlbmVyYWxEYXRlXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHRhbGxvd2VkOiBmYWxzZSxcblx0XHRcdHJlYXNvbjogJ0ZlYXR1cmUgaXMgbm90IGF2YWlsYWJsZSdcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBhbGwgZW5hYmxlZCBmZWF0dXJlc1xuXHQgKi9cblx0Z2V0RW5hYmxlZEZlYXR1cmVzKCk6IEZlYXR1cmVGbGFnW10ge1xuXHRcdHJldHVybiBBcnJheS5mcm9tKHRoaXMuZmVhdHVyZXMudmFsdWVzKCkpLmZpbHRlcihmZWF0dXJlID0+IGZlYXR1cmUuZW5hYmxlZCk7XG5cdH1cblxuXHQvKipcblx0ICogR2V0IGFsbCBTdXBlcm5vdmEgZWFybHkgYWNjZXNzIGZlYXR1cmVzXG5cdCAqL1xuXHRnZXRTdXBlcm5vdmFGZWF0dXJlcygpOiBGZWF0dXJlRmxhZ1tdIHtcblx0XHRyZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmZlYXR1cmVzLnZhbHVlcygpKS5maWx0ZXIoZmVhdHVyZSA9PiBcblx0XHRcdGZlYXR1cmUuaXNUaW1lR2F0ZWQgJiYgZmVhdHVyZS5lYXJseUFjY2Vzc09ubHlcblx0XHQpO1xuXHR9XG5cblx0LyoqXG5cdCAqIFVwZGF0ZSBkZWJ1ZyBzZXR0aW5ncyBmb3IgZGV2ZWxvcG1lbnQgdGVzdGluZ1xuXHQgKi9cblx0dXBkYXRlRGVidWdTZXR0aW5ncyhzZXR0aW5nczogRGVidWdTZXR0aW5ncyk6IHZvaWQge1xuXHRcdHRoaXMuZGVidWdTZXR0aW5ncyA9IHNldHRpbmdzO1xuXHRcdC8vIFJlaW5pdGlhbGl6ZSBmZWF0dXJlcyB3aXRoIG5ldyBkZWJ1ZyBzZXR0aW5nc1xuXHRcdHRoaXMuaW5pdGlhbGl6ZUZlYXR1cmVGbGFncygpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBkZWJ1ZyBzZXR0aW5nc1xuXHQgKi9cblx0Z2V0RGVidWdTZXR0aW5ncygpOiBEZWJ1Z1NldHRpbmdzIHtcblx0XHRyZXR1cm4geyAuLi50aGlzLmRlYnVnU2V0dGluZ3MgfTtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgZmVhdHVyZSBzdW1tYXJ5XG5cdCAqL1xuXHRnZXRGZWF0dXJlU3VtbWFyeSgpOiB7IFxuXHRcdGlzU3VwZXJub3ZhOiBib29sZWFuOyBcblx0XHRlbmFibGVkOiBzdHJpbmdbXTsgXG5cdFx0Y29taW5nU29vbjogQXJyYXk8e2tleTogc3RyaW5nOyBhdmFpbGFibGVEYXRlOiBzdHJpbmc7IGlzU3VwZXJub3ZhOiBib29sZWFufT4gXG5cdH0ge1xuXHRcdGNvbnN0IGVuYWJsZWQ6IHN0cmluZ1tdID0gW107XG5cdFx0Y29uc3QgY29taW5nU29vbjogQXJyYXk8e2tleTogc3RyaW5nOyBhdmFpbGFibGVEYXRlOiBzdHJpbmc7IGlzU3VwZXJub3ZhOiBib29sZWFufT4gPSBbXTtcblxuXHRcdGZvciAoY29uc3QgW2tleSwgZmVhdHVyZV0gb2YgdGhpcy5mZWF0dXJlcykge1xuXHRcdFx0aWYgKGZlYXR1cmUuZW5hYmxlZCkge1xuXHRcdFx0XHRlbmFibGVkLnB1c2goa2V5KTtcblx0XHRcdH0gZWxzZSBpZiAoZmVhdHVyZS5pc1RpbWVHYXRlZCkge1xuXHRcdFx0XHRjb25zdCBjb25maWcgPSBTVVBFUk5PVkFfRkVBVFVSRVNba2V5XTtcblx0XHRcdFx0aWYgKGNvbmZpZykge1xuXHRcdFx0XHRcdGNvbnN0IGlzU3VwZXJub3ZhVXNlciA9IHRoaXMuZ2V0SXNTdXBlcm5vdmEoKTtcblx0XHRcdFx0XHRjb21pbmdTb29uLnB1c2goe1xuXHRcdFx0XHRcdFx0a2V5LFxuXHRcdFx0XHRcdFx0YXZhaWxhYmxlRGF0ZTogaXNTdXBlcm5vdmFVc2VyID8gY29uZmlnLnN1cGVybm92YURhdGUgOiBjb25maWcuZ2VuZXJhbERhdGUsXG5cdFx0XHRcdFx0XHRpc1N1cGVybm92YTogaXNTdXBlcm5vdmFVc2VyXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4geyBcblx0XHRcdGlzU3VwZXJub3ZhOiB0aGlzLmdldElzU3VwZXJub3ZhKCksIFxuXHRcdFx0ZW5hYmxlZCwgXG5cdFx0XHRjb21pbmdTb29uIFxuXHRcdH07XG5cdH1cbn0iLCAiaW1wb3J0IHsgTGljZW5zZSwgU3VwZXJub3ZhTGljZW5zZSwgTGljZW5zZVZhbGlkYXRpb25SZXN1bHQsIFN1cGVybm92YVZhbGlkYXRpb25SZXN1bHQsIExpY2Vuc2VFcnJvciB9IGZyb20gJy4vdHlwZXMnO1xuXG5leHBvcnQgY2xhc3MgTGljZW5zZVZhbGlkYXRvciB7XG5cdC8vIEVtYmVkZGVkIHNpZ25pbmcga2V5IC0gaW4gcHJvZHVjdGlvbiB0aGlzIHdvdWxkIGJlIG9iZnVzY2F0ZWRcblx0cHJpdmF0ZSByZWFkb25seSBTRUNSRVRfS0VZID0gJ25vdmEtbGljZW5zZS1zaWduaW5nLWtleS0yMDI1Jztcblx0XG5cdC8qKlxuXHQgKiBWYWxpZGF0ZXMgYSBsaWNlbnNlIGtleSBhbmQgcmV0dXJucyB2YWxpZGF0aW9uIHJlc3VsdFxuXHQgKi9cblx0YXN5bmMgdmFsaWRhdGVMaWNlbnNlKGxpY2Vuc2VLZXk6IHN0cmluZyk6IFByb21pc2U8TGljZW5zZVZhbGlkYXRpb25SZXN1bHQ+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgbGljZW5zZSA9IHRoaXMucGFyc2VMaWNlbnNlS2V5KGxpY2Vuc2VLZXkpO1xuXHRcdFx0aWYgKCFsaWNlbnNlKSB7XG5cdFx0XHRcdHJldHVybiB7IFxuXHRcdFx0XHRcdHZhbGlkOiBmYWxzZSwgXG5cdFx0XHRcdFx0ZXJyb3I6IExpY2Vuc2VFcnJvci5JTlZBTElEX0ZPUk1BVCBcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgdmFsaWRhdGlvbkVycm9yID0gYXdhaXQgdGhpcy52YWxpZGF0ZUxpY2Vuc2VPYmplY3QobGljZW5zZSk7XG5cdFx0XHRpZiAodmFsaWRhdGlvbkVycm9yKSB7XG5cdFx0XHRcdHJldHVybiB7IFxuXHRcdFx0XHRcdHZhbGlkOiBmYWxzZSwgXG5cdFx0XHRcdFx0bGljZW5zZSxcblx0XHRcdFx0XHRlcnJvcjogdmFsaWRhdGlvbkVycm9yIFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBcblx0XHRcdFx0dmFsaWQ6IHRydWUsIFxuXHRcdFx0XHRsaWNlbnNlIFxuXHRcdFx0fTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0cmV0dXJuIHsgXG5cdFx0XHRcdHZhbGlkOiBmYWxzZSwgXG5cdFx0XHRcdGVycm9yOiBMaWNlbnNlRXJyb3IuTUFMRk9STUVEX0RBVEEgXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgYSBsaWNlbnNlIGtleSBzdHJpbmcgaW50byBhIExpY2Vuc2Ugb2JqZWN0XG5cdCAqL1xuXHRwcml2YXRlIHBhcnNlTGljZW5zZUtleShsaWNlbnNlS2V5OiBzdHJpbmcpOiBMaWNlbnNlIHwgbnVsbCB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIExpY2Vuc2Uga2V5IGZvcm1hdDogYmFzZTY0KGVtYWlsfHRpZXJ8ZXhwaXJlc0F0fGlzc3VlZEF0fHNpZ25hdHVyZSlcblx0XHRcdGNvbnN0IGRlY29kZWQgPSB0aGlzLmJhc2U2NERlY29kZShsaWNlbnNlS2V5KTtcblx0XHRcdGNvbnN0IHBhcnRzID0gZGVjb2RlZC5zcGxpdCgnfCcpO1xuXHRcdFx0XG5cdFx0XHRpZiAocGFydHMubGVuZ3RoICE9PSA1KSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRjb25zdCBbZW1haWwsIHRpZXIsIGV4cGlyZXNBdFN0ciwgaXNzdWVkQXRTdHIsIHNpZ25hdHVyZV0gPSBwYXJ0cztcblxuXHRcdFx0Ly8gU2tpcCB0aWVyIHZhbGlkYXRpb24gc2luY2Ugd2UncmUgcmVtb3ZpbmcgdGllcnNcblxuXHRcdFx0Ly8gUGFyc2UgZGF0ZXNcblx0XHRcdGNvbnN0IGV4cGlyZXNBdCA9IGV4cGlyZXNBdFN0ciA9PT0gJ2xpZmV0aW1lJyA/IG51bGwgOiBuZXcgRGF0ZShleHBpcmVzQXRTdHIpO1xuXHRcdFx0Y29uc3QgaXNzdWVkQXQgPSBuZXcgRGF0ZShpc3N1ZWRBdFN0cik7XG5cblx0XHRcdC8vIFZhbGlkYXRlIGRhdGVzXG5cdFx0XHRpZiAoaXNOYU4oaXNzdWVkQXQuZ2V0VGltZSgpKSkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0aWYgKGV4cGlyZXNBdCAmJiBpc05hTihleHBpcmVzQXQuZ2V0VGltZSgpKSkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZW1haWwsXG5cdFx0XHRcdGV4cGlyZXNBdCxcblx0XHRcdFx0aXNzdWVkQXQsXG5cdFx0XHRcdHNpZ25hdHVyZSxcblx0XHRcdFx0bGljZW5zZUtleVxuXHRcdFx0fTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFNhZmUgYmFzZTY0IGRlY29kZSB0aGF0IGhhbmRsZXMgYm90aCBicm93c2VyIGFuZCBOb2RlLmpzIGVudmlyb25tZW50c1xuXHQgKi9cblx0cHJpdmF0ZSBiYXNlNjREZWNvZGUoc3RyOiBzdHJpbmcpOiBzdHJpbmcge1xuXHRcdGlmICh0eXBlb2YgYXRvYiAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdHJldHVybiBhdG9iKHN0cik7XG5cdFx0fVxuXHRcdC8vIEZhbGxiYWNrIGZvciBOb2RlLmpzIGVudmlyb25tZW50XG5cdFx0cmV0dXJuIEJ1ZmZlci5mcm9tKHN0ciwgJ2Jhc2U2NCcpLnRvU3RyaW5nKCd1dGY4Jyk7XG5cdH1cblxuXHQvKipcblx0ICogU2FmZSBiYXNlNjQgZW5jb2RlIHRoYXQgaGFuZGxlcyBib3RoIGJyb3dzZXIgYW5kIE5vZGUuanMgZW52aXJvbm1lbnRzXG5cdCAqL1xuXHRwcml2YXRlIGJhc2U2NEVuY29kZShzdHI6IHN0cmluZyk6IHN0cmluZyB7XG5cdFx0aWYgKHR5cGVvZiBidG9hICE9PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIGJ0b2Eoc3RyKTtcblx0XHR9XG5cdFx0Ly8gRmFsbGJhY2sgZm9yIE5vZGUuanMgZW52aXJvbm1lbnRcblx0XHRyZXR1cm4gQnVmZmVyLmZyb20oc3RyLCAndXRmOCcpLnRvU3RyaW5nKCdiYXNlNjQnKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBWYWxpZGF0ZXMgYSBsaWNlbnNlIG9iamVjdFxuXHQgKi9cblx0cHJpdmF0ZSBhc3luYyB2YWxpZGF0ZUxpY2Vuc2VPYmplY3QobGljZW5zZTogTGljZW5zZSk6IFByb21pc2U8TGljZW5zZUVycm9yIHwgbnVsbD4ge1xuXHRcdC8vIDEuIFZlcmlmeSBITUFDIHNpZ25hdHVyZVxuXHRcdGNvbnN0IGV4cGVjdGVkU2lnbmF0dXJlID0gYXdhaXQgdGhpcy5nZW5lcmF0ZVNpZ25hdHVyZShcblx0XHRcdGxpY2Vuc2UuZW1haWwsXG5cdFx0XHQnbGVnYWN5JywgLy8gVXNlIGxlZ2FjeSBmb3Igb2xkIGxpY2Vuc2VzXG5cdFx0XHRsaWNlbnNlLmV4cGlyZXNBdCxcblx0XHRcdGxpY2Vuc2UuaXNzdWVkQXRcblx0XHQpO1xuXG5cdFx0aWYgKGxpY2Vuc2Uuc2lnbmF0dXJlICE9PSBleHBlY3RlZFNpZ25hdHVyZSkge1xuXHRcdFx0cmV0dXJuIExpY2Vuc2VFcnJvci5JTlZBTElEX1NJR05BVFVSRTtcblx0XHR9XG5cblx0XHQvLyAyLiBDaGVjayBleHBpcmF0aW9uXG5cdFx0aWYgKGxpY2Vuc2UuZXhwaXJlc0F0ICYmIG5ldyBEYXRlKCkgPiBsaWNlbnNlLmV4cGlyZXNBdCkge1xuXHRcdFx0cmV0dXJuIExpY2Vuc2VFcnJvci5FWFBJUkVEO1xuXHRcdH1cblxuXHRcdC8vIDMuIFZhbGlkYXRlIGlzc3VlIGRhdGUgKHByZXZlbnQgZnV0dXJlLWRhdGVkIGxpY2Vuc2VzKVxuXHRcdGlmIChsaWNlbnNlLmlzc3VlZEF0ID4gbmV3IERhdGUoKSkge1xuXHRcdFx0cmV0dXJuIExpY2Vuc2VFcnJvci5GVVRVUkVfREFURUQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogR2VuZXJhdGVzIEhNQUMtU0hBMjU2IHNpZ25hdHVyZSBmb3IgbGljZW5zZSBkYXRhXG5cdCAqL1xuXHRwcml2YXRlIGFzeW5jIGdlbmVyYXRlU2lnbmF0dXJlKFxuXHRcdGVtYWlsOiBzdHJpbmcsXG5cdFx0dGllcjogc3RyaW5nLFxuXHRcdGV4cGlyZXNBdDogRGF0ZSB8IG51bGwsXG5cdFx0aXNzdWVkQXQ6IERhdGVcblx0KTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHRjb25zdCBkYXRhID0gYCR7ZW1haWx9fCR7dGllcn18JHtleHBpcmVzQXQ/LnRvSVNPU3RyaW5nKCkgfHwgJ2xpZmV0aW1lJ318JHtpc3N1ZWRBdC50b0lTT1N0cmluZygpfWA7XG5cdFx0XG5cdFx0Y29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuXHRcdGNvbnN0IGtleURhdGEgPSBlbmNvZGVyLmVuY29kZSh0aGlzLlNFQ1JFVF9LRVkpO1xuXHRcdGNvbnN0IG1lc3NhZ2VEYXRhID0gZW5jb2Rlci5lbmNvZGUoZGF0YSk7XG5cdFx0XG5cdFx0Y29uc3QgY3J5cHRvS2V5ID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG5cdFx0XHQncmF3Jyxcblx0XHRcdGtleURhdGEsXG5cdFx0XHR7IG5hbWU6ICdITUFDJywgaGFzaDogJ1NIQS0yNTYnIH0sXG5cdFx0XHRmYWxzZSxcblx0XHRcdFsnc2lnbiddXG5cdFx0KTtcblx0XHRcblx0XHRjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBjcnlwdG8uc3VidGxlLnNpZ24oJ0hNQUMnLCBjcnlwdG9LZXksIG1lc3NhZ2VEYXRhKTtcblx0XHRyZXR1cm4gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShzaWduYXR1cmUpKVxuXHRcdFx0Lm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpXG5cdFx0XHQuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHRlc3QgbGljZW5zZSBmb3IgZGV2ZWxvcG1lbnQgcHVycG9zZXNcblx0ICovXG5cdGFzeW5jIGNyZWF0ZVRlc3RMaWNlbnNlKGVtYWlsOiBzdHJpbmcsIHRpZXI6IHN0cmluZywgbGlmZXRpbWVNb2RlID0gdHJ1ZSk6IFByb21pc2U8c3RyaW5nPiB7XG5cdFx0Y29uc3QgaXNzdWVkQXQgPSBuZXcgRGF0ZSgpO1xuXHRcdGNvbnN0IGV4cGlyZXNBdCA9IGxpZmV0aW1lTW9kZSA/IG51bGwgOiBuZXcgRGF0ZShEYXRlLm5vdygpICsgMzY1ICogMjQgKiA2MCAqIDYwICogMTAwMCk7IC8vIDEgeWVhclxuXG5cdFx0Y29uc3Qgc2lnbmF0dXJlID0gYXdhaXQgdGhpcy5nZW5lcmF0ZVNpZ25hdHVyZShlbWFpbCwgdGllciwgZXhwaXJlc0F0LCBpc3N1ZWRBdCk7XG5cdFx0XG5cdFx0Y29uc3QgbGljZW5zZURhdGEgPSBgJHtlbWFpbH18JHt0aWVyfXwke2V4cGlyZXNBdD8udG9JU09TdHJpbmcoKSB8fCAnbGlmZXRpbWUnfXwke2lzc3VlZEF0LnRvSVNPU3RyaW5nKCl9fCR7c2lnbmF0dXJlfWA7XG5cdFx0XG5cdFx0cmV0dXJuIHRoaXMuYmFzZTY0RW5jb2RlKGxpY2Vuc2VEYXRhKTtcblx0fVxuXG5cdC8qKlxuXHQgKiBWYWxpZGF0ZXMgYSBTdXBlcm5vdmEgbGljZW5zZSBrZXlcblx0ICovXG5cdGFzeW5jIHZhbGlkYXRlU3VwZXJub3ZhTGljZW5zZShsaWNlbnNlS2V5OiBzdHJpbmcpOiBQcm9taXNlPFN1cGVybm92YVZhbGlkYXRpb25SZXN1bHQ+IHtcblx0XHR0cnkge1xuXHRcdFx0Y29uc3QgbGljZW5zZSA9IHRoaXMucGFyc2VTdXBlcm5vdmFMaWNlbnNlS2V5KGxpY2Vuc2VLZXkpO1xuXHRcdFx0aWYgKCFsaWNlbnNlKSB7XG5cdFx0XHRcdHJldHVybiB7IFxuXHRcdFx0XHRcdHZhbGlkOiBmYWxzZSwgXG5cdFx0XHRcdFx0ZXJyb3I6IExpY2Vuc2VFcnJvci5JTlZBTElEX0ZPUk1BVCBcblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgdmFsaWRhdGlvbkVycm9yID0gYXdhaXQgdGhpcy52YWxpZGF0ZVN1cGVybm92YUxpY2Vuc2VPYmplY3QobGljZW5zZSk7XG5cdFx0XHRpZiAodmFsaWRhdGlvbkVycm9yKSB7XG5cdFx0XHRcdHJldHVybiB7IFxuXHRcdFx0XHRcdHZhbGlkOiBmYWxzZSwgXG5cdFx0XHRcdFx0bGljZW5zZSxcblx0XHRcdFx0XHRlcnJvcjogdmFsaWRhdGlvbkVycm9yIFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBcblx0XHRcdFx0dmFsaWQ6IHRydWUsIFxuXHRcdFx0XHRsaWNlbnNlIFxuXHRcdFx0fTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0cmV0dXJuIHsgXG5cdFx0XHRcdHZhbGlkOiBmYWxzZSwgXG5cdFx0XHRcdGVycm9yOiBMaWNlbnNlRXJyb3IuTUFMRk9STUVEX0RBVEEgXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG5cdC8qKlxuXHQgKiBQYXJzZXMgYSBTdXBlcm5vdmEgbGljZW5zZSBrZXkgc3RyaW5nXG5cdCAqL1xuXHRwcml2YXRlIHBhcnNlU3VwZXJub3ZhTGljZW5zZUtleShsaWNlbnNlS2V5OiBzdHJpbmcpOiBTdXBlcm5vdmFMaWNlbnNlIHwgbnVsbCB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIFN1cGVybm92YSBsaWNlbnNlIGtleSBmb3JtYXQ6IGJhc2U2NChlbWFpbHx0eXBlfGV4cGlyZXNBdHxpc3N1ZWRBdHxzaWduYXR1cmUpXG5cdFx0XHRjb25zdCBkZWNvZGVkID0gdGhpcy5iYXNlNjREZWNvZGUobGljZW5zZUtleSk7XG5cdFx0XHRjb25zdCBwYXJ0cyA9IGRlY29kZWQuc3BsaXQoJ3wnKTtcblx0XHRcdFxuXHRcdFx0aWYgKHBhcnRzLmxlbmd0aCAhPT0gNSkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3QgW2VtYWlsLCB0eXBlLCBleHBpcmVzQXRTdHIsIGlzc3VlZEF0U3RyLCBzaWduYXR1cmVdID0gcGFydHM7XG5cblx0XHRcdC8vIFZhbGlkYXRlIHR5cGVcblx0XHRcdGlmICh0eXBlICE9PSAnYW5udWFsJyAmJiB0eXBlICE9PSAnbGlmZXRpbWUnKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBQYXJzZSBkYXRlc1xuXHRcdFx0Y29uc3QgZXhwaXJlc0F0ID0gZXhwaXJlc0F0U3RyID09PSAnbGlmZXRpbWUnID8gbnVsbCA6IG5ldyBEYXRlKGV4cGlyZXNBdFN0cik7XG5cdFx0XHRjb25zdCBpc3N1ZWRBdCA9IG5ldyBEYXRlKGlzc3VlZEF0U3RyKTtcblxuXHRcdFx0Ly8gVmFsaWRhdGUgZGF0ZXNcblx0XHRcdGlmIChpc05hTihpc3N1ZWRBdC5nZXRUaW1lKCkpKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoZXhwaXJlc0F0ICYmIGlzTmFOKGV4cGlyZXNBdC5nZXRUaW1lKCkpKSB7XG5cdFx0XHRcdHJldHVybiBudWxsO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRlbWFpbCxcblx0XHRcdFx0dHlwZTogdHlwZSBhcyAnYW5udWFsJyB8ICdsaWZldGltZScsXG5cdFx0XHRcdGV4cGlyZXNBdCxcblx0XHRcdFx0aXNzdWVkQXQsXG5cdFx0XHRcdHNpZ25hdHVyZSxcblx0XHRcdFx0bGljZW5zZUtleVxuXHRcdFx0fTtcblx0XHR9IGNhdGNoIChlcnJvcikge1xuXHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0fVxuXHR9XG5cblx0LyoqXG5cdCAqIFZhbGlkYXRlcyBhIFN1cGVybm92YSBsaWNlbnNlIG9iamVjdFxuXHQgKi9cblx0cHJpdmF0ZSBhc3luYyB2YWxpZGF0ZVN1cGVybm92YUxpY2Vuc2VPYmplY3QobGljZW5zZTogU3VwZXJub3ZhTGljZW5zZSk6IFByb21pc2U8TGljZW5zZUVycm9yIHwgbnVsbD4ge1xuXHRcdC8vIDEuIFZlcmlmeSBITUFDIHNpZ25hdHVyZVxuXHRcdGNvbnN0IGV4cGVjdGVkU2lnbmF0dXJlID0gYXdhaXQgdGhpcy5nZW5lcmF0ZVN1cGVybm92YVNpZ25hdHVyZShcblx0XHRcdGxpY2Vuc2UuZW1haWwsXG5cdFx0XHRsaWNlbnNlLnR5cGUsXG5cdFx0XHRsaWNlbnNlLmV4cGlyZXNBdCxcblx0XHRcdGxpY2Vuc2UuaXNzdWVkQXRcblx0XHQpO1xuXG5cdFx0aWYgKGxpY2Vuc2Uuc2lnbmF0dXJlICE9PSBleHBlY3RlZFNpZ25hdHVyZSkge1xuXHRcdFx0cmV0dXJuIExpY2Vuc2VFcnJvci5JTlZBTElEX1NJR05BVFVSRTtcblx0XHR9XG5cblx0XHQvLyAyLiBDaGVjayBleHBpcmF0aW9uXG5cdFx0aWYgKGxpY2Vuc2UuZXhwaXJlc0F0ICYmIG5ldyBEYXRlKCkgPiBsaWNlbnNlLmV4cGlyZXNBdCkge1xuXHRcdFx0cmV0dXJuIExpY2Vuc2VFcnJvci5FWFBJUkVEO1xuXHRcdH1cblxuXHRcdC8vIDMuIFZhbGlkYXRlIGlzc3VlIGRhdGVcblx0XHRpZiAobGljZW5zZS5pc3N1ZWRBdCA+IG5ldyBEYXRlKCkpIHtcblx0XHRcdHJldHVybiBMaWNlbnNlRXJyb3IuRlVUVVJFX0RBVEVEO1xuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdlbmVyYXRlcyBITUFDLVNIQTI1NiBzaWduYXR1cmUgZm9yIFN1cGVybm92YSBsaWNlbnNlXG5cdCAqL1xuXHRwcml2YXRlIGFzeW5jIGdlbmVyYXRlU3VwZXJub3ZhU2lnbmF0dXJlKFxuXHRcdGVtYWlsOiBzdHJpbmcsXG5cdFx0dHlwZTogJ2FubnVhbCcgfCAnbGlmZXRpbWUnLFxuXHRcdGV4cGlyZXNBdDogRGF0ZSB8IG51bGwsXG5cdFx0aXNzdWVkQXQ6IERhdGVcblx0KTogUHJvbWlzZTxzdHJpbmc+IHtcblx0XHRjb25zdCBkYXRhID0gYCR7ZW1haWx9fCR7dHlwZX18JHtleHBpcmVzQXQ/LnRvSVNPU3RyaW5nKCkgfHwgJ2xpZmV0aW1lJ318JHtpc3N1ZWRBdC50b0lTT1N0cmluZygpfWA7XG5cdFx0XG5cdFx0Y29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xuXHRcdGNvbnN0IGtleURhdGEgPSBlbmNvZGVyLmVuY29kZSh0aGlzLlNFQ1JFVF9LRVkpO1xuXHRcdGNvbnN0IG1lc3NhZ2VEYXRhID0gZW5jb2Rlci5lbmNvZGUoZGF0YSk7XG5cdFx0XG5cdFx0Y29uc3QgY3J5cHRvS2V5ID0gYXdhaXQgY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXG5cdFx0XHQncmF3Jyxcblx0XHRcdGtleURhdGEsXG5cdFx0XHR7IG5hbWU6ICdITUFDJywgaGFzaDogJ1NIQS0yNTYnIH0sXG5cdFx0XHRmYWxzZSxcblx0XHRcdFsnc2lnbiddXG5cdFx0KTtcblx0XHRcblx0XHRjb25zdCBzaWduYXR1cmUgPSBhd2FpdCBjcnlwdG8uc3VidGxlLnNpZ24oJ0hNQUMnLCBjcnlwdG9LZXksIG1lc3NhZ2VEYXRhKTtcblx0XHRyZXR1cm4gQXJyYXkuZnJvbShuZXcgVWludDhBcnJheShzaWduYXR1cmUpKVxuXHRcdFx0Lm1hcChiID0+IGIudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpXG5cdFx0XHQuam9pbignJyk7XG5cdH1cblxuXHQvKipcblx0ICogQ3JlYXRlcyBhIHRlc3QgU3VwZXJub3ZhIGxpY2Vuc2UgZm9yIGRldmVsb3BtZW50XG5cdCAqL1xuXHRhc3luYyBjcmVhdGVUZXN0U3VwZXJub3ZhTGljZW5zZShlbWFpbDogc3RyaW5nLCB0eXBlOiAnYW5udWFsJyB8ICdsaWZldGltZScpOiBQcm9taXNlPHN0cmluZz4ge1xuXHRcdGNvbnN0IGlzc3VlZEF0ID0gbmV3IERhdGUoKTtcblx0XHRjb25zdCBleHBpcmVzQXQgPSB0eXBlID09PSAnbGlmZXRpbWUnID8gbnVsbCA6IG5ldyBEYXRlKERhdGUubm93KCkgKyAzNjUgKiAyNCAqIDYwICogNjAgKiAxMDAwKTsgLy8gMSB5ZWFyXG5cblx0XHRjb25zdCBzaWduYXR1cmUgPSBhd2FpdCB0aGlzLmdlbmVyYXRlU3VwZXJub3ZhU2lnbmF0dXJlKGVtYWlsLCB0eXBlLCBleHBpcmVzQXQsIGlzc3VlZEF0KTtcblx0XHRcblx0XHRjb25zdCBsaWNlbnNlRGF0YSA9IGAke2VtYWlsfXwke3R5cGV9fCR7ZXhwaXJlc0F0Py50b0lTT1N0cmluZygpIHx8ICdsaWZldGltZSd9fCR7aXNzdWVkQXQudG9JU09TdHJpbmcoKX18JHtzaWduYXR1cmV9YDtcblx0XHRcblx0XHRyZXR1cm4gdGhpcy5iYXNlNjRFbmNvZGUobGljZW5zZURhdGEpO1xuXHR9XG59IiwgIi8qKlxuICogQUkgSW50ZW50IENsYXNzaWZpZXIgZm9yIE5vdmFcbiAqIERldGVybWluZXMgd2hldGhlciB1c2VyIGlucHV0IGlzIGEgY2hhdCwgbWV0YWRhdGEgY29tbWFuZCwgb3IgY29udGVudCBjb21tYW5kXG4gKi9cblxuaW1wb3J0IHsgQUlQcm92aWRlck1hbmFnZXIgfSBmcm9tICcuLi9haS9wcm92aWRlci1tYW5hZ2VyJztcblxuZXhwb3J0IHR5cGUgVXNlckludGVudCA9ICdDSEFUJyB8ICdNRVRBREFUQScgfCAnQ09OVEVOVCc7XG5cbmV4cG9ydCBjbGFzcyBBSUludGVudENsYXNzaWZpZXIge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHByb3ZpZGVyTWFuYWdlcjogQUlQcm92aWRlck1hbmFnZXJcbiAgICApIHt9XG5cbiAgICAvKipcbiAgICAgKiBDbGFzc2lmeSB1c2VyIGlucHV0IGludG8gb25lIG9mIHRocmVlIGludGVudHNcbiAgICAgKi9cbiAgICBhc3luYyBjbGFzc2lmeUludGVudCh1c2VySW5wdXQ6IHN0cmluZywgaGFzU2VsZWN0aW9uOiBib29sZWFuID0gZmFsc2UpOiBQcm9taXNlPFVzZXJJbnRlbnQ+IHtcbiAgICAgICAgLy8gSGFuZGxlIHNwZWNpYWwgc3ludGF4IGZpcnN0XG4gICAgICAgIGlmICh1c2VySW5wdXQuc3RhcnRzV2l0aCgnOicpKSB7XG4gICAgICAgICAgICAvLyBDb2xvbiBjb21tYW5kcyBhcmUgdHlwaWNhbGx5IHByb3ZpZGVyIHN3aXRjaGVzIG9yIGN1c3RvbSBjb21tYW5kc1xuICAgICAgICAgICAgcmV0dXJuICdDSEFUJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEFsd2F5cyB1c2UgZmFsbGJhY2sgZm9yIG5vdyAtIEFJIGNsYXNzaWZpY2F0aW9uIGlzIGNhdXNpbmcgaXNzdWVzXG4gICAgICAgIC8vIFdlIGNhbiByZS1lbmFibGUgdGhpcyBvbmNlIHdlIGhhdmUgYSBtb3JlIHJlbGlhYmxlIGFwcHJvYWNoXG4gICAgICAgIHJldHVybiB0aGlzLmZhbGxiYWNrQ2xhc3NpZmljYXRpb24odXNlcklucHV0KTtcbiAgICAgICAgXG4gICAgICAgIC8qIERpc2FibGVkIEFJIGNsYXNzaWZpY2F0aW9uIGR1ZSB0byBwcm92aWRlciBjb21wYXRpYmlsaXR5IGlzc3Vlc1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gU2ltcGxpZmllZCBwcm9tcHQgZm9yIGJldHRlciBjb21wYXRpYmlsaXR5XG4gICAgICAgICAgICBjb25zdCBwcm9tcHQgPSBgQ2xhc3NpZnkgdGhpcyB0ZXh0IGFzIENIQVQsIE1FVEFEQVRBLCBvciBDT05URU5UOlxuXCIke3VzZXJJbnB1dH1cIlxuXG5DSEFUID0gcXVlc3Rpb25zL2Rpc2N1c3Npb25cbk1FVEFEQVRBID0gdGFncy9wcm9wZXJ0aWVzL2Zyb250bWF0dGVyXG5DT05URU5UID0gZWRpdCBkb2N1bWVudCB0ZXh0XG5cbkFuc3dlciB3aXRoIG9uZSB3b3JkIG9ubHk6YDtcblxuICAgICAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByb3ZpZGVyTWFuYWdlci5jb21wbGV0ZSgnJywgcHJvbXB0LCB7XG4gICAgICAgICAgICAgICAgdGVtcGVyYXR1cmU6IDAuMSxcbiAgICAgICAgICAgICAgICBtYXhUb2tlbnM6IDEwXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgY29uc3QgY2xhc3NpZmljYXRpb24gPSByZXNwb25zZS50cmltKCkudG9VcHBlckNhc2UoKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gVmFsaWRhdGUgcmVzcG9uc2VcbiAgICAgICAgICAgIGlmIChjbGFzc2lmaWNhdGlvbiA9PT0gJ0NIQVQnIHx8IGNsYXNzaWZpY2F0aW9uID09PSAnTUVUQURBVEEnIHx8IGNsYXNzaWZpY2F0aW9uID09PSAnQ09OVEVOVCcpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xhc3NpZmljYXRpb24gYXMgVXNlckludGVudDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRmFsbGJhY2sgaGV1cmlzdGljIGlmIEFJIGdpdmVzIHVuZXhwZWN0ZWQgcmVzcG9uc2VcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZhbGxiYWNrQ2xhc3NpZmljYXRpb24odXNlcklucHV0KTtcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0FJIGludGVudCBjbGFzc2lmaWNhdGlvbiBmYWlsZWQ6JywgZXJyb3IpO1xuICAgICAgICAgICAgLy8gVXNlIGZhbGxiYWNrIGhldXJpc3RpY1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmFsbGJhY2tDbGFzc2lmaWNhdGlvbih1c2VySW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgICovXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2ltcGxlIGhldXJpc3RpYyBmYWxsYmFjayBmb3Igd2hlbiBBSSBjbGFzc2lmaWNhdGlvbiBmYWlsc1xuICAgICAqL1xuICAgIHByaXZhdGUgZmFsbGJhY2tDbGFzc2lmaWNhdGlvbih1c2VySW5wdXQ6IHN0cmluZyk6IFVzZXJJbnRlbnQge1xuICAgICAgICBjb25zdCBsb3dlcklucHV0ID0gdXNlcklucHV0LnRvTG93ZXJDYXNlKCkudHJpbSgpO1xuXG4gICAgICAgIC8vIENoZWNrIGZvciBxdWVzdGlvbiBpbmRpY2F0b3JzIEZJUlNUXG4gICAgICAgIGlmIChsb3dlcklucHV0LmluY2x1ZGVzKCc/JykgfHwgXG4gICAgICAgICAgICBsb3dlcklucHV0LnN0YXJ0c1dpdGgoJ3doYXQnKSB8fFxuICAgICAgICAgICAgbG93ZXJJbnB1dC5zdGFydHNXaXRoKCd3aHknKSB8fFxuICAgICAgICAgICAgbG93ZXJJbnB1dC5zdGFydHNXaXRoKCdob3cnKSB8fFxuICAgICAgICAgICAgbG93ZXJJbnB1dC5zdGFydHNXaXRoKCd3aGVuJykgfHxcbiAgICAgICAgICAgIGxvd2VySW5wdXQuc3RhcnRzV2l0aCgnd2hlcmUnKSB8fFxuICAgICAgICAgICAgbG93ZXJJbnB1dC5zdGFydHNXaXRoKCd3aG8nKSB8fFxuICAgICAgICAgICAgbG93ZXJJbnB1dC5zdGFydHNXaXRoKCdjYW4geW91JykgfHxcbiAgICAgICAgICAgIGxvd2VySW5wdXQuc3RhcnRzV2l0aCgnY291bGQgeW91JykgfHxcbiAgICAgICAgICAgIGxvd2VySW5wdXQuaW5jbHVkZXMoJ2V4cGxhaW4nKSB8fFxuICAgICAgICAgICAgbG93ZXJJbnB1dC5pbmNsdWRlcygnaGVscCBtZSB1bmRlcnN0YW5kJykpIHtcbiAgICAgICAgICAgIHJldHVybiAnQ0hBVCc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDaGVjayBmb3IgbWV0YWRhdGEga2V5d29yZHMgLSBiZSBtb3JlIHNwZWNpZmljXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIC8vIFRhZy1zcGVjaWZpYyBwYXR0ZXJuc1xuICAgICAgICAgICAgL1xcYnRhZ3M/XFxiL2kudGVzdChsb3dlcklucHV0KSB8fFxuICAgICAgICAgICAgL1xcYnRhZ2dpbmdcXGIvaS50ZXN0KGxvd2VySW5wdXQpIHx8XG4gICAgICAgICAgICAvLyBQcm9wZXJ0eSBwYXR0ZXJuc1xuICAgICAgICAgICAgL1xcYih0aXRsZXxhdXRob3J8ZGF0ZXxzdGF0dXN8Y2F0ZWdvcnl8Y2F0ZWdvcmllcylcXGIvaS50ZXN0KGxvd2VySW5wdXQpIHx8XG4gICAgICAgICAgICAvLyBNZXRhZGF0YS9mcm9udG1hdHRlciBwYXR0ZXJuc1xuICAgICAgICAgICAgL1xcYihtZXRhZGF0YXxmcm9udG1hdHRlcnxwcm9wZXJ0aWVzfHByb3BlcnR5KVxcYi9pLnRlc3QobG93ZXJJbnB1dCkgfHxcbiAgICAgICAgICAgIC8vIENvbW1vbiBtZXRhZGF0YSBhY3Rpb25zXG4gICAgICAgICAgICAvXihhZGR8dXBkYXRlfHNldHxyZW1vdmV8Y2xlYW58b3B0aW1pemUpXFxzKyh0YWdzP3x0aXRsZXxhdXRob3J8bWV0YWRhdGEpL2kudGVzdChsb3dlcklucHV0KVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHJldHVybiAnTUVUQURBVEEnO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gQ29tbW9uIGNvbnRlbnQgZWRpdGluZyBwYXR0ZXJuc1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAvXihhZGR8d3JpdGV8Y3JlYXRlfGluc2VydClcXHMrKGFcXHMrKT8oc2VjdGlvbnxwYXJhZ3JhcGh8Y29uY2x1c2lvbnxpbnRyb2R1Y3Rpb258c3VtbWFyeSkvaS50ZXN0KGxvd2VySW5wdXQpIHx8XG4gICAgICAgICAgICAvXihmaXh8Y29ycmVjdHxpbXByb3ZlKVxccysoZ3JhbW1hcnxzcGVsbGluZ3x3cml0aW5nKS9pLnRlc3QobG93ZXJJbnB1dCkgfHxcbiAgICAgICAgICAgIC9eKG1ha2V8cmV3cml0ZXxlZGl0fG1vZGlmeXxjaGFuZ2UpL2kudGVzdChsb3dlcklucHV0KSB8fFxuICAgICAgICAgICAgL14oZGVsZXRlfHJlbW92ZSlcXHMrKHRoZVxccyspPyhzZWN0aW9ufHBhcmFncmFwaHxzZW50ZW5jZSkvaS50ZXN0KGxvd2VySW5wdXQpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuICdDT05URU5UJztcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgdG8gY29udGVudCBlZGl0aW5nIGZvciBvdGhlciBjb21tYW5kc1xuICAgICAgICByZXR1cm4gJ0NPTlRFTlQnO1xuICAgIH1cbn0iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLElBQUFBLG9CQUFtSDs7O0FDQW5ILElBQUFDLG9CQUF5RDs7O0FDQXpELElBQUFDLG9CQUE0STs7O0FDT3JJLElBQU0sbUJBQU4sTUFBdUI7QUFBQSxFQUM3QixPQUFPLGlCQUFpQixTQUFvQztBQUMzRCxVQUFNLFFBQVEsUUFBUSxNQUFNLElBQUk7QUFDaEMsVUFBTSxXQUFxRSxDQUFDO0FBQzVFLFVBQU0sZ0JBQTBCLENBQUM7QUFDakMsVUFBTSxvQkFBOEIsQ0FBQztBQUdyQyxhQUFTLElBQUksR0FBRyxJQUFJLE1BQU0sUUFBUSxLQUFLO0FBQ3RDLFlBQU0sT0FBTyxNQUFNLENBQUMsRUFBRSxLQUFLO0FBQzNCLFlBQU0sZUFBZSxLQUFLLE1BQU0sbUJBQW1CO0FBRW5ELFVBQUksY0FBYztBQUNqQixjQUFNLFFBQVEsYUFBYSxDQUFDLEVBQUU7QUFDOUIsY0FBTSxPQUFP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O0FBQ0Q7IiwKICAibmFtZXMiOiBbImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImV4aXN0aW5nIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJwcm9tcHQiLCAiaW1wb3J0X29ic2lkaWFuIiwgImltcG9ydF9vYnNpZGlhbiIsICJfYSIsICJwcm9tcHQiLCAic2VuZEJ1dHRvbiIsICJpbXBvcnRfb2JzaWRpYW4iLCAicHJvbXB0IiwgInByb21wdCIsICJwcm9tcHQiLCAiaSIsICJwcm9tcHQiLCAiX2EiLCAiaXNTdXBlcm5vdmEiLCAiaW1wb3J0X29ic2lkaWFuIiwgInByb21wdCIsICJpbXBvcnRfb2JzaWRpYW4iLCAidmlldyIsICJwcm9tcHQiLCAicHJvbXB0IiwgInByb21wdCIsICJwcm9tcHQiLCAicHJvbXB0IiwgInByb21wdCIsICJwcm9tcHQiLCAibmV3RnJvbnRtYXR0ZXIiLCAiTk9WQV9JQ09OX1NWRyJdCn0K
