/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => NovaPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian15 = require("obsidian");

// src/settings.ts
var import_obsidian12 = require("obsidian");

// src/ui/sidebar-view.ts
var import_obsidian10 = require("obsidian");

// src/core/document-analysis.ts
var DocumentAnalyzer = class {
  static analyzeStructure(content) {
    const lines = content.split("\n");
    const headings = [];
    const emptyHeadings = [];
    const incompleteBullets = [];
    for (let i = 0; i < lines.length; i++) {
      const line = lines[i].trim();
      const headingMatch = line.match(/^(#{1,6})\s+(.+)$/);
      if (headingMatch) {
        const level = headingMatch[1].length;
        const text = headingMatch[2];
        const hasContent = this.hasContentAfterHeading(lines, i);
        const isEmpty = !hasContent;
        headings.push({ level, text, isEmpty });
        if (isEmpty) {
          emptyHeadings.push(text);
        }
      }
      if (line.match(/^[-*+]\s*(.*)\.\.\.?\s*$/) || line.match(/^[-*+]\s*$/) || line.match(/^[-*+]\s*(TODO|TBD)/i)) {
        incompleteBullets.push(line);
      }
    }
    const wordCount = content.split(/\s+/).filter((word) => word.length > 0).length;
    return {
      headings,
      wordCount,
      emptyHeadings,
      incompleteBullets
    };
  }
  static hasContentAfterHeading(lines, headingIndex) {
    var _a;
    const currentHeading = lines[headingIndex].trim();
    const currentLevel = ((_a = currentHeading.match(/^(#{1,6})/)) == null ? void 0 : _a[1].length) || 0;
    for (let i = headingIndex + 1; i < lines.length; i++) {
      const line = lines[i].trim();
      const headingMatch = line.match(/^(#{1,6})\s/);
      if (headingMatch) {
        const nextLevel = headingMatch[1].length;
        if (nextLevel <= currentLevel) {
          return false;
        }
      }
      if (line.length > 0) return true;
    }
    return false;
  }
};

// src/ai/models.ts
function getAvailableModels(providerType, settings) {
  var _a, _b;
  switch (providerType) {
    case "claude":
      return [
        { value: "claude-opus-4-20250514", label: "Claude Opus 4" },
        { value: "claude-sonnet-4-20250514", label: "Claude Sonnet 4" },
        { value: "claude-3-7-sonnet-latest", label: "Claude 3.7 Sonnet" },
        { value: "claude-3-5-sonnet-latest", label: "Claude 3.5 Sonnet" },
        { value: "claude-3-5-sonnet-20241022", label: "Claude 3.5 Sonnet (Oct 22)" },
        { value: "claude-3-5-haiku-latest", label: "Claude 3.5 Haiku" }
      ];
    case "openai":
      return [
        { value: "gpt-4.1-2025-04-14", label: "GPT-4.1" },
        { value: "gpt-4.1-mini-2025-04-14", label: "GPT-4.1 Mini" },
        { value: "gpt-4.1-nano-2025-04-14", label: "GPT-4.1 Nano" },
        { value: "gpt-4o", label: "GPT-4o" },
        { value: "gpt-4o-mini", label: "GPT-4o Mini" }
      ];
    case "google":
      return [
        { value: "gemini-2.5-flash-preview-04-17", label: "Gemini 2.5 Flash" },
        { value: "gemini-2.5-pro-preview-03-25", label: "Gemini 2.5 Pro" },
        { value: "gemini-2.0-flash", label: "Gemini 2.0 Flash" },
        { value: "gemini-2.0-flash-lite", label: "Gemini 2.0 Flash-Lite" }
      ];
    case "ollama":
      const ollamaModel = (_b = (_a = settings == null ? void 0 : settings.aiProviders) == null ? void 0 : _a.ollama) == null ? void 0 : _b.model;
      if (ollamaModel && ollamaModel.trim()) {
        return [{ value: ollamaModel, label: ollamaModel }];
      }
      return [];
    default:
      return [];
  }
}

// src/ui/input-handler.ts
var import_obsidian2 = require("obsidian");

// src/ui/wikilink-suggest.ts
var import_obsidian = require("obsidian");
var NovaWikilinkAutocomplete = class {
  constructor(app, textArea, container) {
    // Reference to NovaSidebarView
    this.lastTriggerPos = -1;
    this.app = app;
    this.textArea = textArea;
    this.setupEventListeners();
  }
  setSidebarView(sidebarView) {
    this.sidebarView = sidebarView;
  }
  setupEventListeners() {
    this.textArea.addEventListener("input", this.handleInput.bind(this));
  }
  handleInput() {
    const text = this.textArea.value;
    const cursorPos = this.textArea.selectionStart;
    const beforeCursor = text.substring(0, cursorPos);
    const linkMatch = beforeCursor.match(/\[\[([^\]]*?)$/);
    if (linkMatch && cursorPos !== this.lastTriggerPos) {
      this.lastTriggerPos = cursorPos;
      this.showNativeFileModal();
    }
  }
  showNativeFileModal() {
    var _a;
    const currentFile = ((_a = this.sidebarView) == null ? void 0 : _a.currentFile) || this.app.workspace.getActiveFile();
    const modal = new WikilinkFileModal(
      this.app,
      async (file) => {
        await this.selectFile(file);
      },
      () => {
        this.lastTriggerPos = -1;
      },
      currentFile
    );
    modal.open();
  }
  async selectFile(file) {
    const text = this.textArea.value;
    const cursorPos = this.textArea.selectionStart;
    const beforeCursor = text.substring(0, cursorPos);
    const linkMatch = beforeCursor.match(/\[\[([^\]]*?)$/);
    if (linkMatch) {
      const startPos = cursorPos - linkMatch[0].length;
      const newText = text.substring(0, startPos) + text.substring(cursorPos);
      this.textArea.value = newText;
      this.textArea.setSelectionRange(startPos, startPos);
      this.textArea.dispatchEvent(new Event("input", { bubbles: true }));
    }
    if (this.sidebarView && this.sidebarView.addFilesToContext) {
      await this.sidebarView.addFilesToContext([file.basename]);
    }
    this.lastTriggerPos = -1;
    this.textArea.focus();
  }
  destroy() {
  }
};
var WikilinkFileModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(app, onSelect, onCancel, currentFile) {
    super(app);
    this.allFiles = [];
    this.onSelectCallback = onSelect;
    this.onCancelCallback = onCancel;
    this.currentFile = currentFile || null;
    this.setPlaceholder("Search files to add to context...");
    this.loadFiles();
  }
  onOpen() {
    super.onOpen();
    this.addInstructions();
  }
  addInstructions() {
    const instructionsEl = this.modalEl.createDiv({ cls: "prompt-instructions" });
    const navInstruction = instructionsEl.createDiv({ cls: "prompt-instruction" });
    navInstruction.createSpan({ cls: "prompt-instruction-command", text: "\u2191\u2193" });
    navInstruction.createSpan({ text: "to navigate" });
    const useInstruction = instructionsEl.createDiv({ cls: "prompt-instruction" });
    useInstruction.createSpan({ cls: "prompt-instruction-command", text: "\u21B5" });
    useInstruction.createSpan({ text: "to use" });
    const escInstruction = instructionsEl.createDiv({ cls: "prompt-instruction" });
    escInstruction.createSpan({ cls: "prompt-instruction-command", text: "esc" });
    escInstruction.createSpan({ text: "to dismiss" });
  }
  loadFiles() {
    this.allFiles = this.app.vault.getMarkdownFiles();
    if (this.currentFile) {
      this.allFiles = this.allFiles.filter((file) => file.path !== this.currentFile.path);
    }
    this.allFiles.sort((a, b) => b.stat.mtime - a.stat.mtime);
  }
  getItems() {
    return this.allFiles;
  }
  getItemText(file) {
    return file.basename;
  }
  onChooseItem(file) {
    this.onSelectCallback(file);
  }
  renderSuggestion(match, el) {
    const file = match.item;
    const container = el.createDiv({ cls: "suggestion-content" });
    const title = container.createDiv({ cls: "suggestion-title" });
    title.textContent = file.basename;
    const aux = container.createDiv({ cls: "suggestion-aux" });
    aux.textContent = file.path;
  }
  onClose() {
    super.onClose();
    if (this.onCancelCallback) {
      this.onCancelCallback();
    }
  }
};

// src/ui/input-handler.ts
var _InputHandler = class _InputHandler {
  constructor(plugin, container, contextManager) {
    this.dropZoneOverlay = null;
    this.isDragging = false;
    // Reference to NovaSidebarView for context operations
    // Event cleanup tracking
    this.eventListeners = [];
    this.plugin = plugin;
    this.container = container;
    this.contextManager = contextManager;
  }
  setSidebarView(sidebarView) {
    this.sidebarView = sidebarView;
    if (this.wikilinkAutocomplete) {
      this.wikilinkAutocomplete.setSidebarView(sidebarView);
    }
  }
  setCommandSystem(commandSystem) {
    this.commandSystem = commandSystem;
    const sendButtonEl = this.sendButton.buttonEl;
    sendButtonEl.remove();
    this.commandSystem.createCommandButton(this.inputRow);
    this.inputRow.appendChild(sendButtonEl);
    this.commandSystem.createCommandPickerInContainer(this.inputRow);
  }
  getTextArea() {
    return this.textArea;
  }
  createInputInterface(chatContainer) {
    this.container = this.container.createDiv({ cls: "nova-input-container" });
    this.container.style.cssText = `
			flex-shrink: 0;
			padding: var(--size-4-3);
			border-top: 1px solid var(--background-modifier-border);
			position: relative;
		`;
    this.inputRow = this.container.createDiv({ cls: "nova-input-row" });
    this.inputRow.style.cssText = `
			display: flex;
			gap: var(--size-2-3);
			align-items: center;
			position: relative;
		`;
    const textAreaContainer = this.inputRow.createDiv();
    textAreaContainer.style.cssText = "flex: 1; position: relative;";
    this.textArea = new import_obsidian2.TextAreaComponent(textAreaContainer);
    this.textArea.setPlaceholder("How can I help?");
    this.textArea.inputEl.style.cssText = `
			max-height: 200px;
			resize: none;
			overflow-y: auto;
			border-radius: var(--radius-s);
			padding: var(--size-2-2) var(--size-2-3);
			border: 1px solid var(--background-modifier-border);
			background: var(--background-primary);
			color: var(--text-normal);
			font-family: var(--font-interface);
			line-height: 1.4;
			width: 100%;
			box-sizing: border-box;
		`;
    this.autoGrowTextarea = () => {
      const textarea = this.textArea.inputEl;
      textarea.style.height = "auto";
      textarea.style.height = Math.min(textarea.scrollHeight, 200) + "px";
    };
    this.addEventListener(this.textArea.inputEl, "input", this.autoGrowTextarea);
    setTimeout(this.autoGrowTextarea, 0);
    this.wikilinkAutocomplete = new NovaWikilinkAutocomplete(this.plugin.app, this.textArea.inputEl, this.inputRow);
    if (this.sidebarView) {
      this.wikilinkAutocomplete.setSidebarView(this.sidebarView);
    }
    this.addEventListener(this.textArea.inputEl, "input", () => {
      this.contextManager.updateLiveContextPreview(this.textArea.getValue());
    });
    this.sendButton = new import_obsidian2.ButtonComponent(this.inputRow);
    this.sendButton.setIcon("send");
    this.sendButton.setTooltip("Send message");
    this.sendButton.onClick(() => this.handleSend());
    this.sendButton.buttonEl.style.cssText = `
			min-width: var(--size-4-9);
			height: var(--size-4-9);
			border-radius: 50%;
			display: flex;
			align-items: center;
			justify-content: center;
			padding: 0;
			flex-shrink: 0;
			background: var(--interactive-accent);
			color: var(--text-on-accent);
			border: none;
		`;
    this.addEventListener(this.textArea.inputEl, "keydown", (event) => {
      var _a, _b, _c, _d;
      const keyEvent = event;
      if (keyEvent.key === "Enter" && !keyEvent.shiftKey) {
        event.preventDefault();
        ((_a = this.commandSystem) == null ? void 0 : _a.handleCommandPickerSelection()) || false || this.handleSend();
      } else if (keyEvent.key === "Escape") {
        (_b = this.commandSystem) == null ? void 0 : _b.hideCommandPicker();
      } else if (keyEvent.key === "ArrowUp" || keyEvent.key === "ArrowDown") {
        if ((_c = this.commandSystem) == null ? void 0 : _c.handleCommandPickerNavigation(keyEvent.key)) {
          event.preventDefault();
        }
      } else if (keyEvent.key === "Tab") {
        if ((_d = this.commandSystem) == null ? void 0 : _d.handleCommandPickerNavigation(keyEvent.key)) {
          event.preventDefault();
        }
      }
    });
    this.addEventListener(this.textArea.inputEl, "input", () => {
      if (this.commandSystem) {
        this.commandSystem.handleInputChange();
      }
    });
    this.setupDragAndDrop();
  }
  focus() {
    setTimeout(() => {
      var _a;
      if ((_a = this.textArea) == null ? void 0 : _a.inputEl) {
        this.textArea.inputEl.focus();
      }
    }, _InputHandler.FOCUS_DELAY_MS);
  }
  handleSend() {
    var _a;
    const message = this.textArea.getValue().trim();
    if (!message) return;
    this.textArea.setValue("");
    this.autoGrowTextarea();
    this.contextManager.hideContextPreview();
    (_a = this.onSendMessage) == null ? void 0 : _a.call(this, message);
  }
  setOnSendMessage(callback) {
    this.onSendMessage = callback;
  }
  getValue() {
    return this.textArea.getValue();
  }
  setValue(value) {
    this.textArea.setValue(value);
    this.autoGrowTextarea();
  }
  insertText(text) {
    const currentValue = this.textArea.getValue();
    const textarea = this.textArea.inputEl;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const newValue = currentValue.slice(0, start) + text + currentValue.slice(end);
    this.textArea.setValue(newValue);
    const newPosition = start + text.length;
    setTimeout(() => {
      textarea.setSelectionRange(newPosition, newPosition);
      textarea.focus();
    }, 0);
    this.autoGrowTextarea();
  }
  insertTextWithCursor(beforeCursor, afterCursor = "") {
    const currentValue = this.textArea.getValue();
    const textarea = this.textArea.inputEl;
    const start = textarea.selectionStart;
    const end = textarea.selectionEnd;
    const newValue = currentValue.slice(0, start) + beforeCursor + afterCursor + currentValue.slice(end);
    this.textArea.setValue(newValue);
    const cursorPosition = start + beforeCursor.length;
    setTimeout(() => {
      textarea.setSelectionRange(cursorPosition, cursorPosition);
      textarea.focus();
    }, 0);
    this.autoGrowTextarea();
  }
  addEventListener(element, event, handler) {
    element.addEventListener(event, handler);
    this.eventListeners.push({ element, event, handler });
  }
  setupDragAndDrop() {
    const dropZone = this.textArea.inputEl;
    this.addEventListener(dropZone, "dragenter", (e) => {
      e.preventDefault();
      this.handleDragEnter();
    });
    this.addEventListener(dropZone, "dragover", (e) => {
      e.preventDefault();
      e.dataTransfer.dropEffect = "copy";
    });
    this.addEventListener(dropZone, "dragleave", (e) => {
      if (e.target === dropZone) {
        this.handleDragLeave();
      }
    });
    this.addEventListener(dropZone, "drop", (e) => {
      e.preventDefault();
      this.handleDrop(e);
    });
  }
  handleDragEnter() {
    if (this.isDragging) return;
    this.isDragging = true;
    if (!this.dropZoneOverlay) {
      this.dropZoneOverlay = document.createElement("div");
      this.dropZoneOverlay.className = "nova-drop-zone-overlay";
      this.dropZoneOverlay.style.cssText = `
				position: absolute;
				top: 0;
				left: 0;
				right: 0;
				bottom: 0;
				background: var(--interactive-accent);
				opacity: 0;
				border: 2px dashed var(--interactive-accent);
				border-radius: var(--radius-s);
				display: flex;
				align-items: center;
				justify-content: center;
				pointer-events: none;
				transition: opacity 0.2s ease;
				z-index: 10;
			`;
      const iconContainer = document.createElement("div");
      iconContainer.style.cssText = `
				background: var(--background-primary);
				border-radius: 50%;
				width: 48px;
				height: 48px;
				display: flex;
				align-items: center;
				justify-content: center;
				box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
				opacity: 0;
				transform: scale(0.8);
				transition: all 0.2s ease;
			`;
      const icon = document.createElement("div");
      icon.innerHTML = `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><line x1="12" y1="5" x2="12" y2="19"></line><line x1="5" y1="12" x2="19" y2="12"></line></svg>`;
      icon.style.cssText = `
				color: var(--interactive-accent);
				display: flex;
				align-items: center;
				justify-content: center;
			`;
      iconContainer.appendChild(icon);
      this.dropZoneOverlay.appendChild(iconContainer);
    }
    const textAreaContainer = this.textArea.inputEl.parentElement;
    textAreaContainer.style.position = "relative";
    textAreaContainer.appendChild(this.dropZoneOverlay);
    setTimeout(() => {
      if (this.dropZoneOverlay) {
        this.dropZoneOverlay.style.opacity = "0.1";
        const icon = this.dropZoneOverlay.querySelector("div");
        if (icon) {
          icon.style.opacity = "1";
          icon.style.transform = "scale(1)";
        }
      }
    }, 10);
  }
  handleDragLeave() {
    this.isDragging = false;
    if (this.dropZoneOverlay) {
      this.dropZoneOverlay.style.opacity = "0";
      const icon = this.dropZoneOverlay.querySelector("div");
      if (icon) {
        icon.style.opacity = "0";
        icon.style.transform = "scale(0.8)";
      }
      setTimeout(() => {
        var _a;
        (_a = this.dropZoneOverlay) == null ? void 0 : _a.remove();
        this.dropZoneOverlay = null;
      }, 200);
    }
  }
  handleDrop(e) {
    var _a;
    this.handleDragLeave();
    const files = [];
    const textPlainData = (_a = e.dataTransfer) == null ? void 0 : _a.getData("text/plain");
    if (textPlainData && textPlainData.includes("obsidian://open?")) {
      const urls = textPlainData.split(/[\n\r]/).filter((line) => line.trim().startsWith("obsidian://open?"));
      for (const urlString of urls) {
        try {
          const url = new URL(urlString.trim());
          const filePath = url.searchParams.get("file");
          if (filePath) {
            const decodedPath = decodeURIComponent(filePath);
            const pathParts = decodedPath.split(/[/\\]/);
            const filename = pathParts[pathParts.length - 1];
            if (filename.endsWith(".md")) {
              const baseName = filename.replace(".md", "");
              if (baseName && !files.includes(baseName)) {
                files.push(baseName);
              }
            } else {
              if (filename && !files.includes(filename)) {
                files.push(filename);
              }
            }
          }
        } catch (error) {
          console.warn("Failed to parse Obsidian URL:", urlString, error);
        }
      }
    }
    if (files.length > 0) {
      this.addFilesToContext(files);
    } else if (textPlainData && textPlainData.includes("obsidian://open?")) {
      new import_obsidian2.Notice("Only markdown files can be added to context", 3e3);
    } else if (textPlainData && textPlainData.trim() && !textPlainData.includes("://")) {
      new import_obsidian2.Notice("Folders cannot be added to context. Please select individual files.", 3e3);
    }
  }
  async addFilesToContext(filenames) {
    if (filenames.length === 0) return;
    if (!this.plugin.featureManager.isFeatureEnabled("multi-doc-context")) {
      new import_obsidian2.Notice("Multi-document context is currently in early access for Supernova supporters. Available to all users August 15, 2025.", 3e3);
      return;
    }
    if (this.sidebarView) {
      await this.sidebarView.addFilesToContext(filenames);
    }
  }
  refreshCommandButton() {
    if (this.commandSystem) {
      this.commandSystem.updateCommandButtonVisibility();
    }
  }
  updateContextState(hasContext) {
    if (this.container) {
      if (hasContext) {
        this.container.classList.add("has-context");
      } else {
        this.container.classList.remove("has-context");
      }
    }
  }
  cleanup() {
    if (this.wikilinkAutocomplete) {
      this.wikilinkAutocomplete.destroy();
    }
    if (this.dropZoneOverlay) {
      this.dropZoneOverlay.remove();
      this.dropZoneOverlay = null;
    }
    this.eventListeners.forEach(({ element, event, handler }) => {
      element.removeEventListener(event, handler);
    });
    this.eventListeners = [];
  }
};
_InputHandler.FOCUS_DELAY_MS = 150;
var InputHandler = _InputHandler;

// src/ui/command-system.ts
var import_obsidian3 = require("obsidian");
var CommandSystem = class {
  constructor(plugin, container, textArea) {
    this.commandPickerItems = [];
    this.selectedCommandIndex = -1;
    this.isCommandMenuVisible = false;
    this.plugin = plugin;
    this.container = container;
    this.textArea = textArea;
  }
  createCommandButton(inputRow) {
    this.commandButton = new import_obsidian3.ButtonComponent(inputRow);
    this.commandButton.setIcon("zap");
    this.commandButton.setTooltip("Commands");
    this.commandButton.onClick(() => this.toggleCommandMenu());
    this.commandButton.buttonEl.style.cssText = `
			min-width: var(--size-4-9);
			height: var(--size-4-9);
			border-radius: 50%;
			display: ${this.shouldShowCommandButton() ? "flex" : "none"};
			align-items: center;
			justify-content: center;
			padding: 0;
			flex-shrink: 0;
			margin-right: var(--size-2-3);
		`;
    return this.commandButton;
  }
  createCommandPicker() {
    this.createCommandPickerInContainer(this.container);
  }
  createCommandPickerInContainer(container) {
    this.commandPicker = container.createDiv({ cls: "nova-command-picker" });
    this.commandPicker.style.cssText = `
			position: absolute;
			bottom: 100%;
			left: 0;
			right: 0;
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: 8px;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			max-height: 200px;
			overflow-y: auto;
			z-index: 1000;
			display: none;
			margin-bottom: 4px;
		`;
  }
  shouldShowCommandButton() {
    return import_obsidian3.Platform.isMobile && this.plugin.settings.showCommandButton && this.plugin.featureManager.isFeatureEnabled("commands");
  }
  updateCommandButtonVisibility() {
    if (this.commandButton) {
      const shouldShow = this.shouldShowCommandButton();
      this.commandButton.buttonEl.style.display = shouldShow ? "flex" : "none";
    }
  }
  toggleCommandMenu() {
    if (!this.commandMenu) {
      this.createCommandMenu();
    }
    if (this.isCommandMenuVisible) {
      this.hideCommandMenu();
    } else {
      this.showCommandMenu();
    }
  }
  createCommandMenu() {
    this.commandMenu = this.container.createDiv({ cls: "nova-command-menu" });
    this.commandMenu.style.cssText = `
			position: absolute;
			bottom: 100%;
			right: 0;
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: var(--radius-s);
			box-shadow: var(--shadow-s);
			min-width: 250px;
			max-height: 300px;
			overflow-y: auto;
			z-index: 1000;
			display: none;
			padding: var(--size-2-2);
		`;
    const commands = [
      { name: "Improve Writing", description: "Enhance clarity and flow", command: "improve writing" },
      { name: "Fix Grammar", description: "Correct grammar and spelling", command: "fix grammar" },
      { name: "Summarize", description: "Create a concise summary", command: "summarize" },
      { name: "Expand Ideas", description: "Develop thoughts further", command: "expand" },
      { name: "Explain", description: "Clarify complex concepts", command: "explain this" },
      { name: "Continue Writing", description: "Extend the current text", command: "continue writing" }
    ];
    const title = this.commandMenu.createEl("div", { text: "Quick Commands" });
    title.style.cssText = `
			font-size: var(--font-ui-medium);
			font-weight: 600;
			margin-bottom: var(--size-2-3);
			color: var(--text-normal);
		`;
    commands.forEach((cmd) => {
      const cmdEl = this.commandMenu.createDiv({ cls: "nova-command-item" });
      cmdEl.style.cssText = `
				padding: var(--size-2-2) var(--size-2-3);
				border-radius: var(--radius-xs);
				cursor: pointer;
				margin-bottom: var(--size-2-1);
				transition: background-color 0.1s;
			`;
      const nameEl = cmdEl.createEl("div", { text: cmd.name });
      nameEl.style.cssText = `
				font-weight: 500;
				color: var(--text-normal);
				margin-bottom: var(--size-2-1);
			`;
      const descEl = cmdEl.createEl("div", { text: cmd.description });
      descEl.style.cssText = `
				font-size: var(--font-ui-smaller);
				color: var(--text-muted);
			`;
      cmdEl.addEventListener("click", () => {
        this.textArea.setValue(cmd.command + " ");
        this.textArea.inputEl.focus();
        this.hideCommandMenu();
      });
      cmdEl.addEventListener("mouseenter", () => {
        cmdEl.style.background = "var(--background-modifier-hover)";
      });
      cmdEl.addEventListener("mouseleave", () => {
        cmdEl.style.background = "transparent";
      });
    });
  }
  showCommandMenu() {
    if (this.commandMenu) {
      this.commandMenu.style.display = "block";
      this.isCommandMenuVisible = true;
    }
  }
  hideCommandMenu() {
    if (this.commandMenu) {
      this.commandMenu.style.display = "none";
      this.isCommandMenuVisible = false;
    }
  }
  handleInputChange() {
    if (!this.textArea) {
      return;
    }
    const input = this.textArea.getValue();
    if (input.startsWith(":")) {
      this.showStructuredCommandPicker(input);
    } else {
      this.hideCommandPicker();
    }
  }
  /**
   * Show structured command picker for ":" trigger  
   */
  showStructuredCommandPicker(input) {
    if (!this.commandPicker) {
      return;
    }
    const structuredCommands = this.getStructuredCommands();
    const filterText = input.slice(1).toLowerCase();
    const filtered = structuredCommands.filter(
      (cmd) => cmd.name.toLowerCase().includes(filterText) || cmd.command.toLowerCase().includes(filterText) || cmd.keywords.some((keyword) => keyword.toLowerCase().includes(filterText))
    );
    this.commandPickerItems = [];
    this.commandPicker.empty();
    this.selectedCommandIndex = -1;
    if (filtered.length > 0) {
      filtered.forEach((cmd, index) => {
        const item = this.commandPicker.createDiv({ cls: "nova-command-picker-item" });
        item.style.cssText = `
					padding: 8px 12px;
					cursor: pointer;
					border-bottom: 1px solid var(--background-modifier-border-hover);
					transition: background-color 0.2s;
				`;
        const nameEl = item.createEl("div", { text: cmd.name });
        nameEl.style.cssText = `
					font-weight: 500;
					color: var(--text-normal);
					margin-bottom: 4px;
				`;
        const descEl = item.createEl("div", { text: cmd.description });
        descEl.style.cssText = `
					font-size: 0.85em;
					color: var(--text-muted);
					margin-bottom: 4px;
				`;
        const exampleEl = item.createEl("div", { text: `Example: ${cmd.example}` });
        exampleEl.style.cssText = `
					font-size: 0.8em;
					color: var(--text-accent);
					font-family: var(--font-monospace);
				`;
        item.addEventListener("click", () => {
          this.selectStructuredCommand(cmd.template);
        });
        item.addEventListener("mouseenter", () => {
          this.selectedCommandIndex = index;
          this.updateCommandPickerSelection();
        });
        this.commandPickerItems.push(item);
      });
      this.commandPicker.style.display = "block";
    } else {
      this.hideCommandPicker();
    }
  }
  hideCommandPicker() {
    this.commandPicker.style.display = "none";
    this.commandPickerItems = [];
    this.selectedCommandIndex = -1;
  }
  handleCommandPickerNavigation(key) {
    if (this.commandPickerItems.length === 0) return false;
    if (key === "ArrowDown") {
      this.selectedCommandIndex = Math.min(this.selectedCommandIndex + 1, this.commandPickerItems.length - 1);
      this.updateCommandPickerSelection();
      return true;
    } else if (key === "ArrowUp") {
      this.selectedCommandIndex = Math.max(this.selectedCommandIndex - 1, -1);
      this.updateCommandPickerSelection();
      return true;
    } else if (key === "Tab" && this.selectedCommandIndex >= 0) {
      return this.handleCommandPickerSelection();
    }
    return false;
  }
  handleCommandPickerSelection() {
    if (this.selectedCommandIndex >= 0 && this.commandPickerItems.length > 0) {
      const commands = this.getStructuredCommands();
      const input = this.textArea.getValue();
      if (input.startsWith(":")) {
        const filterText = input.slice(1).toLowerCase();
        const filtered = commands.filter(
          (cmd) => cmd.name.toLowerCase().includes(filterText) || cmd.command.toLowerCase().includes(filterText) || cmd.keywords.some((keyword) => keyword.toLowerCase().includes(filterText))
        );
        if (this.selectedCommandIndex < filtered.length) {
          const selectedCmd = filtered[this.selectedCommandIndex];
          this.selectStructuredCommand(selectedCmd.template);
          return true;
        }
      }
    }
    return false;
  }
  updateCommandPickerSelection() {
    this.commandPickerItems.forEach((item, index) => {
      if (index === this.selectedCommandIndex) {
        item.style.background = "var(--background-modifier-hover)";
      } else {
        item.style.background = "transparent";
      }
    });
  }
  selectCommand(command) {
    this.textArea.setValue(command + " ");
    this.textArea.inputEl.focus();
    const length = this.textArea.getValue().length;
    this.textArea.inputEl.setSelectionRange(length, length);
    this.hideCommandPicker();
  }
  /**
   * Get structured commands for ":" trigger
   */
  getStructuredCommands() {
    return [
      {
        name: "Add Content",
        description: "Add new content at cursor position",
        command: "add",
        template: "add {cursor}",
        example: ":add paragraph about methodology",
        keywords: ["create", "new", "insert", "write"]
      },
      {
        name: "Edit Selection",
        description: "Edit the selected text",
        command: "edit",
        template: "edit to {cursor}",
        example: ":edit to be more formal",
        keywords: ["modify", "update", "change", "revise"]
      },
      {
        name: "Delete Selection",
        description: "Remove the selected text",
        command: "delete",
        template: "delete {cursor}",
        example: ":delete selected text",
        keywords: ["remove", "eliminate", "erase"]
      },
      {
        name: "Rewrite",
        description: "Rewrite content with specific style",
        command: "rewrite",
        template: "rewrite as {cursor}",
        example: ":rewrite as bullet points",
        keywords: ["rephrase", "restructure", "reword"]
      },
      {
        name: "Fix Grammar",
        description: "Correct grammar and spelling errors",
        command: "grammar",
        template: "fix grammar {cursor}",
        example: ":fix grammar in selection",
        keywords: ["correct", "proofread", "spelling"]
      },
      {
        name: "Continue",
        description: "Continue writing from current position",
        command: "continue",
        template: "continue {cursor}",
        example: ":continue with examples",
        keywords: ["extend", "expand", "proceed"]
      },
      {
        name: "Update Metadata",
        description: "Update document properties",
        command: "metadata",
        template: "update {cursor} property",
        example: ":update tags property",
        keywords: ["frontmatter", "properties", "tags"]
      }
    ];
  }
  /**
   * Select a structured command and insert template
   */
  selectStructuredCommand(template) {
    this.hideCommandPicker();
    const cursorPos = template.indexOf("{cursor}");
    if (cursorPos !== -1) {
      const beforeCursor = template.slice(0, cursorPos);
      const afterCursor = template.slice(cursorPos + 8);
      this.textArea.setValue(beforeCursor + afterCursor);
      setTimeout(() => {
        this.textArea.inputEl.setSelectionRange(cursorPos, cursorPos);
        this.textArea.inputEl.focus();
      }, 0);
    } else {
      this.textArea.setValue(template);
      this.textArea.inputEl.focus();
    }
  }
  cleanup() {
    if (this.commandMenu) {
      this.commandMenu.remove();
    }
    if (this.commandPicker) {
      this.commandPicker.remove();
    }
  }
};

// src/ui/context-manager.ts
var import_obsidian4 = require("obsidian");

// src/ai/context-limits.ts
var CLOUD_PROVIDER_LIMITS = {
  claude: {
    // Claude models - all current versions have 200k tokens
    "claude-sonnet-4-20250514": { tokens: 2e5 },
    "claude-3-5-sonnet-20241022": { tokens: 2e5 },
    "claude-3-5-sonnet-20240620": { tokens: 2e5 },
    "claude-3-5-haiku-20241022": { tokens: 2e5 },
    "claude-3-opus-20240229": { tokens: 2e5 },
    "claude-3-sonnet-20240229": { tokens: 2e5 },
    "claude-3-haiku-20240307": { tokens: 2e5 },
    // Fallback for any Claude model
    "default": { tokens: 2e5, fallback: true }
  },
  openai: {
    // GPT-4.1 models - 1M tokens
    "gpt-4.1-mini-2025-04-14": { tokens: 1e6 },
    "gpt-4.1-turbo-2025-04-14": { tokens: 1e6 },
    // GPT-4o models - 128k tokens
    "gpt-4o": { tokens: 128e3 },
    "gpt-4o-2024-08-06": { tokens: 128e3 },
    "gpt-4o-2024-05-13": { tokens: 128e3 },
    "gpt-4o-mini": { tokens: 128e3 },
    "gpt-4o-mini-2024-07-18": { tokens: 128e3 },
    // GPT-4 Turbo models - 128k tokens
    "gpt-4-turbo": { tokens: 128e3 },
    "gpt-4-turbo-2024-04-09": { tokens: 128e3 },
    "gpt-4-turbo-preview": { tokens: 128e3 },
    "gpt-4-0125-preview": { tokens: 128e3 },
    "gpt-4-1106-preview": { tokens: 128e3 },
    // Legacy GPT-4 models - 8k tokens
    "gpt-4": { tokens: 8e3 },
    "gpt-4-0613": { tokens: 8e3 },
    "gpt-4-0314": { tokens: 8e3 },
    // GPT-3.5 models - 16k tokens
    "gpt-3.5-turbo": { tokens: 16e3 },
    "gpt-3.5-turbo-0125": { tokens: 16e3 },
    "gpt-3.5-turbo-1106": { tokens: 16e3 },
    "gpt-3.5-turbo-16k": { tokens: 16e3 },
    // Fallback for OpenAI models - assume GPT-4o capacity
    "default": { tokens: 128e3, fallback: true }
  },
  google: {
    // Gemini 2.5 models - 1M tokens
    "gemini-2.5-flash-preview-04-17": { tokens: 1e6 },
    "gemini-2.5-flash-exp": { tokens: 1e6 },
    // Gemini 2.0 models - 1M tokens
    "gemini-2.0-flash-exp": { tokens: 1e6 },
    "gemini-2.0-flash-thinking-exp-01-21": { tokens: 1e6 },
    // Gemini 1.5 models - 1M tokens
    "gemini-1.5-pro": { tokens: 1e6 },
    "gemini-1.5-pro-latest": { tokens: 1e6 },
    "gemini-1.5-pro-002": { tokens: 1e6 },
    "gemini-1.5-pro-001": { tokens: 1e6 },
    "gemini-1.5-flash": { tokens: 1e6 },
    "gemini-1.5-flash-latest": { tokens: 1e6 },
    "gemini-1.5-flash-002": { tokens: 1e6 },
    "gemini-1.5-flash-001": { tokens: 1e6 },
    "gemini-1.5-flash-8b": { tokens: 1e6 },
    "gemini-1.5-flash-8b-latest": { tokens: 1e6 },
    "gemini-1.5-flash-8b-001": { tokens: 1e6 },
    // Legacy Gemini models - 30k tokens
    "gemini-pro": { tokens: 3e4 },
    "gemini-pro-vision": { tokens: 3e4 },
    "gemini-1.0-pro": { tokens: 3e4 },
    "gemini-1.0-pro-latest": { tokens: 3e4 },
    "gemini-1.0-pro-001": { tokens: 3e4 },
    // Fallback for Google models - assume modern Gemini capacity
    "default": { tokens: 1e6, fallback: true }
  }
};
function getContextLimit(provider, model) {
  const providerLimits = CLOUD_PROVIDER_LIMITS[provider.toLowerCase()];
  if (!providerLimits) {
    return 32e3;
  }
  const modelLimit = providerLimits[model];
  if (modelLimit) {
    return modelLimit.tokens;
  }
  const defaultLimit = providerLimits["default"];
  if (defaultLimit) {
    return defaultLimit.tokens;
  }
  return 32e3;
}

// src/core/context-calculator.ts
function estimateTokens(text) {
  if (!text) return 0;
  return Math.ceil(text.length / 4);
}
function calculateContextUsage(provider, model, conversationHistory = [], fileAttachments = [], currentInput = "", recentResponse = "", ollamaDefaultContext = 32e3) {
  let contextLimit;
  if (provider.toLowerCase() === "ollama") {
    contextLimit = ollamaDefaultContext;
  } else {
    contextLimit = getContextLimit(provider, model);
  }
  const conversationTokens = conversationHistory.reduce((total, msg) => {
    return total + estimateTokens(msg.content);
  }, 0);
  const fileTokens = fileAttachments.reduce((total, file) => {
    return total + estimateTokens(file.content);
  }, 0);
  const inputTokens = estimateTokens(currentInput);
  const responseTokens = estimateTokens(recentResponse);
  const totalTokens = conversationTokens + fileTokens + inputTokens + responseTokens;
  const usagePercentage = Math.round(totalTokens / contextLimit * 100);
  return {
    totalTokens,
    contextLimit,
    usagePercentage,
    breakdown: {
      conversationHistory: conversationTokens,
      fileAttachments: fileTokens,
      currentInput: inputTokens,
      recentResponse: responseTokens
    }
  };
}
function getRemainingContextPercentage(usage) {
  return Math.max(0, 100 - usage.usagePercentage);
}
function getContextWarningLevel(usage) {
  const remainingPercentage = getRemainingContextPercentage(usage);
  if (remainingPercentage <= 5) {
    return "critical";
  } else if (remainingPercentage <= 15) {
    return "warning";
  } else {
    return "safe";
  }
}
function formatContextUsage(usage) {
  const remainingPercentage = getRemainingContextPercentage(usage);
  const warningLevel = getContextWarningLevel(usage);
  if (warningLevel === "critical") {
    return `${remainingPercentage}% left!`;
  } else {
    return `${remainingPercentage}% left`;
  }
}
function getContextTooltip(usage) {
  const { totalTokens, contextLimit, breakdown } = usage;
  const remainingTokens = contextLimit - totalTokens;
  const lines = [
    `Context Usage: ${totalTokens.toLocaleString()} / ${contextLimit.toLocaleString()} tokens`,
    `Remaining: ${remainingTokens.toLocaleString()} tokens`,
    "",
    "Breakdown:"
  ];
  if (breakdown.conversationHistory > 0) {
    lines.push(`\u2022 Conversation: ${breakdown.conversationHistory.toLocaleString()} tokens`);
  }
  if (breakdown.fileAttachments > 0) {
    lines.push(`\u2022 File context: ${breakdown.fileAttachments.toLocaleString()} tokens`);
  }
  if (breakdown.currentInput > 0) {
    lines.push(`\u2022 Current input: ${breakdown.currentInput.toLocaleString()} tokens`);
  }
  if (breakdown.recentResponse > 0) {
    lines.push(`\u2022 Recent response: ${breakdown.recentResponse.toLocaleString()} tokens`);
  }
  return lines.join("\n");
}

// src/ui/context-manager.ts
var _ContextManager = class _ContextManager {
  constructor(plugin, app, container) {
    this.persistentContext = /* @__PURE__ */ new Map();
    this.currentContext = null;
    this.currentFilePath = null;
    // Track current file for validation
    this.currentOperationId = null;
    this.plugin = plugin;
    this.app = app;
    this.container = container;
  }
  setSidebarView(sidebarView) {
    this.sidebarView = sidebarView;
  }
  createContextIndicator() {
    this.contextIndicator = this.container.createDiv({ cls: "nova-context-indicator" });
    this.contextIndicator.style.cssText = `
			position: absolute;
			top: -2px;
			right: var(--size-4-3);
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: var(--radius-s);
			padding: var(--size-2-1) var(--size-2-2);
			font-size: var(--font-ui-smaller);
			color: var(--text-muted);
			display: none;
			z-index: 100;
			max-width: 200px;
			box-shadow: var(--shadow-s);
		`;
  }
  createContextPreview() {
    const previewContainer = this.container.createDiv({ cls: "nova-context-preview" });
    previewContainer.style.cssText = `
			background: var(--background-modifier-hover);
			border: 1px solid var(--background-modifier-border);
			border-radius: var(--radius-s);
			padding: var(--size-2-2) var(--size-2-3);
			margin-bottom: var(--size-2-2);
			font-size: var(--font-ui-small);
			display: none;
		`;
    const previewLabel = previewContainer.createSpan({ text: "Context: " });
    previewLabel.style.cssText = "color: var(--text-muted); font-weight: 600;";
    const previewList = previewContainer.createSpan({ cls: "nova-context-preview-list" });
    previewList.style.cssText = "color: var(--interactive-accent);";
    return previewContainer;
  }
  updateLiveContextPreview(message) {
    if (!this.contextPreview || !this.plugin.featureManager.isFeatureEnabled("multi-doc-context")) {
      return;
    }
    if (!this.currentFilePath) {
      this.contextPreview.style.display = "none";
      return;
    }
    if (!message) {
      this.contextPreview.style.display = "none";
      return;
    }
    const refPattern = /(\+)?\[\[([^\]]+?)(?:#([^\]]+?))?\]\]/g;
    const foundRefs = [];
    let match;
    while ((match = refPattern.exec(message)) !== null) {
      const docName = match[2];
      const property = match[3];
      foundRefs.push({ name: docName, property });
    }
    if (foundRefs.length === 0) {
      this.contextPreview.style.display = "none";
      return;
    }
    const previewList = this.contextPreview.querySelector(".nova-context-preview-list");
    if (previewList) {
      const refsText = foundRefs.map(
        (ref) => ref.property ? `${ref.name}#${ref.property}` : ref.name
      ).join(", ");
      previewList.textContent = refsText;
    }
    this.contextPreview.style.display = "block";
  }
  async buildContext(message, currentFile) {
    if (!this.plugin.featureManager.isFeatureEnabled("multi-doc-context") || !currentFile) {
      return null;
    }
    if (!this.currentFilePath) {
      return null;
    }
    const operationId = Date.now().toString() + Math.random().toString(36).substr(2, 9);
    this.currentOperationId = operationId;
    const targetFilePath = currentFile.path;
    if (this.currentFilePath !== targetFilePath) {
      return null;
    }
    try {
      const { cleanedMessage, references } = this.parseMessage(message, currentFile.path);
      const existingPersistent = this.persistentContext.get(currentFile.path) || [];
      if (references.length > 0) {
        const updatedPersistent = [...existingPersistent];
        for (const ref of references) {
          const exists = updatedPersistent.some((existing) => existing.file.path === ref.file.path);
          if (!exists) {
            updatedPersistent.push(ref);
          }
        }
        this.persistentContext.set(currentFile.path, updatedPersistent);
      }
      const rawPersistentDocs = this.persistentContext.get(currentFile.path) || [];
      const allPersistentDocs = rawPersistentDocs.filter((docRef) => {
        if (!(docRef == null ? void 0 : docRef.file) || !this.app.vault.getAbstractFileByPath(docRef.file.path)) {
          return false;
        }
        return true;
      });
      if (allPersistentDocs.length !== rawPersistentDocs.length) {
        if (allPersistentDocs.length > 0) {
          this.persistentContext.set(currentFile.path, allPersistentDocs);
        } else {
          this.persistentContext.delete(currentFile.path);
        }
      }
      const contextParts = [];
      const currentFileContext = await this.getFullDocumentContext(currentFile, true, 100);
      if (currentFileContext) {
        contextParts.push(currentFileContext);
      }
      for (const docRef of allPersistentDocs) {
        const contextPart = await this.getDocumentContext(docRef);
        if (contextPart) {
          contextParts.push(contextPart);
        }
      }
      const contextString = contextParts.join("\n\n---\n\n");
      const tokenCount = this.estimateTokens(contextString);
      const fileAttachments = contextParts.map((content) => ({ content }));
      const totalContextUsage = await this.calculateTotalContextUsage(fileAttachments);
      const context = {
        persistentDocs: allPersistentDocs,
        contextString,
        tokenCount,
        isNearLimit: false,
        // Legacy field - warnings now handled in sidebar-view.ts
        totalContextUsage
      };
      if (this.currentOperationId !== operationId || !this.currentFilePath || this.currentFilePath !== targetFilePath) {
        return null;
      }
      this.currentContext = context;
      if (context == null ? void 0 : context.persistentDocs.length) {
        this.updateContextIndicator(context);
      }
      return context;
    } catch (error) {
      return null;
    }
  }
  updateContextIndicator(context) {
  }
  hideContextPreview() {
    if (this.contextPreview) {
      this.contextPreview.style.display = "none";
    }
  }
  hideContextIndicator() {
    if (this.contextIndicator) {
      this.contextIndicator.style.display = "none";
    }
  }
  clearCurrentContext() {
    this.currentContext = null;
    this.currentFilePath = null;
    this.currentOperationId = null;
    this.hideContextIndicator();
    this.hideContextPreview();
  }
  /**
   * Set current file and immediately clear context to prevent bleeding
   * This should be called synchronously when file switches occur
   */
  setCurrentFile(file) {
    const newFilePath = (file == null ? void 0 : file.path) || null;
    if (this.currentFilePath !== newFilePath) {
      this.currentContext = null;
      this.currentOperationId = null;
      this.hideContextIndicator();
      this.hideContextPreview();
    }
    this.currentFilePath = newFilePath;
  }
  getCurrentContext() {
    return this.currentContext;
  }
  getCurrentFilePath() {
    return this.currentFilePath;
  }
  /**
   * Restore context after chat has been loaded (prevents missing file notifications from being cleared)
   */
  async restoreContextAfterChatLoad(file) {
    if (file && this.plugin.conversationManager) {
      await this.restoreContextFromConversation(file);
    }
    await this.refreshContextFromStorage();
  }
  /**
   * Check if drawer should be visible (has context documents)
   */
  isDrawerVisible() {
    var _a;
    const context = this.getCurrentContext();
    return (((_a = context == null ? void 0 : context.persistentDocs) == null ? void 0 : _a.length) || 0) > 0;
  }
  /**
   * Add document to context for current file
   */
  async addDocument(file) {
    if (!this.currentFilePath) {
      return;
    }
    if (file.path === this.currentFilePath) {
      return;
    }
    const current = this.persistentContext.get(this.currentFilePath) || [];
    const exists = current.some((doc) => doc.file.path === file.path);
    if (exists) {
      return;
    }
    const newRef = {
      file,
      property: void 0,
      isPersistent: true,
      rawReference: `[[${file.basename}]]`
    };
    const updated = [...current, newRef];
    this.persistentContext.set(this.currentFilePath, updated);
    const currentFile = this.app.vault.getAbstractFileByPath(this.currentFilePath);
    if (currentFile && currentFile.path && this.plugin.conversationManager) {
      await this.plugin.conversationManager.addContextDocument(currentFile, file.path);
    }
    await this.refreshContextFromStorage();
  }
  /**
   * Remove document from context for current file
   */
  async removeDocument(file) {
    if (!this.currentFilePath) return;
    const current = this.persistentContext.get(this.currentFilePath) || [];
    const filtered = current.filter((ref) => ref.file.path !== file.path);
    if (filtered.length > 0) {
      this.persistentContext.set(this.currentFilePath, filtered);
    } else {
      this.persistentContext.delete(this.currentFilePath);
    }
    const currentFile = this.app.vault.getAbstractFileByPath(this.currentFilePath);
    if (currentFile && currentFile.path && this.plugin.conversationManager) {
      await this.plugin.conversationManager.removeContextDocument(currentFile, file.path);
    }
    await this.refreshContextFromStorage();
  }
  /**
   * Update indicator based on current context state
   * Note: SidebarView handles actual UI updates to preserve complex drawer functionality
   */
  updateIndicator() {
  }
  /**
   * Private method to refresh context from storage and update indicator
   */
  async refreshContextFromStorage() {
    if (!this.currentFilePath) {
      this.currentContext = null;
      this.hideContextIndicator();
      return;
    }
    try {
      const persistentDocs = this.persistentContext.get(this.currentFilePath) || [];
      if (persistentDocs.length === 0) {
        this.currentContext = null;
        this.hideContextIndicator();
        return;
      }
      let totalTokens = 0;
      try {
        const currentFile = this.app.vault.getAbstractFileByPath(this.currentFilePath);
        if (currentFile instanceof import_obsidian4.TFile) {
          const currentContent = await this.app.vault.read(currentFile);
          totalTokens += Math.ceil(currentContent.length / 4);
        }
      } catch (error) {
      }
      for (const doc of persistentDocs) {
        try {
          const content = await this.app.vault.read(doc.file);
          totalTokens += Math.ceil(content.length / 4);
        } catch (error) {
        }
      }
      const fileAttachments = persistentDocs.length > 0 ? [{ content: `Context files: ${persistentDocs.map((d) => d.file.basename).join(", ")}` }] : [];
      const totalContextUsage = await this.calculateTotalContextUsage(fileAttachments);
      this.currentContext = {
        persistentDocs,
        contextString: "",
        // Not needed for UI
        tokenCount: totalTokens,
        isNearLimit: false,
        // Legacy field - warnings now handled in sidebar-view.ts
        totalContextUsage
      };
    } catch (error) {
      this.currentContext = null;
      this.hideContextIndicator();
    }
  }
  /**
   * Restore context from conversation manager
   */
  async restoreContextFromConversation(file) {
    if (!this.plugin.conversationManager) {
      return;
    }
    try {
      const savedContextDocs = await this.plugin.conversationManager.getContextDocuments(file);
      if (savedContextDocs.length === 0) {
        this.persistentContext.delete(file.path);
        return;
      }
      const validDocumentRefs = [];
      const invalidPaths = [];
      for (const contextDoc of savedContextDocs) {
        try {
          if (!contextDoc || !contextDoc.path || typeof contextDoc.path !== "string") {
            console.warn("Invalid context document structure:", contextDoc);
            continue;
          }
          const contextFile = this.app.vault.getAbstractFileByPath(contextDoc.path);
          if (contextFile && contextFile.path && contextFile instanceof import_obsidian4.TFile) {
            validDocumentRefs.push({
              file: contextFile,
              property: contextDoc.property,
              isPersistent: true,
              rawReference: contextDoc.property ? `[[${contextFile.basename}#${contextDoc.property}]]` : `[[${contextFile.basename}]]`
            });
          } else {
            invalidPaths.push(contextDoc.path);
          }
        } catch (docError) {
          console.warn("Error processing context document, skipping:", docError);
        }
      }
      if (invalidPaths.length > 0) {
        await this.cleanupMissingFiles(file, invalidPaths);
        this.showMissingFilesNotice(invalidPaths);
      }
      if (validDocumentRefs.length > 0) {
        this.persistentContext.set(file.path, validDocumentRefs);
      } else {
        this.persistentContext.delete(file.path);
      }
    } catch (error) {
      console.warn("Failed to restore context from conversation:", error);
      this.persistentContext.delete(file.path);
    }
  }
  /**
   * Clean up missing files from conversation storage
   */
  async cleanupMissingFiles(file, invalidPaths) {
    if (!this.plugin.conversationManager) return;
    try {
      for (const invalidPath of invalidPaths) {
        await this.plugin.conversationManager.removeContextDocument(file, invalidPath);
      }
    } catch (error) {
      console.warn("Failed to cleanup missing files from conversation:", error);
    }
  }
  /**
   * Show notice and chat message about missing context files
   */
  showMissingFilesNotice(missingFiles) {
    if (missingFiles.length === 0) return;
    try {
      let noticeMessage;
      let chatMessage;
      if (missingFiles.length === 1) {
        noticeMessage = `\u26A0\uFE0F Context file no longer available: ${missingFiles[0]}`;
        chatMessage = `Context file no longer available: ${missingFiles[0]}`;
      } else {
        const displayFiles = missingFiles.slice(0, 3);
        const remainingCount = missingFiles.length - displayFiles.length;
        if (remainingCount > 0) {
          noticeMessage = `\u26A0\uFE0F ${missingFiles.length} context files no longer available: ${displayFiles.join(", ")} and ${remainingCount} more`;
          chatMessage = `${missingFiles.length} context files no longer available: ${displayFiles.join(", ")} and ${remainingCount} more`;
        } else {
          noticeMessage = `\u26A0\uFE0F ${missingFiles.length} context files no longer available: ${displayFiles.join(", ")}`;
          chatMessage = `${missingFiles.length} context files no longer available: ${displayFiles.join(", ")}`;
        }
      }
      new import_obsidian4.Notice(noticeMessage, _ContextManager.NOTICE_DURATION_MS);
      if (this.sidebarView && typeof this.sidebarView.addWarningMessage === "function") {
        this.sidebarView.addWarningMessage(chatMessage);
      }
    } catch (error) {
      console.warn("Failed to show missing files notification:", error);
    }
  }
  /**
   * Validate all context documents for a file and return results
   */
  async validateContextDocuments(file) {
    if (!this.plugin.conversationManager) {
      return { validFiles: [], missingFiles: [], totalCount: 0 };
    }
    try {
      const savedContextDocs = await this.plugin.conversationManager.getContextDocuments(file);
      const validFiles = [];
      const missingFiles = [];
      for (const contextDoc of savedContextDocs) {
        const contextFile = this.app.vault.getAbstractFileByPath(contextDoc.path);
        if (contextFile && contextFile.path) {
          validFiles.push(contextDoc.path);
        } else {
          missingFiles.push(contextDoc.path);
        }
      }
      return {
        validFiles,
        missingFiles,
        totalCount: savedContextDocs.length
      };
    } catch (error) {
      return { validFiles: [], missingFiles: [], totalCount: 0 };
    }
  }
  /**
   * Schedule async persistence update
   */
  async schedulePersistenceUpdate(conversationFilePath, references) {
    const conversationFile = this.app.vault.getAbstractFileByPath(conversationFilePath);
    if (conversationFile && conversationFile.path && this.plugin.conversationManager) {
      const contextRefs = references.map((ref) => ({
        path: ref.file.path,
        property: ref.property,
        addedAt: Date.now()
      }));
      await this.plugin.conversationManager.setContextDocuments(conversationFile, contextRefs);
    }
  }
  cleanup() {
    this.clearCurrentContext();
    if (this.contextIndicator) {
      this.contextIndicator.remove();
    }
    if (this.contextPreview) {
      this.contextPreview.remove();
    }
  }
  /**
   * Parse a message for document references
   */
  parseMessage(message, conversationFilePath) {
    const references = [];
    let cleanedMessage = message;
    const refPattern = /(\+)?\[\[([^\]]+?)(?:#([^\]]+?))?\]\]/g;
    let match;
    while ((match = refPattern.exec(message)) !== null) {
      const docName = match[2];
      const property = match[3];
      const rawReference = match[0];
      const file = this.findFile(docName);
      if (file) {
        references.push({
          file,
          isPersistent: true,
          // All references are now persistent
          rawReference,
          property
        });
      }
    }
    for (const ref of references) {
      cleanedMessage = cleanedMessage.replace(ref.rawReference, " ");
    }
    cleanedMessage = cleanedMessage.replace(/\s{2,}/g, " ").trim();
    const persistentRefs = references.filter((ref) => ref.isPersistent);
    if (persistentRefs.length > 0) {
      const existing = this.persistentContext.get(conversationFilePath) || [];
      const updatedPersistent = [...existing];
      for (const ref of persistentRefs) {
        const exists = updatedPersistent.some((existing2) => existing2.file.path === ref.file.path);
        if (!exists) {
          updatedPersistent.push(ref);
        }
      }
      this.persistentContext.set(conversationFilePath, updatedPersistent);
      this.schedulePersistenceUpdate(conversationFilePath, updatedPersistent);
    }
    return { cleanedMessage, references };
  }
  /**
   * Get full document context including metadata/properties
   */
  async getFullDocumentContext(file, includeContent = true, maxLines = 50) {
    try {
      let contextParts = [];
      contextParts.push(`## Document: ${file.basename}`);
      const cache = this.app.metadataCache.getFileCache(file);
      if ((cache == null ? void 0 : cache.frontmatter) && Object.keys(cache.frontmatter).length > 0) {
        contextParts.push("\n### Properties/Metadata:");
        for (const [key, value] of Object.entries(cache.frontmatter)) {
          const formattedValue = typeof value === "object" ? JSON.stringify(value) : value;
          contextParts.push(`- ${key}: ${formattedValue}`);
        }
      }
      if (includeContent) {
        const content = await this.app.vault.read(file);
        if (content) {
          const lines = content.split("\n");
          let contentStartIndex = 0;
          if (lines[0] === "---") {
            for (let i = 1; i < lines.length; i++) {
              if (lines[i] === "---") {
                contentStartIndex = i + 1;
                break;
              }
            }
          }
          const contentLines = lines.slice(contentStartIndex);
          const truncatedContent = contentLines.slice(0, maxLines).join("\n");
          const wasTruncated = contentLines.length > maxLines;
          contextParts.push("\n### Content:");
          contextParts.push(truncatedContent);
          if (wasTruncated) {
            contextParts.push("\n[... truncated for brevity ...]");
          }
        }
      }
      return contextParts.join("\n");
    } catch (error) {
      return null;
    }
  }
  /**
   * Get context for a specific document reference
   */
  async getDocumentContext(docRef) {
    try {
      const { file, property } = docRef;
      if (!file || !this.app.vault.getAbstractFileByPath(file.path)) {
        return null;
      }
      if (property) {
        const cache = this.app.metadataCache.getFileCache(file);
        if ((cache == null ? void 0 : cache.frontmatter) && cache.frontmatter[property]) {
          return `## ${file.basename} - ${property}
${cache.frontmatter[property]}`;
        }
        return null;
      } else {
        return this.getFullDocumentContext(file);
      }
    } catch (error) {
      return null;
    }
  }
  /**
   * Find a file by name or path
   */
  findFile(nameOrPath) {
    let file = this.app.vault.getAbstractFileByPath(nameOrPath);
    if (!file || !(file instanceof import_obsidian4.TFile)) {
      file = this.app.vault.getAbstractFileByPath(nameOrPath + ".md");
    }
    if (!file || !(file instanceof import_obsidian4.TFile)) {
      const files = this.app.vault.getMarkdownFiles();
      file = files.find(
        (f) => f.basename === nameOrPath || f.name === nameOrPath || f.path.endsWith("/" + nameOrPath) || f.path.endsWith("/" + nameOrPath + ".md")
      ) || null;
    }
    return file instanceof import_obsidian4.TFile ? file : null;
  }
  /**
   * Estimate token count (rough approximation)
   */
  estimateTokens(text) {
    return Math.ceil(text.length / 4);
  }
  /**
   * Calculate total context usage including conversation history
   */
  async calculateTotalContextUsage(fileAttachments = [], currentInput = "", recentResponse = "") {
    var _a, _b, _c;
    let providerType = "claude";
    let model = "claude-3-5-sonnet-20241022";
    let conversationHistory = [];
    try {
      const detectedProviderType = await ((_a = this.plugin.aiProviderManager) == null ? void 0 : _a.getCurrentProviderType());
      if (detectedProviderType) {
        providerType = detectedProviderType;
        if (this.plugin.aiProviderManager) {
          try {
            const currentModel = this.plugin.aiProviderManager.getCurrentModel();
            if (currentModel) {
              model = currentModel;
            }
          } catch (error) {
            console.warn("Failed to get current model, using default:", error);
          }
        }
      } else {
        console.warn("Provider type detection failed, using Claude defaults");
      }
      if (this.currentFilePath && this.plugin.conversationManager) {
        const currentFile = this.app.vault.getAbstractFileByPath(this.currentFilePath);
        if (currentFile) {
          const conversation = await this.plugin.conversationManager.getConversation(currentFile);
          conversationHistory = ((conversation == null ? void 0 : conversation.messages) || []).map((msg) => ({ content: msg.content }));
        }
      }
    } catch (error) {
      console.warn("Error during context calculation setup, using defaults:", error);
    }
    const ollamaDefaultContext = ((_c = (_b = this.plugin) == null ? void 0 : _b.settings) == null ? void 0 : _c.ollamaDefaultContext) || 32e3;
    const usage = calculateContextUsage(
      providerType,
      model,
      conversationHistory,
      fileAttachments,
      currentInput,
      recentResponse,
      ollamaDefaultContext
    );
    return usage;
  }
  /**
   * Clear persistent context for a conversation
   */
  async clearPersistentContext(filePath) {
    this.persistentContext.delete(filePath);
    const conversationFile = this.app.vault.getAbstractFileByPath(filePath);
    if (conversationFile && conversationFile.path && this.plugin.conversationManager) {
      await this.plugin.conversationManager.clearContextDocuments(conversationFile);
    }
  }
  /**
   * Get persistent context for a conversation
   */
  getPersistentContext(filePath) {
    return this.persistentContext.get(filePath) || [];
  }
  /**
   * Remove a specific document from persistent context
   */
  async removePersistentDoc(filePath, docToRemove) {
    const current = this.persistentContext.get(filePath) || [];
    const filtered = current.filter((ref) => ref.file.path !== docToRemove);
    if (filtered.length > 0) {
      this.persistentContext.set(filePath, filtered);
    } else {
      this.persistentContext.delete(filePath);
    }
    const conversationFile = this.app.vault.getAbstractFileByPath(filePath);
    if (conversationFile && conversationFile.path && this.plugin.conversationManager) {
      await this.plugin.conversationManager.removeContextDocument(conversationFile, docToRemove);
    }
  }
  /**
   * Get visual indicators for context state
   */
  getContextIndicators(context) {
    const docCount = context.persistentDocs.length;
    let className = "nova-context-indicator";
    let tooltip = `Context: ${docCount} document${docCount !== 1 ? "s" : ""}, ~${context.tokenCount} tokens (files only)`;
    const text = `${docCount} docs`;
    return { text, className, tooltip };
  }
  /**
   * Format context for display in UI
   */
  formatContextForDisplay(context) {
    const items = [];
    for (const doc of context.persistentDocs) {
      items.push(`${doc.file.basename}${doc.property ? `#${doc.property}` : ""}`);
    }
    return items;
  }
};
// Reference to NovaSidebarView for adding files
_ContextManager.NOTICE_DURATION_MS = 5e3;
var ContextManager = _ContextManager;

// src/ui/chat-renderer.ts
var _ChatRenderer = class _ChatRenderer {
  constructor(plugin, chatContainer) {
    this.plugin = plugin;
    this.chatContainer = chatContainer;
  }
  /**
   * Add a chat message with role header
   */
  addMessage(role, content) {
    const messageEl = this.chatContainer.createDiv({ cls: `nova-message nova-message-${role}` });
    messageEl.style.cssText = `
			margin-bottom: var(--size-4-2);
			padding: var(--size-2-3) var(--size-4-3);
			border-radius: var(--radius-s);
			max-width: 85%;
			${role === "user" ? "margin-left: auto; background: var(--interactive-accent); color: var(--text-on-accent);" : role === "system" ? "margin: 0 auto; background: var(--background-modifier-hover); color: var(--text-muted); text-align: center; font-size: var(--font-ui-small);" : "background: var(--background-primary); border: 1px solid var(--background-modifier-border);"}
		`;
    const roleEl = messageEl.createEl("div", {
      text: role === "user" ? "You" : role === "system" ? "System" : "Nova",
      cls: "nova-message-role"
    });
    roleEl.style.cssText = `
			font-size: var(--font-ui-smaller);
			opacity: 0.7;
			margin-bottom: var(--size-2-1);
			font-weight: 600;
		`;
    const contentEl = messageEl.createEl("div", { cls: "nova-message-content" });
    if (role === "system" && content.includes("<svg")) {
      contentEl.innerHTML = content;
    } else {
      contentEl.textContent = content;
    }
    this.scrollToBottom(true);
  }
  /**
   * Unified message creation - determines CSS class at creation time
   */
  addStatusMessage(content, options) {
    const cssClass = this.getMessageCSSClass(content, options);
    const messageEl = this.chatContainer.createDiv({ cls: `nova-message ${cssClass}` });
    const contentEl = messageEl.createEl("div", { cls: "nova-message-content" });
    if (content.includes("<svg")) {
      contentEl.innerHTML = content;
    } else {
      contentEl.textContent = content;
    }
    if (options.persist) {
      const activeFile = this.plugin.app.workspace.getActiveFile();
      if (activeFile) {
        this.plugin.conversationManager.addSystemMessage(
          activeFile,
          content,
          { messageType: cssClass }
          // Store CSS class as metadata
        );
      }
    }
    this.scrollToBottom();
  }
  getMessageCSSClass(content, options) {
    if (options.type === "pill") {
      return `nova-pill-${options.variant}`;
    } else {
      return `nova-bubble-${options.variant}`;
    }
  }
  // Simple wrapper methods for backward compatibility
  addSuccessMessage(content, persist = false) {
    if (!content.startsWith("\u2713 ") && !content.includes("<svg")) {
      content = "\u2713 " + content;
    }
    this.addStatusMessage(content, { type: "pill", variant: "success", persist });
  }
  addErrorMessage(content, persist = false) {
    if (!content.startsWith("\u274C ") && !content.includes("<svg")) {
      content = "\u274C " + content;
    }
    const type = content.length <= 30 ? "pill" : "bubble";
    this.addStatusMessage(content, { type, variant: "error", persist });
  }
  addWarningMessage(content, persist = false) {
    if (!content.startsWith("\u26A0\uFE0F ") && !content.includes("<svg")) {
      content = "\u26A0\uFE0F " + content;
    }
    const type = content.length <= 30 ? "pill" : "bubble";
    this.addStatusMessage(content, { type, variant: "warning", persist });
  }
  addWelcomeMessage(message) {
    const welcomeEl = this.chatContainer.createDiv({ cls: "nova-welcome" });
    welcomeEl.style.cssText = `
			padding: 20px;
			margin-bottom: var(--size-4-3);
			background: var(--background-primary);
			border-radius: var(--radius-s);
			border: 1px solid var(--background-modifier-border);
		`;
    const content = message || `
			<div style="display: flex; flex-direction: column; align-items: center;">
				<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: 32px; height: 32px; color: var(--interactive-accent); margin-bottom: var(--size-4-2);">
					<circle cx="12" cy="12" r="2.5" fill="currentColor"/>
					<path d="M12 1L12 6" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
					<path d="M12 18L12 23" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
					<path d="M23 12L18 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
					<path d="M6 12L1 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
					<path d="M18.364 5.636L15.536 8.464" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
					<path d="M8.464 15.536L5.636 18.364" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
					<path d="M18.364 18.364L15.536 15.536" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
					<path d="M8.464 8.464L5.636 5.636" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
				</svg>
				<p style="margin: 0; margin-left: var(--size-2-3); color: var(--text-muted); font-size: var(--font-ui-medium); line-height: 1.4; text-align: left; align-self: flex-start;">
					I'm your AI writing partner. Select text and right-click for instant editing, or chat for cursor-precise commands.
				</p>
			</div>
		`;
    welcomeEl.innerHTML = content;
    this.scrollToBottom(true);
  }
  clearChat() {
    this.chatContainer.empty();
  }
  scrollToBottom(smooth = false) {
    setTimeout(() => {
      if (smooth) {
        this.chatContainer.scrollTo({
          top: this.chatContainer.scrollHeight,
          behavior: "smooth"
        });
      } else {
        this.chatContainer.scrollTop = this.chatContainer.scrollHeight;
      }
    }, _ChatRenderer.SCROLL_DELAY_MS);
  }
  async loadConversationHistory(file) {
    var _a;
    const messages = await this.plugin.conversationManager.getRecentMessages(file, 50);
    if (messages.length === 0) {
      this.addWelcomeMessage();
      return;
    }
    for (const message of messages) {
      if (message.role === "system" && ((_a = message.metadata) == null ? void 0 : _a.messageType)) {
        const messageEl = this.chatContainer.createDiv({
          cls: `nova-message ${message.metadata.messageType}`
        });
        const contentEl = messageEl.createEl("div", { cls: "nova-message-content" });
        if (message.content.includes("<svg")) {
          contentEl.innerHTML = message.content;
        } else {
          contentEl.textContent = message.content;
        }
      } else {
        this.addMessage(message.role, message.content);
      }
    }
    this.scrollToBottom();
  }
};
_ChatRenderer.SCROLL_DELAY_MS = 50;
var ChatRenderer = _ChatRenderer;

// src/ui/streaming-manager.ts
var import_obsidian5 = require("obsidian");
var _StreamingManager = class _StreamingManager {
  constructor() {
    this.dotsAnimationInterval = null;
    this.thinkingNotice = null;
    this.currentStreamingEndPos = null;
    this.streamingStartPos = null;
    this.originalPosition = null;
  }
  /**
   * Show thinking notice with context-aware phrase and animated dots
   * Only shows notice if animation mode is 'notice' or not specified (default)
   */
  showThinkingNotice(actionType, animationMode = "notice") {
    if (animationMode !== "notice") {
      return;
    }
    try {
      const phrases = _StreamingManager.THINKING_PHRASES[actionType] || _StreamingManager.THINKING_PHRASES["chat"];
      const randomPhrase = phrases[Math.floor(Math.random() * phrases.length)];
      this.thinkingNotice = new import_obsidian5.Notice(`Nova: ${randomPhrase}.`, 0);
      const initialNoticeText = `Nova: ${randomPhrase}.`;
      const noticeEl = this.thinkingNotice.noticeEl;
      if (noticeEl) {
        noticeEl.textContent = initialNoticeText;
      }
      this.startNoticeDotsAnimation(randomPhrase);
    } catch (error) {
      console.warn("Failed to create thinking notice:", error);
    }
  }
  /**
   * Start streaming at a specific position with hybrid approach
   * For selection replacement: startPos and endPos define the range to replace
   * For cursor insertion: startPos is the cursor position, endPos should be null
   */
  startStreaming(editor, startPos, endPos, options = {}) {
    this.originalPosition = { from: startPos, to: endPos };
    if (endPos) {
      editor.replaceRange("", startPos, endPos);
      this.currentStreamingEndPos = startPos;
    } else {
      this.currentStreamingEndPos = startPos;
    }
    this.streamingStartPos = null;
    const updateStream = (newText, isComplete) => {
      this.updateStreamingText(editor, newText, isComplete, options);
    };
    const stopStream = () => {
      this.stopAnimation();
      this.cleanup();
    };
    return { updateStream, stopStream };
  }
  /**
   * Update streaming text with proper position tracking
   */
  updateStreamingText(editor, newText, isComplete, options) {
    try {
      if (this.currentStreamingEndPos) {
        if (!this.streamingStartPos) {
          this.streamingStartPos = { ...this.currentStreamingEndPos };
        }
        const lines = newText.split("\n");
        const newEndPos = {
          line: this.streamingStartPos.line + lines.length - 1,
          ch: lines.length > 1 ? lines[lines.length - 1].length : this.streamingStartPos.ch + newText.length
        };
        editor.replaceRange(newText, this.streamingStartPos, this.currentStreamingEndPos);
        this.currentStreamingEndPos = newEndPos;
        if (options.onChunk) {
          options.onChunk(newText, isComplete);
        }
      }
      if (isComplete) {
        editor.setCursor(this.currentStreamingEndPos);
        this.cleanup();
        if (options.onComplete) {
          options.onComplete();
        }
      }
    } catch (error) {
      console.warn("Error updating streaming text:", error);
      this.cleanup();
      if (options.onError) {
        options.onError(error instanceof Error ? error : new Error(String(error)));
      }
    }
  }
  /**
   * Animate dots in notice text
   */
  startNoticeDotsAnimation(basePhrase) {
    let dotCount = 1;
    this.dotsAnimationInterval = setInterval(() => {
      try {
        if (!this.thinkingNotice) return;
        dotCount++;
        if (dotCount > 5) {
          dotCount = 1;
        }
        const dots = ".".repeat(dotCount);
        const noticeText = `Nova: ${basePhrase}${dots}`;
        const noticeEl = this.thinkingNotice.noticeEl;
        if (noticeEl) {
          noticeEl.textContent = noticeText;
        }
      } catch (error) {
        console.warn("Error in notice dots animation:", error);
        this.stopDotsAnimation();
      }
    }, 400);
  }
  /**
   * Stop the dots animation and dismiss notice
   */
  stopDotsAnimation() {
    if (this.dotsAnimationInterval) {
      clearInterval(this.dotsAnimationInterval);
      this.dotsAnimationInterval = null;
    }
    if (this.thinkingNotice) {
      this.thinkingNotice.hide();
      this.thinkingNotice = null;
    }
  }
  /**
   * Stop all animations and clean up
   */
  stopAnimation() {
    this.stopDotsAnimation();
  }
  /**
   * Clean up all internal state
   */
  cleanup() {
    this.stopDotsAnimation();
    this.currentStreamingEndPos = null;
    this.streamingStartPos = null;
    this.originalPosition = null;
  }
  /**
   * Get the original position before streaming started
   */
  getOriginalPosition() {
    return this.originalPosition;
  }
  /**
   * Check if currently streaming
   */
  isStreaming() {
    return this.currentStreamingEndPos !== null;
  }
  /**
   * Unified streaming method for selection-based operations
   * Handles both notice animations and document updates
   */
  async startSelectionStreaming(editor, originalRange, actionType, streamingCallback, options = {}) {
    const selectionOptions = { ...options, animationMode: "notice" };
    this.showThinkingNotice(actionType, "notice");
    editor.replaceRange("", originalRange.from, originalRange.to);
    this.currentStreamingEndPos = originalRange.from;
    this.streamingStartPos = null;
    const { updateStream, stopStream } = this.startStreaming(
      editor,
      originalRange.from,
      void 0,
      selectionOptions
    );
    const wrappedCallback = (chunk, isComplete) => {
      updateStream(chunk, isComplete);
      streamingCallback(chunk, isComplete);
    };
    return wrappedCallback;
  }
};
// Comprehensive thinking phrases for all action types
_StreamingManager.THINKING_PHRASES = {
  "improve": [
    "refining...",
    "polishing...",
    "enhancing...",
    "crafting...",
    "perfecting...",
    "smoothing...",
    "sharpening...",
    "elevating...",
    "fine-tuning...",
    "sculpting..."
  ],
  "longer": [
    "expanding...",
    "developing...",
    "elaborating...",
    "building...",
    "enriching...",
    "deepening...",
    "growing...",
    "extending...",
    "amplifying...",
    "unfolding..."
  ],
  "shorter": [
    "condensing...",
    "distilling...",
    "tightening...",
    "focusing...",
    "streamlining...",
    "compressing...",
    "trimming...",
    "clarifying...",
    "simplifying...",
    "concentrating..."
  ],
  "tone": [
    "adjusting tone...",
    "reshaping...",
    "reframing...",
    "adapting...",
    "transforming...",
    "modulating...",
    "recasting...",
    "shifting...",
    "reforming...",
    "reimagining..."
  ],
  "custom": [
    "working on it...",
    "considering...",
    "thinking...",
    "processing...",
    "analyzing...",
    "contemplating...",
    "understanding...",
    "interpreting...",
    "exploring...",
    "evaluating..."
  ],
  "chat": [
    "composing...",
    "drafting...",
    "creating...",
    "generating...",
    "writing...",
    "crafting...",
    "formulating...",
    "developing...",
    "building...",
    "constructing..."
  ],
  "add": [
    "composing...",
    "drafting...",
    "creating...",
    "generating...",
    "writing...",
    "crafting...",
    "formulating...",
    "developing...",
    "building...",
    "constructing..."
  ],
  "edit": [
    "refining...",
    "polishing...",
    "enhancing...",
    "crafting...",
    "perfecting...",
    "smoothing...",
    "sharpening...",
    "elevating...",
    "fine-tuning...",
    "sculpting..."
  ],
  "rewrite": [
    "refining...",
    "polishing...",
    "enhancing...",
    "crafting...",
    "perfecting...",
    "smoothing...",
    "sharpening...",
    "elevating...",
    "fine-tuning...",
    "sculpting..."
  ],
  "grammar": [
    "refining...",
    "polishing...",
    "enhancing...",
    "crafting...",
    "perfecting...",
    "smoothing...",
    "sharpening...",
    "elevating...",
    "fine-tuning...",
    "sculpting..."
  ],
  "delete": [
    "condensing...",
    "distilling...",
    "tightening...",
    "focusing...",
    "streamlining...",
    "compressing...",
    "trimming...",
    "clarifying...",
    "simplifying...",
    "concentrating..."
  ]
};
var StreamingManager = _StreamingManager;

// src/ui/selection-context-menu.ts
var import_obsidian9 = require("obsidian");

// src/core/commands/selection-edit-command.ts
var import_obsidian6 = require("obsidian");
var SelectionEditCommand = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  /**
   * Execute a selection-based edit action
   */
  async execute(action, editor, selectedText, customInstruction) {
    try {
      const selectionRange = {
        from: editor.getCursor("from"),
        to: editor.getCursor("to")
      };
      const loadingNotice = new import_obsidian6.Notice("Nova is processing your request...", 0);
      const prompt2 = this.buildPrompt(action, selectedText, customInstruction);
      const response = await this.plugin.aiProviderManager.complete(
        prompt2.systemPrompt,
        prompt2.userPrompt
      );
      loadingNotice.hide();
      const transformedText = this.cleanAIResponse(response);
      return {
        success: true,
        transformedText,
        originalRange: selectionRange
      };
    } catch (error) {
      console.error("Selection edit command error:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error occurred"
      };
    }
  }
  /**
   * Execute a selection-based edit action with streaming
   */
  async executeStreaming(action, editor, selectedText, onChunk, customInstruction) {
    try {
      const selectionRange = {
        from: editor.getCursor("from"),
        to: editor.getCursor("to")
      };
      const prompt2 = this.buildPrompt(action, selectedText, customInstruction);
      let fullResponse = "";
      const stream = this.plugin.aiProviderManager.generateTextStream(prompt2.userPrompt, {
        systemPrompt: prompt2.systemPrompt
      });
      for await (const chunk of stream) {
        if (chunk.error) {
          throw new Error(chunk.error);
        }
        fullResponse += chunk.content;
        if (fullResponse.trim().length > 0 || chunk.done) {
          const cleanedChunk = this.cleanAIResponse(fullResponse);
          onChunk(cleanedChunk, chunk.done);
        }
        if (chunk.done) {
          break;
        }
      }
      const finalText = this.cleanAIResponse(fullResponse);
      if (!finalText.trim()) {
        return {
          success: false,
          error: "AI provider returned empty response",
          originalRange: selectionRange
        };
      }
      return {
        success: true,
        transformedText: finalText,
        originalRange: selectionRange
      };
    } catch (error) {
      console.error("Selection edit streaming error:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error occurred"
      };
    }
  }
  /**
   * Build prompt for the AI based on the action type
   */
  buildPrompt(action, selectedText, customInstruction) {
    const baseSystemPrompt = `You are Nova, an AI writing assistant. Your task is to transform the provided text according to the user's request. 

CRITICAL RULES:
- Provide ONLY the transformed text, no explanations or meta-commentary
- Maintain the original meaning unless specifically asked to change it
- Preserve the original format (markdown, structure, etc.) unless instructed otherwise
- Do not add introductory phrases like "Here's the improved text:" or similar
- Return only the content that should replace the selected text`;
    let specificPrompt = "";
    let userPrompt = "";
    switch (action) {
      case "improve":
        specificPrompt = `
TASK: Improve the writing quality
- Make the text clearer and more concise
- Improve flow and readability
- Fix any awkward phrasing
- Preserve the original tone and meaning`;
        userPrompt = `Improve this text:

${selectedText}`;
        break;
      case "longer":
        specificPrompt = `
TASK: Expand the text with more detail
- Add relevant examples, context, or explanations
- Maintain the original style and voice
- Expand ideas without changing the core message
- Make it more comprehensive and detailed`;
        userPrompt = `Make this text longer and more detailed:

${selectedText}`;
        break;
      case "shorter":
        specificPrompt = `
TASK: Condense the text to essential points
- Remove redundancy and unnecessary words
- Keep all key information and meaning
- Make it more concise and direct
- Preserve the original tone`;
        userPrompt = `Make this text shorter and more concise:

${selectedText}`;
        break;
      case "tone":
        const toneMap = {
          "formal": "professional and structured, suitable for business or academic contexts",
          "casual": "relaxed and conversational, suitable for informal communication",
          "academic": "scholarly and precise, using technical vocabulary where appropriate",
          "friendly": "warm and approachable, building connection with the reader"
        };
        const toneDescription = toneMap[customInstruction || "formal"] || toneMap.formal;
        specificPrompt = `
TASK: Change the tone to be ${toneDescription}
- Adjust language and vocabulary to match the requested tone
- Keep the same content and meaning
- Maintain appropriate formality level for the chosen tone`;
        userPrompt = `Rewrite this text in a ${customInstruction || "formal"} tone:

${selectedText}`;
        break;
      case "custom":
        specificPrompt = `
TASK: Apply custom transformation
- Follow the user's specific instruction exactly
- Maintain content integrity unless asked to change it
- Apply the requested changes precisely`;
        userPrompt = `Apply this instruction to the text: "${customInstruction}"

Text to transform:

${selectedText}`;
        break;
      default:
        specificPrompt = `
TASK: General text improvement
- Enhance clarity and readability
- Preserve original meaning and tone`;
        userPrompt = `Improve this text:

${selectedText}`;
    }
    return {
      systemPrompt: baseSystemPrompt + "\n" + specificPrompt,
      userPrompt
    };
  }
  /**
   * Clean AI response to extract only the transformed text
   */
  cleanAIResponse(response) {
    let cleaned = response.trim();
    const introPatterns = [
      /^Here's the improved text:?\s*/i,
      /^Here's the rewritten text:?\s*/i,
      /^Here's the transformed text:?\s*/i,
      /^Improved version:?\s*/i,
      /^Rewritten:?\s*/i,
      /^Result:?\s*/i,
      /^Output:?\s*/i
    ];
    for (const pattern of introPatterns) {
      cleaned = cleaned.replace(pattern, "");
    }
    cleaned = cleaned.split(/\n\s*---+\s*/).shift() || cleaned;
    cleaned = cleaned.split(/\n\s*\*\*?Explanation\*?\*?:/i).shift() || cleaned;
    return cleaned.trim();
  }
};

// src/ui/tone-selection-modal.ts
var import_obsidian7 = require("obsidian");
var TONE_OPTIONS = [
  {
    id: "formal",
    label: "Formal",
    description: "Professional, structured language suitable for business or academic contexts"
  },
  {
    id: "casual",
    label: "Casual",
    description: "Relaxed, conversational tone for informal communication"
  },
  {
    id: "academic",
    label: "Academic",
    description: "Scholarly, precise language with technical vocabulary"
  },
  {
    id: "friendly",
    label: "Friendly",
    description: "Warm, approachable tone that builds connection"
  }
];
var ToneSelectionModal = class extends import_obsidian7.FuzzySuggestModal {
  constructor(app, onSelect, onCancel) {
    super(app);
    this.onSelect = onSelect;
    this.onCancel = onCancel;
    this.setPlaceholder("Choose a writing tone...");
    this.setInstructions([
      { command: "\u2191\u2193", purpose: "to navigate" },
      { command: "\u21B5", purpose: "to apply tone" },
      { command: "esc", purpose: "to cancel" }
    ]);
  }
  getItems() {
    return TONE_OPTIONS;
  }
  getItemText(tone) {
    return `${tone.label} - ${tone.description}`;
  }
  onChooseItem(tone, evt) {
    this.onSelect(tone.id);
  }
  onClose() {
    const { contentEl } = this;
    if (contentEl.parentElement) {
      this.onCancel();
    }
  }
};

// src/ui/custom-instruction-modal.ts
var import_obsidian8 = require("obsidian");
var CustomInstructionModal = class extends import_obsidian8.Modal {
  constructor(app, onSubmit, onCancel) {
    super(app);
    this.instruction = "";
    this.onSubmit = onSubmit;
    this.onCancel = onCancel;
  }
  onOpen() {
    var _a;
    const { contentEl } = this;
    contentEl.empty();
    this.modalEl.addClass("nova-custom-instruction-modal");
    contentEl.createEl("h2", { text: "Tell Nova" });
    new import_obsidian8.Setting(contentEl).setName("Instruction").setDesc("Describe how you want Nova to transform your selected text");
    const textAreaSetting = new import_obsidian8.Setting(contentEl).addTextArea((text) => {
      text.setPlaceholder('e.g., "make this more persuasive", "add statistics", "write in bullet points"').setValue(this.instruction).onChange((value) => {
        this.instruction = value;
      });
      text.inputEl.rows = 4;
      text.inputEl.style.width = "100%";
      text.inputEl.style.minHeight = "100px";
      setTimeout(() => text.inputEl.focus(), 50);
      text.inputEl.addEventListener("keydown", (e) => {
        if (e.key === "Enter" && (e.ctrlKey || e.metaKey)) {
          e.preventDefault();
          this.submit();
        }
      });
      return text;
    });
    textAreaSetting.settingEl.style.border = "none";
    (_a = textAreaSetting.settingEl.querySelector(".setting-item-info")) == null ? void 0 : _a.remove();
    const control = textAreaSetting.settingEl.querySelector(".setting-item-control");
    if (control instanceof HTMLElement) {
      control.style.width = "100%";
    }
    new import_obsidian8.Setting(contentEl).addButton((btn) => btn.setButtonText("Cancel").onClick(() => {
      this.close();
      this.onCancel();
    })).addButton((btn) => btn.setButtonText("Transform Text").setCta().onClick(() => this.submit()));
  }
  submit() {
    if (this.instruction.trim()) {
      this.close();
      this.onSubmit(this.instruction.trim());
    }
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};

// src/ui/selection-context-menu.ts
var SELECTION_ACTIONS = [
  {
    id: "improve",
    label: "Improve Writing",
    icon: "sparkles",
    description: "Make text clearer, more concise, better flow"
  },
  {
    id: "longer",
    label: "Make Longer",
    icon: "plus-circle",
    description: "Expand ideas with more detail and examples"
  },
  {
    id: "shorter",
    label: "Make Shorter",
    icon: "minus-circle",
    description: "Condense to essential points"
  },
  {
    id: "tone",
    label: "Change Tone",
    icon: "palette",
    description: "Adjust writing style and tone"
  },
  {
    id: "custom",
    label: "Tell Nova...",
    icon: "message-circle",
    description: "Custom instruction for transformation"
  }
];
var SelectionContextMenu = class {
  constructor(app, plugin) {
    this.app = app;
    this.plugin = plugin;
    this.animatedSelection = null;
    this.selectionEditCommand = new SelectionEditCommand(plugin);
    this.streamingManager = new StreamingManager();
  }
  /**
   * Set callback to be called when streaming completes
   */
  setCompletionCallback(callback) {
    this.completionCallback = callback;
  }
  /**
   * Called when streaming completes
   */
  onStreamingComplete() {
    if (this.completionCallback) {
      this.completionCallback();
    }
  }
  /**
   * Register the context menu with Obsidian's editor
   */
  register() {
    this.plugin.registerEvent(
      this.app.workspace.on("editor-menu", (menu, editor) => {
        this.addNovaSubmenu(menu, editor);
      })
    );
  }
  /**
   * Add Nova submenu to the context menu if text is selected
   */
  addNovaSubmenu(menu, editor) {
    const selectedText = editor.getSelection();
    if (!selectedText || selectedText.trim().length === 0) {
      return;
    }
    menu.addSeparator();
    SELECTION_ACTIONS.forEach((action) => {
      menu.addItem((item) => {
        item.setTitle(`Nova: ${action.label}`).setIcon(action.icon || "edit").onClick(() => {
          this.handleSelectionAction(action.id, editor, selectedText);
        });
      });
    });
  }
  /**
   * Handle selection action when menu item is clicked
   */
  async handleSelectionAction(actionId, editor, selectedText, customInstruction) {
    try {
      if (actionId === "tone" && !customInstruction) {
        this.showToneSelectionModal(editor, selectedText);
        return;
      }
      if (actionId === "custom" && !customInstruction) {
        this.showCustomInstructionModal(editor, selectedText);
        return;
      }
      await this.executeSelectionEdit(actionId, editor, selectedText, customInstruction);
    } catch (error) {
      console.error("Error executing Nova selection action:", error);
      new import_obsidian9.Notice("Failed to execute Nova action. Please try again.", 3e3);
    }
  }
  /**
   * Show tone selection modal
   */
  showToneSelectionModal(editor, selectedText) {
    const modal = new ToneSelectionModal(
      this.app,
      async (selectedTone) => {
        await this.executeSelectionEdit("tone", editor, selectedText, selectedTone);
      },
      () => {
      }
    );
    modal.open();
  }
  /**
   * Show custom instruction modal
   */
  showCustomInstructionModal(editor, selectedText) {
    const modal = new CustomInstructionModal(
      this.app,
      async (instruction) => {
        await this.executeSelectionEdit("custom", editor, selectedText, instruction);
      },
      () => {
      }
    );
    modal.open();
  }
  /**
   * Execute the selection edit command with streaming
   */
  async executeSelectionEdit(actionId, editor, selectedText, customInstruction) {
    this.startSelectionAnimation(editor);
    const originalRange = {
      from: editor.getCursor("from"),
      to: editor.getCursor("to")
    };
    try {
      const { updateStream, stopStream } = this.streamingManager.startStreaming(
        editor,
        originalRange.from,
        originalRange.to,
        {
          animationMode: "notice",
          onComplete: () => this.onStreamingComplete()
        }
      );
      this.streamingManager.showThinkingNotice(actionId, "notice");
      const result = await this.selectionEditCommand.executeStreaming(
        actionId,
        editor,
        selectedText,
        (chunk, isComplete) => {
          updateStream(chunk, isComplete);
        },
        customInstruction
      );
      stopStream();
      if (result.success) {
        const actionName = this.getActionDisplayName(actionId);
        new import_obsidian9.Notice(`Nova: Text ${actionName} successfully`, 2e3);
        this.addSuccessChatMessage(actionId, selectedText, customInstruction);
      } else {
        new import_obsidian9.Notice(`Nova: ${result.error || "Failed to process text"}`, 3e3);
        this.addFailureChatMessage(actionId, result.error || "Failed to process text");
        this.restoreOriginalText(editor);
      }
    } catch (error) {
      console.error("Error in streaming selection edit:", error);
      new import_obsidian9.Notice("Failed to execute Nova action. Please try again.", 3e3);
      this.restoreOriginalText(editor);
    } finally {
      this.stopSelectionAnimation();
      this.streamingManager.stopAnimation();
    }
  }
  /**
   * Restore original text if streaming fails completely
   */
  restoreOriginalText(editor) {
  }
  /**
   * Start pulsing animation on selected text
   */
  startSelectionAnimation(editor) {
    var _a;
    try {
      const editorContainer = ((_a = editor.cm) == null ? void 0 : _a.dom) || document.querySelector(".cm-editor");
      if (editorContainer) {
        editorContainer.classList.add("nova-selection-processing");
      }
      const selection = editor.getSelection();
      if (selection) {
        this.animatedSelection = {
          from: editor.getCursor("from"),
          to: editor.getCursor("to")
        };
      }
    } catch (error) {
      console.warn("Failed to start selection animation:", error);
    }
  }
  /**
   * Stop pulsing animation
   */
  stopSelectionAnimation() {
    try {
      const editorElements = document.querySelectorAll(".CodeMirror, .cm-editor");
      editorElements.forEach((el) => {
        el.classList.remove("nova-selection-processing");
      });
      this.animatedSelection = null;
    } catch (error) {
      console.warn("Failed to stop selection animation:", error);
    }
  }
  /**
   * Get display name for action
   */
  getActionDisplayName(actionId) {
    switch (actionId) {
      case "improve":
        return "improved";
      case "longer":
        return "expanded";
      case "shorter":
        return "condensed";
      case "tone":
        return "tone adjusted";
      case "custom":
        return "transformed";
      default:
        return "processed";
    }
  }
  /**
   * Add success message to chat using unified system
   */
  addSuccessChatMessage(actionId, originalText, customInstruction) {
    try {
      const leaves = this.app.workspace.getLeavesOfType("nova-sidebar");
      if (leaves.length > 0) {
        const sidebarView = leaves[0].view;
        if (sidebarView == null ? void 0 : sidebarView.chatRenderer) {
          const actionDescription = this.getActionDescription(actionId, customInstruction);
          const truncatedText = originalText.length > 50 ? originalText.substring(0, 50) + "..." : originalText;
          const message = `\u2713 ${actionDescription} text: "${truncatedText}"`;
          sidebarView.chatRenderer.addSuccessMessage(message, true);
        }
      }
    } catch (error) {
      console.warn("Failed to add success chat message:", error);
    }
  }
  /**
   * Add failure message to chat using unified system
   */
  addFailureChatMessage(actionId, errorMessage) {
    try {
      const leaves = this.app.workspace.getLeavesOfType("nova-sidebar");
      if (leaves.length > 0) {
        const sidebarView = leaves[0].view;
        if (sidebarView == null ? void 0 : sidebarView.chatRenderer) {
          const actionName = this.getActionDisplayName(actionId);
          const message = `\u2717 Failed to ${actionName.replace("ed", "")} text: ${errorMessage}`;
          sidebarView.chatRenderer.addErrorMessage(message, true);
        }
      }
    } catch (error) {
      console.warn("Failed to add error chat message:", error);
    }
  }
  /**
   * Get detailed action description for chat
   */
  getActionDescription(actionId, customInstruction) {
    switch (actionId) {
      case "improve":
        return "Improved";
      case "longer":
        return "Expanded";
      case "shorter":
        return "Condensed";
      case "tone":
        return `Changed tone to ${customInstruction || "formal"}`;
      case "custom":
        return `Applied "${customInstruction}"`;
      default:
        return "Processed";
    }
  }
};

// src/ui/sidebar-view.ts
var VIEW_TYPE_NOVA_SIDEBAR = "nova-sidebar";
var _NovaSidebarView = class _NovaSidebarView extends import_obsidian10.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.currentFile = null;
    this.currentContext = null;
    this.lastTokenWarnings = {};
    // PHASE 3 FIX: Race condition prevention
    this.currentFileLoadOperation = null;
    // Track user-initiated provider changes to prevent spurious messages
    this.isUserInitiatedProviderChange = false;
    // Command system delegation
    this._commandPickerItems = [];
    this._selectedCommandIndex = -1;
    this._isCommandMenuVisible = false;
    // Cursor position tracking - file-scoped like conversation history
    this.currentFileCursorPosition = null;
    // Document drawer state (transient - always starts closed on file switch)
    this.isDrawerOpen = false;
    this.contextDrawerCloseHandler = null;
    // Performance optimization - debouncing and timing constants
    this.contextPreviewDebounceTimeout = null;
    // Event listener cleanup tracking
    this.documentEventListeners = [];
    this.timeouts = [];
    this.plugin = plugin;
  }
  // Cursor-only architecture - delegate to new components
  get textArea() {
    var _a;
    return (_a = this.inputHandler) == null ? void 0 : _a.getTextArea();
  }
  get wikilinkAutocomplete() {
    return this.inputHandler ? { destroy: () => {
    } } : null;
  }
  get autoGrowTextarea() {
    return () => {
    };
  }
  get commandPickerItems() {
    return this._commandPickerItems;
  }
  set commandPickerItems(value) {
    this._commandPickerItems = value;
  }
  get selectedCommandIndex() {
    return this._selectedCommandIndex;
  }
  set selectedCommandIndex(value) {
    this._selectedCommandIndex = value;
  }
  get isCommandMenuVisible() {
    return this._isCommandMenuVisible;
  }
  set isCommandMenuVisible(value) {
    this._isCommandMenuVisible = value;
  }
  // Context system delegation
  get contextPreview() {
    var _a;
    return (_a = this.contextManager) == null ? void 0 : _a.contextPreview;
  }
  get contextIndicator() {
    var _a;
    return (_a = this.contextManager) == null ? void 0 : _a.contextIndicator;
  }
  getViewType() {
    return VIEW_TYPE_NOVA_SIDEBAR;
  }
  getDisplayText() {
    return "Nova";
  }
  getIcon() {
    return "nova-star";
  }
  /**
   * Centralized callback for when any streaming operation completes
   * Updates all UI elements that depend on document content
   */
  onStreamingComplete() {
    this.refreshAllStats();
    this.refreshContext();
  }
  async onOpen() {
    const container = this.containerEl.children[1];
    container.empty();
    container.addClass("nova-sidebar-container");
    if (import_obsidian10.Platform.isMobile) {
      container.addClass("is-mobile");
    } else {
      container.addClass("is-desktop");
    }
    const wrapperEl = container.createDiv({ cls: "nova-wrapper" });
    wrapperEl.style.cssText = `
			display: flex;
			flex-direction: column;
			height: 100%;
			overflow: hidden;
			padding-bottom: ${import_obsidian10.Platform.isDesktopApp ? "var(--size-4-6)" : "var(--size-4-5)"};
		`;
    const headerEl = wrapperEl.createDiv({ cls: "nova-header" });
    headerEl.style.cssText = `
			display: flex;
			flex-direction: column;
			padding: var(--size-4-2);
			border-bottom: 1px solid var(--background-modifier-border);
			flex-shrink: 0;
		`;
    const topRowEl = headerEl.createDiv();
    topRowEl.style.cssText = `
			display: flex;
			align-items: center;
			justify-content: space-between;
		`;
    const titleEl = topRowEl.createEl("h4");
    titleEl.style.cssText = "margin: 0; font-size: var(--font-ui-medium); display: flex; align-items: center; gap: var(--size-2-2); color: var(--interactive-accent);";
    titleEl.innerHTML = `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: var(--icon-size); height: var(--icon-size);">
			<circle cx="12" cy="12" r="2.5" fill="currentColor"/>
			<path d="M12 1L12 6" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M12 18L12 23" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M23 12L18 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M6 12L1 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M18.364 5.636L15.536 8.464" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M8.464 15.536L5.636 18.364" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M18.364 18.364L15.536 15.536" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M8.464 8.464L5.636 5.636" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
		</svg>Nova`;
    const rightContainer = topRowEl.createDiv();
    rightContainer.style.cssText = "display: flex; align-items: center; gap: var(--size-2-3);";
    const privacyIndicator = rightContainer.createDiv({ cls: "nova-privacy-indicator" });
    this.updatePrivacyIndicator(privacyIndicator);
    this.privacyIndicator = privacyIndicator;
    await this.createProviderDropdown(rightContainer);
    const clearButton = new import_obsidian10.ButtonComponent(rightContainer);
    clearButton.setIcon("eraser").setTooltip("Clear conversation history").onClick(() => this.clearChat());
    const isMobile = import_obsidian10.Platform.isMobile;
    clearButton.buttonEl.style.cssText = `
			background: none;
			border: 1px solid var(--text-faint);
			color: var(--text-faint);
			cursor: pointer;
			padding: ${isMobile ? "8px 12px" : "4px 8px"};
			border-radius: 4px;
			font-size: 1em;
			transition: all 0.2s;
			min-width: ${isMobile ? "44px" : "auto"};
			min-height: ${isMobile ? "44px" : "auto"};
			display: flex;
			align-items: center;
			justify-content: center;
		`;
    this.createChatInterface(wrapperEl);
    this.createInputInterface(wrapperEl);
    this.registerEvent(
      this.app.workspace.on("active-leaf-change", () => {
        this.loadConversationForActiveFile();
      })
    );
    this.registerEvent(
      this.app.workspace.on("editor-change", (editor) => {
        this.trackCursorPosition(editor);
      })
    );
    this.setupEditorBlurListener();
    this.loadConversationForActiveFile();
    if (this.plugin.selectionContextMenu) {
      this.plugin.selectionContextMenu.setCompletionCallback(() => this.onStreamingComplete());
    }
    this.isUserInitiatedProviderChange = false;
    await this.refreshProviderStatus();
  }
  /**
   * Track cursor position changes in the active editor (file-scoped)
   */
  trackCursorPosition(editor) {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile || !editor) {
      return;
    }
    if (this.currentFile && activeFile.path === this.currentFile.path) {
      const cursorPos = editor.getCursor();
      if (cursorPos) {
        this.currentFileCursorPosition = cursorPos;
      }
    }
  }
  /**
   * Restore cursor position for current file (file-scoped)
   */
  restoreCursorPosition() {
    if (this.currentFileCursorPosition) {
      const editor = this.plugin.documentEngine.getActiveEditor();
      if (editor) {
        editor.setCursor(this.currentFileCursorPosition);
      }
    }
  }
  /**
   * Setup focus-based stats updates using Nova input focus as trigger
   */
  setupEditorBlurListener() {
    var _a, _b;
    const inputElement = (_b = (_a = this.inputHandler) == null ? void 0 : _a.getTextArea()) == null ? void 0 : _b.inputEl;
    if (inputElement) {
      this.registerDomEvent(inputElement, "focus", () => {
        this.refreshAllStats();
      });
    }
    this.registerDomEvent(this.containerEl, "mousedown", () => {
      setTimeout(() => {
        this.refreshAllStats();
      }, 50);
    });
  }
  async onClose() {
    var _a;
    if ((_a = this.currentProviderDropdown) == null ? void 0 : _a.cleanup) {
      this.currentProviderDropdown.cleanup();
    }
    if (this.wikilinkAutocomplete) {
      this.wikilinkAutocomplete.destroy();
    }
    if (this.contextPreviewDebounceTimeout) {
      clearTimeout(this.contextPreviewDebounceTimeout);
      this.contextPreviewDebounceTimeout = null;
    }
    this.cleanupEventListeners();
    this.clearTimeouts();
    this.cleanupDOMElements();
  }
  /**
   * Add event listener with automatic cleanup tracking
   */
  addTrackedEventListener(element, event, handler) {
    element.addEventListener(event, handler);
    this.documentEventListeners.push({ element, event, handler });
  }
  /**
   * Add timeout with automatic cleanup tracking
   */
  addTrackedTimeout(callback, delay) {
    const id = setTimeout(() => {
      callback();
      this.timeouts = this.timeouts.filter((t) => t !== id);
    }, delay);
    this.timeouts.push(id);
    return id;
  }
  /**
   * Clean up all tracked event listeners
   */
  cleanupEventListeners() {
    this.documentEventListeners.forEach(({ element, event, handler }) => {
      element.removeEventListener(event, handler);
    });
    this.documentEventListeners = [];
    if (this.contextDrawerCloseHandler) {
      document.removeEventListener("click", this.contextDrawerCloseHandler);
      this.contextDrawerCloseHandler = null;
    }
  }
  /**
   * Clear all tracked timeouts
   */
  clearTimeouts() {
    this.timeouts.forEach((id) => clearTimeout(id));
    this.timeouts = [];
  }
  /**
   * Clean up DOM elements
   */
  cleanupDOMElements() {
  }
  createChatInterface(container) {
    this.chatContainer = container.createDiv({ cls: "nova-chat-container" });
    this.chatContainer.style.cssText = `
			flex: 1;
			overflow-y: auto;
			padding: var(--size-4-2);
			background: var(--background-secondary);
			display: flex;
			flex-direction: column;
			gap: var(--size-2-3);
		`;
    this.chatRenderer = new ChatRenderer(this.plugin, this.chatContainer);
    this.addWelcomeMessage();
  }
  createInputInterface(container) {
    this.inputContainer = container.createDiv({ cls: "nova-input-container" });
    this.createInputArea();
  }
  /**
   * Create the input area UI elements using new architecture
   */
  createInputArea() {
    this.inputContainer.empty();
    this.contextManager = new ContextManager(this.plugin, this.app, this.inputContainer);
    this.streamingManager = new StreamingManager();
    this.selectionContextMenu = this.plugin.selectionContextMenu;
    this.inputHandler = new InputHandler(this.plugin, this.inputContainer, this.contextManager);
    this.inputHandler.setSidebarView(this);
    this.contextManager.setSidebarView(this);
    this.inputHandler.createInputInterface(this.chatContainer);
    this.commandSystem = new CommandSystem(this.plugin, this.inputContainer, this.inputHandler.getTextArea());
    this.inputHandler.setCommandSystem(this.commandSystem);
    this.inputHandler.setOnSendMessage((message) => {
      this.handleSend(message);
    });
    this.contextManager.createContextIndicator();
  }
  addMessage(role, content) {
    const messageEl = this.chatContainer.createDiv({ cls: `nova-message nova-message-${role}` });
    messageEl.style.cssText = `
			margin-bottom: var(--size-4-2);
			padding: var(--size-2-3) var(--size-4-3);
			border-radius: var(--radius-s);
			max-width: 85%;
			${role === "user" ? "margin-left: auto; background: var(--interactive-accent); color: var(--text-on-accent);" : role === "system" ? "margin: 0 auto; background: var(--background-modifier-hover); color: var(--text-muted); text-align: center; font-size: var(--font-text-size);" : "background: var(--background-primary); border: 1px solid var(--background-modifier-border);"}
		`;
    const roleEl = messageEl.createEl("div", {
      text: role === "user" ? "You" : role === "system" ? "System" : "Nova",
      cls: "nova-message-role"
    });
    roleEl.style.cssText = `
			font-size: var(--font-ui-smaller);
			opacity: 0.7;
			margin-bottom: var(--size-2-1);
			font-weight: 600;
		`;
    const contentEl = messageEl.createEl("div", { cls: "nova-message-content" });
    if (role === "system" && content.includes("<svg")) {
      contentEl.innerHTML = content;
    } else {
      contentEl.textContent = content;
    }
    setTimeout(() => {
      this.chatContainer.scrollTo({
        top: this.chatContainer.scrollHeight,
        behavior: "smooth"
      });
    }, _NovaSidebarView.SCROLL_DELAY_MS);
  }
  // REPLACE with simple delegation to ChatRenderer:
  addSuccessMessage(content) {
    this.chatRenderer.addSuccessMessage(content, true);
  }
  addErrorMessage(content) {
    this.chatRenderer.addErrorMessage(content, true);
  }
  addWelcomeMessage(message) {
    this.chatRenderer.addWelcomeMessage(message);
  }
  addSuccessIndicator(action) {
    const messages = {
      "add": "\u2713 Content added",
      "edit": "\u2713 Content edited",
      "delete": "\u2713 Content deleted",
      "grammar": "\u2713 Grammar fixed",
      "rewrite": "\u2713 Content rewritten"
    };
    const message = messages[action] || "\u2713 Command completed";
    this.addSuccessMessage(message);
  }
  addErrorIndicator(action, error) {
    const messages = {
      "add": "\u274C Failed to add content",
      "edit": "\u274C Failed to edit content",
      "delete": "\u274C Failed to delete content",
      "grammar": "\u274C Failed to fix grammar",
      "rewrite": "\u274C Failed to rewrite content",
      "execute": "\u274C Command execution error"
    };
    let message = messages[action] || "\u274C Command failed";
    if (error) {
      message += `: ${error}`;
    }
    this.addErrorMessage(message);
  }
  async handleColonCommand(message) {
    var _a;
    if (!this.plugin.featureManager.isFeatureEnabled("commands")) {
      this.addErrorMessage("Commands are currently in early access for Supernova supporters. Available to all users September 30, 2025.");
      return true;
    }
    const command = message.slice(1).toLowerCase();
    const providerCommands = {
      "claude": "claude",
      "chatgpt": "openai",
      "openai": "openai",
      "gemini": "google",
      "google": "google",
      "ollama": "ollama"
    };
    if (providerCommands[command]) {
      const providerId = providerCommands[command];
      await this.plugin.settingTab.setCurrentModel(providerId);
      await this.plugin.saveSettings();
      this.addSuccessMessage(`\u2713 Switched to ${this.getProviderWithModelDisplayName(providerId)}`);
      return true;
    }
    if (this.plugin.featureManager.isFeatureEnabled("commands")) {
      const customCommand = (_a = this.plugin.settings.customCommands) == null ? void 0 : _a.find((cmd) => cmd.trigger === command);
      if (customCommand) {
        this.inputHandler.getTextArea().setValue(customCommand.template);
        setTimeout(() => this.autoGrowTextarea(), 0);
        this.addSuccessMessage(`\u2713 Loaded template: ${customCommand.name}`);
        return true;
      }
    }
    this.addErrorMessage(`\u274C Unknown command ':${command}'. Try :claude, :chatgpt, :gemini, or :ollama`);
    return true;
  }
  createCommandPicker() {
    this.commandPicker = this.inputContainer.createDiv({ cls: "nova-command-picker nova-panel-base" });
    this.commandPicker.style.cssText = `
			position: absolute;
			bottom: 100%;
			left: 0;
			right: 0;
			border-bottom: none;
			border-radius: 8px 8px 0 0;
			max-height: 200px;
			overflow-y: auto;
			z-index: 1000;
			display: none;
			box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.1);
		`;
  }
  handleInputChange() {
    const value = this.inputHandler.getTextArea().getValue();
    if (value.startsWith(":") && this.plugin.featureManager.isFeatureEnabled("commands")) {
      const query = value.slice(1).toLowerCase();
      this.showCommandPicker(query);
    } else {
      this.hideCommandPicker();
    }
  }
  showCommandPicker(query) {
    const commands = this.getAvailableCommands().filter(
      (cmd) => cmd.trigger.toLowerCase().includes(query) || cmd.name.toLowerCase().includes(query)
    );
    this.commandPicker.empty();
    this.commandPickerItems = [];
    this.selectedCommandIndex = -1;
    if (commands.length === 0) {
      this.hideCommandPicker();
      return;
    }
    commands.forEach((command, index) => {
      const item = this.commandPicker.createDiv({ cls: "nova-command-item nova-panel-item" });
      const triggerEl = item.createSpan({ cls: "nova-command-trigger nova-panel-trigger" });
      triggerEl.textContent = `:${command.trigger}`;
      const nameEl = item.createSpan({ cls: "nova-command-name nova-panel-text" });
      nameEl.textContent = command.name;
      nameEl.style.cssText = "flex: 1;";
      if (command.description) {
        const descEl = item.createSpan({ cls: "nova-command-desc nova-panel-muted" });
        descEl.textContent = command.description;
      }
      item.addEventListener("click", () => {
        this.selectCommand(command.trigger);
      });
      item.addEventListener("mouseenter", () => {
        this.setSelectedCommand(index);
      });
      this.commandPickerItems.push(item);
    });
    this.commandPicker.style.display = "block";
  }
  hideCommandPicker() {
    this.commandPicker.style.display = "none";
    this.selectedCommandIndex = -1;
  }
  isCommandPickerVisible() {
    return this.commandPicker.style.display === "block";
  }
  navigateCommandPicker(direction) {
    if (this.commandPickerItems.length === 0) return;
    const newIndex = Math.max(0, Math.min(
      this.commandPickerItems.length - 1,
      this.selectedCommandIndex + direction
    ));
    this.setSelectedCommand(newIndex);
  }
  setSelectedCommand(index) {
    this.commandPickerItems.forEach((item) => {
      item.removeClass("selected");
    });
    this.selectedCommandIndex = index;
    if (index >= 0 && index < this.commandPickerItems.length) {
      this.commandPickerItems[index].addClass("selected");
      this.commandPickerItems[index].scrollIntoView({ block: "nearest" });
    }
  }
  handleCommandPickerSelection() {
    if (!this.isCommandPickerVisible() || this.selectedCommandIndex === -1) {
      return false;
    }
    const commands = this.getAvailableCommands();
    const selectedCommand = commands[this.selectedCommandIndex];
    if (selectedCommand) {
      this.selectCommand(selectedCommand.trigger);
      return true;
    }
    return false;
  }
  selectCommand(trigger) {
    this.inputHandler.getTextArea().setValue(`:${trigger}`);
    this.hideCommandPicker();
    this.handleSend();
  }
  getAvailableCommands() {
    var _a;
    const commands = [];
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
    const selectedText = (_a = activeView == null ? void 0 : activeView.editor) == null ? void 0 : _a.getSelection();
    if (selectedText && selectedText.trim().length > 0) {
      SELECTION_ACTIONS.forEach((action) => {
        commands.push({
          trigger: action.id,
          name: `Nova: ${action.label}`,
          description: action.description
        });
      });
      commands.push({ trigger: "---", name: "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500", description: "Provider Commands" });
    }
    commands.push(
      { trigger: "claude", name: "Switch to Claude", description: "Anthropic Claude AI" },
      { trigger: "chatgpt", name: "Switch to ChatGPT", description: "OpenAI GPT models" },
      { trigger: "gemini", name: "Switch to Gemini", description: "Google Gemini AI" }
    );
    if (import_obsidian10.Platform.isDesktopApp) {
      commands.push({ trigger: "ollama", name: "Switch to Ollama", description: "Local AI models" });
    }
    if (this.plugin.featureManager.isFeatureEnabled("commands")) {
      const customCommands = this.plugin.settings.customCommands || [];
      if (customCommands.length > 0) {
        commands.push({ trigger: "---", name: "\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500", description: "Custom Commands" });
        customCommands.forEach((cmd) => {
          commands.push({
            trigger: cmd.trigger,
            name: cmd.name,
            ...cmd.description && { description: cmd.description }
          });
        });
      }
    }
    return commands;
  }
  createCommandMenu() {
    this.commandMenu = this.inputContainer.createDiv({ cls: "nova-command-menu nova-panel-base" });
    this.commandMenu.style.cssText = `
			position: absolute;
			bottom: 100%;
			right: 0;
			border-bottom: none;
			border-radius: 8px 8px 0 0;
			min-width: 240px;
			max-height: 300px;
			overflow-y: auto;
			z-index: 1000;
			display: none;
			box-shadow: 0 -4px 12px rgba(0, 0, 0, 0.1);
		`;
    const commandMenuClickHandler = (event) => {
      if (!this.commandMenu.contains(event.target) && !this.commandButton.buttonEl.contains(event.target)) {
        this.hideCommandMenu();
      }
    };
    this.addTrackedEventListener(document, "click", commandMenuClickHandler);
  }
  toggleCommandMenu() {
    if (!this.plugin.featureManager.isFeatureEnabled("commands")) {
      this.addErrorMessage("Commands are currently in early access for Supernova supporters. Available to all users September 30, 2025.");
      return;
    }
    if (this.isCommandMenuVisible) {
      this.hideCommandMenu();
    } else {
      this.showCommandMenu();
    }
  }
  showCommandMenu() {
    const commands = this.getAvailableCommands();
    this.commandMenu.empty();
    const headerEl = this.commandMenu.createDiv({ cls: "nova-command-menu-header nova-panel-header" });
    headerEl.innerHTML = this.createInlineIcon("zap") + " Commands";
    commands.forEach((command) => {
      if (command.trigger === "---") {
        const separator = this.commandMenu.createDiv({ cls: "nova-command-menu-separator" });
        separator.style.cssText = `
					padding: 8px 16px 4px 16px;
					font-size: 0.75em;
					color: var(--text-muted);
					font-weight: 600;
					text-transform: uppercase;
					letter-spacing: 0.5px;
					border-top: 1px solid var(--background-modifier-border);
					margin-top: 4px;
					cursor: default;
				`;
        separator.textContent = command.description || "";
        return;
      }
      const item = this.commandMenu.createDiv({ cls: "nova-command-menu-item nova-panel-item-vertical" });
      const nameEl = item.createDiv({ cls: "nova-command-menu-name nova-panel-text" });
      nameEl.textContent = command.name;
      const triggerEl = item.createDiv({ cls: "nova-command-menu-trigger nova-panel-trigger" });
      triggerEl.textContent = `:${command.trigger}`;
      triggerEl.style.opacity = "0.8";
      if (command.description) {
        const descEl = item.createDiv({ cls: "nova-command-menu-desc nova-panel-muted" });
        descEl.textContent = command.description;
      }
      item.addEventListener("click", () => {
        this.executeCommandFromMenu(command.trigger);
      });
    });
    this.commandMenu.style.display = "block";
    this.isCommandMenuVisible = true;
  }
  hideCommandMenu() {
    this.commandMenu.style.display = "none";
    this.isCommandMenuVisible = false;
  }
  async executeCommandFromMenu(trigger) {
    var _a;
    this.hideCommandMenu();
    const selectionAction = SELECTION_ACTIONS.find((action) => action.id === trigger);
    if (selectionAction) {
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      const selectedText = (_a = activeView == null ? void 0 : activeView.editor) == null ? void 0 : _a.getSelection();
      if ((activeView == null ? void 0 : activeView.editor) && selectedText && selectedText.trim().length > 0) {
        await this.selectionContextMenu.handleSelectionAction(trigger, activeView.editor, selectedText);
      } else {
        new import_obsidian10.Notice("No text selected. Please select text to use Nova editing commands.", 3e3);
      }
      return;
    }
    if (trigger === "---") {
      return;
    }
    this.inputHandler.getTextArea().setValue(`:${trigger}`);
    this.handleSend();
  }
  createContextPreview() {
    if (!this.plugin.featureManager.isFeatureEnabled("multi-doc-context")) {
      return document.createElement("div");
    }
    const previewContainer = this.inputContainer.createDiv({ cls: "nova-context-preview" });
    previewContainer.style.cssText = `
			display: none;
			padding: 8px 12px;
			margin-bottom: 4px;
			background: rgba(var(--interactive-accent-rgb), 0.1);
			border: 1px solid rgba(var(--interactive-accent-rgb), 0.2);
			border-radius: 6px;
			font-size: 0.8em;
			color: var(--text-muted);
			transition: all 0.2s ease;
			align-items: center;
			gap: 4px;
		`;
    const previewText = previewContainer.createSpan({ cls: "nova-context-preview-text" });
    previewText.innerHTML = this.createInlineIcon("book-open") + " Context will include: ";
    previewText.style.cssText = "font-weight: 500; display: flex; align-items: center; gap: 6px;";
    const previewList = previewContainer.createSpan({ cls: "nova-context-preview-list" });
    previewList.style.cssText = "color: var(--interactive-accent);";
    return previewContainer;
  }
  /**
   * Debounced version of updateLiveContextPreview for performance
   */
  debouncedUpdateContextPreview() {
    if (this.contextPreviewDebounceTimeout) {
      clearTimeout(this.contextPreviewDebounceTimeout);
    }
    this.contextPreviewDebounceTimeout = setTimeout(() => {
      this.updateLiveContextPreview();
      this.contextPreviewDebounceTimeout = null;
    }, _NovaSidebarView.CONTEXT_PREVIEW_DEBOUNCE_MS);
  }
  updateLiveContextPreview() {
    var _a;
    if (!this.contextPreview || !this.plugin.featureManager.isFeatureEnabled("multi-doc-context")) {
      return;
    }
    const message = this.inputHandler.getTextArea().getValue();
    if (!message) {
      this.contextPreview.style.display = "none";
      return;
    }
    const refPattern = /(\+)?\[\[([^\]]+?)(?:#([^\]]+?))?\]\]/g;
    const foundRefs = [];
    let match;
    while ((match = refPattern.exec(message)) !== null) {
      const docName = match[2];
      const property = match[3];
      const file = this.findFileByName(docName);
      if (file) {
        foundRefs.push({
          name: docName,
          property
        });
      }
    }
    const persistentDocs = this.contextManager.getPersistentContext(((_a = this.currentFile) == null ? void 0 : _a.path) || "");
    persistentDocs.forEach((doc) => {
      const exists = foundRefs.some((ref) => ref.name === doc.file.basename);
      if (!exists) {
        foundRefs.push({
          name: doc.file.basename,
          property: doc.property
        });
      }
    });
    if (foundRefs.length > 0) {
      const previewList = this.contextPreview.querySelector(".nova-context-preview-list");
      if (previewList) {
        const docNames = foundRefs.map((ref) => {
          const suffix = ref.property ? `#${ref.property}` : "";
          return `${ref.name}${suffix}`;
        });
        previewList.textContent = docNames.join(", ");
      }
      this.contextPreview.style.display = "block";
    } else {
      this.contextPreview.style.display = "none";
    }
  }
  findFileByName(nameOrPath) {
    let file = this.app.vault.getAbstractFileByPath(nameOrPath);
    if (!file || !(file instanceof import_obsidian10.TFile)) {
      file = this.app.vault.getAbstractFileByPath(nameOrPath + ".md");
    }
    if (!file || !(file instanceof import_obsidian10.TFile)) {
      const files = this.app.vault.getMarkdownFiles();
      file = files.find(
        (f) => f.basename === nameOrPath || f.name === nameOrPath || f.path.endsWith("/" + nameOrPath) || f.path.endsWith("/" + nameOrPath + ".md")
      ) || null;
    }
    return file instanceof import_obsidian10.TFile ? file : null;
  }
  updateContextIndicator() {
    var _a, _b, _c, _d;
    if (!this.contextIndicator) {
      return;
    }
    const newDocCount = ((_b = (_a = this.currentContext) == null ? void 0 : _a.persistentDocs) == null ? void 0 : _b.length) || 0;
    const currentDocCount = this.contextIndicator.getAttribute("data-doc-count");
    const currentFilePath = this.contextIndicator.getAttribute("data-file-path");
    const newFilePath = ((_c = this.currentFile) == null ? void 0 : _c.path) || "";
    if (currentDocCount === newDocCount.toString() && currentFilePath === newFilePath && newDocCount > 0) {
      return;
    }
    if (this.contextDrawerCloseHandler) {
      document.removeEventListener("click", this.contextDrawerCloseHandler);
      this.contextDrawerCloseHandler = null;
    }
    this.contextIndicator.empty();
    if (!this.currentContext || !this.currentContext.persistentDocs) {
      this.contextIndicator.style.display = "none";
      this.contextIndicator.removeAttribute("data-doc-count");
      this.contextIndicator.removeAttribute("data-file-path");
      if (this.inputHandler) {
        this.inputHandler.updateContextState(false);
      }
      return;
    }
    const allDocs = this.currentContext.persistentDocs;
    if (!allDocs || allDocs.length === 0) {
      this.contextIndicator.style.display = "none";
      this.contextIndicator.removeAttribute("data-doc-count");
      this.contextIndicator.removeAttribute("data-file-path");
      if (this.inputHandler) {
        this.inputHandler.updateContextState(false);
      }
      return;
    }
    this.contextIndicator.setAttribute("data-doc-count", allDocs.length.toString());
    this.contextIndicator.setAttribute("data-file-path", ((_d = this.currentFile) == null ? void 0 : _d.path) || "");
    if (this.inputHandler) {
      this.inputHandler.updateContextState(true);
    }
    const isMobile = import_obsidian10.Platform.isMobile;
    this.contextIndicator.style.cssText = `
			display: flex;
			position: relative;
			padding: ${isMobile ? "12px 16px" : "8px 12px"};
			margin-bottom: 4px;
			background: rgba(var(--interactive-accent-rgb), 0.1);
			border: 1px solid rgba(var(--interactive-accent-rgb), 0.2);
			border-radius: 6px;
			font-size: ${isMobile ? "0.9em" : "0.8em"};
			color: var(--text-muted);
			transition: all 0.2s ease;
			cursor: pointer;
			min-height: ${isMobile ? "44px" : "auto"};
		`;
    const summaryEl = this.contextIndicator.createDiv({ cls: "nova-context-summary" });
    summaryEl.style.cssText = `
			display: flex;
			align-items: center;
			justify-content: space-between;
			width: 100%;
			height: 100%;
			cursor: pointer;
			pointer-events: auto;
		`;
    const summaryTextEl = summaryEl.createSpan({ cls: "nova-context-summary-text" });
    const docNames = allDocs.filter((doc) => {
      var _a2;
      return (_a2 = doc == null ? void 0 : doc.file) == null ? void 0 : _a2.basename;
    }).map((doc) => doc.file.basename).slice(0, isMobile ? 1 : 2);
    const moreCount = allDocs.length > (isMobile ? 1 : 2) ? ` +${allDocs.length - (isMobile ? 1 : 2)}` : "";
    summaryTextEl.style.cssText = "font-weight: 500; color: var(--text-muted); flex: 1; pointer-events: none; display: flex; align-items: center; gap: 6px; min-width: 0;";
    const filenamePartEl = summaryTextEl.createSpan();
    filenamePartEl.style.cssText = "display: flex; align-items: center; gap: 4px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; min-width: 0; flex: 1;";
    const iconSpan = filenamePartEl.createSpan();
    iconSpan.innerHTML = this.createInlineIcon("book-open");
    iconSpan.style.cssText = "flex-shrink: 0; display: flex; align-items: center;";
    const textSpan = filenamePartEl.createSpan();
    textSpan.textContent = `${docNames.join(", ")}${moreCount}`;
    textSpan.style.cssText = "overflow: hidden; text-overflow: ellipsis; min-width: 0;";
    const expandIndicatorEl = summaryEl.createSpan({ cls: "nova-context-expand-indicator" });
    expandIndicatorEl.innerHTML = this.createInlineIcon("more-horizontal", isMobile ? "16px" : "14px");
    expandIndicatorEl.style.cssText = `
			color: var(--interactive-accent);
			font-size: ${isMobile ? "16px" : "14px"};
			opacity: 0.8;
			padding: ${isMobile ? "8px" : "4px"};
			min-width: ${isMobile ? "44px" : "auto"};
			text-align: center;
			border-radius: 4px;
			transition: all 0.2s;
			pointer-events: none;
		`;
    expandIndicatorEl.setAttr("title", "Tap to manage documents");
    if (isMobile) {
      summaryEl.addEventListener("touchstart", () => {
        expandIndicatorEl.style.background = "rgba(var(--interactive-accent-rgb), 0.2)";
      });
      summaryEl.addEventListener("touchend", () => {
        this.addTrackedTimeout(() => {
          expandIndicatorEl.style.background = "none";
        }, _NovaSidebarView.HOVER_TIMEOUT_MS);
      });
    } else {
      summaryEl.addEventListener("mouseenter", () => {
        expandIndicatorEl.style.background = "rgba(var(--interactive-accent-rgb), 0.2)";
      });
      summaryEl.addEventListener("mouseleave", () => {
        expandIndicatorEl.style.background = "none";
      });
    }
    const expandedEl = this.contextIndicator.createDiv({ cls: "nova-context-expanded" });
    expandedEl.style.cssText = `
			display: none;
			position: absolute;
			bottom: 100%;
			left: ${isMobile ? "-8px" : "0"};
			right: ${isMobile ? "-8px" : "0"};
			background: var(--background-primary);
			border: 1px solid rgba(var(--interactive-accent-rgb), 0.2);
			border-radius: 6px;
			box-shadow: 0 ${isMobile ? "-4px 16px" : "-2px 8px"} rgba(0, 0, 0, ${isMobile ? "0.15" : "0.1"});
			z-index: 1000;
			margin-bottom: 2px;
			max-height: ${isMobile ? "60vh" : "200px"};
			overflow-y: auto;
			min-width: ${isMobile ? "100%" : "auto"};
		`;
    const expandedHeaderEl = expandedEl.createDiv({ cls: "nova-context-expanded-header" });
    expandedHeaderEl.style.cssText = `
			display: flex;
			align-items: center;
			justify-content: space-between;
			padding: ${isMobile ? "12px 16px" : "8px 12px"};
			border-bottom: 1px solid var(--background-modifier-border);
			font-weight: 500;
			color: var(--text-normal);
			font-size: 1em;
			min-height: ${isMobile ? "44px" : "auto"};
		`;
    const headerTitleEl = expandedHeaderEl.createSpan();
    headerTitleEl.innerHTML = this.createInlineIcon("book-open") + ` Documents (${allDocs.length})`;
    headerTitleEl.style.cssText = "display: flex; align-items: center; gap: 6px;";
    const clearAllBtnComponent = new import_obsidian10.ButtonComponent(expandedHeaderEl);
    clearAllBtnComponent.setIcon("trash-2").setTooltip("Clear all documents from context").onClick(async () => {
      if (this.currentFile) {
        this.contextManager.clearPersistentContext(this.currentFile.path);
        await this.refreshContext();
      }
    });
    const clearAllBtn = clearAllBtnComponent.buttonEl;
    clearAllBtn.addClass("nova-context-clear-all-btn");
    clearAllBtn.style.cssText = `
			background: none;
			border: 1px solid var(--text-faint);
			color: var(--text-faint);
			cursor: pointer;
			padding: ${isMobile ? "8px 12px" : "4px 8px"};
			border-radius: 4px;
			font-size: 1em;
			transition: all 0.2s;
			min-width: ${isMobile ? "44px" : "auto"};
			min-height: ${isMobile ? "44px" : "auto"};
			display: flex;
			align-items: center;
			justify-content: center;
		`;
    if (isMobile) {
      clearAllBtn.addEventListener("touchstart", () => {
        clearAllBtn.style.background = "var(--background-modifier-error)";
        clearAllBtn.style.borderColor = "var(--text-error)";
        clearAllBtn.style.color = "var(--text-error)";
      });
      clearAllBtn.addEventListener("touchend", () => {
        setTimeout(() => {
          clearAllBtn.style.background = "none";
          clearAllBtn.style.borderColor = "var(--text-faint)";
          clearAllBtn.style.color = "var(--text-faint)";
        }, _NovaSidebarView.HOVER_TIMEOUT_MS);
      });
    } else {
      clearAllBtn.addEventListener("mouseenter", () => {
        clearAllBtn.style.background = "var(--background-modifier-error)";
        clearAllBtn.style.borderColor = "var(--text-error)";
        clearAllBtn.style.color = "var(--text-error)";
      });
      clearAllBtn.addEventListener("mouseleave", () => {
        clearAllBtn.style.background = "none";
        clearAllBtn.style.borderColor = "var(--text-faint)";
        clearAllBtn.style.color = "var(--text-faint)";
      });
    }
    const docListEl = expandedEl.createDiv({ cls: "nova-context-doc-list" });
    allDocs.filter((doc) => {
      var _a2;
      return (_a2 = doc == null ? void 0 : doc.file) == null ? void 0 : _a2.basename;
    }).forEach((doc, index) => {
      const docItemEl = docListEl.createDiv({ cls: "nova-context-doc-item" });
      docItemEl.style.cssText = `
				display: flex;
				align-items: center;
				justify-content: space-between;
				padding: ${isMobile ? "12px 16px" : "8px 12px"};
				border-bottom: ${index < allDocs.length - 1 ? "1px solid var(--background-modifier-border)" : "none"};
				transition: background-color 0.2s;
				min-height: ${isMobile ? "56px" : "auto"};
			`;
      const docInfoEl = docItemEl.createDiv({ cls: "nova-context-doc-info" });
      docInfoEl.style.cssText = `
				display: flex;
				align-items: center;
				gap: ${isMobile ? "12px" : "8px"};
				flex: 1;
				min-width: 0;
			`;
      const iconEl = docInfoEl.createSpan();
      iconEl.innerHTML = this.createInlineIcon("file-text");
      iconEl.style.cssText = "display: flex; align-items: center; font-size: 1em; flex-shrink: 0;";
      const nameEl = docInfoEl.createSpan({ cls: "nova-context-doc-name" });
      const suffix = doc.property ? `#${doc.property}` : "";
      nameEl.textContent = `${doc.file.basename}${suffix}`;
      nameEl.style.cssText = `
				font-weight: 400;
				color: var(--text-normal);
				text-overflow: ellipsis;
				overflow: hidden;
				white-space: nowrap;
				font-size: 1em;
				line-height: 1.4;
				flex: 1;
				min-width: 0;
				margin-right: 8px;
			`;
      nameEl.setAttr("title", `${doc.file.path} (read-only for editing)`);
      const readOnlyEl = docInfoEl.createSpan({ cls: "nova-context-readonly" });
      readOnlyEl.textContent = "read-only";
      readOnlyEl.style.cssText = `
				font-size: 0.75em;
				color: var(--text-muted);
				background: var(--background-modifier-hover);
				padding: 1px 4px;
				border-radius: 3px;
				font-weight: 500;
				text-transform: uppercase;
				letter-spacing: 0.5px;
				flex-shrink: 0;
				margin-right: 8px;
			`;
      const removeBtn = docItemEl.createEl("button", { cls: "nova-context-doc-remove" });
      removeBtn.textContent = "\xD7";
      removeBtn.style.cssText = `
				background: none;
				border: none;
				color: var(--text-faint);
				cursor: pointer;
				width: ${isMobile ? "44px" : "20px"};
				height: ${isMobile ? "44px" : "20px"};
				border-radius: 4px;
				display: flex;
				align-items: center;
				justify-content: center;
				font-size: ${isMobile ? "18px" : "14px"};
				transition: all 0.2s;
				font-weight: normal;
				line-height: 1;
			`;
      removeBtn.setAttr("title", `Remove ${doc.file.basename}`);
      removeBtn.addEventListener("click", async (e) => {
        e.stopPropagation();
        if (this.currentFile) {
          this.contextManager.removePersistentDoc(this.currentFile.path, doc.file.path);
          await this.refreshContext();
        }
      });
      if (isMobile) {
        removeBtn.addEventListener("touchstart", () => {
          removeBtn.style.background = "var(--background-modifier-error)";
          removeBtn.style.color = "var(--text-error)";
        });
        removeBtn.addEventListener("touchend", () => {
          setTimeout(() => {
            removeBtn.style.background = "none";
            removeBtn.style.color = "var(--text-faint)";
          }, _NovaSidebarView.HOVER_TIMEOUT_MS);
        });
        docItemEl.addEventListener("touchstart", () => {
          docItemEl.style.background = "var(--background-modifier-hover)";
        });
        docItemEl.addEventListener("touchend", () => {
          setTimeout(() => {
            docItemEl.style.background = "transparent";
          }, _NovaSidebarView.HOVER_TIMEOUT_MS);
        });
      } else {
        removeBtn.addEventListener("mouseenter", () => {
          removeBtn.style.background = "var(--background-modifier-error)";
          removeBtn.style.color = "var(--text-error)";
        });
        removeBtn.addEventListener("mouseleave", () => {
          removeBtn.style.background = "none";
          removeBtn.style.color = "var(--text-faint)";
        });
        docItemEl.addEventListener("mouseenter", () => {
          docItemEl.style.background = "var(--background-modifier-hover)";
        });
        docItemEl.addEventListener("mouseleave", () => {
          docItemEl.style.background = "transparent";
        });
      }
    });
    this.isDrawerOpen = false;
    expandedEl.style.display = "none";
    const toggleExpanded = (e) => {
      e.stopPropagation();
      this.isDrawerOpen = !this.isDrawerOpen;
      if (this.isDrawerOpen) {
        expandedEl.style.display = "block";
        this.contextIndicator.style.zIndex = "1001";
      } else {
        expandedEl.style.display = "none";
        this.contextIndicator.style.zIndex = "auto";
      }
    };
    summaryEl.addEventListener("click", toggleExpanded);
    this.contextDrawerCloseHandler = (e) => {
      if (this.isDrawerOpen && !this.contextIndicator.contains(e.target)) {
        this.isDrawerOpen = false;
        expandedEl.style.display = "none";
        this.contextIndicator.style.zIndex = "auto";
      }
    };
    document.addEventListener("click", this.contextDrawerCloseHandler);
  }
  async refreshContext() {
    if (this.currentFile) {
      if (this.contextManager.getCurrentFilePath() !== this.currentFile.path) {
        this.contextManager.setCurrentFile(this.currentFile);
      }
      try {
        this.currentContext = await this.contextManager.buildContext("", this.currentFile);
        this.updateContextIndicator();
        this.updateTokenDisplay();
      } catch (error) {
        console.warn("Failed to refresh context:", error);
        this.currentContext = null;
        this.updateContextIndicator();
        this.updateTokenDisplay();
      }
    } else {
      this.currentContext = null;
      this.contextManager.setCurrentFile(null);
      this.updateContextIndicator();
      this.updateTokenDisplay();
    }
  }
  async handleSend(message) {
    var _a, _b, _c, _d, _e, _f;
    const messageText = message || this.inputHandler.getValue().trim();
    if (!messageText) return;
    const currentProviderType = await this.plugin.aiProviderManager.getCurrentProviderType();
    if (!currentProviderType) {
      this.addErrorMessage(this.createIconMessage("alert-circle", "Nova is disabled or no AI provider is available. Please configure an AI provider in settings."));
      return;
    }
    if (messageText.startsWith(":")) {
      const commandResult = await this.handleColonCommand(messageText);
      if (commandResult) {
        this.inputHandler.setValue("");
        return;
      }
    }
    let processedMessage = messageText;
    let multiDocContext = null;
    if (this.currentFile) {
      if (!this.plugin.featureManager.isFeatureEnabled("multi-doc-context")) {
        if (messageText.includes("[[")) {
          this.addErrorMessage("Multi-document context is currently in early access for Supernova supporters. Available to all users August 15, 2025.");
          return;
        }
      } else {
        const context = await this.contextManager.buildContext(messageText, this.currentFile);
        const contextResult = context ? { cleanedMessage: "", context } : null;
        processedMessage = (contextResult == null ? void 0 : contextResult.cleanedMessage) || messageText;
        multiDocContext = (contextResult == null ? void 0 : contextResult.context) || null;
        this.currentContext = multiDocContext;
        this.updateContextIndicator();
        const previousPersistentCount = ((_b = (_a = this.currentContext) == null ? void 0 : _a.persistentDocs) == null ? void 0 : _b.length) || 0;
        const currentPersistentCount = ((_c = multiDocContext == null ? void 0 : multiDocContext.persistentDocs) == null ? void 0 : _c.length) || 0;
        const hasNewDocs = currentPersistentCount > previousPersistentCount;
        const isContextOnlyMessage = processedMessage.trim().length === 0 && hasNewDocs;
        if (isContextOnlyMessage) {
          const newDocsCount = currentPersistentCount - previousPersistentCount;
          if (newDocsCount > 0 && (multiDocContext == null ? void 0 : multiDocContext.persistentDocs) && multiDocContext.persistentDocs.length > 0) {
            const newDocs = multiDocContext.persistentDocs.slice(-newDocsCount);
            const docNames = newDocs.filter((doc) => {
              var _a2;
              return (_a2 = doc == null ? void 0 : doc.file) == null ? void 0 : _a2.basename;
            }).map((doc) => doc.file.basename).join(", ");
            if (docNames) {
              this.addSuccessMessage(this.createIconMessage("check-circle", `Added ${newDocsCount} document${newDocsCount !== 1 ? "s" : ""} to persistent context: ${docNames}`));
            }
          }
          this.inputHandler.setValue("");
          this.updateContextIndicator();
          if (this.contextPreview) {
            this.contextPreview.style.display = "none";
          }
          return;
        }
        if ((_d = multiDocContext == null ? void 0 : multiDocContext.persistentDocs) == null ? void 0 : _d.length) {
          const allDocs = multiDocContext.persistentDocs;
          const docNames = allDocs.filter((doc) => {
            var _a2;
            return (_a2 = doc == null ? void 0 : doc.file) == null ? void 0 : _a2.basename;
          }).map((doc) => doc.file.basename).join(", ");
          if (docNames && allDocs.length > 0) {
            const tokenInfo = multiDocContext.tokenCount > 0 ? ` (~${multiDocContext.tokenCount} tokens)` : "";
            const currentFile = ((_e = this.currentFile) == null ? void 0 : _e.basename) || "current file";
            this.addSuccessMessage(`\u2713 Included ${allDocs.length} document${allDocs.length !== 1 ? "s" : ""} in context: ${docNames}${tokenInfo}. Context documents are read-only; edit commands will only modify ${currentFile}.`);
          }
        }
        if (multiDocContext == null ? void 0 : multiDocContext.isNearLimit) {
          new import_obsidian10.Notice("\u26A0\uFE0F Approaching token limit. Consider removing some documents from context.", _NovaSidebarView.NOTICE_DURATION_MS);
        }
      }
    }
    this.inputHandler.setValue("");
    if (this.contextPreview) {
      this.contextPreview.style.display = "none";
    }
    const sendButton = this.inputHandler.sendButton;
    if (sendButton) sendButton.setDisabled(true);
    try {
      console.log("\u{1F680} CHAT INPUT HANDLING:", { messageText });
      const activeFile = this.app.workspace.getActiveFile();
      if (activeFile) {
        console.log("\u{1F4BE} About to persist user message:", { file: activeFile.path, messageText });
        await this.plugin.conversationManager.addUserMessage(activeFile, messageText, null);
        console.log("\u{1F4FA} About to display user message in UI");
        this.addMessage("user", messageText);
      }
      const loadingEl = this.chatContainer.createDiv({ cls: "nova-loading" });
      loadingEl.style.cssText = `
				padding: 12px 16px;
				background: var(--background-primary);
				border: 1px solid var(--background-modifier-border);
				border-radius: 12px;
				margin-bottom: 8px;
				max-width: 80%;
				display: flex;
				align-items: center;
				gap: 10px;
			`;
      const novaContainer = loadingEl.createDiv({ cls: "nova-burst-container" });
      novaContainer.innerHTML = `
				<div class="nova-burst">
					<div class="nova-core"></div>
					<div class="nova-ring nova-ring-1"></div>
					<div class="nova-ring nova-ring-2"></div>
					<div class="nova-ring nova-ring-3"></div>
				</div>
			`;
      const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
      const selectedText = (_f = activeView == null ? void 0 : activeView.editor) == null ? void 0 : _f.getSelection();
      const hasSelection = !!(selectedText && selectedText.trim().length > 0);
      const intent = await this.plugin.aiIntentClassifier.classifyIntent(processedMessage, hasSelection);
      let contextualCommand;
      if (intent === "METADATA" || intent === "CONTENT") {
        contextualCommand = this.plugin.commandParser.parseCommand(processedMessage);
      }
      const initialPhrase = this.getContextualThinkingPhrase(contextualCommand, processedMessage);
      const loadingTextEl = loadingEl.createSpan({ text: initialPhrase });
      loadingTextEl.style.cssText = "color: var(--text-muted); font-size: 0.9em;";
      this.startThinkingPhraseRotation(loadingTextEl, contextualCommand, processedMessage);
      let response = null;
      if (intent === "METADATA" && activeFile) {
        const parsedCommand = this.plugin.commandParser.parseCommand(processedMessage);
        response = await this.executeCommand(parsedCommand);
      } else if (intent === "CONTENT" && activeFile) {
        const parsedCommand = this.plugin.commandParser.parseCommand(processedMessage);
        response = await this.executeCommand(parsedCommand);
      } else {
        const prompt2 = await this.plugin.promptBuilder.buildPromptForMessage(processedMessage, activeFile || void 0);
        if (multiDocContext && multiDocContext.contextString) {
          const enhancedSystemPrompt = (prompt2.systemPrompt || "") + `

MULTI-DOCUMENT CONTEXT INSTRUCTIONS:
- You have access to multiple documents as REFERENCE CONTEXT ONLY
- These documents are for your understanding and background knowledge
- DO NOT echo, quote, or output content from these context documents unless specifically requested
- When responding, focus on the user's request, not the content of context documents
- Context documents are read-only; you can only edit the current working document
- If the user asks about context documents, you may reference and discuss their content`;
          const enhancedUserPrompt = `REFERENCE CONTEXT (for your understanding only):
${multiDocContext.contextString}

---

USER REQUEST: ${processedMessage}`;
          response = await this.plugin.aiProviderManager.complete(enhancedSystemPrompt, enhancedUserPrompt, {
            temperature: prompt2.config.temperature,
            maxTokens: prompt2.config.maxTokens
          });
        } else {
          response = await this.plugin.aiProviderManager.complete(prompt2.systemPrompt || "", prompt2.userPrompt, {
            temperature: prompt2.config.temperature,
            maxTokens: prompt2.config.maxTokens
          });
        }
      }
      const loadingTextSpan = loadingEl.querySelector("span");
      if (loadingTextSpan) {
        this.stopThinkingPhraseRotation(loadingTextSpan);
      }
      loadingEl.remove();
      const filteredResponse = response ? this.filterThinkingContent(response) : response;
      if (activeFile && filteredResponse) {
        await this.plugin.documentEngine.addAssistantMessage(filteredResponse);
      }
      if (filteredResponse) {
        if (filteredResponse.includes("x-circle") || filteredResponse.includes("Error executing command") || filteredResponse.includes("Failed to") || filteredResponse.includes("No markdown file is open") || filteredResponse.includes("Unable to access") || filteredResponse.includes("Unable to set")) {
          this.addErrorMessage(filteredResponse);
        } else {
          this.addMessage("assistant", filteredResponse);
        }
      }
    } catch (error) {
      const loadingEl = this.chatContainer.querySelector(".nova-loading");
      if (loadingEl) {
        const loadingTextSpan = loadingEl.querySelector("span");
        if (loadingTextSpan) {
          this.stopThinkingPhraseRotation(loadingTextSpan);
        }
        loadingEl.remove();
      }
      const errorMessage = error.message;
      let displayMessage;
      if (errorMessage.includes("Google API error")) {
        displayMessage = errorMessage;
      } else if (errorMessage.includes("OpenAI API error")) {
        displayMessage = errorMessage;
      } else if (errorMessage.includes("API key")) {
        displayMessage = `${errorMessage}. Please check your settings.`;
      } else if (errorMessage.includes("Failed to fetch") || errorMessage.includes("NetworkError")) {
        displayMessage = "Network error. Please check your internet connection and try again.";
      } else {
        displayMessage = `Sorry, I encountered an error: ${errorMessage}`;
      }
      this.addErrorMessage(displayMessage);
    } finally {
      const sendButton2 = this.inputHandler.sendButton;
      if (sendButton2) sendButton2.setDisabled(false);
      await this.refreshContext();
    }
  }
  async insertTextIntoActiveNote(text) {
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.ItemView);
    if (activeView && "editor" in activeView) {
      const editor = activeView.editor;
      if (editor) {
        const cursor = editor.getCursor();
        editor.replaceRange(text, cursor);
      }
    }
  }
  async executeCommand(command) {
    try {
      if (!this.currentFile) {
        return this.createIconMessage("x-circle", "No markdown file is open. Please open a file in the editor to use editing commands.");
      }
      const leaves = this.app.workspace.getLeavesOfType("markdown");
      let markdownView = null;
      for (const leaf of leaves) {
        const view = leaf.view;
        if (view.file === this.currentFile) {
          markdownView = view;
          break;
        }
      }
      if (!markdownView) {
        const leaf = this.app.workspace.getLeaf(false);
        if (leaf) {
          await leaf.openFile(this.currentFile);
          markdownView = leaf.view;
        }
      }
      if (!markdownView) {
        return this.createIconMessage("x-circle", `Unable to access the file "${this.currentFile.basename}". Please make sure it's open in the editor.`);
      }
      const activeFile = this.app.workspace.getActiveFile();
      if (!activeFile || activeFile !== this.currentFile) {
        this.app.workspace.setActiveLeaf(markdownView.leaf, { focus: false });
        await new Promise((resolve) => setTimeout(resolve, 50));
        const nowActiveFile = this.app.workspace.getActiveFile();
        if (!nowActiveFile || nowActiveFile !== this.currentFile) {
          return this.createIconMessage("x-circle", `Unable to set "${this.currentFile.basename}" as the active file. Edit commands can only modify the file you're chatting about to prevent accidental changes to context documents.`);
        }
      }
      const currentPos = this.plugin.documentEngine.getCursorPosition();
      if (currentPos) {
        this.currentFileCursorPosition = currentPos;
      }
      this.restoreCursorPosition();
      let result;
      switch (command.action) {
        case "add":
          result = await this.executeAddCommandWithStreaming(command);
          break;
        case "edit":
          result = await this.executeEditCommandWithStreaming(command);
          break;
        case "delete":
          result = await this.plugin.deleteCommandHandler.execute(command);
          break;
        case "grammar":
          result = await this.executeGrammarCommandWithStreaming(command);
          break;
        case "rewrite":
          result = await this.executeRewriteCommandWithStreaming(command);
          break;
        case "metadata":
          result = await this.plugin.metadataCommandHandler.execute(command);
          break;
        default:
          return `I don't understand the command "${command.action}". Try asking me to add, edit, delete, fix grammar, rewrite content, or update metadata/properties.`;
      }
      if (result.success) {
        this.addSuccessIndicator(command.action);
        return null;
      } else {
        this.addErrorIndicator(command.action, result.error);
        return null;
      }
    } catch (error) {
      this.addErrorIndicator("execute", error.message);
      return null;
    }
  }
  async loadConversationForActiveFile() {
    var _a, _b;
    const activeFile = this.app.workspace.getActiveFile();
    console.log("\u{1F504} FILE SWITCH EVENT:", {
      activeFile: activeFile == null ? void 0 : activeFile.path,
      currentFile: (_a = this.currentFile) == null ? void 0 : _a.path
    });
    this.isUserInitiatedProviderChange = false;
    const operationId = Date.now().toString() + Math.random().toString(36).substr(2, 9);
    this.currentFileLoadOperation = operationId;
    let targetFile = activeFile;
    if (!targetFile) {
      const activeLeaf = this.app.workspace.activeLeaf;
      if (activeLeaf && activeLeaf.view instanceof import_obsidian10.MarkdownView) {
        targetFile = activeLeaf.view.file;
      } else {
        const leaves = this.app.workspace.getLeavesOfType("markdown");
        if (leaves.length > 0) {
          const view = leaves[0].view;
          targetFile = view.file;
        }
      }
    }
    if (!targetFile && this.currentFile) {
      console.log("\u{1F5D1}\uFE0F Clearing chat - no target file");
      this.currentFile = null;
      this.chatContainer.empty();
      this.currentContext = null;
      this.contextManager.setCurrentFile(null);
      this.refreshContext();
      this.addWelcomeMessage("Open a document to get started.");
      return;
    }
    if (!targetFile || targetFile === this.currentFile) {
      console.log("\u23ED\uFE0F Skipping file switch - same file or no file");
      return;
    }
    this.contextManager.setCurrentFile(targetFile);
    this.currentFileCursorPosition = null;
    console.log("\u{1F504} SWITCHING TO FILE:", {
      from: (_b = this.currentFile) == null ? void 0 : _b.path,
      to: targetFile.path
    });
    this.currentFile = targetFile;
    this.currentContext = this.contextManager.getCurrentContext();
    this.updateContextIndicator();
    this.refreshAllStats();
    const activeView = this.app.workspace.getActiveViewOfType(import_obsidian10.MarkdownView);
    if (activeView && activeView.editor) {
      this.trackCursorPosition(activeView.editor);
    }
    console.log("\u{1F9F9} CLEARING CHAT for file switch");
    this.chatContainer.empty();
    if (this.currentFileLoadOperation !== operationId) {
      console.log("\u26A0\uFE0F File load operation cancelled - newer operation in progress");
      return;
    }
    try {
      console.log("\u{1F4DA} LOADING CONVERSATION HISTORY via ChatRenderer");
      await this.chatRenderer.loadConversationHistory(targetFile);
      if (this.currentFileLoadOperation !== operationId) {
        console.log("\u26A0\uFE0F File load operation cancelled during conversation loading");
        return;
      }
      await this.contextManager.restoreContextAfterChatLoad(targetFile);
      await this.refreshContext();
      await this.showDocumentInsights(targetFile);
      if (this.currentFileLoadOperation !== operationId) {
        console.log("\u26A0\uFE0F File load operation cancelled during insights loading");
        return;
      }
    } catch (error) {
      console.log("\u274C CONVERSATION LOADING ERROR:", error);
      this.addWelcomeMessage();
    }
  }
  async clearChat() {
    this.chatContainer.empty();
    if (this.currentFile) {
      try {
        await this.plugin.conversationManager.clearConversation(this.currentFile);
        this.lastTokenWarnings = {};
      } catch (error) {
      }
    }
    new import_obsidian10.Notice("Chat cleared");
    this.addWelcomeMessage();
    if (this.currentFile) {
      await this.refreshContext();
    }
  }
  // Coordinator method that updates both document stats and context remaining
  async refreshAllStats() {
    if (this.streamingManager.isStreaming()) {
      return;
    }
    await this.updateDocumentStats();
    await this.refreshContext();
    this.updateContextRemaining();
  }
  // Update only document statistics (word count, sections)
  async updateDocumentStats() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) return;
    try {
      const content = await this.app.vault.read(activeFile);
      if (!content) return;
      const wordCount = content.split(/\s+/).filter((word) => word.length > 0).length;
      const headingCount = (content.match(/^#{1,6}\s/gm) || []).length;
      const headerEl = this.containerEl.querySelector(".nova-header");
      if (headerEl) {
        let statsContainer = headerEl.querySelector(".nova-document-stats-container");
        if (!statsContainer) {
          statsContainer = headerEl.createEl("div", { cls: "nova-document-stats-container" });
        }
        let statsEl = statsContainer.querySelector(".nova-document-stats");
        if (!statsEl) {
          statsEl = statsContainer.createEl("div", { cls: "nova-document-stats" });
        }
        if (statsEl && wordCount > 0) {
          const readingTime = Math.ceil(wordCount / 225);
          statsEl.textContent = `~ ${readingTime} min read`;
        }
      }
    } catch (error) {
    }
  }
  // Update only context remaining display (token percentage)
  updateContextRemaining() {
    this.updateTokenDisplay();
  }
  updateTokenDisplay() {
    var _a, _b;
    const headerEl = this.containerEl.querySelector(".nova-header");
    if (!headerEl) return;
    let statsContainer = headerEl.querySelector(".nova-document-stats-container");
    if (!statsContainer) {
      statsContainer = headerEl.createEl("div", { cls: "nova-document-stats-container" });
    }
    let statsEl = statsContainer.querySelector(".nova-document-stats");
    if (!statsEl) {
      statsEl = statsContainer.createEl("div", { cls: "nova-document-stats" });
    }
    let tokenEl = statsContainer.querySelector(".nova-token-usage");
    if (!tokenEl) {
      tokenEl = statsContainer.createEl("div", { cls: "nova-token-usage" });
    }
    const totalContextUsage = (_a = this.currentContext) == null ? void 0 : _a.totalContextUsage;
    let remainingPercent;
    let warningLevel;
    let displayText;
    let tooltipText;
    if (totalContextUsage) {
      remainingPercent = getRemainingContextPercentage(totalContextUsage);
      warningLevel = getContextWarningLevel(totalContextUsage);
      displayText = formatContextUsage(totalContextUsage);
      tooltipText = getContextTooltip(totalContextUsage);
    } else {
      const currentTokens = ((_b = this.currentContext) == null ? void 0 : _b.tokenCount) || 0;
      remainingPercent = 100;
      displayText = currentTokens > 0 ? `${currentTokens} tokens` : "0% left";
      tooltipText = `File context: ${currentTokens} tokens (total context calculation unavailable)`;
      warningLevel = "safe";
    }
    tokenEl.textContent = displayText;
    tokenEl.title = tooltipText;
    tokenEl.className = "nova-token-usage";
    if (warningLevel === "safe") {
      tokenEl.addClass("nova-token-safe");
    } else if (warningLevel === "warning") {
      tokenEl.addClass("nova-token-warning");
      this.showTokenWarning(85);
    } else if (warningLevel === "critical") {
      tokenEl.addClass("nova-token-danger");
      this.showTokenWarning(95);
    }
  }
  showTokenWarning(threshold) {
    const warningKey = `token-warning-${threshold}`;
    if (this.lastTokenWarnings[warningKey]) return;
    this.lastTokenWarnings[warningKey] = Date.now();
    let message;
    if (threshold === 75) {
      message = "\u2139\uFE0F Context usage is growing. Current conversation and file context are using significant tokens.";
    } else if (threshold === 85) {
      message = "\u26A0\uFE0F Context usage high (85%). Consider starting a new conversation or removing file context for better AI performance.";
    } else if (threshold === 95) {
      message = "\u26A0\uFE0F Context nearly full (95%). Start a new conversation or clear context immediately for reliable AI responses.";
    } else {
      message = "\u26A0\uFE0F Context approaching limit. Consider clearing context or starting a new conversation.";
    }
    this.addWarningMessage(message);
  }
  addWarningMessage(content) {
    this.chatRenderer.addWarningMessage(content, true);
  }
  async showDocumentInsights(file) {
    try {
      const content = await this.app.vault.read(file);
      const analysis = DocumentAnalyzer.analyzeStructure(content);
      if (analysis.emptyHeadings.length > 0 || analysis.incompleteBullets.length > 0) {
        const insights = [];
        if (analysis.emptyHeadings.length > 0) {
          insights.push(`${analysis.emptyHeadings.length} empty heading${analysis.emptyHeadings.length > 1 ? "s" : ""} to fill`);
        }
        if (analysis.incompleteBullets.length > 0) {
          insights.push(`${analysis.incompleteBullets.length} incomplete bullet${analysis.incompleteBullets.length > 1 ? "s" : ""}`);
        }
        if (insights.length > 0) {
          const bulletList = insights.map((insight) => `\u2022 ${insight}`).join("\n");
          const messageEl = this.chatContainer.createDiv({ cls: "nova-message nova-message-assistant nova-insights" });
          messageEl.style.cssText = `
						margin-bottom: var(--size-4-2);
						padding: var(--size-2-3) var(--size-4-3);
						border-radius: var(--radius-s);
						max-width: 85%;
						background: var(--background-modifier-hover);
						color: var(--text-muted);
						font-size: var(--font-ui-medium);
						text-align: left;
						margin-left: 0;
						margin-right: auto;
					`;
          const roleEl = messageEl.createEl("div", {
            text: "Nova",
            cls: "nova-message-role"
          });
          roleEl.style.cssText = `
						font-size: var(--font-ui-smaller);
						opacity: 0.7;
						margin-bottom: var(--size-2-1);
						font-weight: 600;
					`;
          const contentEl = messageEl.createEl("div", { cls: "nova-message-content" });
          contentEl.style.cssText = "white-space: pre-line; text-align: left;";
          contentEl.textContent = `I noticed:

${bulletList}

Let me help.`;
          setTimeout(() => {
            this.chatContainer.scrollTop = this.chatContainer.scrollHeight;
          }, 50);
        }
      }
    } catch (error) {
    }
  }
  /**
   * Handle consultation requests - chat only, no document modification
   */
  async handleConsultationRequest(input) {
    const activeFile = this.plugin.documentEngine.getActiveFile();
    const prompt2 = await this.plugin.promptBuilder.buildPromptForMessage(input, activeFile || void 0);
    const response = await this.plugin.aiProviderManager.complete(prompt2.systemPrompt, prompt2.userPrompt);
    this.displayChatResponse(response);
    this.showModeIndicator("consultation");
  }
  /**
   * Display AI response in chat without document modification
   */
  displayChatResponse(response) {
    this.chatRenderer.addMessage("assistant", response);
  }
  /**
   * Show subtle indicator for consultation vs editing mode
   */
  showModeIndicator(mode) {
  }
  /**
   * Handle editing requests - preserves existing behavior with intent tracking
   */
  async handleEditingRequest(input) {
    const parsedCommand = this.plugin.commandParser.parseCommand(input);
    this.trackIntentUsage("editing", input);
    return await this.executeCommand(parsedCommand);
  }
  /**
   * Track intent usage for analytics (placeholder for future enhancement)
   */
  trackIntentUsage(intent, input) {
  }
  /**
   * Handle ambiguous requests by routing to chosen handler
   */
  async handleAmbiguousRequest(input, chosenIntent) {
    if (chosenIntent === "consultation") {
      await this.handleConsultationRequest(input);
    } else {
      await this.handleEditingRequest(input);
    }
  }
  /**
   * Process user input with intent detection integration
   */
  async processUserInputWithIntent(input) {
    const intent = await this.plugin.aiIntentClassifier.classifyIntent(input);
    switch (intent) {
      case "CHAT":
        await this.handleConsultationRequest(input);
        break;
      case "CONTENT":
        await this.handleEditingRequest(input);
        break;
      case "METADATA":
        const parsedCommand = this.plugin.commandParser.parseCommand(input);
        await this.executeCommand(parsedCommand);
        break;
    }
  }
  // Public methods for testing
  async sendMessage(message) {
    const activeFile = this.plugin.documentEngine.getActiveFile();
    const prompt2 = await this.plugin.promptBuilder.buildPromptForMessage(message, activeFile || void 0);
    const command = this.plugin.commandParser.parseCommand(message);
    const validActions = ["add", "edit", "delete", "grammar", "rewrite", "metadata"];
    if (validActions.includes(command.action)) {
      const currentActiveFile = this.plugin.documentEngine.getActiveFile();
      if (activeFile && currentActiveFile && currentActiveFile !== activeFile) {
        throw new Error(`Security violation: Command attempted to edit wrong file. Expected: ${activeFile.basename}, Active: ${currentActiveFile.basename}`);
      }
      switch (command.action) {
        case "add":
          await this.plugin.addCommandHandler.execute(command);
          break;
        case "edit":
          await this.plugin.editCommandHandler.execute(command);
          break;
        case "delete":
          await this.plugin.deleteCommandHandler.execute(command);
          break;
        case "grammar":
          await this.plugin.grammarCommandHandler.execute(command);
          break;
        case "rewrite":
          await this.plugin.rewriteCommandHandler.execute(command);
          break;
        case "metadata":
          await this.plugin.metadataCommandHandler.execute(command);
          break;
      }
    } else {
      await this.plugin.aiProviderManager.complete(prompt2.systemPrompt || "", prompt2.userPrompt);
      if (activeFile) {
        await this.plugin.conversationManager.addAssistantMessage(activeFile, "AI response", { success: true, editType: "none" });
      }
    }
  }
  // REMOVED: Now using ChatRenderer's loadConversationHistory method directly
  /**
   * Update send button enabled/disabled state based on provider availability
   */
  async updateSendButtonState() {
    const currentProviderType = await this.plugin.aiProviderManager.getCurrentProviderType();
    const sendButton = this.inputHandler.sendButton;
    if (sendButton) sendButton.setDisabled(!currentProviderType);
  }
  /**
   * Update privacy indicator icon and tooltip based on current provider
   */
  async updatePrivacyIndicator(privacyIndicator) {
    const currentProviderType = await this.plugin.aiProviderManager.getCurrentProviderType();
    privacyIndicator.empty();
    privacyIndicator.removeClass("nova-status-pill", "local", "cloud");
    privacyIndicator.style.cssText = `
			display: inline-flex;
			align-items: center;
			gap: 4px;
			padding: 2px 8px;
			border-radius: 12px;
			font-size: 0.75em;
			font-weight: 500;
			height: auto;
			line-height: 1.5;
		`;
    if (currentProviderType) {
      const isLocalProvider = currentProviderType === "ollama";
      privacyIndicator.addClass("nova-status-pill");
      privacyIndicator.addClass(isLocalProvider ? "local" : "cloud");
      const iconEl = privacyIndicator.createSpan({ cls: "nova-status-icon" });
      iconEl.style.cssText = `
				display: inline-flex;
				align-items: center;
				width: 14px;
				height: 14px;
			`;
      const iconName = isLocalProvider ? "shield-check" : "cloud";
      (0, import_obsidian10.setIcon)(iconEl, iconName);
      const labelEl = privacyIndicator.createSpan({ text: isLocalProvider ? "Local" : "Cloud" });
      labelEl.style.cssText = `line-height: 1;`;
      const tooltip = isLocalProvider ? "Local processing - data stays on your device" : "Cloud processing - data sent to provider";
      privacyIndicator.setAttribute("aria-label", tooltip);
      privacyIndicator.setAttribute("title", tooltip);
    } else {
      privacyIndicator.addClass("nova-status-pill");
      const iconEl = privacyIndicator.createSpan({ cls: "nova-status-icon" });
      iconEl.style.cssText = `
				display: inline-flex;
				align-items: center;
				width: 14px;
				height: 14px;
			`;
      (0, import_obsidian10.setIcon)(iconEl, "help-circle");
      const labelEl = privacyIndicator.createSpan({ text: "No provider" });
      labelEl.style.cssText = `line-height: 1;`;
      privacyIndicator.setAttribute("aria-label", "No provider selected");
      privacyIndicator.setAttribute("title", "No provider selected");
    }
  }
  /**
   * Filter thinking content from AI responses
   * Removes content between <think>/<thinking> and </think>/<thinking> tags
   */
  filterThinkingContent(content) {
    return content.replace(/<think(?:ing)?[\s\S]*?<\/think(?:ing)?>/gi, "").trim();
  }
  /**
   * Refresh all provider status indicators in the UI
   */
  async refreshProviderStatus() {
    var _a;
    if (this.privacyIndicator) {
      await this.updatePrivacyIndicator(this.privacyIndicator);
    }
    this.updateSendButtonState();
    if ((_a = this.currentProviderDropdown) == null ? void 0 : _a.updateCurrentProvider) {
      await this.currentProviderDropdown.updateCurrentProvider();
    }
  }
  /**
   * Create provider dropdown for all users with their own API keys
   */
  async createProviderDropdown(container) {
    const dropdownContainer = container.createDiv({ cls: "nova-provider-dropdown-container" });
    dropdownContainer.style.cssText = `
			position: relative;
			display: flex;
			align-items: center;
		`;
    const providerButton = dropdownContainer.createEl("button", { cls: "nova-provider-button" });
    providerButton.style.cssText = `
			display: flex;
			align-items: center;
			gap: 4px;
			padding: 4px 8px;
			font-size: 0.75em;
			color: var(--text-normal);
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: 4px;
			cursor: pointer;
			transition: background-color 0.2s ease;
		`;
    const providerName = providerButton.createSpan({ text: "Loading...", cls: "nova-provider-name" });
    const dropdownArrow = providerButton.createSpan({ text: "\u25BC" });
    dropdownArrow.style.cssText = `
			font-size: 0.6em;
			margin-left: 4px;
			transition: transform 0.2s ease;
		`;
    const dropdownMenu = dropdownContainer.createDiv({ cls: "nova-provider-dropdown-menu" });
    dropdownMenu.style.cssText = `
			position: absolute;
			top: 100%;
			right: 0;
			min-width: 200px;
			max-width: 280px;
			max-height: 300px;
			background: var(--background-primary);
			border: 1px solid var(--background-modifier-border);
			border-radius: 6px;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			z-index: 1000;
			display: none;
			overflow-y: auto;
			overflow-x: hidden;
			
			/* Mobile responsive adjustments */
			@media (max-width: 768px) {
				min-width: 180px;
				max-width: 250px;
				max-height: 250px;
				right: -20px; /* Offset to prevent edge cutoff */
			}
			
			/* Smooth scrolling */
			scroll-behavior: smooth;
			
			/* Custom scrollbar styling */
			scrollbar-width: thin;
			scrollbar-color: var(--background-modifier-border) transparent;
		`;
    const scrollbarStyle = document.createElement("style");
    scrollbarStyle.textContent = `
			.nova-provider-dropdown-menu::-webkit-scrollbar {
				width: 6px;
			}
			.nova-provider-dropdown-menu::-webkit-scrollbar-track {
				background: transparent;
			}
			.nova-provider-dropdown-menu::-webkit-scrollbar-thumb {
				background: var(--background-modifier-border);
				border-radius: 3px;
			}
			.nova-provider-dropdown-menu::-webkit-scrollbar-thumb:hover {
				background: var(--background-modifier-border-hover);
			}
		`;
    if (!document.querySelector(".nova-scrollbar-style")) {
      scrollbarStyle.className = "nova-scrollbar-style";
      document.head.appendChild(scrollbarStyle);
    }
    let isDropdownOpen = false;
    const updateCurrentProvider = () => {
      try {
        const currentModel = this.plugin.aiProviderManager.getCurrentModel();
        if (currentModel) {
          const providerType = this.getProviderTypeFromModel(currentModel);
          if (providerType) {
            const displayText = this.getModelDisplayName(providerType, currentModel);
            if (displayText && displayText.length > 2 && !displayText.match(/^I+$/)) {
              providerName.setText(displayText);
            } else {
              console.warn("Invalid model display text, using raw model name:", displayText);
              providerName.setText(currentModel);
            }
          } else {
            providerName.setText(currentModel);
          }
        } else {
          providerName.setText("Select Model");
        }
      } catch (error) {
        console.error("Error updating model display:", error);
        providerName.setText("Select Model");
      }
    };
    const toggleDropdown = () => {
      isDropdownOpen = !isDropdownOpen;
      dropdownMenu.style.display = isDropdownOpen ? "block" : "none";
      dropdownArrow.style.transform = isDropdownOpen ? "rotate(180deg)" : "rotate(0deg)";
      if (isDropdownOpen) {
        this.populateProviderDropdown(dropdownMenu);
      }
    };
    const closeDropdown = (event) => {
      if (!dropdownContainer.contains(event.target)) {
        isDropdownOpen = false;
        dropdownMenu.style.display = "none";
        dropdownArrow.style.transform = "rotate(0deg)";
      }
    };
    const closeDropdownInternal = () => {
      isDropdownOpen = false;
      dropdownMenu.style.display = "none";
      dropdownArrow.style.transform = "rotate(0deg)";
    };
    providerButton.addEventListener("click", (e) => {
      e.stopPropagation();
      toggleDropdown();
    });
    this.addTrackedEventListener(document, "click", closeDropdown);
    updateCurrentProvider();
    this.currentProviderDropdown = {
      updateCurrentProvider,
      closeDropdown: closeDropdownInternal,
      cleanup: () => document.removeEventListener("click", closeDropdown)
    };
  }
  /**
   * Get available models for a provider type
   */
  getAvailableModels(providerType) {
    return getAvailableModels(providerType, this.plugin.settings);
  }
  /**
   * Get current model for a provider type
   */
  getCurrentModel(providerType) {
    var _a;
    const providers = this.plugin.settings.aiProviders;
    const currentModel = (_a = providers[providerType]) == null ? void 0 : _a.model;
    if (currentModel) {
      return currentModel;
    }
    const availableModels = this.getAvailableModels(providerType);
    return availableModels.length > 0 ? availableModels[0].value : "";
  }
  /**
   * Get model display name from model value
   */
  getModelDisplayName(providerType, modelValue) {
    const models = this.getAvailableModels(providerType);
    const model = models.find((m) => m.value === modelValue);
    const displayName = model ? model.label : modelValue;
    if (displayName === "II" || displayName.match(/^I+$/) || displayName.length < 3) {
      console.warn("Invalid model display name prevented:", displayName, "for model:", modelValue);
      return this.getProviderDisplayName(providerType);
    }
    return displayName;
  }
  /**
   * Get provider type from model name synchronously (pattern matching)
   */
  getProviderTypeFromModel(modelName) {
    if (modelName.startsWith("claude-")) return "claude";
    if (modelName.startsWith("gpt-") || modelName.startsWith("o1-")) return "openai";
    if (modelName.startsWith("gemini-")) return "google";
    return "ollama";
  }
  /**
   * Switch to a specific model for a provider
   */
  switchToModel(providerType, modelValue) {
    try {
      const platform = import_obsidian10.Platform.isMobile ? "mobile" : "desktop";
      this.plugin.settings.platformSettings[platform].selectedModel = modelValue;
      const providers = this.plugin.settings.aiProviders;
      if (providers[providerType]) {
        providers[providerType].model = modelValue;
      }
      const modelDisplayName = this.getModelDisplayName(providerType, modelValue);
      const providerDisplayName = this.getProviderDisplayName(providerType);
      this.addSuccessMessage(`\u2713 Switched to ${providerDisplayName} ${modelDisplayName}`);
      this.plugin.saveSettings().catch((error) => {
        console.error("Error saving model selection:", error);
        this.addErrorMessage("Failed to save model selection");
      });
    } catch (error) {
      console.error("Error switching model:", error);
      this.addErrorMessage("Failed to switch model");
    }
  }
  /**
   * Populate provider dropdown with grouped models and section headers
   */
  async populateProviderDropdown(dropdownMenu) {
    var _a, _b;
    dropdownMenu.empty();
    const loadingItem = dropdownMenu.createDiv({ cls: "nova-dropdown-loading" });
    loadingItem.style.cssText = `
			padding: 12px;
			text-align: center;
			color: var(--text-muted);
			font-size: 0.8em;
		`;
    loadingItem.setText("Loading providers...");
    try {
      const providerAvailability = await this.plugin.aiProviderManager.getAvailableProvidersWithStatus();
      const currentModel = this.plugin.aiProviderManager.getCurrentModel();
      const currentProviderType = await this.plugin.aiProviderManager.getCurrentProviderType();
      dropdownMenu.empty();
      let hasAnyProviders = false;
      for (const [providerType, isAvailable] of providerAvailability) {
        if (providerType === "none" || !isAvailable) continue;
        const providers = this.plugin.settings.aiProviders;
        const hasApiKey = (_a = providers[providerType]) == null ? void 0 : _a.apiKey;
        if (!hasApiKey && providerType !== "ollama") continue;
        const models = this.getAvailableModels(providerType);
        const providerDisplayName = this.getProviderDisplayName(providerType);
        const providerColor = this.getProviderColor(providerType);
        if (models.length === 0 && providerType !== "ollama") continue;
        if (hasAnyProviders) {
          const separator = dropdownMenu.createDiv({ cls: "nova-provider-separator" });
          separator.style.cssText = `
						height: 1px;
						background: var(--background-modifier-border);
						margin: 4px 8px;
					`;
        }
        const sectionHeader = dropdownMenu.createDiv({ cls: "nova-provider-section-header" });
        sectionHeader.style.cssText = `
					padding: 8px 12px 4px 12px;
					font-size: 0.75em;
					font-weight: 600;
					color: var(--text-muted);
					text-transform: uppercase;
					letter-spacing: 0.5px;
					display: flex;
					align-items: center;
					gap: 6px;
				`;
        const headerDot = sectionHeader.createSpan();
        headerDot.style.cssText = `
					width: 6px;
					height: 6px;
					border-radius: 50%;
					background: ${providerColor};
					flex-shrink: 0;
				`;
        sectionHeader.createSpan({ text: providerDisplayName });
        hasAnyProviders = true;
        if (models.length === 0) {
          this.createModelDropdownItem(
            dropdownMenu,
            providerType,
            ((_b = providers[providerType]) == null ? void 0 : _b.model) || providerDisplayName,
            providerDisplayName,
            providerColor,
            currentProviderType === providerType,
            currentModel
          );
        } else {
          for (const model of models) {
            const isCurrentSelection = currentProviderType === providerType && model.value === currentModel;
            this.createModelDropdownItem(
              dropdownMenu,
              providerType,
              model.value,
              model.label,
              providerColor,
              isCurrentSelection,
              currentModel
            );
          }
        }
      }
      if (!hasAnyProviders) {
        const noProvidersItem = dropdownMenu.createDiv();
        noProvidersItem.style.cssText = `
					padding: 12px;
					text-align: center;
					color: var(--text-muted);
					font-size: 0.8em;
				`;
        noProvidersItem.setText("No providers available");
      }
    } catch (error) {
      console.error("Error populating provider dropdown:", error);
      dropdownMenu.empty();
      const errorItem = dropdownMenu.createDiv();
      errorItem.style.cssText = `
				padding: 12px;
				text-align: center;
				color: var(--text-error);
				font-size: 0.8em;
			`;
      errorItem.setText("Error loading providers");
    }
  }
  /**
   * Create a single model dropdown item (just model name, no provider prefix)
   */
  createModelDropdownItem(container, providerType, modelValue, modelDisplayName, providerColor, isCurrent, currentModel) {
    const item = container.createDiv({ cls: "nova-model-dropdown-item" });
    item.style.cssText = `
			padding: 8px 12px 8px 20px;
			cursor: pointer;
			display: flex;
			align-items: center;
			gap: 8px;
			font-size: 0.85em;
			color: var(--text-normal);
			transition: background-color 0.2s ease;
			border-radius: 3px;
			margin: 1px 6px;
			${isCurrent ? "background: var(--background-modifier-hover);" : ""}
		`;
    const dot = item.createSpan();
    dot.style.cssText = `
			width: 6px;
			height: 6px;
			border-radius: 50%;
			background: ${providerColor};
			flex-shrink: 0;
			opacity: 0.7;
		`;
    const textSpan = item.createSpan({ text: modelDisplayName });
    textSpan.style.cssText = `
			flex: 1;
			white-space: nowrap;
			overflow: hidden;
			text-overflow: ellipsis;
		`;
    if (isCurrent) {
      const checkmark = item.createSpan({ text: "\u2713" });
      checkmark.style.cssText = `
				color: ${providerColor};
				font-weight: 600;
				font-size: 0.9em;
				flex-shrink: 0;
			`;
    }
    item.addEventListener("click", (e) => {
      var _a;
      e.stopPropagation();
      if (!isCurrent) {
        try {
          this.switchToModel(providerType, modelValue || this.getCurrentModel(providerType));
          if ((_a = this.currentProviderDropdown) == null ? void 0 : _a.closeDropdown) {
            this.currentProviderDropdown.closeDropdown();
          }
          if (this.currentProviderDropdown) {
            this.currentProviderDropdown.updateCurrentProvider();
          }
        } catch (error) {
          console.error("Error switching provider/model:", error);
        }
      }
    });
    item.addEventListener("mouseenter", () => {
      if (!isCurrent) {
        item.style.background = "var(--background-modifier-border-hover)";
      }
    });
    item.addEventListener("mouseleave", () => {
      if (!isCurrent) {
        item.style.background = "transparent";
      }
    });
  }
  /**
   * Create a message with a clean icon (replaces emoji)
   */
  createIconMessage(iconName, message) {
    const iconSvg = this.getObsidianIcon(iconName, "14px");
    return `<span style="display: inline-flex; align-items: center; gap: 6px;">${iconSvg}<span>${message}</span></span>`;
  }
  /**
   * Create an inline icon for use in innerHTML
   */
  createInlineIcon(iconName, size = "14px") {
    return this.getObsidianIcon(iconName, size);
  }
  /**
   * Get Obsidian-style icon SVG
   */
  getObsidianIcon(iconName, size = "14px") {
    const icons = {
      "zap": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M13 2L3 14H12L11 22L21 10H12L13 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "refresh-cw": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M3 12A9 9 0 0 0 21 12A9 9 0 0 0 3 12" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M21 12L17 8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M21 12L17 16" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "edit": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M11 4H4A2 2 0 0 0 2 6V20A2 2 0 0 0 4 22H18A2 2 0 0 0 20 20V13" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M18.5 2.5A2.12 2.12 0 0 1 21 5L12 14L8 15L9 11L18.5 2.5Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "help-circle": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
				<path d="M9.09 9A3 3 0 0 1 12 6A3 3 0 0 1 15 9C15 10.5 12 11 12 11" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<circle cx="12" cy="17" r="1" fill="currentColor"/>
			</svg>`,
      "book-open": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M2 3H8A4 4 0 0 1 12 7A4 4 0 0 1 16 3H22" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M2 3V19A2 2 0 0 0 4 21H9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M22 3V19A2 2 0 0 1 20 21H15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M12 7V21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "more-horizontal": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<circle cx="12" cy="12" r="1" fill="currentColor"/>
				<circle cx="19" cy="12" r="1" fill="currentColor"/>
				<circle cx="5" cy="12" r="1" fill="currentColor"/>
			</svg>`,
      "file-text": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M14 2H6A2 2 0 0 0 4 4V20A2 2 0 0 0 6 22H18A2 2 0 0 0 20 20V8L14 2Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M14 2V8H20" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M16 13H8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M16 17H8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M10 9H8" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "x": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M18 6L6 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M6 6L18 18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "check-circle": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
				<path d="M9 12L11 14L16 9" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "x-circle": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
				<path d="M15 9L9 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M9 9L15 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`,
      "trash-2": `<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style="width: ${size}; height: ${size};">
				<path d="M3 6H5H21" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M8 6V4A2 2 0 0 1 10 2H14A2 2 0 0 1 16 4V6M19 6V20A2 2 0 0 1 17 22H7A2 2 0 0 1 5 20V6H19Z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M10 11V17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				<path d="M14 11V17" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
			</svg>`
    };
    return icons[iconName] || icons["help-circle"];
  }
  /**
   * Get display name for provider
   */
  getProviderDisplayName(providerType) {
    const names = {
      "claude": "Anthropic",
      "openai": "OpenAI",
      "google": "Google",
      "ollama": "Ollama",
      "none": "None"
    };
    return names[providerType] || providerType;
  }
  /**
   * Get display name for header (just model name if available, otherwise provider name)
   */
  getProviderWithModelDisplayName(providerType) {
    const models = this.getAvailableModels(providerType);
    if (models.length > 0) {
      const currentModel = this.getCurrentModel(providerType);
      const modelDisplayName = this.getModelDisplayName(providerType, currentModel);
      if (modelDisplayName === "II" || modelDisplayName.match(/^I+$/)) {
        console.warn("Invalid model display name detected:", {
          providerType,
          currentModel,
          modelDisplayName,
          models
        });
      }
      return modelDisplayName;
    }
    return this.getProviderDisplayName(providerType);
  }
  /**
   * Get color for provider type
   */
  getProviderColor(providerType) {
    const colors = {
      "claude": "var(--color-orange)",
      "openai": "var(--color-green)",
      "google": "var(--color-blue)",
      "ollama": "var(--color-purple)",
      "none": "var(--text-muted)"
    };
    return colors[providerType] || "var(--text-success)";
  }
  /**
   * Switch to a different model and update conversation context
   */
  /**
   * Check if the command button should be shown based on feature availability and user preference
   */
  shouldShowCommandButton() {
    if (!this.plugin.featureManager.isFeatureEnabled("commands")) {
      return false;
    }
    return this.plugin.settings.showCommandButton;
  }
  /**
   * Refresh all Supernova-gated UI elements when license status changes
   */
  refreshSupernovaUI() {
    this.refreshCommandButton();
  }
  /**
   * Refresh the provider dropdown display to reflect current settings
   */
  async refreshProviderDropdown() {
    var _a;
    if ((_a = this.currentProviderDropdown) == null ? void 0 : _a.updateCurrentProvider) {
      console.log("\u{1F504} Refreshing provider dropdown UI after settings update");
      try {
        await this.currentProviderDropdown.updateCurrentProvider();
      } catch (error) {
        console.error("\u274C Failed to refresh provider dropdown:", error);
      }
    }
  }
  /**
   * Refresh the command button visibility when settings change
   */
  refreshCommandButton() {
    if (this.inputHandler) {
      this.inputHandler.refreshCommandButton();
    }
  }
  /**
   * Update input row layout when command button visibility changes
   */
  updateInputRowLayout() {
  }
  /**
   * Execute add command with streaming support
   */
  async executeAddCommandWithStreaming(command) {
    try {
      const editor = this.plugin.documentEngine.getActiveEditor();
      if (!editor) {
        return {
          success: false,
          error: "No active editor found"
        };
      }
      const cursorPosition = this.plugin.documentEngine.getCursorPosition();
      if (!cursorPosition) {
        return {
          success: false,
          error: "Could not determine cursor position"
        };
      }
      const { updateStream, stopStream } = this.streamingManager.startStreaming(
        editor,
        cursorPosition,
        void 0,
        {
          animationMode: "inline",
          onComplete: () => this.onStreamingComplete()
        }
      );
      try {
        const result = await this.plugin.addCommandHandler.execute(command, (chunk, isComplete) => {
          updateStream(chunk, isComplete);
        });
        stopStream();
        return result;
      } catch (error) {
        stopStream();
        throw error;
      }
    } catch (error) {
      console.error("Error in streaming add command:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Execute edit command with streaming support
   */
  async executeEditCommandWithStreaming(command) {
    try {
      const editor = this.plugin.documentEngine.getActiveEditor();
      if (!editor) {
        return {
          success: false,
          error: "No active editor found"
        };
      }
      const cursorPosition = this.plugin.documentEngine.getCursorPosition();
      if (!cursorPosition) {
        return {
          success: false,
          error: "Could not determine cursor position"
        };
      }
      const { updateStream, stopStream } = this.streamingManager.startStreaming(
        editor,
        cursorPosition,
        void 0,
        {
          animationMode: "inline",
          onComplete: () => this.onStreamingComplete()
        }
      );
      try {
        const result = await this.plugin.editCommandHandler.execute(command, (chunk, isComplete) => {
          updateStream(chunk, isComplete);
        });
        stopStream();
        return result;
      } catch (error) {
        stopStream();
        throw error;
      }
    } catch (error) {
      console.error("Error in streaming edit command:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Execute rewrite command with streaming support
   */
  async executeRewriteCommandWithStreaming(command) {
    try {
      const editor = this.plugin.documentEngine.getActiveEditor();
      if (!editor) {
        return {
          success: false,
          error: "No active editor found"
        };
      }
      const cursorPosition = this.plugin.documentEngine.getCursorPosition();
      if (!cursorPosition) {
        return {
          success: false,
          error: "Could not determine cursor position"
        };
      }
      const { updateStream, stopStream } = this.streamingManager.startStreaming(
        editor,
        cursorPosition,
        void 0,
        {
          animationMode: "inline",
          onComplete: () => this.onStreamingComplete()
        }
      );
      try {
        const result = await this.plugin.rewriteCommandHandler.execute(command, (chunk, isComplete) => {
          updateStream(chunk, isComplete);
        });
        stopStream();
        return result;
      } catch (error) {
        stopStream();
        throw error;
      }
    } catch (error) {
      console.error("Error in streaming rewrite command:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Execute grammar command with streaming support
   */
  async executeGrammarCommandWithStreaming(command) {
    try {
      const editor = this.plugin.documentEngine.getActiveEditor();
      if (!editor) {
        return {
          success: false,
          error: "No active editor found"
        };
      }
      const cursorPosition = this.plugin.documentEngine.getCursorPosition();
      if (!cursorPosition) {
        return {
          success: false,
          error: "Could not determine cursor position"
        };
      }
      const { updateStream, stopStream } = this.streamingManager.startStreaming(
        editor,
        cursorPosition,
        void 0,
        {
          animationMode: "inline",
          onComplete: () => this.onStreamingComplete()
        }
      );
      try {
        const result = await this.plugin.grammarCommandHandler.execute(command, (chunk, isComplete) => {
          updateStream(chunk, isComplete);
        });
        stopStream();
        return result;
      } catch (error) {
        stopStream();
        throw error;
      }
    } catch (error) {
      console.error("Error in streaming grammar command:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error"
      };
    }
  }
  /**
   * Add files to persistent context
   */
  async addFilesToContext(filenames) {
    var _a;
    if (!this.currentFile) {
      new import_obsidian10.Notice("No file is open. Please open a file to add context.", 3e3);
      return;
    }
    const addedFiles = [];
    const alreadyExistingFiles = [];
    const currentFiles = [];
    const notFoundFiles = [];
    const existingPersistent = this.contextManager.getPersistentContext(this.currentFile.path) || [];
    const updatedPersistent = [...existingPersistent];
    for (const filename of filenames) {
      let file = this.app.vault.getAbstractFileByPath(filename);
      if (!file || !(file instanceof import_obsidian10.TFile)) {
        file = this.app.vault.getAbstractFileByPath(filename + ".md");
      }
      if (!file || !(file instanceof import_obsidian10.TFile)) {
        const files = this.app.vault.getMarkdownFiles();
        file = files.find(
          (f) => f.basename === filename || f.name === filename || f.path.endsWith("/" + filename) || f.path.endsWith("/" + filename + ".md")
        ) || null;
      }
      if (file instanceof import_obsidian10.TFile) {
        if (file.path === ((_a = this.currentFile) == null ? void 0 : _a.path)) {
          currentFiles.push(file.basename);
          this.chatRenderer.addWarningMessage("Current file is always in context and doesn't need to be added explicitly.", false);
        } else {
          const exists = updatedPersistent.some((ref) => ref.file.path === file.path);
          if (!exists) {
            updatedPersistent.push({
              file,
              property: void 0,
              isPersistent: true,
              rawReference: `+[[${file.basename}]]`
            });
            addedFiles.push(file.basename);
          } else {
            alreadyExistingFiles.push(file.basename);
          }
        }
      } else {
        notFoundFiles.push(filename);
      }
    }
    if (addedFiles.length > 0 || alreadyExistingFiles.length > 0 || currentFiles.length > 0) {
      this.contextManager.clearPersistentContext(this.currentFile.path);
      for (const doc of updatedPersistent) {
        await this.contextManager.addDocument(doc.file);
      }
    }
    await this.refreshContext();
    const totalFiles = filenames.length;
    const messages = [];
    if (addedFiles.length > 0) {
      if (addedFiles.length === 1) {
        messages.push(`Added "${addedFiles[0]}" to context`);
      } else {
        messages.push(`Added ${addedFiles.length} files to context`);
      }
    }
    if (alreadyExistingFiles.length > 0) {
      if (alreadyExistingFiles.length === 1) {
        messages.push(`"${alreadyExistingFiles[0]}" already in context`);
      } else {
        messages.push(`${alreadyExistingFiles.length} already in context`);
      }
    }
    if (currentFiles.length > 0) {
      if (currentFiles.length === 1) {
        messages.push(`Current file is always in context`);
      } else {
        messages.push(`${currentFiles.length} current files are always in context`);
      }
    }
    if (notFoundFiles.length > 0) {
      if (notFoundFiles.length === 1) {
        messages.push(`"${notFoundFiles[0]}" not found`);
      } else {
        messages.push(`${notFoundFiles.length} not found`);
      }
    }
    if (messages.length > 0) {
      const combinedMessage = messages.join(", ");
      const duration = notFoundFiles.length > 0 ? 3e3 : 2e3;
      new import_obsidian10.Notice(combinedMessage, duration);
    }
  }
  /**
   * Get contextual thinking phrase based on command type or message content
   */
  getContextualThinkingPhrase(command, messageText) {
    if (command) {
      switch (command.action) {
        case "grammar":
        case "edit":
          return this.getRandomPhrase("improve");
        case "add":
          return this.getRandomPhrase("generate");
        case "rewrite":
          return this.getRandomPhrase("improve");
        case "delete":
          return this.getRandomPhrase("process");
        default:
          return this.getRandomPhrase("chat");
      }
    } else if (messageText) {
      if (messageText.includes("improve") || messageText.includes("fix") || messageText.includes("grammar")) {
        return this.getRandomPhrase("improve");
      } else if (messageText.includes("add") || messageText.includes("create") || messageText.includes("write")) {
        return this.getRandomPhrase("generate");
      } else if (messageText.includes("switch") || messageText.includes("/")) {
        return this.getRandomPhrase("switch");
      }
    }
    return this.getRandomPhrase("chat");
  }
  /**
   * Get random phrase from specified category
   */
  getRandomPhrase(category) {
    const phrases = {
      "improve": ["refining...", "polishing...", "enhancing...", "crafting...", "perfecting...", "smoothing...", "sharpening...", "elevating...", "fine-tuning...", "sculpting..."],
      "generate": ["thinking...", "crafting...", "developing...", "composing...", "writing...", "creating...", "formulating...", "building...", "constructing...", "drafting..."],
      "switch": ["connecting...", "switching...", "updating...", "configuring...", "setting up...", "syncing...", "preparing...", "activating...", "initializing...", "establishing..."],
      "process": ["processing...", "analyzing...", "working...", "computing...", "calculating...", "examining...", "evaluating...", "interpreting...", "reviewing...", "scanning..."],
      "chat": ["thinking...", "processing...", "considering...", "analyzing...", "understanding...", "contemplating...", "exploring...", "evaluating...", "working on it...", "composing..."]
    };
    const categoryPhrases = phrases[category] || phrases.chat;
    return categoryPhrases[Math.floor(Math.random() * categoryPhrases.length)];
  }
  /**
   * Start phrase rotation animation for thinking text
   */
  startThinkingPhraseRotation(textEl, command, messageText) {
    const rotationInterval = setInterval(() => {
      const newPhrase = this.getContextualThinkingPhrase(command, messageText);
      textEl.textContent = newPhrase;
    }, 2e3);
    textEl.rotationInterval = rotationInterval;
  }
  /**
   * Stop phrase rotation animation and cleanup
   */
  stopThinkingPhraseRotation(textEl) {
    if (textEl.rotationInterval) {
      clearInterval(textEl.rotationInterval);
      textEl.rotationInterval = null;
    }
  }
};
_NovaSidebarView.CONTEXT_PREVIEW_DEBOUNCE_MS = 300;
_NovaSidebarView.SCROLL_DELAY_MS = 50;
_NovaSidebarView.FOCUS_DELAY_MS = 150;
_NovaSidebarView.HOVER_TIMEOUT_MS = 150;
_NovaSidebarView.NOTICE_DURATION_MS = 5e3;
var NovaSidebarView = _NovaSidebarView;

// src/ai/providers/claude.ts
var import_obsidian11 = require("obsidian");
var ClaudeProvider = class {
  constructor(config) {
    this.name = "Claude (Anthropic)";
    this.cachedModels = null;
    this.config = config;
  }
  updateConfig(config) {
    this.config = config;
  }
  async isAvailable() {
    return !!this.config.apiKey;
  }
  async generateText(prompt2, options) {
    const messages = [{ role: "user", content: prompt2 }];
    return this.chatCompletion(messages, options);
  }
  async *generateTextStream(prompt2, options) {
    const messages = [{ role: "user", content: prompt2 }];
    yield* this.chatCompletionStream(messages, options);
  }
  async chatCompletion(messages, options) {
    if (!this.config.apiKey) {
      throw new Error("Claude API key not configured");
    }
    const requestBody = JSON.stringify({
      model: (options == null ? void 0 : options.model) || this.config.model || "claude-3-5-haiku-latest",
      max_tokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3,
      temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
      system: options == null ? void 0 : options.systemPrompt,
      messages: messages.map((msg) => ({
        role: msg.role === "assistant" ? "assistant" : "user",
        content: msg.content
      }))
    });
    const maxRetries = 3;
    const baseDelay = 1e3;
    for (let attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        const response = await (0, import_obsidian11.requestUrl)({
          url: "https://api.anthropic.com/v1/messages",
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "x-api-key": this.config.apiKey,
            "anthropic-version": "2023-06-01"
          },
          body: requestBody
        });
        if (response.status === 200) {
          const data = response.json;
          return data.content[0].text;
        }
        if (response.status >= 500 && attempt < maxRetries) {
          const delay = baseDelay * Math.pow(2, attempt);
          await new Promise((resolve) => setTimeout(resolve, delay));
          continue;
        }
        throw new Error(`Claude API error: ${response.status} - ${response.text}`);
      } catch (error) {
        if (attempt < maxRetries && error instanceof Error && (error.message.includes("Network error") || error.message.includes("Failed to connect"))) {
          const delay = baseDelay * Math.pow(2, attempt);
          await new Promise((resolve) => setTimeout(resolve, delay));
          continue;
        }
        if (error instanceof Error && error.message.startsWith("Claude API error:")) {
          throw error;
        }
        throw new Error(`Failed to connect to Claude API: ${error instanceof Error ? error.message : "Network error"}`);
      }
    }
    throw new Error("Claude API: Maximum retries exceeded");
  }
  async complete(systemPrompt, userPrompt, options) {
    const messages = [{ role: "user", content: userPrompt }];
    const completeOptions = { ...options, systemPrompt };
    return this.chatCompletion(messages, completeOptions);
  }
  async *chatCompletionStream(messages, options) {
    const result = await this.chatCompletion(messages, options);
    const chunkSize = 3;
    for (let i = 0; i < result.length; i += chunkSize) {
      const chunk = result.slice(i, i + chunkSize);
      yield { content: chunk, done: false };
      await new Promise((resolve) => setTimeout(resolve, 20));
    }
    yield { content: "", done: true };
  }
  /**
   * Fetch available models from Claude API
   */
  async getAvailableModels() {
    if (!this.config.apiKey) {
      throw new Error("Claude API key not configured");
    }
    if (this.cachedModels) {
      return this.cachedModels;
    }
    try {
      const response = await (0, import_obsidian11.requestUrl)({
        url: "https://api.anthropic.com/v1/messages",
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          "x-api-key": this.config.apiKey,
          "anthropic-version": "2023-06-01"
        },
        body: JSON.stringify({
          model: "claude-3-5-haiku-latest",
          max_tokens: 1,
          messages: [{ role: "user", content: "test" }]
        })
      });
      if (response.status !== 200) {
        throw new Error(`API key validation failed: ${response.status} - ${response.text}`);
      }
      const models = [
        "claude-opus-4-20250514",
        "claude-sonnet-4-20250514",
        "claude-3-7-sonnet-latest",
        "claude-3-5-sonnet-latest",
        "claude-3-5-haiku-latest"
      ];
      this.cachedModels = models;
      return models;
    } catch (error) {
      throw new Error(`Failed to fetch Claude models: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Clear cached models
   */
  clearModelCache() {
    this.cachedModels = null;
  }
};

// src/ai/providers/openai.ts
var OpenAIProvider = class {
  constructor(config) {
    this.name = "OpenAI";
    this.cachedModels = null;
    this.config = config;
  }
  updateConfig(config) {
    this.config = config;
  }
  async isAvailable() {
    return !!this.config.apiKey;
  }
  async generateText(prompt2, options) {
    const messages = [{ role: "user", content: prompt2 }];
    return this.chatCompletion(messages, options);
  }
  async *generateTextStream(prompt2, options) {
    const messages = [{ role: "user", content: prompt2 }];
    yield* this.chatCompletionStream(messages, options);
  }
  async chatCompletion(messages, options) {
    if (!this.config.apiKey) {
      throw new Error("OpenAI API key not configured");
    }
    const requestMessages = [...messages];
    if (options == null ? void 0 : options.systemPrompt) {
      requestMessages.unshift({ role: "system", content: options.systemPrompt });
    }
    const baseUrl = this.config.baseUrl || "https://api.openai.com/v1";
    const endpoint = baseUrl.endsWith("/chat/completions") ? baseUrl : `${baseUrl}/chat/completions`;
    const requestBody = JSON.stringify({
      model: (options == null ? void 0 : options.model) || this.config.model || "gpt-3.5-turbo",
      messages: requestMessages,
      max_tokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3,
      temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7
    });
    const maxRetries = 3;
    const baseDelay = 1e3;
    for (let attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        const response = await fetch(endpoint, {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "Authorization": `Bearer ${this.config.apiKey}`
          },
          body: requestBody
        });
        if (response.ok) {
          const data = await response.json();
          return data.choices[0].message.content;
        }
        if (response.status >= 500 && attempt < maxRetries) {
          const delay = baseDelay * Math.pow(2, attempt);
          await new Promise((resolve) => setTimeout(resolve, delay));
          continue;
        }
        throw new Error(`OpenAI API error: ${response.statusText}`);
      } catch (error) {
        if (attempt < maxRetries && error instanceof Error && error.message.includes("fetch")) {
          const delay = baseDelay * Math.pow(2, attempt);
          await new Promise((resolve) => setTimeout(resolve, delay));
          continue;
        }
        throw error;
      }
    }
    throw new Error("OpenAI API: Maximum retries exceeded");
  }
  async complete(systemPrompt, userPrompt, options) {
    const messages = [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt }
    ];
    return this.chatCompletion(messages, options);
  }
  async *chatCompletionStream(messages, options) {
    var _a, _b, _c, _d;
    if (!this.config.apiKey) {
      throw new Error("OpenAI API key not configured");
    }
    const requestMessages = [...messages];
    if (options == null ? void 0 : options.systemPrompt) {
      requestMessages.unshift({ role: "system", content: options.systemPrompt });
    }
    const baseUrl = this.config.baseUrl || "https://api.openai.com/v1";
    const endpoint = baseUrl.endsWith("/chat/completions") ? baseUrl : `${baseUrl}/chat/completions`;
    const response = await fetch(endpoint, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${this.config.apiKey}`
      },
      body: JSON.stringify({
        model: (options == null ? void 0 : options.model) || this.config.model || "gpt-3.5-turbo",
        messages: requestMessages,
        max_tokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3,
        temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
        stream: true
      })
    });
    if (!response.ok) {
      throw new Error(`OpenAI API error: ${response.statusText}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("Failed to get response reader");
    }
    const decoder = new TextDecoder();
    let buffer = "";
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        buffer += decoder.decode(value, { stream: true });
        const lines = buffer.split("\n");
        buffer = lines.pop() || "";
        for (const line of lines) {
          if (line.startsWith("data: ")) {
            const data = line.slice(6);
            if (data === "[DONE]") {
              yield { content: "", done: true };
              return;
            }
            try {
              const parsed = JSON.parse(data);
              const content = (_d = (_c = (_b = parsed.choices) == null ? void 0 : _b[0]) == null ? void 0 : _c.delta) == null ? void 0 : _d.content;
              if (content) {
                const chunkSize = 3;
                for (let i = 0; i < content.length; i += chunkSize) {
                  const chunk = content.slice(i, i + chunkSize);
                  yield { content: chunk, done: false };
                  await new Promise((resolve) => setTimeout(resolve, 20));
                }
              }
            } catch (e) {
            }
          }
        }
      }
    } finally {
      reader.releaseLock();
    }
    yield { content: "", done: true };
  }
  /**
   * Fetch available models from OpenAI API
   */
  async getAvailableModels() {
    if (!this.config.apiKey) {
      throw new Error("OpenAI API key not configured");
    }
    if (this.cachedModels) {
      return this.cachedModels;
    }
    try {
      const baseUrl = this.config.baseUrl || "https://api.openai.com/v1";
      const endpoint = baseUrl.endsWith("/models") ? baseUrl : `${baseUrl}/models`;
      const response = await fetch(endpoint, {
        method: "GET",
        headers: {
          "Authorization": `Bearer ${this.config.apiKey}`
        }
      });
      if (!response.ok) {
        throw new Error(`API request failed: ${response.statusText}`);
      }
      const data = await response.json();
      const models = [
        "gpt-4.1-2025-04-14",
        "gpt-4.1-mini-2025-04-14",
        "gpt-4.1-nano-2025-04-14",
        "gpt-4o",
        "gpt-4o-mini"
      ];
      this.cachedModels = models;
      return models;
    } catch (error) {
      throw new Error(`Failed to fetch OpenAI models: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Clear cached models
   */
  clearModelCache() {
    this.cachedModels = null;
  }
};

// src/ai/providers/google.ts
var GoogleProvider = class {
  constructor(config) {
    this.name = "Google (Gemini)";
    this.cachedModels = null;
    this.config = config;
  }
  updateConfig(config) {
    this.config = config;
  }
  async isAvailable() {
    return !!this.config.apiKey;
  }
  async generateText(prompt2, options) {
    const messages = [{ role: "user", content: prompt2 }];
    return this.chatCompletion(messages, options);
  }
  async *generateTextStream(prompt2, options) {
    const messages = [{ role: "user", content: prompt2 }];
    yield* this.chatCompletionStream(messages, options);
  }
  formatMessagesForGemini(messages) {
    const contents = [];
    for (const message of messages) {
      const role = message.role === "assistant" ? "model" : "user";
      contents.push({
        role,
        parts: [{ text: message.content }]
      });
    }
    if (contents.length === 0) {
      throw new Error("No messages provided for Google API");
    }
    return contents;
  }
  async chatCompletion(messages, options) {
    if (!this.config.apiKey) {
      throw new Error("Google API key not configured");
    }
    const model = (options == null ? void 0 : options.model) || this.config.model || "gemini-2.0-flash";
    const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:generateContent?key=${this.config.apiKey}`;
    const requestBody = {
      contents: this.formatMessagesForGemini(messages),
      generationConfig: {
        temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
        maxOutputTokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
      }
    };
    if ((options == null ? void 0 : options.systemPrompt) && options.systemPrompt.trim()) {
      requestBody.systemInstruction = {
        parts: [{ text: options.systemPrompt }]
      };
    }
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify(requestBody)
    });
    if (!response.ok) {
      const errorText = await response.text();
      let errorMessage = "";
      try {
        const errorData = JSON.parse(errorText);
        if (errorData.error) {
          const code = errorData.error.code || response.status;
          const message = errorData.error.message || errorData.error.status || response.statusText;
          errorMessage = `[${code}]: ${message}`;
          if (response.status === 400) {
            errorMessage += " (Check request format or model name)";
          } else if (response.status === 401) {
            errorMessage += " (Check API key in settings)";
          } else if (response.status === 404) {
            errorMessage += " (Model may not be available)";
          } else if (response.status === 429) {
            errorMessage += " (Rate limit exceeded)";
          }
        } else {
          errorMessage = `[${response.status}]: ${errorText}`;
        }
      } catch (e) {
        errorMessage = `[${response.status}]: ${errorText || response.statusText}`;
      }
      console.error("Google API Error Details:", {
        status: response.status,
        statusText: response.statusText,
        errorText,
        requestBody,
        model,
        url
      });
      throw new Error(`Google API error ${errorMessage}`);
    }
    const data = await response.json();
    if (!data.candidates || data.candidates.length === 0) {
      if (data.error) {
        throw new Error(`Google API error: ${data.error.message || JSON.stringify(data.error)}`);
      }
      throw new Error("Google API returned no candidates");
    }
    if (data.candidates[0].finishReason === "SAFETY" || data.candidates[0].finishReason === "BLOCKED") {
      throw new Error("Google API blocked the response due to safety filters");
    }
    if (data.candidates[0].finishReason === "MAX_TOKENS" && (!data.candidates[0].content || !data.candidates[0].content.parts || data.candidates[0].content.parts.length === 0)) {
      throw new Error('API hit token limit before generating any content. Please increase "Default Max Tokens" in settings.');
    }
    if (data.candidates[0].content && data.candidates[0].content.parts && data.candidates[0].content.parts.length > 0) {
      const text = data.candidates[0].content.parts[0].text;
      if (data.candidates[0].finishReason === "MAX_TOKENS") {
        throw new Error('Response was truncated due to token limit. Please increase "Default Max Tokens" in settings.');
      }
      if (!text || text.trim().length === 0) {
        console.error("Google API returned empty text content");
        throw new Error("Google API returned empty text content");
      }
      return text;
    }
    throw new Error("Google API returned empty response");
  }
  async complete(systemPrompt, userPrompt, options) {
    const messages = [{ role: "user", content: userPrompt }];
    const completeOptions = { ...options, systemPrompt };
    return this.chatCompletion(messages, completeOptions);
  }
  async *chatCompletionStream(messages, options) {
    var _a, _b, _c, _d, _e, _f;
    if (!this.config.apiKey) {
      throw new Error("Google API key not configured");
    }
    const model = (options == null ? void 0 : options.model) || this.config.model || "gemini-2.0-flash";
    const url = `https://generativelanguage.googleapis.com/v1beta/models/${model}:streamGenerateContent?key=${this.config.apiKey}`;
    const response = await fetch(url, {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      },
      body: JSON.stringify({
        contents: this.formatMessagesForGemini(messages),
        generationConfig: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          maxOutputTokens: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        },
        ...(options == null ? void 0 : options.systemPrompt) && options.systemPrompt.trim() ? {
          systemInstruction: {
            parts: [{ text: options.systemPrompt }]
          }
        } : {}
      })
    });
    if (!response.ok) {
      const errorText = await response.text();
      let errorMessage = "";
      try {
        const errorData = JSON.parse(errorText);
        if (errorData.error) {
          const code = errorData.error.code || response.status;
          const message = errorData.error.message || errorData.error.status || response.statusText;
          errorMessage = `[${code}]: ${message}`;
        } else {
          errorMessage = `[${response.status}]: ${errorText}`;
        }
      } catch (e) {
        errorMessage = `[${response.status}]: ${errorText || response.statusText}`;
      }
      throw new Error(`Google API error ${errorMessage}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("Failed to get response reader");
    }
    const decoder = new TextDecoder();
    let buffer = "";
    let jsonBuffer = "";
    let braceCount = 0;
    let inJson = false;
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        buffer += decoder.decode(value, { stream: true });
        for (let i = 0; i < buffer.length; i++) {
          const char = buffer[i];
          if (char === "{") {
            if (!inJson) {
              inJson = true;
              jsonBuffer = "";
            }
            braceCount++;
            jsonBuffer += char;
          } else if (char === "}") {
            jsonBuffer += char;
            braceCount--;
            if (braceCount === 0 && inJson) {
              try {
                const parsed = JSON.parse(jsonBuffer);
                const text = (_f = (_e = (_d = (_c = (_b = parsed.candidates) == null ? void 0 : _b[0]) == null ? void 0 : _c.content) == null ? void 0 : _d.parts) == null ? void 0 : _e[0]) == null ? void 0 : _f.text;
                if (text) {
                  const chunkSize = 3;
                  for (let i2 = 0; i2 < text.length; i2 += chunkSize) {
                    const chunk = text.slice(i2, i2 + chunkSize);
                    yield { content: chunk, done: false };
                    await new Promise((resolve) => setTimeout(resolve, 20));
                  }
                }
              } catch (e) {
              }
              inJson = false;
              jsonBuffer = "";
            }
          } else if (inJson) {
            jsonBuffer += char;
          }
        }
        buffer = "";
      }
    } finally {
      reader.releaseLock();
    }
    yield { content: "", done: true };
  }
  /**
   * Fetch available models from Google API
   */
  async getAvailableModels() {
    if (!this.config.apiKey) {
      throw new Error("Google API key not configured");
    }
    if (this.cachedModels) {
      return this.cachedModels;
    }
    try {
      const url = `https://generativelanguage.googleapis.com/v1beta/models?key=${this.config.apiKey}`;
      const response = await fetch(url, {
        method: "GET",
        headers: {
          "Content-Type": "application/json"
        }
      });
      if (!response.ok) {
        throw new Error(`API request failed: ${response.statusText}`);
      }
      const data = await response.json();
      const models = [
        "gemini-2.5-flash-preview-04-17",
        "gemini-2.5-pro-preview-03-25",
        "gemini-2.0-flash",
        "gemini-2.0-flash-lite"
      ];
      this.cachedModels = models;
      return models;
    } catch (error) {
      throw new Error(`Failed to fetch Google models: ${error instanceof Error ? error.message : "Unknown error"}`);
    }
  }
  /**
   * Clear cached models
   */
  clearModelCache() {
    this.cachedModels = null;
  }
};

// src/ai/providers/ollama.ts
var OllamaProvider = class {
  constructor(config) {
    this.name = "Ollama (Local)";
    this.config = config;
  }
  updateConfig(config) {
    this.config = config;
  }
  async isAvailable() {
    if (!this.config.model) return false;
    try {
      const baseUrl = this.config.baseUrl || "http://localhost:11434";
      const response = await fetch(`${baseUrl}/api/tags`, {
        method: "GET",
        headers: { "Content-Type": "application/json" }
      });
      return response.ok;
    } catch (e) {
      return false;
    }
  }
  async generateText(prompt2, options) {
    const baseUrl = this.config.baseUrl || "http://localhost:11434";
    const model = (options == null ? void 0 : options.model) || this.config.model;
    if (!model) {
      throw new Error("Ollama model must be specified");
    }
    const response = await fetch(`${baseUrl}/api/generate`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model,
        prompt: prompt2,
        stream: false,
        options: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          num_predict: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.statusText}`);
    }
    const data = await response.json();
    return data.response;
  }
  async *generateTextStream(prompt2, options) {
    var _a;
    const baseUrl = this.config.baseUrl || "http://localhost:11434";
    const model = (options == null ? void 0 : options.model) || this.config.model;
    if (!model) {
      throw new Error("Ollama model must be specified");
    }
    const response = await fetch(`${baseUrl}/api/generate`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model,
        prompt: prompt2,
        stream: true,
        options: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          num_predict: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.statusText}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("Failed to get response reader");
    }
    const decoder = new TextDecoder();
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        const lines = decoder.decode(value).split("\n");
        for (const line of lines) {
          if (line.trim()) {
            try {
              const parsed = JSON.parse(line);
              if (parsed.response) {
                const chunkSize = 3;
                for (let i = 0; i < parsed.response.length; i += chunkSize) {
                  const chunk = parsed.response.slice(i, i + chunkSize);
                  yield { content: chunk, done: false };
                  await new Promise((resolve) => setTimeout(resolve, 20));
                }
              }
              if (parsed.done) {
                yield { content: "", done: true };
                return;
              }
            } catch (e) {
            }
          }
        }
      }
    } finally {
      reader.releaseLock();
    }
    yield { content: "", done: true };
  }
  async chatCompletion(messages, options) {
    const baseUrl = this.config.baseUrl || "http://localhost:11434";
    const model = (options == null ? void 0 : options.model) || this.config.model;
    if (!model) {
      throw new Error("Ollama model must be specified");
    }
    const response = await fetch(`${baseUrl}/api/chat`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model,
        messages: messages.map((msg) => ({
          role: msg.role,
          content: msg.content
        })),
        stream: false,
        options: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          num_predict: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.statusText}`);
    }
    const data = await response.json();
    return data.message.content;
  }
  async complete(systemPrompt, userPrompt, options) {
    const messages = [
      { role: "system", content: systemPrompt },
      { role: "user", content: userPrompt }
    ];
    return this.chatCompletion(messages, options);
  }
  async *chatCompletionStream(messages, options) {
    var _a, _b;
    const baseUrl = this.config.baseUrl || "http://localhost:11434";
    const model = (options == null ? void 0 : options.model) || this.config.model;
    if (!model) {
      throw new Error("Ollama model must be specified");
    }
    const response = await fetch(`${baseUrl}/api/chat`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        model,
        messages: messages.map((msg) => ({
          role: msg.role,
          content: msg.content
        })),
        stream: true,
        options: {
          temperature: (options == null ? void 0 : options.temperature) || this.config.temperature || 0.7,
          num_predict: (options == null ? void 0 : options.maxTokens) || this.config.maxTokens || 1e3
        }
      })
    });
    if (!response.ok) {
      throw new Error(`Ollama API error: ${response.statusText}`);
    }
    const reader = (_a = response.body) == null ? void 0 : _a.getReader();
    if (!reader) {
      throw new Error("Failed to get response reader");
    }
    const decoder = new TextDecoder();
    try {
      while (true) {
        const { done, value } = await reader.read();
        if (done) break;
        const lines = decoder.decode(value).split("\n");
        for (const line of lines) {
          if (line.trim()) {
            try {
              const parsed = JSON.parse(line);
              if ((_b = parsed.message) == null ? void 0 : _b.content) {
                const chunkSize = 3;
                for (let i = 0; i < parsed.message.content.length; i += chunkSize) {
                  const chunk = parsed.message.content.slice(i, i + chunkSize);
                  yield { content: chunk, done: false };
                  await new Promise((resolve) => setTimeout(resolve, 20));
                }
              }
              if (parsed.done) {
                yield { content: "", done: true };
                return;
              }
            } catch (e) {
            }
          }
        }
      }
    } finally {
      reader.releaseLock();
    }
    yield { content: "", done: true };
  }
};

// src/settings.ts
var NOVA_ICON_SVG = `
<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <!-- Central star core -->
  <circle cx="12" cy="12" r="2.5" fill="currentColor"/>
  
  <!-- Primary rays (4 main directions) -->
  <path d="M12 1L12 6" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M12 18L12 23" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M23 12L18 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M6 12L1 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  
  <!-- Secondary rays (diagonals) -->
  <path d="M18.364 5.636L15.536 8.464" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M8.464 15.536L5.636 18.364" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M18.364 18.364L15.536 15.536" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M8.464 8.464L5.636 5.636" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
</svg>`;
var DEFAULT_SETTINGS = {
  aiProviders: {
    claude: {
      apiKey: "",
      model: "claude-3-5-sonnet-20241022",
      temperature: 0.7,
      maxTokens: 1e3
    },
    openai: {
      apiKey: "",
      baseUrl: "https://api.openai.com/v1",
      model: "gpt-4o",
      temperature: 0.7,
      maxTokens: 1e3
    },
    google: {
      apiKey: "",
      model: "gemini-1.5-flash",
      temperature: 0.7,
      maxTokens: 1e3
    },
    ollama: {
      baseUrl: "http://localhost:11434",
      model: "",
      temperature: 0.7,
      maxTokens: 1e3
    }
  },
  platformSettings: {
    desktop: {
      selectedModel: "llama3.1"
      // Default to Ollama model for desktop
    },
    mobile: {
      selectedModel: "claude-3-5-sonnet-20241022"
      // Default to Claude for mobile
    }
  },
  customCommands: [],
  general: {
    defaultTemperature: 0.7,
    defaultMaxTokens: 1e3,
    autoSave: true
  },
  showCommandButton: true,
  licensing: {
    licenseKey: "",
    supernovaLicenseKey: "",
    isSupernova: false,
    debugSettings: {
      enabled: false,
      overrideDate: void 0,
      forceSupernova: false
    }
  },
  providerStatus: {},
  ollamaDefaultContext: 32e3
};
var NovaSettingTab = class extends import_obsidian12.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.activeTab = "getting-started";
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Nova Settings" });
    this.createTabNavigation();
    this.createTabContent();
  }
  createTabNavigation() {
    const tabContainer = this.containerEl.createDiv({ cls: "nova-tab-container" });
    const tabs = [
      { id: "getting-started", label: "Getting Started" },
      { id: "general", label: "General" },
      { id: "providers", label: "AI Providers" },
      { id: "supernova", label: "Supernova" }
    ];
    if (true) {
      tabs.push({ id: "debug", label: "Debug" });
    }
    tabs.forEach((tab) => {
      const tabEl = tabContainer.createDiv({
        cls: `nova-tab ${this.activeTab === tab.id ? "active" : ""}`,
        text: tab.label
      });
      tabEl.addEventListener("click", () => {
        this.switchTab(tab.id);
      });
    });
  }
  switchTab(tabId) {
    this.activeTab = tabId;
    this.display();
  }
  createTabContent() {
    const contentContainer = this.containerEl.createDiv({ cls: "nova-tab-content" });
    switch (this.activeTab) {
      case "getting-started":
        this.createGettingStartedTabContent(contentContainer);
        break;
      case "general":
        this.createGeneralTabContent(contentContainer);
        break;
      case "providers":
        this.createProvidersTabContent(contentContainer);
        break;
      case "supernova":
        this.createSupernovaTabContent(contentContainer);
        break;
      case "debug":
        this.createDebugTabContent(contentContainer);
        break;
    }
  }
  createGeneralTabContent(container) {
    this.createSupernovaCTA(container, {
      showOnlyIfNotSupporter: true,
      buttonAction: "tab",
      showLearnMore: false
    });
    this.createGeneralSettings(container);
    this.createPrivacySettings(container);
  }
  createProvidersTabContent(container) {
    this.createSupernovaCTA(container, {
      showOnlyIfNotSupporter: true,
      buttonAction: "tab",
      showLearnMore: false
    });
    this.createProviderSettings(container);
  }
  createGettingStartedTabContent(container) {
    this.createWelcomeSection(container);
    this.createQuickStartGuide(container);
    this.createSupernovaCTA(container, {
      buttonAction: "tab",
      showLearnMore: true,
      marginTop: "32px",
      marginBottom: "32px"
    });
    this.createNavigationHelp(container);
  }
  createSupernovaTabContent(container) {
    this.createSupernovaCTA(container, {
      buttonAction: "direct",
      showLearnMore: false,
      marginBottom: "32px"
    });
    const benefitsSection = container.createDiv({ cls: "nova-benefits-section" });
    benefitsSection.style.marginTop = "32px";
    benefitsSection.createEl("h3", { text: "Supernova Benefits" });
    benefitsSection.createEl("hr", { cls: "nova-section-divider" });
    const benefitsContent = benefitsSection.createDiv({ cls: "nova-benefits-content" });
    benefitsContent.innerHTML = `
			<p style="margin-bottom: 20px;">Support Nova development and get early access to new features. All features eventually become free for everyone.</p>
			
			<div class="nova-benefits-list">
				<div class="nova-benefit-item">
					<span class="nova-benefit-icon">\u26A1</span>
					<div class="nova-benefit-content">
						<strong>Early Access</strong>
						<span>Get new features 2-4 months before general release</span>
					</div>
				</div>
				<div class="nova-benefit-item">
					<span class="nova-benefit-icon">\u{1F4AC}</span>
					<div class="nova-benefit-content">
						<strong>Priority Support</strong>
						<span>Direct access to developers for feature requests and bug reports</span>
					</div>
				</div>
				<div class="nova-benefit-item">
					<span class="nova-benefit-icon">\u{1F5F3}\uFE0F</span>
					<div class="nova-benefit-content">
						<strong>Vote on Features</strong>
						<span>Help shape Nova's development and future direction</span>
					</div>
				</div>
				<div class="nova-benefit-item">
					<span class="nova-benefit-icon">\u{1F3C6}</span>
					<div class="nova-benefit-content">
						<strong>Supporter Badge</strong>
						<span>Recognition in the Nova community (coming soon)</span>
					</div>
				</div>
				<div class="nova-benefit-item">
					<span class="nova-benefit-icon">\u2764\uFE0F</span>
					<div class="nova-benefit-content">
						<strong>Open Source Support</strong>
						<span>Directly fund continued development of Nova</span>
					</div>
				</div>
			</div>
			
			<p style="margin-top: 20px; font-size: 0.9em; color: var(--text-muted);">Your support keeps Nova free and open source for everyone.</p>
		`;
    const licenseSection = container.createDiv({ cls: "nova-provider-section" });
    licenseSection.style.marginTop = "32px";
    licenseSection.createEl("h3", { text: "License Management" });
    this.createSupernovaLicenseInput(licenseSection);
  }
  createDebugTabContent(container) {
    const debugSection = container.createDiv({ cls: "nova-debug-section" });
    debugSection.createEl("h3", { text: "Debug Settings" });
    debugSection.createEl("hr", { cls: "nova-section-divider" });
    const infoEl = debugSection.createDiv({ cls: "nova-debug-info" });
    infoEl.innerHTML = `
			<div class="nova-info-card">
				<p>Debug settings for development and testing. These options help developers troubleshoot issues and test new features.</p>
			</div>
			<div class="nova-info-card">
				<h4>\u26A0\uFE0F Developer Settings</h4>
				<ul class="nova-debug-features">
					<li><strong>Debug Mode</strong> - Enable detailed logging and development features</li>
					<li><strong>Override Date</strong> - Test time-sensitive features with custom dates</li>
					<li><strong>Force Supernova</strong> - Test Supernova-only features without a license</li>
				</ul>
				<p class="nova-debug-note">Only modify these settings if you understand their purpose.</p>
			</div>
		`;
    this.createDebugSettings(debugSection);
  }
  createPrivacySettings(container) {
    const privacySection = container.createDiv({ cls: "nova-privacy-section" });
    privacySection.createEl("h3", { text: "Privacy & Platform Settings" });
    privacySection.createEl("hr", { cls: "nova-section-divider" });
    const infoEl = privacySection.createDiv({ cls: "nova-privacy-info" });
    infoEl.innerHTML = `
			<div class="nova-info-card">
				<h4>\u{1F512} Your Privacy Matters</h4>
				<p>Nova respects your privacy and gives you full control over how your data is handled. 
				All AI providers are accessed using your own API keys, so your content stays between you and your chosen AI service.</p>
			</div>
			<div class="nova-info-card">
				<h4>\u{1F4F1} Mobile Support</h4>
				<p>Mobile support is disabled by default to protect your privacy. When enabled, Nova provides identical selection-based editing capabilities across desktop and mobile with cloud-based AI providers.</p>
				<ul class="nova-privacy-features">
					<li><strong>Local-first</strong> - Ollama and desktop-only providers keep everything on your device</li>
					<li><strong>Your choice</strong> - Enable mobile only when you need cross-device access</li>
					<li><strong>Cross-platform editing</strong> - Selection-based editing works identically on mobile via Command Palette (Cmd+P)</li>
					<li><strong>Same experience</strong> - Mobile provides the same editing capabilities as desktop</li>
				</ul>
			</div>
		`;
    new import_obsidian12.Setting(privacySection).setName("Enable Mobile Support").setDesc("Allow Nova to work on mobile devices using cloud-based AI providers").addToggle((toggle) => {
      const currentMobileModel = this.plugin.settings.platformSettings.mobile.selectedModel;
      const isMobileEnabled = currentMobileModel !== "none";
      toggle.setValue(isMobileEnabled).onChange(async (value) => {
        if (value) {
          this.plugin.settings.platformSettings.mobile.selectedModel = "claude-3-5-sonnet-20241022";
        } else {
          this.plugin.settings.platformSettings.mobile.selectedModel = "none";
        }
        await this.plugin.saveSettings();
        if (this.plugin.aiProviderManager) {
          this.plugin.aiProviderManager.updateSettings(this.plugin.settings);
        }
      });
    });
  }
  createSecureApiKeyInput(container, options) {
    const setting = new import_obsidian12.Setting(container).setName(options.name).setDesc(options.desc);
    let actualValue = options.value;
    let isVisible = false;
    setting.addText((text) => {
      text.inputEl.type = "password";
      text.inputEl.style.fontFamily = "var(--font-monospace)";
      text.inputEl.style.width = "400px";
      text.inputEl.style.height = "40px";
      text.inputEl.style.position = "relative";
      text.setPlaceholder(options.placeholder);
      if (actualValue && actualValue.length > 12) {
        const masked = actualValue.slice(0, 8) + "\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022" + actualValue.slice(-4);
        text.setValue(masked);
      } else {
        text.setValue(actualValue);
      }
      const inputContainer = text.inputEl.parentElement;
      if (inputContainer) {
        inputContainer.style.position = "relative";
        const toggleBtn = inputContainer.createEl("button", { cls: "nova-toggle-btn" });
        toggleBtn.innerHTML = `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
					<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
					<circle cx="12" cy="12" r="3"/>
				</svg>`;
        toggleBtn.addEventListener("click", (e) => {
          e.preventDefault();
          isVisible = !isVisible;
          if (isVisible) {
            text.inputEl.type = "text";
            text.setValue(actualValue);
            toggleBtn.innerHTML = `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
							<path d="m9.88 9.88a3 3 0 1 0 4.24 4.24"/>
							<path d="m10.73 5.08a10.43 10.43 0 0 1 1.27-.08c7 0 11 8 11 8a13.16 13.16 0 0 1-1.67 2.68"/>
							<path d="M6.61 6.61A13.526 13.526 0 0 0 1 12s4 8 11 8a9.74 9.74 0 0 0 5.39-1.61"/>
							<line x1="2" y1="2" x2="22" y2="22"/>
						</svg>`;
          } else {
            text.inputEl.type = "password";
            if (actualValue && actualValue.length > 12) {
              const masked = actualValue.slice(0, 8) + "\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022\u2022" + actualValue.slice(-4);
              text.setValue(masked);
            } else {
              text.setValue(actualValue);
            }
            toggleBtn.innerHTML = `<svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
							<path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/>
							<circle cx="12" cy="12" r="3"/>
						</svg>`;
          }
        });
      }
      text.onChange(async (value) => {
        actualValue = value;
        await options.onChange(value);
      });
      return text;
    });
  }
  createProviderStatusIndicator(container, provider) {
    const statusContainer = container.createDiv({ cls: "nova-provider-status-container" });
    try {
      const status = this.getProviderStatus(provider);
      const statusEl = statusContainer.createDiv({ cls: `nova-provider-status ${status.status}` });
      const dot = statusEl.createSpan({ cls: "nova-status-dot" });
      const text = statusEl.createSpan({ cls: "nova-status-text" });
      text.textContent = this.getStatusDisplayText(status);
      if (status.lastChecked || status.message) {
        const tooltip = statusEl.createDiv({ cls: "nova-status-tooltip" });
        if (status.lastChecked) {
          const timeEl = tooltip.createDiv({ cls: "nova-status-time" });
          const date = status.lastChecked instanceof Date ? status.lastChecked : new Date(status.lastChecked);
          timeEl.textContent = `Last checked: ${date.toLocaleDateString()}`;
        }
        if (status.message) {
          const messageEl = tooltip.createDiv({ cls: "nova-status-message" });
          messageEl.textContent = status.message;
        }
      }
    } catch (error) {
      console.error("Error creating provider status indicator:", error);
      const statusEl = statusContainer.createDiv({ cls: "nova-provider-status untested" });
      const dot = statusEl.createSpan({ cls: "nova-status-dot" });
      const text = statusEl.createSpan({ cls: "nova-status-text" });
      text.textContent = "Status unknown";
    }
    return statusContainer;
  }
  getProviderStatus(provider) {
    var _a;
    try {
      const savedStatus = (_a = this.plugin.settings.providerStatus) == null ? void 0 : _a[provider];
      if (savedStatus) {
        return savedStatus;
      }
      const hasConfig = this.hasProviderConfig(provider);
      return {
        status: hasConfig ? "untested" : "not-configured",
        message: hasConfig ? "Configuration not tested" : "No API key configured",
        lastChecked: null
      };
    } catch (error) {
      console.error(`Error getting provider status for ${provider}:`, error);
      return {
        status: "not-configured",
        message: "Status unavailable",
        lastChecked: null
      };
    }
  }
  getStatusDisplayText(status) {
    switch (status.status) {
      case "connected":
        return "Connected";
      case "error":
        return "Connection failed";
      case "not-configured":
        return "Not configured";
      case "untested":
        return "Untested";
      case "testing":
        return "Testing...";
      default:
        return "Unknown";
    }
  }
  createTestConnectionButton(container, provider) {
    const setting = new import_obsidian12.Setting(container).setName("Connection Status").setDesc("Test your API connection");
    const statusContainer = setting.controlEl.createDiv({ cls: "nova-connection-status-container" });
    setting.addButton((button) => {
      button.setButtonText("Test Connection").setTooltip(`Test ${provider} connection`).onClick(async () => {
        await this.testProviderConnection(provider, button.buttonEl, statusContainer);
      });
      button.buttonEl.setAttribute("aria-label", `Test ${this.getProviderDisplayName(provider)} connection`);
      return button;
    });
    this.updateConnectionStatus(statusContainer, provider);
  }
  async testProviderConnection(provider, buttonEl, statusContainer) {
    var _a, _b, _c, _d, _e, _f, _g;
    const originalText = buttonEl.textContent || "Test Connection";
    const button = buttonEl;
    console.log(`Starting connection test for ${provider}, button disabled: ${button.disabled}`);
    button.disabled = false;
    button.textContent = "Testing...";
    button.style.opacity = "0.6";
    await this.updateProviderStatus(provider, "testing", "Testing connection...");
    this.setConnectionStatus(statusContainer, "testing", "Testing...");
    const restoreButton = () => {
      button.disabled = false;
      button.textContent = originalText;
      button.style.opacity = "1";
      console.log(`Button force-restored for ${provider}`);
    };
    const backupTimer = setTimeout(restoreButton, 12e3);
    try {
      const hasConfig = this.hasProviderConfig(provider);
      if (!hasConfig) {
        throw new Error("Provider not configured - missing API key or settings");
      }
      const timeoutPromise = new Promise((_, reject) => {
        setTimeout(() => reject(new Error("Connection timeout")), 1e4);
      });
      const testPromise = this.performRealConnectionTest(provider);
      await Promise.race([testPromise, timeoutPromise]);
      await this.updateProviderStatus(provider, "connected", "Connected successfully");
      this.setConnectionStatus(statusContainer, "success", "\u25CF Connected");
      console.log(`Connection test successful for ${provider}`);
    } catch (error) {
      console.log(`Connection test failed for ${provider}:`, error);
      let errorMessage = "Connection failed";
      if (error.message === "Connection timeout") {
        errorMessage = "Timeout";
      } else if (provider === "ollama") {
        const ollamaUrl = this.plugin.settings.aiProviders.ollama.baseUrl;
        if (!ollamaUrl || ollamaUrl.trim() === "") {
          errorMessage = "No URL configured";
        } else {
          errorMessage = "Connection failed";
        }
      } else if (((_a = error.message) == null ? void 0 : _a.includes("401")) || ((_b = error.message) == null ? void 0 : _b.includes("unauthorized")) || ((_c = error.message) == null ? void 0 : _c.includes("API key"))) {
        errorMessage = "Invalid API key";
      } else if ((_d = error.message) == null ? void 0 : _d.includes("429")) {
        errorMessage = "Rate limited";
      } else if ((_e = error.message) == null ? void 0 : _e.includes("quota")) {
        errorMessage = "Quota exceeded";
      } else if (((_f = error.message) == null ? void 0 : _f.includes("not configured")) || ((_g = error.message) == null ? void 0 : _g.includes("missing"))) {
        errorMessage = "Not configured";
      } else {
        errorMessage = "Connection failed";
      }
      await this.updateProviderStatus(provider, "error", errorMessage);
      this.setConnectionStatus(statusContainer, "error", `\u25CF ${errorMessage}`);
    } finally {
      clearTimeout(backupTimer);
      restoreButton();
    }
  }
  async updateProviderStatus(provider, status, message) {
    if (!this.plugin.settings.providerStatus) {
      this.plugin.settings.providerStatus = {};
    }
    this.plugin.settings.providerStatus[provider] = {
      status,
      message,
      lastChecked: status === "testing" ? null : /* @__PURE__ */ new Date()
    };
    await this.plugin.saveSettings();
    this.refreshProviderStatusIndicators();
  }
  refreshProviderStatusIndicators() {
    const containers = this.containerEl.querySelectorAll(".nova-provider-status-container");
    containers.forEach((container) => {
      const provider = container.getAttribute("data-provider");
      if (provider) {
        this.updateProviderStatusDisplay(container, provider);
      }
    });
  }
  updateProviderStatusDisplay(container, provider) {
    const status = this.getProviderStatus(provider);
    const statusEl = container.querySelector(".nova-provider-status");
    if (statusEl) {
      statusEl.className = `nova-provider-status ${status.status}`;
      const textEl = statusEl.querySelector(".nova-status-text");
      if (textEl) {
        textEl.textContent = this.getStatusDisplayText(status);
      }
      let tooltip = statusEl.querySelector(".nova-status-tooltip");
      if (status.lastChecked || status.message) {
        if (!tooltip) {
          tooltip = statusEl.createDiv({ cls: "nova-status-tooltip" });
        }
        tooltip.empty();
        if (status.lastChecked) {
          const timeEl = tooltip.createDiv({ cls: "nova-status-time" });
          const date = status.lastChecked instanceof Date ? status.lastChecked : new Date(status.lastChecked);
          timeEl.textContent = `Last checked: ${date.toLocaleDateString()}`;
        }
        if (status.message) {
          const messageEl = tooltip.createDiv({ cls: "nova-status-message" });
          messageEl.textContent = status.message;
        }
      } else if (tooltip) {
        tooltip.remove();
      }
    }
  }
  async performRealConnectionTest(provider) {
    console.log(`Starting real connection test for ${provider}`);
    switch (provider) {
      case "claude": {
        const claudeProvider = new ClaudeProvider(this.plugin.settings.aiProviders.claude);
        await claudeProvider.complete("You are a helpful assistant.", "Hi", { maxTokens: 1 });
        break;
      }
      case "openai": {
        const openaiProvider = new OpenAIProvider(this.plugin.settings.aiProviders.openai);
        await openaiProvider.getAvailableModels();
        break;
      }
      case "google": {
        const googleProvider = new GoogleProvider(this.plugin.settings.aiProviders.google);
        await googleProvider.getAvailableModels();
        break;
      }
      case "ollama": {
        const ollamaProvider = new OllamaProvider(this.plugin.settings.aiProviders.ollama);
        const isAvailable = await ollamaProvider.isAvailable();
        if (!isAvailable) {
          throw new Error("Ollama connection failed");
        }
        break;
      }
    }
    console.log(`Connection test successful for ${provider}`);
  }
  setConnectionStatus(container, type, message) {
    container.empty();
    if (type === "none") return;
    const statusEl = container.createDiv({ cls: `nova-status-indicator ${type}` });
    statusEl.textContent = message;
  }
  updateConnectionStatus(container, provider) {
    const hasConfig = this.hasProviderConfig(provider);
    if (!hasConfig) {
      this.setConnectionStatus(container, "none", "");
    } else {
      this.setConnectionStatus(container, "none", "");
    }
  }
  hasProviderConfig(provider) {
    switch (provider) {
      case "claude":
        return !!this.plugin.settings.aiProviders.claude.apiKey;
      case "openai":
        return !!this.plugin.settings.aiProviders.openai.apiKey;
      case "google":
        return !!this.plugin.settings.aiProviders.google.apiKey;
      case "ollama":
        return !!this.plugin.settings.aiProviders.ollama.baseUrl;
      default:
        return false;
    }
  }
  createLicenseSettings(containerEl = this.containerEl) {
    var _a, _b;
    const licenseContainer = containerEl.createDiv({ cls: "nova-license-section" });
    licenseContainer.createEl("h3", { text: "Supernova Supporter Status" });
    const infoEl = licenseContainer.createDiv({ cls: "nova-model-info" });
    infoEl.innerHTML = `
			<div class="nova-info-card compact">
				<p>Nova provides all features for free when you use your own AI provider API keys. 
				Supernova supporters get early access to new features.</p>
			</div>
		`;
    const isSupernova = ((_a = this.plugin.featureManager) == null ? void 0 : _a.isSupernovaSupporter()) || false;
    const supernovaLicense = (_b = this.plugin.featureManager) == null ? void 0 : _b.getSupernovaLicense();
    const statusDisplay = licenseContainer.createDiv({ cls: "nova-supernova-status" });
    const statusText = isSupernova ? "Supernova Supporter" : "Nova User";
    const statusIcon = isSupernova ? `<svg viewBox="0 0 24 24" style="width: 14px; height: 14px; color: #9333ea; filter: drop-shadow(0 0 4px rgba(147, 51, 234, 0.6));">
			<circle cx="12" cy="12" r="2.5" fill="currentColor"/>
			<path d="M12 1L12 6" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M12 18L12 23" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M23 12L18 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M6 12L1 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
			<path d="M18.364 5.636L15.536 8.464" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M8.464 15.536L5.636 18.364" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M18.364 18.364L15.536 15.536" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
			<path d="M8.464 8.464L5.636 5.636" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
		</svg>` : `<svg viewBox="0 0 24 24" style="width: 14px; height: 14px; color: var(--text-normal);">
			${NOVA_ICON_SVG}
		</svg>`;
    statusDisplay.innerHTML = `
			<div class="nova-status-badge ${isSupernova ? "supernova" : "nova"}">
				<span class="status-icon">${statusIcon}</span>
				<span class="status-name">${statusText}</span>
			</div>
		`;
    if (supernovaLicense) {
      const statusEl = licenseContainer.createDiv({ cls: "nova-license-status" });
      const expiryText = supernovaLicense.expiresAt ? `Expires: ${supernovaLicense.expiresAt.toLocaleDateString()}` : "Lifetime Support";
      statusEl.innerHTML = `
				<div class="license-info">
					<span class="license-email">${supernovaLicense.email}</span>
					<span class="license-expiry">${expiryText}</span>
				</div>
			`;
    }
    this.createSecureApiKeyInput(licenseContainer, {
      name: "Supernova License Key (Optional)",
      desc: "Enter your Supernova supporter license key for early access to new features",
      placeholder: "Enter Supernova license key...",
      value: this.plugin.settings.licensing.supernovaLicenseKey || "",
      onChange: async (value) => {
        this.plugin.settings.licensing.supernovaLicenseKey = value;
        await this.plugin.saveSettings();
        if (this.plugin.featureManager) {
          await this.plugin.featureManager.updateSupernovaLicense(value || null);
          const leaves = this.plugin.app.workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
          if (leaves.length > 0) {
            const sidebarView = leaves[0].view;
            sidebarView.refreshSupernovaUI();
          }
          this.display();
        }
      }
    });
    const validateSetting = new import_obsidian12.Setting(licenseContainer).setDesc("Validate your Supernova license key").addButton((button) => {
      button.setButtonText("Validate License").onClick(async () => {
        const licenseKey = this.plugin.settings.licensing.supernovaLicenseKey;
        if (!licenseKey) {
          this.showLicenseMessage("Please enter a Supernova license key first.", "error");
          return;
        }
        button.setButtonText("Validating...");
        button.disabled = true;
        try {
          if (this.plugin.featureManager) {
            await this.plugin.featureManager.updateSupernovaLicense(licenseKey);
            const isSupernova2 = this.plugin.featureManager.isSupernovaSupporter();
            if (isSupernova2) {
              this.showLicenseMessage("Valid Supernova license! You now have early access to new features.", "success");
              this.showConfetti();
            } else {
              this.showLicenseMessage("Invalid or expired Supernova license key.", "error");
            }
            const leaves = this.plugin.app.workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
            if (leaves.length > 0) {
              const sidebarView = leaves[0].view;
              sidebarView.refreshSupernovaUI();
            }
            this.display();
          }
        } catch (error) {
          this.showLicenseMessage("Error validating Supernova license.", "error");
        } finally {
          button.setButtonText("Validate License");
          button.disabled = false;
        }
      });
    });
    this.createSupernovaInfo(licenseContainer);
  }
  createSupernovaInfo(container) {
    const supernovaInfo = container.createDiv({ cls: "nova-supernova-info" });
    supernovaInfo.innerHTML = `
			<div class="nova-info-card">
				<h5>Become a Supernova Supporter</h5>
				<p>Support Nova development and get early access to new features. All features eventually become free for everyone.</p>
				<ul>
					<li>Early access to new features (3-6 months before general release)</li>
					<li>Priority support and feature requests</li>
					<li>Supporter badge and recognition</li>
					<li>Directly support open-source development</li>
				</ul>
			</div>
		`;
  }
  createDebugSettings(container) {
    const debugContainer = container.createDiv({ cls: "nova-debug-section" });
    debugContainer.createEl("h4", { text: "Development Settings" });
    new import_obsidian12.Setting(debugContainer).setName("Debug Mode").setDesc("Enable development testing features").addToggle((toggle) => toggle.setValue(this.plugin.settings.licensing.debugSettings.enabled).onChange(async (value) => {
      this.plugin.settings.licensing.debugSettings.enabled = value;
      await this.plugin.saveSettings();
      if (this.plugin.featureManager) {
        this.plugin.featureManager.updateDebugSettings(this.plugin.settings.licensing.debugSettings);
      }
      this.display();
    }));
    if (this.plugin.settings.licensing.debugSettings.enabled) {
      new import_obsidian12.Setting(debugContainer).setName("Override Date").setDesc("Override current date for testing time-gated features (YYYY-MM-DD)").addText((text) => text.setPlaceholder("2025-12-01").setValue(this.plugin.settings.licensing.debugSettings.overrideDate || "").onChange(async (value) => {
        this.plugin.settings.licensing.debugSettings.overrideDate = value || void 0;
        await this.plugin.saveSettings();
        if (this.plugin.featureManager) {
          this.plugin.featureManager.updateDebugSettings(this.plugin.settings.licensing.debugSettings);
        }
      }));
      new import_obsidian12.Setting(debugContainer).setName("Force Supernova Status").setDesc("Override Supernova supporter status for testing").addToggle((toggle) => toggle.setValue(this.plugin.settings.licensing.debugSettings.forceSupernova || false).onChange(async (value) => {
        this.plugin.settings.licensing.debugSettings.forceSupernova = value;
        await this.plugin.saveSettings();
        if (this.plugin.featureManager) {
          this.plugin.featureManager.updateDebugSettings(this.plugin.settings.licensing.debugSettings);
        }
        if (value) {
          this.showConfetti();
        }
        const leaves = this.plugin.app.workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
        if (leaves.length > 0) {
          const sidebarView = leaves[0].view;
          sidebarView.refreshSupernovaUI();
        }
        this.display();
      }));
      new import_obsidian12.Setting(debugContainer).setName("Clear All Licenses").setDesc("Remove all applied licenses (for testing)").addButton((button) => button.setButtonText("Clear Licenses").setWarning().onClick(async () => {
        const confirmed = confirm("Are you sure you want to clear all licenses? This will remove any applied Supernova license.");
        if (!confirmed) return;
        this.plugin.settings.licensing.supernovaLicenseKey = "";
        if (this.plugin.settings.licensing.debugSettings.forceSupernova) {
          this.plugin.settings.licensing.debugSettings.forceSupernova = false;
        }
        await this.plugin.saveSettings();
        if (this.plugin.featureManager) {
          await this.plugin.featureManager.updateSupernovaLicense(null);
          this.plugin.featureManager.updateDebugSettings(this.plugin.settings.licensing.debugSettings);
        }
        const leaves = this.plugin.app.workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
        if (leaves.length > 0) {
          const sidebarView = leaves[0].view;
          sidebarView.refreshSupernovaUI();
        }
        this.showLicenseMessage("All licenses cleared successfully.", "success");
        this.display();
      }));
    }
  }
  showLicenseMessage(message, type) {
    const existingMessage = this.containerEl.querySelector(".nova-license-message");
    if (existingMessage) {
      existingMessage.remove();
    }
    const messageEl = this.containerEl.createDiv({
      cls: `nova-license-message ${type}`,
      text: message
    });
    setTimeout(() => {
      messageEl.remove();
    }, 5e3);
  }
  showConfetti() {
    const confettiContainer = document.createElement("div");
    confettiContainer.className = "nova-confetti-container";
    document.body.appendChild(confettiContainer);
    const rect = this.containerEl.getBoundingClientRect();
    const centerX = rect.left + rect.width / 2;
    const centerY = rect.top + Math.min(rect.height / 2, 300);
    const colors = ["gold", "blue", "pink", "green", "red", ""];
    for (let i = 0; i < 150; i++) {
      const confetti = document.createElement("div");
      confetti.className = `nova-confetti-piece ${colors[Math.floor(Math.random() * colors.length)]}`;
      confetti.style.left = `${centerX}px`;
      confetti.style.top = `${centerY}px`;
      const angle = Math.PI * 2 * i / 150 + (Math.random() * 0.2 - 0.1);
      const velocity = 250 + Math.random() * 350;
      const explodeX = Math.cos(angle) * velocity;
      const explodeY = Math.sin(angle) * velocity - 150;
      confetti.style.setProperty("--explode-x", `${explodeX}px`);
      confetti.style.setProperty("--explode-y", `${explodeY}px`);
      confetti.style.animationDelay = `${Math.random() * 0.2}s`;
      const size = 6 + Math.random() * 14;
      confetti.style.width = `${size}px`;
      confetti.style.height = `${size}px`;
      if (Math.random() > 0.5) {
        confetti.style.height = `${size * 0.4}px`;
      }
      confettiContainer.appendChild(confetti);
    }
    setTimeout(() => {
      confettiContainer.remove();
    }, 4e3);
  }
  createGeneralSettings(containerEl = this.containerEl) {
    const coreSection = containerEl.createDiv({ cls: "nova-core-settings-section" });
    coreSection.createEl("h3", { text: "Core Settings" });
    coreSection.style.marginBottom = "32px";
    new import_obsidian12.Setting(coreSection).setName("Default Temperature").setDesc("Controls randomness in AI responses (0.0 = focused, 1.0 = creative)").addSlider((slider) => slider.setLimits(0, 1, 0.1).setValue(this.plugin.settings.general.defaultTemperature).setDynamicTooltip().onChange(async (value) => {
      this.plugin.settings.general.defaultTemperature = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian12.Setting(coreSection).setName("Default Max Tokens").setDesc("Maximum length of AI responses (higher = longer responses)").addText((text) => {
      text.inputEl.type = "number";
      text.inputEl.style.width = "150px";
      text.inputEl.style.height = "40px";
      return text.setPlaceholder("1000").setValue(this.plugin.settings.general.defaultMaxTokens.toString()).onChange(async (value) => {
        const numValue = parseInt(value);
        if (!isNaN(numValue) && numValue > 0) {
          this.plugin.settings.general.defaultMaxTokens = numValue;
          await this.plugin.saveSettings();
        }
      });
    });
    new import_obsidian12.Setting(coreSection).setName("Auto-save settings").setDesc("Automatically save configuration changes").addToggle((toggle) => toggle.setValue(this.plugin.settings.general.autoSave).onChange(async (value) => {
      this.plugin.settings.general.autoSave = value;
      await this.plugin.saveSettings();
    }));
  }
  createProviderSettings(containerEl = this.containerEl) {
    const apiKeysSection = containerEl.createDiv({ cls: "nova-api-keys-section" });
    apiKeysSection.createEl("h3", { text: "Configure Your API Keys" });
    apiKeysSection.createEl("hr", { cls: "nova-section-divider" });
    const infoEl = apiKeysSection.createDiv({ cls: "nova-provider-info" });
    infoEl.innerHTML = `
			<div class="nova-info-card">
				<p>Nova connects to AI providers using your own API keys. All providers are available to all users - 
				just add your API keys below to get started.</p>
			</div>
			<div class="nova-info-card nova-model-guidance">
				<h4>Recommended Defaults</h4>
				<ul class="nova-model-recommendations">
					<li><strong>Claude Sonnet 4</strong> - Latest generation with excellent instruction following for collaborative editing</li>
					<li><strong>GPT-4.1 Mini</strong> - Current-generation model that outperforms GPT-4o while remaining cost-effective</li>
					<li><strong>Gemini 2.5 Flash</strong> - Best price/performance with "thinking" capabilities and strong coding support</li>
				</ul>
				<p class="nova-guidance-note">These defaults offer modern AI capabilities without premium pricing.</p>
			</div>
		`;
    const configSection = apiKeysSection.createDiv({ cls: "nova-provider-config-section" });
    configSection.createEl("h4", { text: "Configuration" });
    configSection.createEl("hr", { cls: "nova-section-divider" });
    this.createOllamaSettings(configSection);
    this.createClaudeSettings(configSection);
    this.createGoogleSettings(configSection);
    this.createOpenAISettings(configSection);
  }
  createClaudeSettings(containerEl = this.containerEl) {
    const claudeContainer = containerEl.createDiv({ cls: "nova-provider-section" });
    const headerContainer = claudeContainer.createDiv({ cls: "nova-provider-header" });
    const titleEl = headerContainer.createEl("h4", { text: "Claude (Anthropic)" });
    const statusContainer = this.createProviderStatusIndicator(titleEl, "claude");
    statusContainer.setAttribute("data-provider", "claude");
    this.createSecureApiKeyInput(claudeContainer, {
      name: "API Key",
      desc: "Your Anthropic API key",
      placeholder: "sk-ant-...",
      value: this.plugin.settings.aiProviders.claude.apiKey || "",
      onChange: async (value) => {
        this.plugin.settings.aiProviders.claude.apiKey = value;
        await this.plugin.saveSettings();
      }
    });
    this.createTestConnectionButton(claudeContainer, "claude");
    const modelSetting = new import_obsidian12.Setting(claudeContainer).setName("Model").setDesc("Claude model to use");
    let modelDropdown;
    modelSetting.addDropdown((dropdown) => {
      modelDropdown = dropdown;
      dropdown.selectEl.style.width = "200px";
      dropdown.selectEl.style.height = "40px";
      this.populateClaudeModels(dropdown);
      return dropdown.setValue(this.plugin.settings.aiProviders.claude.model || "claude-sonnet-4-20250514").onChange(async (value) => {
        this.plugin.settings.aiProviders.claude.model = value;
        await this.plugin.saveSettings();
      });
    });
  }
  populateClaudeModels(dropdown) {
    dropdown.selectEl.empty();
    const currentModels = getAvailableModels("claude");
    currentModels.forEach((model) => {
      dropdown.addOption(model.value, model.label);
    });
  }
  createOpenAISettings(containerEl = this.containerEl) {
    const openaiContainer = containerEl.createDiv({ cls: "nova-provider-section" });
    const headerContainer = openaiContainer.createDiv({ cls: "nova-provider-header" });
    const titleEl = headerContainer.createEl("h4", { text: "ChatGPT (OpenAI)" });
    const statusContainer = this.createProviderStatusIndicator(titleEl, "openai");
    statusContainer.setAttribute("data-provider", "openai");
    this.createSecureApiKeyInput(openaiContainer, {
      name: "API Key",
      desc: "Your OpenAI API key",
      placeholder: "sk-...",
      value: this.plugin.settings.aiProviders.openai.apiKey || "",
      onChange: async (value) => {
        this.plugin.settings.aiProviders.openai.apiKey = value;
        await this.plugin.saveSettings();
      }
    });
    this.createTestConnectionButton(openaiContainer, "openai");
    const modelSetting = new import_obsidian12.Setting(openaiContainer).setName("Model").setDesc("OpenAI model to use");
    let modelDropdown;
    modelSetting.addDropdown((dropdown) => {
      modelDropdown = dropdown;
      dropdown.selectEl.style.width = "200px";
      dropdown.selectEl.style.height = "40px";
      this.populateOpenAIModels(dropdown);
      return dropdown.setValue(this.plugin.settings.aiProviders.openai.model || "gpt-4.1-mini-2025-04-14").onChange(async (value) => {
        this.plugin.settings.aiProviders.openai.model = value;
        await this.plugin.saveSettings();
      });
    });
  }
  populateOpenAIModels(dropdown) {
    dropdown.selectEl.empty();
    const currentModels = getAvailableModels("openai");
    currentModels.forEach((model) => {
      dropdown.addOption(model.value, model.label);
    });
  }
  createGoogleSettings(containerEl = this.containerEl) {
    const googleContainer = containerEl.createDiv({ cls: "nova-provider-section" });
    const headerContainer = googleContainer.createDiv({ cls: "nova-provider-header" });
    const titleEl = headerContainer.createEl("h4", { text: "Google (Gemini)" });
    const statusContainer = this.createProviderStatusIndicator(titleEl, "google");
    statusContainer.setAttribute("data-provider", "google");
    this.createSecureApiKeyInput(googleContainer, {
      name: "API Key",
      desc: "Your Google AI API key",
      placeholder: "AI...",
      value: this.plugin.settings.aiProviders.google.apiKey || "",
      onChange: async (value) => {
        this.plugin.settings.aiProviders.google.apiKey = value;
        await this.plugin.saveSettings();
      }
    });
    this.createTestConnectionButton(googleContainer, "google");
    const modelSetting = new import_obsidian12.Setting(googleContainer).setName("Model").setDesc("Gemini model to use");
    let modelDropdown;
    modelSetting.addDropdown((dropdown) => {
      modelDropdown = dropdown;
      dropdown.selectEl.style.width = "200px";
      dropdown.selectEl.style.height = "40px";
      this.populateGoogleModels(dropdown);
      return dropdown.setValue(this.plugin.settings.aiProviders.google.model || "gemini-2.5-flash-preview-04-17").onChange(async (value) => {
        this.plugin.settings.aiProviders.google.model = value;
        await this.plugin.saveSettings();
      });
    });
  }
  populateGoogleModels(dropdown) {
    dropdown.selectEl.empty();
    const currentModels = getAvailableModels("google");
    currentModels.forEach((model) => {
      dropdown.addOption(model.value, model.label);
    });
  }
  createOllamaSettings(containerEl = this.containerEl) {
    const ollamaContainer = containerEl.createDiv({ cls: "nova-provider-section" });
    const headerContainer = ollamaContainer.createDiv({ cls: "nova-provider-header" });
    const titleEl = headerContainer.createEl("h4", { text: "Ollama (Local)" });
    const statusContainer = this.createProviderStatusIndicator(titleEl, "ollama");
    statusContainer.setAttribute("data-provider", "ollama");
    new import_obsidian12.Setting(ollamaContainer).setName("Base URL").setDesc("Ollama server URL").addText((text) => {
      text.inputEl.style.width = "350px";
      text.inputEl.style.height = "40px";
      return text.setPlaceholder("http://localhost:11434").setValue(this.plugin.settings.aiProviders.ollama.baseUrl || "").onChange(async (value) => {
        this.plugin.settings.aiProviders.ollama.baseUrl = value;
        await this.plugin.saveSettings();
      });
    });
    this.createTestConnectionButton(ollamaContainer, "ollama");
    new import_obsidian12.Setting(ollamaContainer).setName("Model").setDesc("Ollama model to use").addText((text) => {
      text.inputEl.style.width = "200px";
      text.inputEl.style.height = "40px";
      return text.setPlaceholder("llama2").setValue(this.plugin.settings.aiProviders.ollama.model || "").onChange(async (value) => {
        this.plugin.settings.aiProviders.ollama.model = value;
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian12.Setting(ollamaContainer).setName("Default Context Limit").setDesc("Context window size for all Ollama models (Nova defaults to 32K vs Ollama's 2K)").addText((text) => {
      text.inputEl.type = "number";
      text.inputEl.style.width = "150px";
      text.inputEl.style.height = "40px";
      return text.setPlaceholder("32000").setValue((this.plugin.settings.ollamaDefaultContext || 32e3).toString()).onChange(async (value) => {
        const numValue = parseInt(value);
        if (!isNaN(numValue) && numValue > 0) {
          this.plugin.settings.ollamaDefaultContext = numValue;
          await this.plugin.saveSettings();
        }
      });
    });
  }
  createPlatformSettings(containerEl = this.containerEl) {
    containerEl.createEl("h3", { text: "Platform Settings" });
    const infoEl = containerEl.createDiv({ cls: "nova-platform-info" });
    infoEl.innerHTML = `
			<div class="nova-info-card">
				<h4>\u{1F5A5}\uFE0F Platform Configuration</h4>
				<p>Configure which AI provider to use as your primary provider on different platforms. 
				Nova works seamlessly across desktop and mobile with all providers.</p>
			</div>
		`;
    new import_obsidian12.Setting(containerEl).setName("Model Selection").setDesc("Models are now selected using the dropdown in the Nova sidebar. Each platform (desktop/mobile) remembers its selected model independently.");
  }
  getAllowedProvidersForPlatform(platform) {
    return platform === "desktop" ? ["claude", "openai", "google", "ollama"] : ["claude", "openai", "google"];
  }
  getProviderDisplayName(provider) {
    const names = {
      "claude": "Claude (Anthropic)",
      "openai": "ChatGPT (OpenAI)",
      "google": "Google (Gemini)",
      "ollama": "Ollama (Local)",
      "none": "None (Disabled)"
    };
    return names[provider] || provider;
  }
  async setCurrentModel(modelId) {
    const platform = import_obsidian12.Platform.isMobile ? "mobile" : "desktop";
    this.plugin.settings.platformSettings[platform].selectedModel = modelId;
    if (this.plugin.aiProviderManager) {
      this.plugin.aiProviderManager.updateSettings(this.plugin.settings);
    }
  }
  createCommandSettings(containerEl = this.containerEl) {
    containerEl.createEl("h3", { text: "Custom Commands" });
    if (!this.plugin.featureManager.isFeatureEnabled("commands")) {
      const noticeEl = containerEl.createDiv({ cls: "nova-feature-notice" });
      noticeEl.innerHTML = `
				<div style="padding: 16px; background: var(--background-modifier-hover); border-radius: 8px; border: 1px solid var(--background-modifier-border);">
					<h4 style="margin: 0 0 8px 0; color: var(--text-normal);">Supernova Supporter Feature</h4>
					<p style="margin: 0; color: var(--text-muted); font-size: 0.9em;">
						Custom commands are currently available to Supernova supporters. 
						They will be available to all users on <strong>October 1, 2025</strong>.
					</p>
				</div>
			`;
      return;
    }
    const descEl = containerEl.createDiv({ cls: "nova-command-description" });
    descEl.innerHTML = `
			<p style="color: var(--text-muted); margin-bottom: 16px;">
				Create custom command shortcuts that insert predefined text templates when triggered with <code>:trigger</code>.
			</p>
		`;
    new import_obsidian12.Setting(containerEl).setName("Show Command Button in Chat (Mobile)").setDesc("Show the Commands button beside the Send button for mobile quick access to Nova commands and selection actions").addToggle((toggle) => toggle.setValue(this.plugin.settings.showCommandButton).onChange(async (value) => {
      this.plugin.settings.showCommandButton = value;
      await this.plugin.saveSettings();
      const leaves = this.plugin.app.workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
      if (leaves.length > 0) {
        const sidebarView = leaves[0].view;
        sidebarView.refreshCommandButton();
      }
    }));
    const buttonEl = containerEl.createDiv({ cls: "nova-add-command" });
    buttonEl.style.cssText = "margin-bottom: 16px;";
    new import_obsidian12.Setting(buttonEl).addButton(
      (button) => button.setButtonText("+ Add Custom Command").setCta().onClick(() => this.showAddCommandDialog())
    );
    this.renderCustomCommandsList(containerEl);
  }
  renderCustomCommandsList(container) {
    const existingList = container.querySelector(".nova-commands-list");
    if (existingList) existingList.remove();
    const commandsList = container.createDiv({ cls: "nova-commands-list" });
    const commands = this.plugin.settings.customCommands || [];
    if (commands.length === 0) {
      const emptyEl = commandsList.createDiv({ cls: "nova-commands-empty" });
      emptyEl.innerHTML = `
				<div style="text-align: center; padding: 24px; color: var(--text-muted);">
					<p>No custom commands yet.</p>
					<p style="font-size: 0.9em;">Create your first command to get started!</p>
				</div>
			`;
      return;
    }
    commands.forEach((command, index) => {
      const commandEl = commandsList.createDiv({ cls: "nova-command-item" });
      commandEl.style.cssText = `
				border: 1px solid var(--background-modifier-border);
				border-radius: 8px;
				padding: 16px;
				margin-bottom: 12px;
				background: var(--background-primary);
			`;
      const headerEl = commandEl.createDiv({ cls: "nova-command-header" });
      headerEl.style.cssText = "display: flex; justify-content: space-between; align-items: flex-start; margin-bottom: 8px;";
      const infoEl = headerEl.createDiv({ cls: "nova-command-info" });
      const nameEl = infoEl.createDiv({ cls: "nova-command-name" });
      nameEl.textContent = command.name;
      nameEl.style.cssText = "font-weight: 600; margin-bottom: 4px;";
      const triggerEl = infoEl.createDiv({ cls: "nova-command-trigger" });
      triggerEl.innerHTML = `<code>:${command.trigger}</code>`;
      triggerEl.style.cssText = "font-family: var(--font-monospace); color: var(--interactive-accent); font-size: 0.9em;";
      const actionsEl = headerEl.createDiv({ cls: "nova-command-actions" });
      actionsEl.style.cssText = "display: flex; gap: 8px;";
      const editBtn = actionsEl.createEl("button", { text: "Edit" });
      editBtn.style.cssText = "padding: 4px 8px; font-size: 0.8em; border-radius: 4px;";
      editBtn.onclick = () => this.showEditCommandDialog(index);
      const deleteBtn = actionsEl.createEl("button", { text: "Delete" });
      deleteBtn.style.cssText = "padding: 4px 8px; font-size: 0.8em; border-radius: 4px; background: var(--background-modifier-error); color: var(--text-on-accent);";
      deleteBtn.onclick = () => this.deleteCommand(index);
      if (command.description) {
        const descEl = commandEl.createDiv({ cls: "nova-command-desc" });
        descEl.textContent = command.description;
        descEl.style.cssText = "color: var(--text-muted); font-size: 0.9em; margin-bottom: 8px;";
      }
      const templateEl = commandEl.createDiv({ cls: "nova-command-template" });
      templateEl.innerHTML = `
				<div style="background: var(--background-modifier-hover); padding: 8px; border-radius: 4px; font-family: var(--font-monospace); font-size: 0.8em; white-space: pre-wrap; max-height: 60px; overflow-y: auto;">
					${command.template}
				</div>
			`;
    });
  }
  showAddCommandDialog() {
    this.showCommandDialog();
  }
  showEditCommandDialog(index) {
    var _a;
    const command = (_a = this.plugin.settings.customCommands) == null ? void 0 : _a[index];
    if (command) {
      this.showCommandDialog(command, index);
    }
  }
  showCommandDialog(existingCommand, editIndex) {
    const name = prompt("Command name:", (existingCommand == null ? void 0 : existingCommand.name) || "");
    if (!name) return;
    const trigger = prompt("Command trigger (without :):", (existingCommand == null ? void 0 : existingCommand.trigger) || "");
    if (!trigger) return;
    const description = prompt("Description (optional):", (existingCommand == null ? void 0 : existingCommand.description) || "");
    const template = prompt("Template content:", (existingCommand == null ? void 0 : existingCommand.template) || "");
    if (!template) return;
    const result = {
      id: (existingCommand == null ? void 0 : existingCommand.id) || "cmd_" + Math.random().toString(36).substr(2, 9),
      name,
      trigger: trigger.toLowerCase(),
      template,
      description: description || void 0
    };
    if (editIndex !== void 0) {
      if (!this.plugin.settings.customCommands) this.plugin.settings.customCommands = [];
      this.plugin.settings.customCommands[editIndex] = result;
    } else {
      if (!this.plugin.settings.customCommands) this.plugin.settings.customCommands = [];
      this.plugin.settings.customCommands.push(result);
    }
    this.plugin.saveSettings();
    this.renderCustomCommandsList(this.containerEl.querySelector(".nova-command-section"));
  }
  deleteCommand(index) {
    if (!this.plugin.settings.customCommands) return;
    const command = this.plugin.settings.customCommands[index];
    const confirmed = confirm(`Delete command "${command.name}" (${command.trigger})?`);
    if (confirmed) {
      this.plugin.settings.customCommands.splice(index, 1);
      this.plugin.saveSettings();
      this.renderCustomCommandsList(this.containerEl.querySelector(".nova-command-section"));
    }
  }
  createWelcomeSection(container) {
    const welcomeSection = container.createDiv({ cls: "nova-welcome-section" });
    const headerDiv = welcomeSection.createDiv({ cls: "nova-welcome-header" });
    headerDiv.innerHTML = `
			<div class="nova-welcome-logo">
				${NOVA_ICON_SVG}
			</div>
			<div class="nova-welcome-content">
				<h2>Welcome to Nova</h2>
				<p class="nova-tagline">Your AI writing partner to make the writing process smoother</p>
				<p class="nova-story">Removes the friction of copy/paste from LLMs to Obsidian, and provides actionable insights to help improve your writing</p>
			</div>
		`;
  }
  createQuickStartGuide(container) {
    const guideSection = container.createDiv({ cls: "nova-quick-start-section" });
    guideSection.style.marginTop = "32px";
    const selectionCard = guideSection.createDiv({ cls: "nova-quick-start-card" });
    selectionCard.innerHTML = `
			<div class="nova-card-header">
				<span class="nova-card-icon">\u{1F3AF}</span>
				<h4>Selection-Based Editing</h4>
			</div>
			<div class="nova-card-content">
				<ol>
					<li>Select any text in your document</li>
					<li>Right-click to open context menu</li>
					<li>Choose Nova action (Improve Writing, Make Longer)</li>
					<li>Watch AI transform text exactly in place</li>
				</ol>
				<div class="nova-tip">\u{1F4A1} Tip: Select any text in your document and right-click to see Nova actions</div>
			</div>
		`;
    const chatCard = guideSection.createDiv({ cls: "nova-quick-start-card" });
    chatCard.style.marginTop = "24px";
    chatCard.innerHTML = `
			<div class="nova-card-header">
				<span class="nova-card-icon">\u{1F4AC}</span>
				<h4>Chat-Based Targeting</h4>
			</div>
			<div class="nova-card-content">
				<ol>
					<li>Place cursor where you want content</li>
					<li>Type command: "Add conclusion section"</li>
					<li>Nova edits precisely at cursor location</li>
				</ol>
				<div class="nova-tip">\u{1F4F1} Works identically on desktop and mobile</div>
			</div>
		`;
    const providerCard = guideSection.createDiv({ cls: "nova-quick-start-card" });
    providerCard.style.marginTop = "24px";
    providerCard.innerHTML = `
			<div class="nova-card-header">
				<span class="nova-card-icon">\u{1F916}</span>
				<h4>AI Provider Selection</h4>
			</div>
			<div class="nova-card-content">
				<p>Choose the right AI for your task:</p>
				<ul>
					<li><strong>Claude</strong> - For complex reasoning and analysis</li>
					<li><strong>OpenAI</strong> - For balanced performance and creativity</li>
					<li><strong>Gemini</strong> - For fast responses and research</li>
					<li><strong>Ollama</strong> - For local privacy and offline use \u{1F512}</li>
				</ul>
				<div class="nova-tip">Configure providers in the AI Providers tab</div>
			</div>
		`;
  }
  createSupernovaLicenseInput(container) {
    var _a, _b;
    const isSupernova = ((_a = this.plugin.featureManager) == null ? void 0 : _a.isSupernovaSupporter()) || false;
    const supernovaLicense = (_b = this.plugin.featureManager) == null ? void 0 : _b.getSupernovaLicense();
    if (supernovaLicense) {
      const statusEl = container.createDiv({ cls: "nova-license-status" });
      const expiryText = supernovaLicense.expiresAt ? `Expires: ${supernovaLicense.expiresAt.toLocaleDateString()}` : "Lifetime Support";
      statusEl.innerHTML = `
				<div class="license-info" style="margin-bottom: 16px; padding: 12px; background: var(--background-modifier-form-field); border-radius: var(--radius-s);">
					<div style="display: flex; justify-content: space-between; align-items: center;">
						<span style="color: var(--text-normal);">${supernovaLicense.email}</span>
						<span style="color: var(--text-muted); font-size: 0.9em;">${expiryText}</span>
					</div>
				</div>
			`;
    }
    this.createSecureApiKeyInput(container, {
      name: "License Key",
      desc: "Enter your Supernova supporter license key",
      placeholder: "NOVA-XXXX-XXXX-XXXX",
      value: this.plugin.settings.licensing.supernovaLicenseKey || "",
      onChange: async (value) => {
        this.plugin.settings.licensing.supernovaLicenseKey = value;
        await this.plugin.saveSettings();
        if (this.plugin.featureManager) {
          await this.plugin.featureManager.updateSupernovaLicense(value || null);
          const leaves = this.plugin.app.workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
          if (leaves.length > 0) {
            const sidebarView = leaves[0].view;
            sidebarView.refreshSupernovaUI();
          }
          this.display();
        }
      }
    });
    const validationEl = container.createDiv({ cls: "nova-validation-status" });
    validationEl.style.marginTop = "8px";
    validationEl.style.fontSize = "0.9em";
  }
  createSupernovaCTA(container, options = {}) {
    var _a;
    const {
      showOnlyIfNotSupporter = false,
      buttonAction = "tab",
      showLearnMore = true,
      marginTop = "0",
      marginBottom = "32px"
    } = options;
    const isSupernova = ((_a = this.plugin.featureManager) == null ? void 0 : _a.isSupernovaSupporter()) || false;
    if (showOnlyIfNotSupporter && isSupernova) {
      return;
    }
    const statusText = isSupernova ? "Supernova Supporter" : "Nova User";
    const statusIcon = isSupernova ? "\u2B50" : "\u{1F31F}";
    const ctaSection = container.createDiv({ cls: "nova-prominent-supernova-section" });
    ctaSection.style.marginTop = marginTop;
    ctaSection.style.marginBottom = marginBottom;
    ctaSection.innerHTML = `
			<div class="nova-supernova-cta">
				<div class="nova-supernova-header">
					<span class="nova-supernova-icon">${statusIcon}</span>
					<div class="nova-supernova-info">
						<h3>Supernova Support</h3>
						<p>Status: <strong>${statusText}</strong></p>
					</div>
				</div>
				<div class="nova-supernova-actions">
					<button class="nova-supernova-btn primary" ${buttonAction === "tab" ? 'data-tab="supernova"' : ""}>
						${isSupernova ? buttonAction === "tab" ? "Manage License" : "Thank You for Supporting!" : "Become a Supporter"}
					</button>
					${showLearnMore ? '<button class="nova-supernova-btn secondary" data-tab="supernova">Learn More</button>' : ""}
				</div>
			</div>
		`;
    if (buttonAction === "tab") {
      ctaSection.querySelectorAll('[data-tab="supernova"]').forEach((button) => {
        button.addEventListener("click", (e) => {
          e.preventDefault();
          this.switchTab("supernova");
        });
      });
    }
  }
  createNavigationHelp(container) {
    const navSection = container.createDiv({ cls: "nova-navigation-section" });
    navSection.style.marginTop = "32px";
    const navCard = navSection.createDiv({ cls: "nova-navigation-card" });
    navCard.innerHTML = `
			<div class="nova-card-header">
				<span class="nova-card-icon">\u{1F4DA}</span>
				<h4>Next Steps</h4>
			</div>
			<div class="nova-card-content">
				<div class="nova-next-steps">
					<div class="nova-next-step">
						<span>1. Configure AI providers</span>
						<a href="#" class="nova-step-link" data-tab="providers">\u2192 Go to AI Providers tab</a>
					</div>
					<div class="nova-next-step">
						<span>2. Explore Privacy and General Settings</span>
						<a href="#" class="nova-step-link" data-tab="general">\u2192 Go to General tab</a>
					</div>
					<div class="nova-next-step">
						<span>3. Manage Supernova License</span>
						<a href="#" class="nova-step-link" data-tab="supernova">\u2192 Go to Supernova tab</a>
					</div>
				</div>
			</div>
		`;
    navCard.querySelectorAll(".nova-step-link").forEach((link) => {
      link.addEventListener("click", (e) => {
        e.preventDefault();
        const tabId = e.target.getAttribute("data-tab");
        this.switchTab(tabId);
      });
    });
  }
};

// src/ai/provider-manager.ts
var import_obsidian13 = require("obsidian");
var AIProviderManager = class {
  // 30 seconds
  constructor(settings, featureManager) {
    this.providers = /* @__PURE__ */ new Map();
    this.availabilityCache = /* @__PURE__ */ new Map();
    this.CACHE_TTL = 3e4;
    this.settings = settings;
    this.featureManager = featureManager;
  }
  async initialize() {
    this.providers.set("claude", new ClaudeProvider(this.settings.aiProviders.claude));
    this.providers.set("openai", new OpenAIProvider(this.settings.aiProviders.openai));
    this.providers.set("google", new GoogleProvider(this.settings.aiProviders.google));
    this.providers.set("ollama", new OllamaProvider(this.settings.aiProviders.ollama));
  }
  updateSettings(settings) {
    this.settings = settings;
    this.providers.forEach((provider, type) => {
      var _a;
      if (type !== "none" && type in this.settings.aiProviders) {
        (_a = provider.updateConfig) == null ? void 0 : _a.call(provider, this.settings.aiProviders[type]);
      }
    });
    this.availabilityCache.clear();
  }
  /**
   * Check provider availability with caching to avoid repeated network calls
   */
  async checkProviderAvailability(providerType) {
    const now = Date.now();
    const cached = this.availabilityCache.get(providerType);
    if (cached && now - cached.timestamp < this.CACHE_TTL) {
      return cached.isAvailable;
    }
    const provider = this.providers.get(providerType);
    const isAvailable = provider ? await provider.isAvailable() : false;
    this.availabilityCache.set(providerType, {
      isAvailable,
      timestamp: now
    });
    return isAvailable;
  }
  /**
   * Get the provider type that handles a specific model
   */
  getProviderForModel(modelName) {
    if (modelName.startsWith("claude-")) {
      return "claude";
    }
    if (modelName.startsWith("gpt-") || modelName.startsWith("o1-")) {
      return "openai";
    }
    if (modelName.startsWith("gemini-")) {
      return "google";
    }
    return "ollama";
  }
  /**
   * Get the selected model for the current platform
   */
  getSelectedModel() {
    const platform = import_obsidian13.Platform.isMobile ? "mobile" : "desktop";
    const selectedModel = this.settings.platformSettings[platform].selectedModel;
    console.log("\u{1F50D} AIProviderManager.getSelectedModel():");
    console.log("\u{1F50D} Platform:", platform);
    console.log("\u{1F50D} Selected model:", selectedModel);
    return selectedModel;
  }
  async getAvailableProvider() {
    const selectedModel = this.getSelectedModel();
    const providerType = this.getProviderForModel(selectedModel);
    if (!providerType || providerType === "none") {
      return null;
    }
    const provider = this.providers.get(providerType);
    const isAvailable = provider ? await this.checkProviderAvailability(providerType) : false;
    console.log("\u{1F50D} Provider for model:", { selectedModel, providerType, isAvailable });
    if (provider && isAvailable) {
      return provider;
    }
    return null;
  }
  async generateText(prompt2, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    return provider.generateText(prompt2, options);
  }
  async *generateTextStream(prompt2, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    yield* provider.generateTextStream(prompt2, options);
  }
  async chatCompletion(messages, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    return provider.chatCompletion(messages, options);
  }
  async *chatCompletionStream(messages, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    yield* provider.chatCompletionStream(messages, options);
  }
  getProviderNames() {
    return Array.from(this.providers.values()).map((p) => p.name);
  }
  async getCurrentProviderName() {
    const provider = await this.getAvailableProvider();
    return provider ? provider.name : "None";
  }
  async getCurrentProviderType() {
    const selectedModel = this.getSelectedModel();
    const providerType = this.getProviderForModel(selectedModel);
    if (!providerType || providerType === "none") {
      return null;
    }
    const provider = this.providers.get(providerType);
    if (provider && await this.checkProviderAvailability(providerType)) {
      return providerType;
    }
    return null;
  }
  /**
   * Get the currently selected model name
   */
  getCurrentModel() {
    return this.getSelectedModel();
  }
  async complete(systemPrompt, userPrompt, options) {
    const provider = await this.getAvailableProvider();
    if (!provider) {
      throw new Error("Nova is disabled or no AI provider is available");
    }
    return provider.complete(systemPrompt, userPrompt, options);
  }
  getAllowedProviders() {
    if (import_obsidian13.Platform.isMobile) {
      return ["claude", "openai", "google"];
    }
    return ["claude", "openai", "google", "ollama"];
  }
  /**
   * Get all available providers with their availability status in parallel
   */
  async getAvailableProvidersWithStatus() {
    const allowedProviders = this.getAllowedProviders();
    const availabilityChecks = allowedProviders.map(async (providerType) => {
      const isAvailable = await this.checkProviderAvailability(providerType);
      return { providerType, isAvailable };
    });
    const results = await Promise.all(availabilityChecks);
    const availabilityMap = /* @__PURE__ */ new Map();
    results.forEach(({ providerType, isAvailable }) => {
      availabilityMap.set(providerType, isAvailable);
    });
    return availabilityMap;
  }
  isProviderAllowed(providerType) {
    return true;
  }
  getProviderLimits() {
    return { local: Infinity, cloud: Infinity };
  }
  /**
   * Get available models for a specific provider
   */
  async getProviderModels(providerType) {
    const provider = this.providers.get(providerType);
    if (!provider) {
      throw new Error(`Provider ${providerType} not found`);
    }
    if ("getAvailableModels" in provider && typeof provider.getAvailableModels === "function") {
      return await provider.getAvailableModels();
    }
    return [];
  }
  /**
   * Clear model cache for a specific provider
   */
  clearProviderModelCache(providerType) {
    const provider = this.providers.get(providerType);
    if (!provider) {
      return;
    }
    if ("clearModelCache" in provider && typeof provider.clearModelCache === "function") {
      provider.clearModelCache();
    }
  }
  cleanup() {
    this.providers.clear();
  }
  /**
   * Get the default max tokens from settings
   */
  getDefaultMaxTokens() {
    return this.settings.general.defaultMaxTokens;
  }
};

// src/core/document-engine.ts
var import_obsidian14 = require("obsidian");

// src/core/conversation-manager.ts
var ConversationManager = class {
  constructor(dataStore) {
    this.dataStore = dataStore;
    this.conversations = /* @__PURE__ */ new Map();
    this.maxMessagesPerFile = 100;
    // Limit conversation history
    this.storageKey = "nova-conversations";
    this.cleanupInterval = null;
    this.initializePromise = this.initialize();
  }
  async initialize() {
    await this.loadConversations();
    this.startPeriodicCleanup();
  }
  /**
   * Load conversations from plugin data
   */
  async loadConversations() {
    try {
      const data = await this.dataStore.loadData(this.storageKey);
      if (data && Array.isArray(data)) {
        for (const conversation of data) {
          try {
            const sanitizedConversation = this.sanitizeConversationData(conversation);
            this.conversations.set(sanitizedConversation.filePath, sanitizedConversation);
          } catch (error) {
            console.warn(`Skipped corrupted conversation for file: ${(conversation == null ? void 0 : conversation.filePath) || "unknown"}`, error);
          }
        }
      }
    } catch (error) {
      console.error("\u274C ConversationManager.loadConversations: Load failed:", error);
    }
  }
  /**
   * Sanitize and validate conversation data
   */
  sanitizeConversationData(conversation) {
    if (!conversation.filePath || typeof conversation.filePath !== "string") {
      throw new Error("Invalid or missing filePath");
    }
    const messages = Array.isArray(conversation.messages) ? conversation.messages : [];
    let contextDocuments = [];
    if (Array.isArray(conversation.contextDocuments)) {
      contextDocuments = conversation.contextDocuments.filter((doc) => this.isValidContextDocument(doc)).map((doc) => this.sanitizeContextDocument(doc));
    }
    return {
      filePath: conversation.filePath,
      messages,
      lastUpdated: typeof conversation.lastUpdated === "number" ? conversation.lastUpdated : Date.now(),
      contextDocuments,
      metadata: conversation.metadata || {
        editCount: 0,
        commandFrequency: {
          add: 0,
          edit: 0,
          delete: 0,
          grammar: 0,
          rewrite: 0,
          metadata: 0
        }
      }
    };
  }
  /**
   * Validate context document structure
   */
  isValidContextDocument(doc) {
    return doc && typeof doc.path === "string" && doc.path.trim().length > 0;
  }
  /**
   * Sanitize context document data
   */
  sanitizeContextDocument(doc) {
    return {
      path: doc.path,
      property: typeof doc.property === "string" ? doc.property : void 0,
      addedAt: typeof doc.addedAt === "number" ? doc.addedAt : Date.now()
    };
  }
  /**
   * Save conversations to plugin data
   */
  async saveConversations() {
    try {
      const conversationsArray = Array.from(this.conversations.values());
      await this.dataStore.saveData(this.storageKey, conversationsArray);
    } catch (error) {
      console.error("\u274C ConversationManager.saveConversations: Save failed:", error);
    }
  }
  /**
   * Get conversation for a specific file
   */
  getConversation(file) {
    const filePath = file.path;
    if (!this.conversations.has(filePath)) {
      const newConversation = {
        filePath,
        messages: [],
        lastUpdated: Date.now(),
        contextDocuments: [],
        metadata: {
          editCount: 0,
          commandFrequency: {
            add: 0,
            edit: 0,
            delete: 0,
            grammar: 0,
            rewrite: 0,
            metadata: 0
          }
        }
      };
      this.conversations.set(filePath, newConversation);
    }
    const conversation = this.conversations.get(filePath);
    if (!conversation.contextDocuments) {
      conversation.contextDocuments = [];
    }
    return conversation;
  }
  /**
   * Add a user message to the conversation
   */
  async addUserMessage(file, content, command) {
    const conversation = this.getConversation(file);
    const message = {
      id: this.generateMessageId(),
      role: "user",
      content,
      timestamp: Date.now(),
      command
    };
    conversation.messages.push(message);
    conversation.lastUpdated = Date.now();
    if (command && conversation.metadata) {
      conversation.metadata.commandFrequency[command.action]++;
    }
    await this.trimAndSave(conversation);
    return message;
  }
  /**
   * Add an assistant response to the conversation
   */
  async addAssistantMessage(file, content, result) {
    const conversation = this.getConversation(file);
    const message = {
      id: this.generateMessageId(),
      role: "assistant",
      content,
      timestamp: Date.now(),
      result
    };
    conversation.messages.push(message);
    conversation.lastUpdated = Date.now();
    if ((result == null ? void 0 : result.success) && conversation.metadata) {
      conversation.metadata.editCount++;
    }
    await this.trimAndSave(conversation);
    return message;
  }
  /**
   * Add a system message to the conversation
   */
  async addSystemMessage(file, content, metadata) {
    const conversation = this.getConversation(file);
    const message = {
      id: this.generateMessageId(),
      role: "system",
      content,
      timestamp: Date.now(),
      metadata
    };
    conversation.messages.push(message);
    conversation.lastUpdated = Date.now();
    await this.trimAndSave(conversation);
    return message;
  }
  /**
   * Get recent messages for context
   */
  getRecentMessages(file, count = 10) {
    const conversation = this.getConversation(file);
    return conversation.messages.slice(-count);
  }
  /**
   * Get messages by role
   */
  getMessagesByRole(file, role) {
    const conversation = this.getConversation(file);
    return conversation.messages.filter((msg) => msg.role === role);
  }
  /**
   * Get conversation context for AI prompts
   */
  getConversationContext(file, maxMessages = 6) {
    const messages = this.getRecentMessages(file, maxMessages);
    if (messages.length === 0) {
      return "";
    }
    const contextLines = messages.map((msg) => {
      const timestamp = new Date(msg.timestamp).toLocaleTimeString();
      let line = `[${timestamp}] ${msg.role.toUpperCase()}: ${msg.content}`;
      if (msg.command) {
        line += ` (Command: ${msg.command.action} ${msg.command.target})`;
      }
      if (msg.result) {
        line += ` (Result: ${msg.result.success ? "success" : "failed"})`;
      }
      return line;
    });
    return `Previous conversation:
${contextLines.join("\n")}
`;
  }
  /**
   * Clear conversation for a file
   */
  async clearConversation(file) {
    const conversation = this.getConversation(file);
    conversation.messages = [];
    conversation.lastUpdated = Date.now();
    if (conversation.metadata) {
      conversation.metadata.editCount = 0;
      conversation.metadata.commandFrequency = {
        add: 0,
        edit: 0,
        delete: 0,
        grammar: 0,
        rewrite: 0,
        metadata: 0
      };
    }
    await this.saveConversations();
  }
  /**
   * Get conversation statistics
   */
  getStats(file) {
    var _a;
    const conversation = this.getConversation(file);
    let mostUsedCommand = null;
    let maxCount = 0;
    if (conversation.metadata) {
      for (const [action, count] of Object.entries(conversation.metadata.commandFrequency)) {
        if (count > maxCount) {
          maxCount = count;
          mostUsedCommand = action;
        }
      }
    }
    const conversationAge = conversation.messages.length > 0 ? Date.now() - conversation.messages[0].timestamp : 0;
    return {
      messageCount: conversation.messages.length,
      editCount: ((_a = conversation.metadata) == null ? void 0 : _a.editCount) || 0,
      mostUsedCommand,
      conversationAge
    };
  }
  /**
   * Export conversation for a file
   */
  exportConversation(file) {
    const conversation = this.getConversation(file);
    const lines = [`# Conversation History for ${file.name}`, ""];
    for (const message of conversation.messages) {
      const timestamp = new Date(message.timestamp).toLocaleString();
      lines.push(`## ${message.role.toUpperCase()} (${timestamp})`);
      lines.push(message.content);
      if (message.command) {
        lines.push(`*Command: ${message.command.action} ${message.command.target}*`);
      }
      if (message.result) {
        lines.push(`*Result: ${message.result.success ? "Success" : "Failed"}*`);
        if (message.result.error) {
          lines.push(`*Error: ${message.result.error}*`);
        }
      }
      lines.push("");
    }
    return lines.join("\n");
  }
  /**
   * Generate unique message ID
   */
  generateMessageId() {
    return `msg_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
  }
  /**
   * Trim conversation to max length and save
   */
  async trimAndSave(conversation) {
    if (conversation.messages.length > this.maxMessagesPerFile) {
      conversation.messages = conversation.messages.slice(-this.maxMessagesPerFile);
    }
    await this.saveConversations();
  }
  /**
   * Get all conversation file paths
   */
  getAllConversationFiles() {
    return Array.from(this.conversations.keys());
  }
  /**
   * Check if file has active conversation
   */
  hasConversation(file) {
    const conversation = this.conversations.get(file.path);
    return conversation ? conversation.messages.length > 0 : false;
  }
  /**
   * Update conversation file path (for file renames)
   */
  async updateFilePath(oldPath, newPath) {
    const conversation = this.conversations.get(oldPath);
    if (conversation) {
      conversation.filePath = newPath;
      this.conversations.delete(oldPath);
      this.conversations.set(newPath, conversation);
      await this.saveConversations();
    }
  }
  /**
   * Start periodic cleanup of old conversations
   */
  startPeriodicCleanup() {
    this.cleanupInterval = window.setInterval(() => {
      this.cleanupOldConversations(7 * 24 * 60 * 60 * 1e3);
    }, 24 * 60 * 60 * 1e3);
  }
  /**
   * Clean up conversations older than the specified age
   */
  async cleanupOldConversations(maxAge) {
    const now = Date.now();
    let cleaned = false;
    for (const [filePath, conversation] of this.conversations.entries()) {
      if (conversation.messages.length > 0) {
        const lastMessage = conversation.messages[conversation.messages.length - 1];
        const age = now - lastMessage.timestamp;
        if (age > maxAge) {
          this.conversations.delete(filePath);
          cleaned = true;
        }
      }
    }
    if (cleaned) {
      await this.saveConversations();
    }
  }
  /**
   * Add a context document to the conversation
   */
  async addContextDocument(file, contextPath, property) {
    var _a, _b;
    await this.initializePromise;
    const conversation = this.getConversation(file);
    const exists = (_a = conversation.contextDocuments) == null ? void 0 : _a.some(
      (doc) => doc.path === contextPath && doc.property === property
    );
    if (!exists) {
      const contextDoc = {
        path: contextPath,
        property,
        addedAt: Date.now()
      };
      (_b = conversation.contextDocuments) == null ? void 0 : _b.push(contextDoc);
      conversation.lastUpdated = Date.now();
      await this.saveConversations();
    }
  }
  /**
   * Remove a context document from the conversation
   */
  async removeContextDocument(file, contextPath, property) {
    const conversation = this.getConversation(file);
    if (conversation.contextDocuments) {
      conversation.contextDocuments = conversation.contextDocuments.filter(
        (doc) => !(doc.path === contextPath && doc.property === property)
      );
      conversation.lastUpdated = Date.now();
      await this.saveConversations();
    }
  }
  /**
   * Get all context documents for a conversation
   */
  async getContextDocuments(file) {
    await this.initializePromise;
    const conversation = this.getConversation(file);
    return conversation.contextDocuments || [];
  }
  /**
   * Clear all context documents for a conversation
   */
  async clearContextDocuments(file) {
    const conversation = this.getConversation(file);
    conversation.contextDocuments = [];
    conversation.lastUpdated = Date.now();
    await this.saveConversations();
  }
  /**
   * Update context documents (replace entire list)
   */
  async setContextDocuments(file, documents) {
    const conversation = this.getConversation(file);
    conversation.contextDocuments = documents;
    conversation.lastUpdated = Date.now();
    await this.saveConversations();
  }
  /**
   * Cleanup method to call when plugin is disabled
   */
  cleanup() {
    if (this.cleanupInterval !== null) {
      clearInterval(this.cleanupInterval);
      this.cleanupInterval = null;
    }
  }
};

// src/core/document-engine.ts
var DocumentEngine = class {
  constructor(app, dataStore) {
    this.app = app;
    this.conversationManager = null;
    if (dataStore) {
      this.conversationManager = new ConversationManager(dataStore);
    }
  }
  /**
   * Set conversation manager (for dependency injection)
   */
  setConversationManager(conversationManager) {
    this.conversationManager = conversationManager;
  }
  /**
   * Get the active editor instance - ensures we get the editor for the active file
   */
  getActiveEditor() {
    const activeFile = this.getActiveFile();
    if (!activeFile) {
      return null;
    }
    const leaves = this.app.workspace.getLeavesOfType("markdown");
    for (const leaf of leaves) {
      const view2 = leaf.view;
      if (view2 instanceof import_obsidian14.MarkdownView && view2.file === activeFile) {
        return view2.editor;
      }
    }
    const activeEditor = this.app.workspace.activeEditor;
    if ((activeEditor == null ? void 0 : activeEditor.editor) && activeEditor.file === activeFile) {
      return activeEditor.editor;
    }
    const view = this.app.workspace.getActiveViewOfType(import_obsidian14.MarkdownView);
    if (view && view.file === activeFile) {
      return view.editor;
    }
    return null;
  }
  /**
   * Get the active file
   */
  getActiveFile() {
    return this.app.workspace.getActiveFile();
  }
  /**
   * Get the currently selected text
   */
  getSelectedText() {
    const editor = this.getActiveEditor();
    if (!editor) return "";
    return editor.getSelection();
  }
  /**
   * Get the current cursor position
   */
  getCursorPosition() {
    const editor = this.getActiveEditor();
    if (!editor) return null;
    return editor.getCursor();
  }
  /**
   * Set the cursor position (optionally focus the editor)
   */
  setCursorPosition(position, shouldFocus = false) {
    const editor = this.getActiveEditor();
    if (!editor) return;
    editor.setCursor(position);
    if (shouldFocus) {
      editor.focus();
    }
  }
  /**
   * Extract comprehensive document context
   */
  async getDocumentContext() {
    const file = this.getActiveFile();
    const editor = this.getActiveEditor();
    if (!file || !editor) {
      return null;
    }
    const content = editor.getValue();
    const selectedText = this.getSelectedText();
    const cursorPosition = this.getCursorPosition();
    const headings = this.extractHeadings(content);
    const surroundingLines = cursorPosition ? this.getSurroundingLines(content, cursorPosition.line) : void 0;
    return {
      file,
      filename: file.basename,
      content,
      headings,
      selectedText: selectedText || void 0,
      cursorPosition: cursorPosition || void 0,
      surroundingLines
    };
  }
  /**
   * Extract headings from document content
   */
  extractHeadings(content) {
    const lines = content.split("\n");
    const headings = [];
    let charCount = 0;
    lines.forEach((line, index) => {
      const headingMatch = line.match(/^(#{1,6})\s+(.+)$/);
      if (headingMatch) {
        const level = headingMatch[1].length;
        const text = headingMatch[2];
        headings.push({
          text,
          level,
          line: index,
          position: {
            start: charCount,
            end: charCount + line.length
          }
        });
      }
      charCount += line.length + 1;
    });
    return headings;
  }
  /**
   * Get lines surrounding the cursor position
   */
  getSurroundingLines(content, currentLine, contextSize = 5) {
    const lines = content.split("\n");
    const startLine = Math.max(0, currentLine - contextSize);
    const endLine = Math.min(lines.length - 1, currentLine + contextSize);
    return {
      before: lines.slice(startLine, currentLine),
      after: lines.slice(currentLine + 1, endLine + 1)
    };
  }
  /**
   * Apply an edit to the document
   */
  async applyEdit(content, position, options = {}) {
    const editor = this.getActiveEditor();
    const file = this.getActiveFile();
    if (!editor || !file) {
      return {
        success: false,
        error: "No active editor or file",
        editType: "insert"
      };
    }
    try {
      let appliedAt;
      if (position === "cursor") {
        appliedAt = editor.getCursor();
        editor.replaceRange(content, appliedAt);
      } else if (position === "selection") {
        const selection = editor.getSelection();
        if (!selection) {
          return {
            success: false,
            error: "No text selected",
            editType: "replace"
          };
        }
        appliedAt = editor.getCursor("from");
        editor.replaceSelection(content);
      } else if (position === "end") {
        const lastLine = editor.lastLine();
        const lastLineLength = editor.getLine(lastLine).length;
        appliedAt = { line: lastLine, ch: lastLineLength };
        const currentContent = editor.getValue();
        const newContent = currentContent + (currentContent.endsWith("\n") ? "" : "\n") + content;
        await this.app.vault.modify(file, newContent);
      } else {
        appliedAt = position;
        editor.replaceRange(content, appliedAt);
      }
      if (options.selectNewText) {
        const endPos = {
          line: appliedAt.line + content.split("\n").length - 1,
          ch: content.includes("\n") ? content.split("\n").pop().length : appliedAt.ch + content.length
        };
        editor.setSelection(appliedAt, endPos);
      }
      if (options.scrollToEdit) {
        editor.scrollIntoView({
          from: appliedAt,
          to: appliedAt
        }, true);
      }
      return {
        success: true,
        content,
        editType: position === "selection" ? "replace" : position === "end" ? "append" : "insert",
        appliedAt
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "insert"
      };
    }
  }
  /**
   * Delete content at cursor location
   */
  async deleteContent(target) {
    const editor = this.getActiveEditor();
    const file = this.getActiveFile();
    if (!editor || !file) {
      return {
        success: false,
        error: "No active editor or file",
        editType: "delete"
      };
    }
    try {
      if (target === "selection") {
        const selection = editor.getSelection();
        if (!selection) {
          return {
            success: false,
            error: "No text selected",
            editType: "delete"
          };
        }
        editor.replaceSelection("");
        return {
          success: true,
          editType: "delete"
        };
      } else if (target === "line") {
        const cursor = editor.getCursor();
        const line = cursor.line;
        editor.replaceRange(
          "",
          { line, ch: 0 },
          { line: line + 1, ch: 0 }
        );
        return {
          success: true,
          editType: "delete",
          appliedAt: { line, ch: 0 }
        };
      }
      return {
        success: false,
        error: "Invalid delete target",
        editType: "delete"
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "delete"
      };
    }
  }
  /**
   * Get the full document content
   */
  async getDocumentContent() {
    const editor = this.getActiveEditor();
    if (!editor) return null;
    return editor.getValue();
  }
  /**
   * Replace the entire document content
   */
  async setDocumentContent(content) {
    const file = this.getActiveFile();
    if (!file) {
      return {
        success: false,
        error: "No active file",
        editType: "replace"
      };
    }
    try {
      await this.app.vault.modify(file, content);
      return {
        success: true,
        content,
        editType: "replace"
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
  // Conversation management methods
  /**
   * Add user message to conversation
   */
  async addUserMessage(content, command) {
    if (!this.conversationManager) return;
    const file = this.getActiveFile();
    if (file) {
      await this.conversationManager.addUserMessage(file, content, command);
    }
  }
  /**
   * Add assistant response to conversation
   */
  async addAssistantMessage(content, result) {
    if (!this.conversationManager) return;
    const file = this.getActiveFile();
    if (file) {
      await this.conversationManager.addAssistantMessage(file, content, result);
    }
  }
  /**
   * Add system message to conversation
   */
  async addSystemMessage(content) {
    if (!this.conversationManager) return;
    const file = this.getActiveFile();
    if (file) {
      await this.conversationManager.addSystemMessage(file, content);
    }
  }
  /**
   * Get conversation context for AI prompts
   */
  getConversationContext(maxMessages = 6) {
    if (!this.conversationManager) return "";
    const file = this.getActiveFile();
    if (!file) return "";
    return this.conversationManager.getConversationContext(file, maxMessages);
  }
  /**
   * Clear conversation for current file
   */
  async clearConversation() {
    if (!this.conversationManager) return;
    const file = this.getActiveFile();
    if (file) {
      await this.conversationManager.clearConversation(file);
    }
  }
  /**
   * Get conversation statistics for current file
   */
  getConversationStats() {
    if (!this.conversationManager) return null;
    const file = this.getActiveFile();
    if (!file) return null;
    return this.conversationManager.getStats(file);
  }
  /**
   * Check if current file has an active conversation
   */
  hasConversation() {
    if (!this.conversationManager) return false;
    const file = this.getActiveFile();
    if (!file) return false;
    return this.conversationManager.hasConversation(file);
  }
  /**
   * Export conversation for current file
   */
  exportConversation() {
    if (!this.conversationManager) return null;
    const file = this.getActiveFile();
    if (!file) return null;
    return this.conversationManager.exportConversation(file);
  }
  /**
   * Replace selected text with new content
   * Handles undo/redo properly and preserves cursor position
   */
  async replaceSelection(newText, from, to) {
    const editor = this.getActiveEditor();
    const file = this.getActiveFile();
    if (!editor || !file) {
      return {
        success: false,
        error: "No active editor or file",
        editType: "replace"
      };
    }
    try {
      const fromPos = from || editor.getCursor("from");
      const toPos = to || editor.getCursor("to");
      editor.replaceRange(newText, fromPos, toPos);
      const newCursorPos = {
        line: fromPos.line + (newText.split("\n").length - 1),
        ch: newText.includes("\n") ? newText.split("\n").pop().length : fromPos.ch + newText.length
      };
      editor.setCursor(newCursorPos);
      editor.focus();
      return {
        success: true,
        content: newText,
        appliedAt: fromPos,
        editType: "replace"
      };
    } catch (error) {
      console.error("Error replacing selection:", error);
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
};

// src/core/context-builder.ts
var ContextBuilder = class {
  constructor(settings) {
    var _a, _b, _c, _d;
    this.defaultConfig = {
      maxContextLines: 20,
      includeStructure: true,
      includeHistory: false,
      temperature: (_b = (_a = settings == null ? void 0 : settings.general) == null ? void 0 : _a.defaultTemperature) != null ? _b : 0.7,
      maxTokens: (_d = (_c = settings == null ? void 0 : settings.general) == null ? void 0 : _c.defaultMaxTokens) != null ? _d : 1e3
    };
  }
  /**
   * Build prompt for a specific command
   */
  buildPrompt(command, documentContext, options = {}, conversationContext) {
    const config = { ...this.defaultConfig, ...options };
    const systemPrompt = this.buildSystemPrompt(command.action, config);
    const contextInfo = this.buildContextInfo(documentContext, command, config, conversationContext);
    const userPrompt = this.buildUserPrompt(command, contextInfo);
    return {
      systemPrompt,
      userPrompt,
      context: contextInfo,
      config: {
        temperature: config.temperature || 0.7,
        maxTokens: config.maxTokens || 1e3
      }
    };
  }
  /**
   * Build system prompt based on action type
   */
  buildSystemPrompt(action, config) {
    const basePrompt = `You are Nova, an AI writing partner that helps users edit documents at their cursor position. You work with Markdown documents in Obsidian.

IMPORTANT GUIDELINES:
- Provide ONLY the content to be inserted/modified, no explanations or meta-text
- Maintain the document's existing style and tone unless specifically asked to change it
- Preserve formatting, structure, and markdown syntax
- Work at the user's cursor position - every edit happens where they are focused
- Do not add headers unless specifically requested
- Focus on the user's immediate editing context`;
    const actionSpecificPrompts = {
      "add": `

ACTION: ADD CONTENT
- Generate EXACTLY what the user requested - follow their instruction literally
- Do NOT create content related to the document theme unless specifically asked
- Focus on the user's specific request, not the document's existing content
- Match basic formatting style but prioritize the user's exact request`,
      "edit": `

ACTION: EDIT CONTENT  
- Improve, modify, or enhance the specified content
- Preserve the original intent while following user instructions
- Apply style, tone, or structural changes as requested`,
      "delete": `

ACTION: DELETE CONTENT
- Confirm what should be deleted by providing the exact text to remove
- Be precise about deletion boundaries
- Respond "CONFIRMED" if the deletion is clear`,
      "grammar": `

ACTION: GRAMMAR & SPELLING
- Fix grammar, spelling, and punctuation errors
- Improve clarity while preserving meaning
- Maintain the original tone and style`,
      "rewrite": `

ACTION: REWRITE CONTENT
- Generate alternative content that serves the same purpose
- Apply requested style, tone, or structural changes
- Create fresh content while maintaining core meaning`,
      "metadata": `

ACTION: UPDATE METADATA
- Modify frontmatter properties, tags, or document metadata
- Return ONLY a JSON object with the properties to update
- For tags, return as an array: {"tags": ["tag1", "tag2"]}
- For other properties: {"title": "New Title", "author": "Name"}
- Do NOT include properties that shouldn't be changed
- Do NOT return any explanatory text, ONLY the JSON object`
    };
    return basePrompt + (actionSpecificPrompts[action] || "");
  }
  /**
   * Build context information for the prompt
   */
  buildContextInfo(documentContext, command, config, conversationContext) {
    let context = `DOCUMENT: ${documentContext.filename}
`;
    if (config.includeStructure && documentContext.headings.length > 0) {
      context += `DOCUMENT STRUCTURE:
`;
      const structure = this.buildDocumentStructure(documentContext.headings);
      context += structure + "\n";
    }
    context += this.buildTargetContext(command, documentContext);
    if (conversationContext && config.includeHistory) {
      context += `
CONVERSATION CONTEXT:
${conversationContext}
`;
    }
    if (command.action === "add" && command.target === "cursor") {
      if (documentContext.surroundingLines) {
        const before = documentContext.surroundingLines.before.slice(-3).join("\n");
        const after = documentContext.surroundingLines.after.slice(0, 3).join("\n");
        context += `
LOCAL CONTEXT (for style reference only):
Before cursor:
${before}

After cursor:
${after}
`;
      }
    } else {
      context += `
FULL DOCUMENT:
${documentContext.content}
`;
    }
    return context;
  }
  /**
   * Build target-specific context
   */
  buildTargetContext(command, documentContext) {
    switch (command.target) {
      case "selection":
        if (documentContext.selectedText) {
          return `
SELECTED TEXT:
${documentContext.selectedText}
`;
        }
        return `
No text currently selected.
`;
      case "cursor":
        if (documentContext.surroundingLines) {
          const context = `
CURSOR CONTEXT:
`;
          const before = documentContext.surroundingLines.before.join("\n");
          const after = documentContext.surroundingLines.after.join("\n");
          return context + `Before cursor:
${before}

After cursor:
${after}
`;
        }
        return `
Cursor position context not available.
`;
      case "document":
        return `
Targeting entire document.
`;
      case "end":
        return `
Targeting end of document.
`;
      default:
        return `
Working at cursor position.
`;
    }
  }
  /**
   * Build user prompt with instructions
   */
  buildUserPrompt(command, contextInfo) {
    let prompt2 = contextInfo;
    prompt2 += `
USER REQUEST: ${command.instruction}
`;
    if (command.context) {
      prompt2 += `ADDITIONAL REQUIREMENTS: ${command.context}
`;
    }
    prompt2 += this.getFocusInstructions(command);
    prompt2 += this.getOutputInstructions(command);
    return prompt2;
  }
  /**
   * Get focus instructions based on target
   */
  getFocusInstructions(command) {
    const actionGuidance = {
      "add": "Add new content",
      "edit": "Modify existing content",
      "delete": "Remove specified content",
      "rewrite": "Generate alternative content",
      "grammar": "Fix grammar and spelling",
      "metadata": "Update document metadata"
    };
    switch (command.target) {
      case "selection":
        return `
FOCUS: ${actionGuidance[command.action]} in the selected text.
`;
      case "cursor":
        return `
FOCUS: ${actionGuidance[command.action]} at the current cursor position.
`;
      case "document":
        return `
FOCUS: ${actionGuidance[command.action]} for the entire document.
`;
      case "end":
        return `
FOCUS: Add content at the very end of the document, after all existing content. Ensure it flows naturally.
`;
      default:
        return `
FOCUS: ${actionGuidance[command.action]} at the cursor position.
`;
    }
  }
  /**
   * Get output instructions based on action
   */
  getOutputInstructions(command) {
    switch (command.action) {
      case "add":
        return "OUTPUT: Provide only the new content to be added.";
      case "edit":
        return "OUTPUT: Provide only the improved version of the content.";
      case "delete":
        return 'OUTPUT: Confirm what should be deleted by providing the exact text to remove, or respond "CONFIRMED" if the deletion is clear.';
      case "grammar":
        return "OUTPUT: Provide the corrected version with proper grammar and spelling.";
      case "rewrite":
        return "OUTPUT: Provide the completely rewritten content that serves the same purpose.";
      case "metadata":
        return "OUTPUT: Provide the updated metadata in proper YAML format.";
      default:
        return "OUTPUT: Provide only the requested content changes.";
    }
  }
  /**
   * Build document structure from headings
   */
  buildDocumentStructure(headings) {
    return headings.map((heading) => {
      const indent = "  ".repeat(heading.level - 1);
      return `${indent}- ${heading.text}`;
    }).join("\n");
  }
  /**
   * Validate generated prompt
   */
  validatePrompt(prompt2) {
    const issues = [];
    if (!prompt2.systemPrompt || prompt2.systemPrompt.trim().length === 0) {
      issues.push("System prompt is empty");
    }
    if (!prompt2.userPrompt || prompt2.userPrompt.trim().length === 0) {
      issues.push("User prompt is empty");
    }
    if (prompt2.userPrompt.length > 1e4) {
      issues.push("User prompt is too long (>10000 characters)");
    }
    return {
      valid: issues.length === 0,
      issues
    };
  }
};

// src/core/command-parser.ts
var COMMAND_PATTERNS = [
  {
    action: "grammar",
    patterns: [
      /\b(grammar|spell|spelling|proofread|polish)\b/i,
      /\bcheck\b.*\b(grammar|spelling|errors)\b/i,
      /\bmake\s+.*\b(grammatical|correct|proper)\b/i,
      /\bfix\s+.*\b(grammar|errors|mistakes|typos)\b/i,
      /\bcorrect\b.*\b(grammar|spelling|errors)\b/i
    ],
    targets: ["selection", "document"]
  },
  {
    action: "metadata",
    patterns: [
      // Tag-specific patterns with colon format (highest priority)
      /^(add|set|update|remove)\s+tags?:/i,
      // Tag optimization patterns
      /\b(clean up|cleanup|optimize|improve|review|analyze)\s+.*\btags?\b/i,
      /\b(suggest|recommend)\s+.*\btags?\b/i,
      /^add suggested tags$/i,
      /^add tags$/i,
      // Simple "add tags" for AI suggestions
      // General metadata patterns
      /\b(update|set|change|modify)\s+.*\b(property|properties|metadata|frontmatter|tag|tags)\b/i,
      /\b(set|update|change|add)\s+.*\b(title|author|date|status)\b/i,
      /\bupdate\s+.*\bfrontmatter\b/i,
      // Tag-specific patterns that exclude content/text/section
      /\b(add|remove|update)\s+(?!.*\b(content|text|section|paragraph|about)\b).*\btag[s]?\b/i,
      /\bset\s+.*\bproperty\b/i
    ],
    targets: ["document"]
  },
  {
    action: "rewrite",
    patterns: [
      /\b(rewrite|reword|rephrase|restructure|reorganize)\b/i,
      /\bwrite\s+.*\b(new|different|alternative)\b/i,
      /\bgenerate\s+.*\b(sections|parts|multiple)\b/i,
      /\bmake\s+.*\b(sections|parts|multiple)\b/i
    ],
    targets: ["document", "end"]
  },
  {
    action: "delete",
    patterns: [
      /\b(delete|remove|eliminate|cut|erase)\b/i,
      /\bget\s+rid\s+of\b/i,
      /\btake\s+out\b/i,
      /\bdrop\b.*\b(section|paragraph|part)\b/i
    ],
    targets: ["selection"]
  },
  {
    action: "add",
    patterns: [
      /\b(add|create|write|insert|include|append|prepend)\b.*\b(section|paragraph|heading|content|text|part)\b/i,
      /\b(add|create|write|insert|append|prepend)\b(?!\s+.*\b(better|clearer|more|less|tags?|property|properties|metadata|frontmatter)\b)/i,
      /\bmake\s+.*\b(section|part)\b/i,
      /\bgenerate\b.*\b(section|content|text)\b/i,
      // Specific patterns for append/prepend with location
      /\b(append|add)\b.*\b(after|following)\b/i,
      /\b(prepend|add)\b.*\b(before|preceding)\b/i
    ],
    targets: ["end"]
  },
  {
    action: "edit",
    patterns: [
      /\b(edit|modify|change|update|revise|improve|enhance)\b/i,
      /\bmake\s+.*\b(better|clearer|more|less|formal|professional|detailed|comprehensive)\b/i,
      /\b(fix|correct|adjust)\b(?!.*\b(grammar|spelling|errors)\b)/i,
      /\b(expand|shorten|condense)\b/i
    ],
    targets: ["selection"]
  }
];
var TARGET_PATTERNS = [
  { pattern: /\b(?:selected|highlighted|chosen)\s+(?:text|content)/i, target: "selection" },
  { pattern: /\b(?:entire|whole|full)\s+(?:document|file|note)/i, target: "document" },
  { pattern: /\b(?:end|bottom|conclusion)/i, target: "end" }
];
var CommandParser = class {
  /**
   * Parse natural language input into an EditCommand
   */
  parseCommand(input, hasSelection = false) {
    const normalizedInput = input.trim().toLowerCase();
    const action = this.detectAction(normalizedInput);
    const target = this.detectTarget(normalizedInput, hasSelection, action);
    const context = this.extractContext(input);
    return {
      action,
      target,
      instruction: input,
      // Keep original input for display
      context
    };
  }
  /**
   * Detect the action type from the input
   */
  detectAction(input) {
    for (const commandPattern of COMMAND_PATTERNS) {
      for (const pattern of commandPattern.patterns) {
        if (pattern.test(input)) {
          return commandPattern.action;
        }
      }
    }
    if (/\b(add|create|write|insert|include|generate.*section)\b/i.test(input)) {
      return "add";
    }
    if (/\b(fix|correct|grammar|spell|proofread|polish)\b/i.test(input)) {
      return "grammar";
    }
    if (/\b(delete|remove|eliminate)\b/i.test(input)) {
      return "delete";
    }
    if (/\b(rewrite|rephrase|restructure|generate.*new)\b/i.test(input)) {
      return "rewrite";
    }
    if (/\b(update|set|change|modify|add).*\b(property|properties|metadata|frontmatter|tag|tags|title|author|date|status)\b/i.test(input)) {
      return "metadata";
    }
    return "edit";
  }
  /**
   * Detect the target type from the input (simplified for cursor-only editing)
   */
  detectTarget(input, hasSelection, action) {
    for (const targetPattern of TARGET_PATTERNS) {
      if (targetPattern.pattern.test(input)) {
        return targetPattern.target;
      }
    }
    if (hasSelection && (action === "edit" || action === "grammar" || action === "delete")) {
      return "selection";
    }
    switch (action) {
      case "add":
        return "cursor";
      // Changed from 'end' to 'cursor' for cursor-only editing
      case "edit":
        return hasSelection ? "selection" : "cursor";
      case "delete":
        return hasSelection ? "selection" : "cursor";
      case "grammar":
        return hasSelection ? "selection" : "document";
      case "rewrite":
        return hasSelection ? "selection" : "cursor";
      // Changed from 'end' to support cursor-only
      case "metadata":
        return "document";
      default:
        return "cursor";
    }
  }
  /**
   * Extract additional context from the input
   */
  extractContext(input) {
    const styleIndicators = [
      "formal",
      "informal",
      "casual",
      "professional",
      "academic",
      "technical",
      "simple",
      "complex",
      "detailed",
      "brief",
      "concise",
      "verbose",
      "friendly",
      "serious",
      "humorous",
      "creative",
      "analytical"
    ];
    const foundStyles = styleIndicators.filter(
      (style) => input.toLowerCase().includes(style)
    );
    let context = "";
    if (foundStyles.length > 0) {
      context += `Style: ${foundStyles.join(", ")}. `;
    }
    if (input.includes("short") || input.includes("brief") || input.includes("concise")) {
      context += "Keep it brief. ";
    }
    if (input.includes("long") || input.includes("detailed") || input.includes("comprehensive")) {
      context += "Provide detailed content. ";
    }
    if (input.includes("bullet") || input.includes("list")) {
      context += "Use bullet points or lists. ";
    }
    if (input.includes("example") || input.includes("examples")) {
      context += "Include examples. ";
    }
    if (input.includes("number") || input.includes("numbered")) {
      context += "Use numbered lists. ";
    }
    return context.trim();
  }
  /**
   * Validate if a command can be executed
   */
  validateCommand(command, hasSelection) {
    if (command.target === "selection" && !hasSelection) {
      return {
        valid: false,
        error: "This command requires text to be selected first"
      };
    }
    if (command.action === "add" && command.target === "selection") {
      return {
        valid: false,
        error: 'Cannot add content to a selection. Use "edit" to modify selected text'
      };
    }
    return { valid: true };
  }
  /**
   * Get suggested commands based on context
   */
  getSuggestions(hasSelection) {
    const suggestions = [];
    if (hasSelection) {
      suggestions.push(
        "Make this more concise",
        "Fix grammar in this text",
        "Make this more professional",
        "Expand on this point"
      );
    } else {
      suggestions.push(
        "Add content at cursor",
        "Fix grammar in this document",
        "Add conclusion at end",
        "Create a summary"
      );
    }
    return suggestions;
  }
  /**
   * Parse multiple commands from a single input
   */
  parseMultipleCommands(input) {
    const separators = /\b(?:then|also|and then|after that|next|additionally)\b/i;
    const parts = input.split(separators);
    if (parts.length === 1) {
      return [this.parseCommand(input)];
    }
    return parts.map((part) => part.trim()).filter((part) => part.length > 0).map((part) => this.parseCommand(part));
  }
  /**
   * Get command description for display
   */
  getCommandDescription(command) {
    const { action, target } = command;
    let description = "";
    switch (action) {
      case "add":
        description = "Add new content";
        break;
      case "edit":
        description = "Edit existing content";
        break;
      case "delete":
        description = "Remove content";
        break;
      case "grammar":
        description = "Fix grammar and spelling";
        break;
      case "rewrite":
        description = "Generate new content";
        break;
      case "metadata":
        description = "Update document metadata";
        break;
    }
    switch (target) {
      case "selection":
        description += " in selected text";
        break;
      case "cursor":
        description += " at cursor position";
        break;
      case "document":
        description += " in entire document";
        break;
      case "end":
        description += " at end of document";
        break;
    }
    return description;
  }
};

// src/core/prompt-builder.ts
var PromptBuilder = class {
  constructor(documentEngine, conversationManager) {
    this.contextBuilder = new ContextBuilder();
    this.documentEngine = documentEngine;
    this.conversationManager = conversationManager;
    this.commandParser = new CommandParser();
  }
  /**
   * Build prompt for a user message - determines if it's a command or conversation
   */
  async buildPromptForMessage(message, file, options = {}) {
    const isLikelyCommand = this.isLikelyCommand(message);
    if (isLikelyCommand && file) {
      const parsedCommand = this.commandParser.parseCommand(message);
      return this.buildCommandPrompt(parsedCommand, file, options);
    } else {
      return this.buildConversationPrompt(message, file, options);
    }
  }
  /**
   * Check if a message is likely a command vs conversation
   */
  isLikelyCommand(message) {
    const lowerMessage = message.toLowerCase().trim();
    if (lowerMessage.startsWith(":")) {
      return true;
    }
    const actionVerbs = [
      "add",
      "insert",
      "append",
      "prepend",
      "include",
      "create",
      "write",
      "generate",
      "edit",
      "modify",
      "change",
      "update",
      "revise",
      "improve",
      "enhance",
      "replace",
      "delete",
      "remove",
      "eliminate",
      "cut",
      "erase",
      "drop",
      "fix",
      "correct",
      "proofread",
      "polish",
      "check",
      "rewrite",
      "reword",
      "rephrase",
      "restructure",
      "reorganize"
    ];
    const startsWithAction = actionVerbs.some((verb) => {
      const verbPattern = new RegExp(`^${verb}\\b`, "i");
      return verbPattern.test(lowerMessage);
    });
    if (startsWithAction) {
      const questionIndicators = [
        /^(how|what|why|when|where|which|who|can|could|should|would|will|is|are|am|do|does|did)/i,
        /\?/,
        // Contains question mark
        /\b(help|advice|suggest|recommend|think|opinion)\b/i
      ];
      const isQuestion = questionIndicators.some((pattern) => pattern.test(lowerMessage));
      if (isQuestion) {
        return false;
      }
      return true;
    }
    const explicitCommandPatterns = [
      // Grammar/spelling commands that don't start with action verbs
      /\b(grammar|spell|spelling|proofread|polish)\b.*\b(check|fix|correct)\b/i,
      // Metadata commands with different structures
      /\bset\s+(the\s+)?(title|tags|metadata|properties)/i,
      /\bupdate\s+(the\s+)?(title|tags|metadata|properties)/i,
      // Tag-specific patterns
      /^(add|set|update|remove)\s+tags?:/i,
      /\b(clean up|cleanup|optimize|improve|review|analyze)\s+.*\btags?\b/i,
      /\b(suggest|recommend)\s+.*\btags?\b/i,
      /^add suggested tags$/i
    ];
    for (const pattern of explicitCommandPatterns) {
      if (pattern.test(lowerMessage)) {
        return true;
      }
    }
    return false;
  }
  /**
   * Build prompt for a specific command
   */
  async buildCommandPrompt(command, file, options = {}) {
    if (!file) {
      throw new Error("File is required for command prompts");
    }
    const documentContext = await this.getDocumentContext(file);
    let conversationContext;
    if (options.includeHistory) {
      const recentMessages = await this.conversationManager.getRecentMessages(file, 5);
      conversationContext = this.formatConversationHistory(recentMessages);
    }
    return this.contextBuilder.buildPrompt(command, documentContext, options, conversationContext);
  }
  /**
   * Build prompt for conversation (non-command messages)
   */
  async buildConversationPrompt(message, file, options = {}) {
    let documentContext;
    let recentHistory = [];
    if (file) {
      documentContext = await this.getDocumentContext(file);
      recentHistory = await this.conversationManager.getRecentMessages(file, 5);
    }
    const systemPrompt = `You are Nova, an AI writing partner that helps users with their documents and writing tasks.

Key capabilities:
- Answer questions about documents and content
- Provide writing assistance and suggestions
- Help with research and analysis
- Engage in natural conversation about the user's work

Guidelines:
- Provide helpful, accurate responses
- Stay focused on the user's needs
- Be conversational but professional
- Reference document context when relevant`;
    let userPrompt = `USER REQUEST: ${message}`;
    if (documentContext && file) {
      userPrompt = `Current document: ${documentContext.filename}

${userPrompt}`;
    }
    if (recentHistory.length > 0) {
      const historyString = this.formatConversationHistory(recentHistory);
      userPrompt = `RECENT CONVERSATION:
${historyString}

${userPrompt}`;
    }
    return {
      systemPrompt,
      userPrompt,
      context: (documentContext == null ? void 0 : documentContext.content) || "",
      config: {
        temperature: options.temperature || 0.7,
        maxTokens: options.maxTokens || 2e3
      }
    };
  }
  /**
   * Build simple prompt for basic operations
   */
  buildSimplePrompt(instruction, context) {
    const systemPrompt = `You are Nova, an AI writing partner that helps users with their documents and writing tasks.

Guidelines:
- Provide helpful, accurate responses
- Stay focused on the user's needs
- Be conversational but professional`;
    let userPrompt = `USER REQUEST: ${instruction}`;
    if (context) {
      userPrompt = `Context: ${context}

${userPrompt}`;
    }
    return {
      systemPrompt,
      userPrompt,
      context: context || "",
      config: {
        temperature: 0.7,
        maxTokens: 2e3
      }
    };
  }
  /**
   * Get document context for a file
   */
  async getDocumentContext(file) {
    const context = await this.documentEngine.getDocumentContext();
    if (!context) {
      const content = await this.documentEngine.getDocumentContent() || "";
      return {
        file,
        filename: file.basename,
        content,
        headings: [],
        selectedText: void 0,
        surroundingLines: void 0
      };
    }
    return context;
  }
  /**
   * Format conversation history for context
   */
  formatConversationHistory(messages) {
    if (messages.length === 0) return "";
    let formatted = "RECENT CONVERSATION:\n";
    messages.forEach((msg) => {
      const role = msg.role === "user" ? "You" : "Nova";
      formatted += `${role}: ${msg.content}
`;
    });
    return formatted;
  }
  /**
   * Validate and optimize prompt before sending to AI
   */
  validateAndOptimizePrompt(prompt2) {
    const validation = this.contextBuilder.validatePrompt(prompt2);
    if (!validation.valid) {
      let optimizedPrompt = { ...prompt2 };
      const tokenCount = this.estimateTokenCount(prompt2);
      if (tokenCount > 8e3) {
        const maxContextLength = Math.floor(prompt2.context.length * 0.6);
        optimizedPrompt.context = prompt2.context.substring(0, maxContextLength) + "\n[Context truncated...]";
      }
      if (prompt2.config.temperature < 0 || prompt2.config.temperature > 1) {
        optimizedPrompt.config.temperature = Math.max(0, Math.min(1, prompt2.config.temperature));
      }
      if (prompt2.config.maxTokens < 10 || prompt2.config.maxTokens > 4e3) {
        optimizedPrompt.config.maxTokens = Math.max(10, Math.min(4e3, prompt2.config.maxTokens));
      }
      return optimizedPrompt;
    }
    return prompt2;
  }
  /**
   * Get token count estimate for a prompt
   */
  getTokenCount(prompt2) {
    return this.estimateTokenCount(prompt2);
  }
  /**
   * Create prompt for a specific action with minimal context
   */
  async buildQuickPrompt(action, instruction, file) {
    const command = {
      action,
      target: "document",
      instruction,
      context: void 0
    };
    if (file) {
      return this.buildCommandPrompt(command, file, {
        maxContextLines: 10,
        includeStructure: false,
        includeHistory: false
      });
    } else {
      return this.buildSimplePrompt(instruction);
    }
  }
  /**
   * Simple token count estimation
   */
  estimateTokenCount(prompt2) {
    const totalText = prompt2.systemPrompt + prompt2.userPrompt + prompt2.context;
    return Math.ceil(totalText.length / 4);
  }
  /**
   * Build prompt with custom system prompt override
   */
  async buildCustomPrompt(systemPrompt, userMessage, file) {
    let context = "";
    if (file) {
      const documentContext = await this.getDocumentContext(file);
      context = `Document: ${documentContext.filename}
${documentContext.content}`;
    }
    return {
      systemPrompt,
      userPrompt: userMessage,
      context,
      config: {
        temperature: 0.7,
        maxTokens: 1e3
      }
    };
  }
};

// src/core/commands/add-command.ts
var AddCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute add command
   */
  async execute(command, streamingCallback) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "insert"
        };
      }
      const validation = this.validateCommand(command);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "insert"
        };
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt2 = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const promptValidation = this.contextBuilder.validatePrompt(prompt2);
      if (!promptValidation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${promptValidation.issues.join(", ")}`,
          editType: "insert"
        };
      }
      try {
        let content;
        let result;
        if (streamingCallback) {
          result = await this.executeWithStreaming(command, documentContext, prompt2, streamingCallback);
        } else {
          content = await this.providerManager.generateText(
            prompt2.userPrompt,
            {
              systemPrompt: prompt2.systemPrompt,
              temperature: prompt2.config.temperature,
              maxTokens: prompt2.config.maxTokens
            }
          );
          if (!content || content.trim().length === 0) {
            return {
              success: false,
              error: "AI provider returned empty content",
              editType: "insert"
            };
          }
          result = await this.applyAddition(command, documentContext, content);
        }
        return result;
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : "AI generation failed",
          editType: "insert"
        };
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "insert"
      };
    }
  }
  /**
   * Apply addition based on command target
   */
  async applyAddition(command, documentContext, content) {
    switch (command.target) {
      case "cursor":
        return await this.documentEngine.applyEdit(
          content,
          "cursor",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "end":
        return await this.documentEngine.applyEdit(
          content,
          "end",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "document":
        return await this.documentEngine.applyEdit(
          content,
          "end",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "selection":
        if (documentContext.selectedText) {
          return await this.documentEngine.applyEdit(
            content,
            "selection",
            {
              scrollToEdit: true,
              selectNewText: true
            }
          );
        } else {
          return await this.documentEngine.applyEdit(
            content,
            "cursor",
            {
              scrollToEdit: true,
              selectNewText: true
            }
          );
        }
      default:
        return {
          success: false,
          error: `Invalid add target: ${command.target}`,
          editType: "insert"
        };
    }
  }
  /**
   * Validate add command
   */
  validateCommand(command) {
    if (command.action !== "add") {
      return {
        valid: false,
        error: "Command action must be add"
      };
    }
    if (!command.instruction || command.instruction.trim().length === 0) {
      return {
        valid: false,
        error: "Add instruction is required"
      };
    }
    return { valid: true };
  }
  /**
   * Execute add command with streaming support
   */
  async executeWithStreaming(command, documentContext, prompt2, streamingCallback) {
    try {
      let fullContent = "";
      const stream = this.providerManager.generateTextStream(
        prompt2.userPrompt,
        {
          systemPrompt: prompt2.systemPrompt,
          temperature: prompt2.config.temperature,
          maxTokens: prompt2.config.maxTokens
        }
      );
      for await (const chunk of stream) {
        if (chunk.content) {
          fullContent += chunk.content;
          streamingCallback(fullContent, false);
        }
      }
      streamingCallback(fullContent, true);
      if (!fullContent || fullContent.trim().length === 0) {
        return {
          success: false,
          error: "AI provider returned empty content",
          editType: "insert"
        };
      }
      return {
        success: true,
        content: fullContent,
        editType: "insert",
        appliedAt: documentContext.cursorPosition || { line: 0, ch: 0 }
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Streaming failed",
        editType: "insert"
      };
    }
  }
};

// src/core/commands/edit-command.ts
var EditCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute edit command
   */
  async execute(command, streamingCallback) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "replace"
        };
      }
      const validation = this.validateCommand(command, !!documentContext.selectedText);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "replace"
        };
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt2 = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const promptValidation = this.contextBuilder.validatePrompt(prompt2);
      if (!promptValidation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${promptValidation.issues.join(", ")}`,
          editType: "replace"
        };
      }
      try {
        let content;
        let result;
        if (streamingCallback) {
          result = await this.executeWithStreaming(command, documentContext, prompt2, streamingCallback);
        } else {
          content = await this.providerManager.generateText(
            prompt2.userPrompt,
            {
              systemPrompt: prompt2.systemPrompt,
              temperature: prompt2.config.temperature,
              maxTokens: prompt2.config.maxTokens
            }
          );
          if (!content || content.trim().length === 0) {
            return {
              success: false,
              error: "AI provider returned empty content",
              editType: "replace"
            };
          }
          result = await this.applyEdit(command, documentContext, content);
        }
        return result;
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : "AI generation failed",
          editType: "replace"
        };
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
  /**
   * Apply edit based on command target
   */
  async applyEdit(command, documentContext, content) {
    switch (command.target) {
      case "selection":
        if (documentContext.selectedText) {
          return await this.documentEngine.applyEdit(
            content,
            "selection",
            {
              scrollToEdit: true,
              selectNewText: true
            }
          );
        } else {
          return {
            success: false,
            error: "No text selected for editing",
            editType: "replace"
          };
        }
      case "cursor":
        return await this.documentEngine.applyEdit(
          content,
          "cursor",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "document":
        return await this.documentEngine.setDocumentContent(content);
      case "end":
        return await this.documentEngine.applyEdit(
          content,
          "end",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      default:
        return {
          success: false,
          error: `Invalid edit target: ${command.target}`,
          editType: "replace"
        };
    }
  }
  /**
   * Validate edit command
   */
  validateCommand(command, hasSelection) {
    if (command.target === "selection" && !hasSelection) {
      return {
        valid: false,
        error: "Please select text to edit"
      };
    }
    if (command.action !== "edit") {
      return {
        valid: false,
        error: "Command action must be edit"
      };
    }
    if (!command.instruction || command.instruction.trim().length === 0) {
      return {
        valid: false,
        error: "Edit instruction is required"
      };
    }
    return { valid: true };
  }
  /**
   * Execute edit command with streaming support
   */
  async executeWithStreaming(command, documentContext, prompt2, streamingCallback) {
    try {
      let fullContent = "";
      const stream = this.providerManager.generateTextStream(
        prompt2.userPrompt,
        {
          systemPrompt: prompt2.systemPrompt,
          temperature: prompt2.config.temperature,
          maxTokens: prompt2.config.maxTokens
        }
      );
      for await (const chunk of stream) {
        if (chunk.content) {
          fullContent += chunk.content;
          streamingCallback(fullContent, false);
        }
      }
      streamingCallback(fullContent, true);
      if (!fullContent || fullContent.trim().length === 0) {
        return {
          success: false,
          error: "AI provider returned empty content",
          editType: "replace"
        };
      }
      return {
        success: true,
        content: fullContent,
        editType: "replace",
        appliedAt: documentContext.cursorPosition || { line: 0, ch: 0 }
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Streaming failed",
        editType: "replace"
      };
    }
  }
};

// src/core/commands/delete-command.ts
var DeleteCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute delete command
   */
  async execute(command) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "delete"
        };
      }
      const validation = this.validateCommand(command, !!documentContext.selectedText);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "delete"
        };
      }
      const result = await this.applyDeletion(command, documentContext);
      return result;
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "delete"
      };
    }
  }
  /**
   * Apply deletion based on command target
   */
  async applyDeletion(command, documentContext) {
    switch (command.target) {
      case "selection":
        if (documentContext.selectedText) {
          return await this.documentEngine.applyEdit(
            "",
            "selection",
            {
              scrollToEdit: true,
              selectNewText: false
            }
          );
        } else {
          return {
            success: false,
            error: "No text selected for deletion",
            editType: "delete"
          };
        }
      case "cursor":
        return await this.documentEngine.deleteContent("line");
      case "document":
        return await this.documentEngine.setDocumentContent("");
      case "end":
        return {
          success: false,
          error: "Cannot delete from end - use cursor or selection instead",
          editType: "delete"
        };
      default:
        return {
          success: false,
          error: `Invalid delete target: ${command.target}`,
          editType: "delete"
        };
    }
  }
  /**
   * Validate delete command
   */
  validateCommand(command, hasSelection) {
    if (command.target === "selection" && !hasSelection) {
      return {
        valid: false,
        error: "Please select text to delete"
      };
    }
    if (command.action !== "delete") {
      return {
        valid: false,
        error: "Command action must be delete"
      };
    }
    return { valid: true };
  }
};

// src/core/commands/grammar-command.ts
var GrammarCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute grammar command
   */
  async execute(command, streamingCallback) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "replace"
        };
      }
      const validation = this.validateCommand(command, !!documentContext.selectedText);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "replace"
        };
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt2 = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const promptValidation = this.contextBuilder.validatePrompt(prompt2);
      if (!promptValidation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${promptValidation.issues.join(", ")}`,
          editType: "replace"
        };
      }
      try {
        let content;
        let result;
        if (streamingCallback) {
          result = await this.executeWithStreaming(command, documentContext, prompt2, streamingCallback);
        } else {
          content = await this.providerManager.generateText(
            prompt2.userPrompt,
            {
              systemPrompt: prompt2.systemPrompt,
              temperature: prompt2.config.temperature,
              maxTokens: prompt2.config.maxTokens
            }
          );
          if (!content || content.trim().length === 0) {
            return {
              success: false,
              error: "AI provider returned empty content",
              editType: "replace"
            };
          }
          result = await this.applyGrammarFix(command, documentContext, content);
        }
        return result;
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : "AI generation failed",
          editType: "replace"
        };
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
  /**
   * Apply grammar fix based on command target
   */
  async applyGrammarFix(command, documentContext, content) {
    switch (command.target) {
      case "selection":
        if (documentContext.selectedText) {
          return await this.documentEngine.applyEdit(
            content,
            "selection",
            {
              scrollToEdit: true,
              selectNewText: true
            }
          );
        } else {
          return {
            success: false,
            error: "No text selected for grammar correction",
            editType: "replace"
          };
        }
      case "document":
        return await this.documentEngine.setDocumentContent(content);
      case "cursor":
        return {
          success: false,
          error: 'Please select text to correct grammar, or use "document" to fix entire document',
          editType: "replace"
        };
      case "end":
        return {
          success: false,
          error: 'Grammar correction requires selecting text or specifying "document"',
          editType: "replace"
        };
      default:
        return {
          success: false,
          error: `Invalid grammar target: ${command.target}`,
          editType: "replace"
        };
    }
  }
  /**
   * Validate grammar command
   */
  validateCommand(command, hasSelection) {
    if (command.action !== "grammar") {
      return {
        valid: false,
        error: "Command action must be grammar"
      };
    }
    if (command.target === "selection" && !hasSelection) {
      return {
        valid: false,
        error: "Please select text to correct grammar"
      };
    }
    if (command.target !== "selection" && command.target !== "document") {
      return {
        valid: false,
        error: "Grammar correction requires selecting text or targeting entire document"
      };
    }
    return { valid: true };
  }
  /**
   * Execute grammar command with streaming support
   */
  async executeWithStreaming(command, documentContext, prompt2, streamingCallback) {
    try {
      let fullContent = "";
      const stream = this.providerManager.generateTextStream(
        prompt2.userPrompt,
        {
          systemPrompt: prompt2.systemPrompt,
          temperature: prompt2.config.temperature,
          maxTokens: prompt2.config.maxTokens
        }
      );
      for await (const chunk of stream) {
        if (chunk.content) {
          fullContent += chunk.content;
          streamingCallback(fullContent, false);
        }
      }
      streamingCallback(fullContent, true);
      if (!fullContent || fullContent.trim().length === 0) {
        return {
          success: false,
          error: "AI provider returned empty content",
          editType: "replace"
        };
      }
      return {
        success: true,
        content: fullContent,
        editType: "replace",
        appliedAt: documentContext.cursorPosition || { line: 0, ch: 0 }
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Streaming failed",
        editType: "replace"
      };
    }
  }
};

// src/core/commands/rewrite-command.ts
var RewriteCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute rewrite command
   */
  async execute(command, streamingCallback) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "replace"
        };
      }
      const validation = this.validateCommand(command);
      if (!validation.valid) {
        return {
          success: false,
          error: validation.error,
          editType: "replace"
        };
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt2 = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const promptValidation = this.contextBuilder.validatePrompt(prompt2);
      if (!promptValidation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${promptValidation.issues.join(", ")}`,
          editType: "replace"
        };
      }
      try {
        let content;
        let result;
        if (streamingCallback) {
          result = await this.executeWithStreaming(command, documentContext, prompt2, streamingCallback);
        } else {
          content = await this.providerManager.generateText(
            prompt2.userPrompt,
            {
              systemPrompt: prompt2.systemPrompt,
              temperature: prompt2.config.temperature,
              maxTokens: prompt2.config.maxTokens
            }
          );
          if (!content || content.trim().length === 0) {
            return {
              success: false,
              error: "AI provider returned empty content",
              editType: "replace"
            };
          }
          result = await this.applyRewrite(command, documentContext, content);
        }
        return result;
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : "AI generation failed",
          editType: "replace"
        };
      }
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Unknown error",
        editType: "replace"
      };
    }
  }
  /**
   * Apply rewrite based on command target
   */
  async applyRewrite(command, documentContext, content) {
    switch (command.target) {
      case "document":
        return await this.documentEngine.setDocumentContent(content);
      case "end":
        return await this.documentEngine.applyEdit(
          content,
          "end",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      case "selection":
        if (documentContext.selectedText) {
          return await this.documentEngine.applyEdit(
            content,
            "selection",
            {
              scrollToEdit: true,
              selectNewText: true
            }
          );
        } else {
          return {
            success: false,
            error: "No text selected for rewriting",
            editType: "replace"
          };
        }
      case "cursor":
        return await this.documentEngine.applyEdit(
          content,
          "cursor",
          {
            scrollToEdit: true,
            selectNewText: true
          }
        );
      default:
        return {
          success: false,
          error: `Invalid rewrite target: ${command.target}`,
          editType: "replace"
        };
    }
  }
  /**
   * Validate rewrite command
   */
  validateCommand(command) {
    if (command.action !== "rewrite") {
      return {
        valid: false,
        error: "Command action must be rewrite"
      };
    }
    if (!command.instruction || command.instruction.trim().length === 0) {
      return {
        valid: false,
        error: "Rewrite instruction is required"
      };
    }
    return { valid: true };
  }
  /**
   * Execute rewrite command with streaming support
   */
  async executeWithStreaming(command, documentContext, prompt2, streamingCallback) {
    try {
      let fullContent = "";
      const stream = this.providerManager.generateTextStream(
        prompt2.userPrompt,
        {
          systemPrompt: prompt2.systemPrompt,
          temperature: prompt2.config.temperature,
          maxTokens: prompt2.config.maxTokens
        }
      );
      for await (const chunk of stream) {
        if (chunk.content) {
          fullContent += chunk.content;
          streamingCallback(fullContent, false);
        }
      }
      streamingCallback(fullContent, true);
      if (!fullContent || fullContent.trim().length === 0) {
        return {
          success: false,
          error: "AI provider returned empty content",
          editType: "replace"
        };
      }
      return {
        success: true,
        content: fullContent,
        editType: "replace",
        appliedAt: documentContext.cursorPosition || { line: 0, ch: 0 }
      };
    } catch (error) {
      return {
        success: false,
        error: error instanceof Error ? error.message : "Streaming failed",
        editType: "replace"
      };
    }
  }
};

// src/core/commands/metadata-command.ts
var MetadataCommand = class {
  constructor(app, documentEngine, contextBuilder, providerManager) {
    this.app = app;
    this.documentEngine = documentEngine;
    this.contextBuilder = contextBuilder;
    this.providerManager = providerManager;
  }
  /**
   * Execute a metadata update command
   */
  async execute(command) {
    try {
      const documentContext = await this.documentEngine.getDocumentContext();
      if (!documentContext) {
        return {
          success: false,
          error: "No active document found",
          editType: "replace"
        };
      }
      const tagResult = await this.handleDirectTagOperation(command.instruction, documentContext);
      if (tagResult) {
        return tagResult;
      }
      const conversationContext = this.documentEngine.getConversationContext();
      const promptConfig = conversationContext ? { includeHistory: true } : {};
      const prompt2 = this.contextBuilder.buildPrompt(command, documentContext, promptConfig, conversationContext);
      const validation = this.contextBuilder.validatePrompt(prompt2);
      if (!validation.valid) {
        return {
          success: false,
          error: `Prompt validation failed: ${validation.issues.join(", ")}`,
          editType: "replace"
        };
      }
      const aiResponse = await this.providerManager.complete(
        prompt2.systemPrompt,
        prompt2.userPrompt,
        {
          temperature: prompt2.config.temperature,
          maxTokens: prompt2.config.maxTokens
        }
      );
      const updates = this.parsePropertyUpdates(aiResponse);
      if (!updates || Object.keys(updates).length === 0) {
        console.error("Failed to parse metadata updates. AI response:", aiResponse);
        return {
          success: false,
          error: "No property updates found in AI response",
          editType: "replace"
        };
      }
      console.log("Metadata updates:", updates);
      const updatedContent = this.updateFrontmatter(documentContext.content, updates);
      await this.app.vault.modify(documentContext.file, updatedContent);
      const successMessage = this.generateSuccessMessage(updates);
      return {
        success: true,
        content: updatedContent,
        appliedAt: { line: 0, ch: 0 },
        editType: "replace",
        successMessage
      };
    } catch (error) {
      return {
        success: false,
        error: `Failed to update metadata: ${error.message}`,
        editType: "replace"
      };
    }
  }
  /**
   * Parse AI response to extract property updates
   */
  parsePropertyUpdates(response) {
    try {
      const jsonMatch = response.match(/```json\s*([\s\S]*?)\s*```/);
      if (jsonMatch) {
        return JSON.parse(jsonMatch[1]);
      }
      const updates = {};
      const lines = response.split("\n");
      for (const line of lines) {
        const match = line.match(/^[-\s]*([^:]+):\s*(.+)$/);
        if (match) {
          const key = match[1].trim();
          let value = match[2].trim();
          try {
            value = JSON.parse(value);
          } catch (e) {
            if (value.startsWith('"') && value.endsWith('"') || value.startsWith("'") && value.endsWith("'")) {
              value = value.slice(1, -1);
            }
          }
          updates[key] = value;
        }
      }
      return Object.keys(updates).length > 0 ? updates : null;
    } catch (error) {
      return null;
    }
  }
  /**
   * Update or create frontmatter in document content
   */
  updateFrontmatter(content, updates) {
    const lines = content.split("\n");
    if (lines[0] === "---") {
      let endIndex = -1;
      for (let i = 1; i < lines.length; i++) {
        if (lines[i] === "---") {
          endIndex = i;
          break;
        }
      }
      if (endIndex > 0) {
        const existingProps = {};
        for (let i = 1; i < endIndex; i++) {
          const match = lines[i].match(/^([^:]+):\s*(.*)$/);
          if (match) {
            const key = match[1].trim();
            let value = match[2].trim();
            try {
              value = JSON.parse(value);
            } catch (e) {
            }
            existingProps[key] = value;
          }
        }
        const mergedProps = { ...existingProps, ...updates };
        const newFrontmatter2 = ["---"];
        for (const [key, value] of Object.entries(mergedProps)) {
          if (value === null || value === void 0) {
            continue;
          }
          const formattedValue = typeof value === "object" ? JSON.stringify(value) : String(value);
          newFrontmatter2.push(`${key}: ${formattedValue}`);
        }
        newFrontmatter2.push("---");
        return [
          ...newFrontmatter2,
          ...lines.slice(endIndex + 1)
        ].join("\n");
      }
    }
    const newFrontmatter = ["---"];
    for (const [key, value] of Object.entries(updates)) {
      if (value === null || value === void 0) {
        continue;
      }
      const formattedValue = typeof value === "object" ? JSON.stringify(value) : String(value);
      newFrontmatter.push(`${key}: ${formattedValue}`);
    }
    newFrontmatter.push("---", "");
    return newFrontmatter.join("\n") + content;
  }
  /**
   * Handle direct tag operations (add, remove, set tags)
   */
  async handleDirectTagOperation(instruction, documentContext) {
    const lowerInstruction = instruction.toLowerCase().trim();
    const colonMatch = lowerInstruction.match(/^(add|set|update|remove)\s+tags?:\s*(.*)$/);
    if (colonMatch) {
      const action = colonMatch[1];
      const tagString = colonMatch[2];
      const newTags = tagString ? tagString.split(",").map((t) => t.trim()).filter((t) => t) : [];
      if (action === "add" && newTags.length === 0) {
        return await this.handleAITagOperation("add suggested tags", documentContext);
      }
      const currentTags = this.getCurrentTags(documentContext.content);
      let updatedTags = [];
      let message = "";
      switch (action) {
        case "add":
          const tagsToAdd = newTags.filter(
            (tag) => !currentTags.some((existing) => existing.toLowerCase() === tag.toLowerCase())
          );
          updatedTags = [...currentTags, ...tagsToAdd];
          message = tagsToAdd.length > 0 ? `Added ${tagsToAdd.length} tag${tagsToAdd.length !== 1 ? "s" : ""}: ${tagsToAdd.join(", ")}` : "No new tags to add (duplicates filtered)";
          break;
        case "remove":
          const lowerNewTags = newTags.map((t) => t.toLowerCase());
          const beforeCount = currentTags.length;
          updatedTags = currentTags.filter(
            (tag) => !lowerNewTags.includes(tag.toLowerCase())
          );
          const removedCount = beforeCount - updatedTags.length;
          message = removedCount > 0 ? `Removed ${removedCount} tag${removedCount !== 1 ? "s" : ""}` : "No tags found to remove";
          break;
        case "set":
        case "update":
          updatedTags = [...new Set(newTags.map((t) => t.toLowerCase()))];
          message = `Set ${updatedTags.length} tag${updatedTags.length !== 1 ? "s" : ""}`;
          break;
      }
      const updates = { tags: updatedTags };
      const updatedContent = this.updateFrontmatter(documentContext.content, updates);
      await this.app.vault.modify(documentContext.file, updatedContent);
      return {
        success: true,
        content: updatedContent,
        appliedAt: { line: 0, ch: 0 },
        editType: "replace",
        successMessage: message
      };
    }
    if (/\b(clean up|cleanup|optimize|improve|review|analyze)\s+.*\btags?\b/i.test(lowerInstruction) || /\b(suggest|recommend)\s+.*\btags?\b/i.test(lowerInstruction) || /^add suggested tags$/i.test(lowerInstruction) || /^add tags$/i.test(lowerInstruction) || // Handle simple "add tags" as AI suggestion
    /^update tags$/i.test(lowerInstruction)) {
      return await this.handleAITagOperation(instruction, documentContext);
    }
    return null;
  }
  /**
   * Handle AI-powered tag operations (suggest, optimize, clean up)
   */
  async handleAITagOperation(instruction, documentContext) {
    const currentTags = this.getCurrentTags(documentContext.content);
    const systemPrompt = `You are an expert at document tagging and metadata organization. Your task is to analyze documents and provide optimal tags.

Rules for tags:
- Tags should be lowercase
- Use hyphens for multi-word tags (e.g., "machine-learning")
- Be specific but not overly granular
- Aim for 5-10 tags per document
- Focus on key concepts, topics, and themes FROM THE ACTUAL DOCUMENT CONTENT
- Tags must be directly relevant to the document's subject matter
- Avoid generic tags like "document" or "text"
- Consider the document's purpose, audience, and main topics
- Extract tags based on the document's actual content, not random topics

IMPORTANT: Base your tag suggestions ONLY on the content provided. Do not invent unrelated tags.

Return ONLY a JSON object with a "tags" array and a "reasoning" field explaining your choices.`;
    let userPrompt = "";
    if (/add suggested/i.test(instruction) || /^add tags$/i.test(instruction)) {
      userPrompt = `Carefully analyze the following document and suggest relevant tags based on its actual content.

Current tags: ${currentTags.length > 0 ? currentTags.join(", ") : "none"}

DOCUMENT TO ANALYZE:
===START OF DOCUMENT===
${documentContext.content}
===END OF DOCUMENT===

Based on the above document content, suggest additional tags that:
1. Reflect the actual topics discussed in the document
2. Capture key concepts, technologies, or themes mentioned
3. Would help with discoverability and organization
4. Are directly relevant to what this document is about

DO NOT suggest tags about topics not mentioned in the document.`;
    } else if (/clean up|cleanup/i.test(instruction)) {
      userPrompt = `Clean up and optimize the tags for this document by analyzing both the current tags and the document content.

Current tags: ${currentTags.join(", ")}

DOCUMENT CONTENT:
===START OF DOCUMENT===
${documentContext.content}
===END OF DOCUMENT===

Tasks:
1. Remove duplicate or redundant tags
2. Consolidate similar tags (e.g., "js" and "javascript")
3. Remove tags that aren't relevant to the document content
4. Standardize tag format (lowercase, hyphenated)
5. Ensure remaining tags accurately reflect the document

Provide a cleaned-up tag list based on the actual document content.`;
    } else if (/optimize|improve|review|analyze|update/i.test(instruction)) {
      userPrompt = `Analyze this document thoroughly and provide an optimized set of tags that accurately represents its content.

Current tags: ${currentTags.length > 0 ? currentTags.join(", ") : "none"}

DOCUMENT TO ANALYZE:
===START OF DOCUMENT===
${documentContext.content}
===END OF DOCUMENT===

Tasks:
1. Review the document content carefully
2. Remove any tags that aren't relevant to the actual content
3. Add tags for important concepts, topics, or themes that are missing
4. Ensure all tags directly relate to what's discussed in the document
5. Aim for 5-10 highly relevant tags

Provide an optimized tag list that best represents THIS SPECIFIC document's content.`;
    }
    try {
      const defaultMaxTokens = this.providerManager.getDefaultMaxTokens();
      const aiResponse = await this.providerManager.complete(systemPrompt, userPrompt, {
        temperature: 0.3,
        maxTokens: defaultMaxTokens
      });
      const parsed = this.parseAITagResponse(aiResponse);
      if (!parsed || !parsed.tags || parsed.tags.length === 0) {
        const preview = aiResponse.length > 100 ? aiResponse.substring(0, 100) + "..." : aiResponse;
        return {
          success: false,
          error: `Could not parse AI tag suggestions. AI response: "${preview}"`,
          editType: "replace"
        };
      }
      const updates = { tags: parsed.tags };
      const updatedContent = this.updateFrontmatter(documentContext.content, updates);
      await this.app.vault.modify(documentContext.file, updatedContent);
      let message = "";
      if (/add suggested/i.test(instruction) || /^add tags$/i.test(instruction)) {
        const addedTags = parsed.tags.filter(
          (tag) => !currentTags.some((existing) => existing.toLowerCase() === tag.toLowerCase())
        );
        message = `Added ${addedTags.length} suggested tag${addedTags.length !== 1 ? "s" : ""}: ${addedTags.join(", ")}`;
      } else if (/clean up|cleanup/i.test(instruction)) {
        message = `Cleaned up tags: ${currentTags.length} \u2192 ${parsed.tags.length} tags`;
      } else {
        message = `Optimized tags: ${parsed.tags.length} tag${parsed.tags.length !== 1 ? "s" : ""} (was ${currentTags.length})`;
      }
      return {
        success: true,
        content: updatedContent,
        appliedAt: { line: 0, ch: 0 },
        editType: "replace",
        successMessage: message
      };
    } catch (error) {
      return {
        success: false,
        error: `Failed to process tag operation: ${error.message}`,
        editType: "replace"
      };
    }
  }
  /**
   * Get current tags from document content
   */
  getCurrentTags(content) {
    if (!content) return [];
    const lines = content.split("\n");
    if (lines.length > 0 && lines[0] === "---") {
      let inFrontmatter = true;
      for (let i = 1; i < lines.length && inFrontmatter; i++) {
        if (lines[i] === "---") {
          break;
        }
        const tagMatch = lines[i].match(/^tags:\s*(.*)$/);
        if (tagMatch) {
          const tagValue = tagMatch[1].trim();
          if (!tagValue) return [];
          try {
            const parsed = JSON.parse(tagValue);
            if (Array.isArray(parsed)) {
              return parsed.filter((t) => t);
            }
          } catch (e) {
            return tagValue.split(",").map((t) => t.trim()).filter((t) => t);
          }
        }
      }
    }
    return [];
  }
  /**
   * Parse AI response for tag operations
   */
  parseAITagResponse(response) {
    try {
      const cleanResponse = response.trim();
      const jsonMatch = cleanResponse.match(/\{[\s\S]*\}/);
      if (jsonMatch) {
        try {
          const parsed = JSON.parse(jsonMatch[0]);
          if (parsed.tags && Array.isArray(parsed.tags)) {
            return {
              tags: parsed.tags.map((t) => String(t).toLowerCase().trim().replace(/\s+/g, "-")).filter((t) => t),
              reasoning: parsed.reasoning
            };
          }
        } catch (e) {
        }
      }
      const patterns = [
        // JSON array: tags: ["tag1", "tag2"]
        /tags?:\s*\[([^\]]+)\]/i,
        // Comma list: Tags: tag1, tag2, tag3
        /tags?:\s*([^\n]+?)(?:\n|$)/i,
        // Bullet list: - tag1\n- tag2
        /(?:tags?:)?\s*(?:\n)?(\s*[-•*]\s*.+(?:\n\s*[-•*]\s*.+)*)/i
      ];
      for (const pattern of patterns) {
        const match = cleanResponse.match(pattern);
        if (match) {
          let tagString = match[1];
          let tags = [];
          if (tagString.includes("-") || tagString.includes("\u2022") || tagString.includes("*")) {
            tags = tagString.split(/\n/).map((line) => line.replace(/^\s*[-•*]\s*/, "").trim()).filter((t) => t);
          } else {
            tags = tagString.split(",").map((t) => t.trim().replace(/["']/g, "")).filter((t) => t);
          }
          if (tags.length > 0) {
            return {
              tags: tags.map((t) => t.toLowerCase().trim().replace(/\s+/g, "-")).filter((t) => t)
            };
          }
        }
      }
      const suggestMatch = cleanResponse.match(/(?:suggest|recommend|propose|here are|tags are)[:\s]+([^.]+)/i);
      if (suggestMatch) {
        const tags = suggestMatch[1].split(/[,\n]/).map((t) => t.trim().replace(/["']/g, "").replace(/^and\s+/i, "")).filter((t) => t);
        if (tags.length > 0) {
          return {
            tags: tags.map((t) => t.toLowerCase().trim()).filter((t) => t)
          };
        }
      }
      const lines = cleanResponse.split("\n").map((line) => line.trim()).filter((line) => line);
      const validTags = lines.filter((line) => {
        return line.length > 0 && line.length < 50 && !line.includes(":") && !line.toLowerCase().includes("tag") && !line.toLowerCase().includes("here") && !line.toLowerCase().includes("suggest");
      }).map((line) => {
        return line.toLowerCase().replace(/^[-•*#]\s*/, "").replace(/^\d+\.\s*/, "").trim().replace(/\s+/g, "-");
      }).filter((tag) => tag);
      if (validTags.length > 0) {
        return { tags: validTags };
      }
      console.error("Failed to parse AI tag response:", cleanResponse);
      return null;
    } catch (error) {
      console.error("Error parsing AI tag response:", error, "Response was:", response);
      return null;
    }
  }
  /**
   * Generate success message based on updates
   */
  generateSuccessMessage(updates) {
    const keys = Object.keys(updates);
    if (keys.length === 0) return "Metadata updated";
    if (keys.length === 1) {
      const key = keys[0];
      if (key === "tags") {
        const count = Array.isArray(updates.tags) ? updates.tags.length : 0;
        return `Updated tags (${count} tag${count !== 1 ? "s" : ""})`;
      }
      return `Updated ${key}`;
    }
    return `Updated ${keys.length} properties`;
  }
};

// src/licensing/feature-config.ts
var SUPERNOVA_FEATURES = {
  // Commands (unified) - 2 month early access
  "commands": {
    supernovaDate: "2025-07-31",
    // Supernova early access
    generalDate: "2025-09-30",
    // General availability 
    description: "Command system with : triggers, command button, and custom commands"
  },
  // Auto-growing input - 1 month early access
  "auto-input": {
    supernovaDate: "2025-06-15",
    // Launch day
    generalDate: "2025-07-15",
    // 1 month later
    description: "Auto-growing input area with smooth transitions"
  },
  // Enhanced provider management - 2 month early access
  "enhanced-providers": {
    supernovaDate: "2025-06-15",
    // Launch day
    generalDate: "2025-08-15",
    // 2 months later
    description: "Advanced provider configuration and switching"
  }
};
var CORE_FEATURES = {
  "basic_editing": {
    description: "Basic document editing commands (add, edit, delete, grammar, rewrite)"
  },
  "all_ai_providers": {
    description: "Access to all AI providers (Claude, OpenAI, Google, Ollama)"
  },
  "file_conversations": {
    description: "File-scoped conversation history"
  },
  "provider_switching": {
    description: "Switch AI providers directly in chat interface"
  },
  "mobile_access": {
    description: "Full mobile device support"
  },
  "api_key_config": {
    description: "Configure your own API keys"
  },
  "sidebar_chat": {
    description: "Chat interface in sidebar"
  },
  "document_context": {
    description: "Current document context in conversations"
  },
  "multi-doc-context": {
    description: "Reference other documents with [[doc]] syntax"
  }
};

// src/licensing/feature-manager.ts
var FeatureManager = class {
  constructor(licenseValidator, debugSettings) {
    this.licenseValidator = licenseValidator;
    this.features = /* @__PURE__ */ new Map();
    this.supernovaLicense = null;
    this.isSupernova = false;
    this.debugSettings = { enabled: false };
    if (debugSettings) {
      this.debugSettings = debugSettings;
    }
    this.initializeFeatureFlags();
  }
  /**
   * Initialize all feature flags
   * Core features are always enabled
   * Time-gated features depend on current date and Supernova status
   */
  initializeFeatureFlags() {
    Object.entries(CORE_FEATURES).forEach(([key, config]) => {
      this.registerFeature({
        key,
        enabled: true,
        description: config.description
      });
    });
    Object.entries(SUPERNOVA_FEATURES).forEach(([key, config]) => {
      const enabled = this.isTimeGatedFeatureEnabled(key, config);
      this.registerFeature({
        key,
        enabled,
        description: config.description,
        isTimeGated: true,
        earlyAccessOnly: !this.isGenerallyAvailable(config)
      });
    });
  }
  /**
   * Check if a time-gated feature should be enabled
   */
  isTimeGatedFeatureEnabled(featureKey, config) {
    const now = this.getCurrentDate();
    const supernovaDate = new Date(config.supernovaDate);
    const generalDate = new Date(config.generalDate);
    if (now >= generalDate) {
      return true;
    }
    if (this.getIsSupernova() && now >= supernovaDate) {
      return true;
    }
    return false;
  }
  /**
   * Check if feature is generally available (past general date)
   */
  isGenerallyAvailable(config) {
    const now = this.getCurrentDate();
    const generalDate = new Date(config.generalDate);
    return now >= generalDate;
  }
  /**
   * Get current date (can be overridden in debug mode)
   */
  getCurrentDate() {
    if (this.debugSettings.enabled && this.debugSettings.overrideDate) {
      return new Date(this.debugSettings.overrideDate);
    }
    return /* @__PURE__ */ new Date();
  }
  /**
   * Get Supernova status (can be overridden in debug mode)
   */
  getIsSupernova() {
    if (this.debugSettings.enabled && this.debugSettings.forceSupernova !== void 0) {
      return this.debugSettings.forceSupernova;
    }
    return this.isSupernova;
  }
  /**
   * Register a new feature flag
   */
  registerFeature(flag) {
    this.features.set(flag.key, flag);
  }
  /**
   * Update Supernova license and recalculate feature availability
   */
  async updateSupernovaLicense(licenseKey) {
    if (!licenseKey) {
      this.supernovaLicense = null;
      this.isSupernova = false;
    } else {
      const validation = await this.licenseValidator.validateSupernovaLicense(licenseKey);
      if (validation.valid && validation.license) {
        this.supernovaLicense = validation.license;
        this.isSupernova = true;
      } else {
        this.supernovaLicense = null;
        this.isSupernova = false;
      }
    }
    this.initializeFeatureFlags();
  }
  /**
   * Get current Supernova status
   */
  isSupernovaSupporter() {
    return this.getIsSupernova();
  }
  /**
   * Get current Supernova license
   */
  getSupernovaLicense() {
    return this.supernovaLicense;
  }
  /**
   * Check if a feature is enabled
   */
  isFeatureEnabled(featureKey) {
    var _a;
    if (this.isLegacyFeatureKey(featureKey)) {
      return true;
    }
    const feature = this.features.get(featureKey);
    return (_a = feature == null ? void 0 : feature.enabled) != null ? _a : false;
  }
  /**
   * Check if this is a legacy feature key that should always be enabled
   */
  isLegacyFeatureKey(key) {
    const legacyKeys = [
      "basic_editing",
      "local_ai_providers",
      "file_conversations",
      "single_cloud_provider",
      "unlimited_cloud_ai",
      "provider_switching",
      "mobile_access",
      "advanced_templates",
      "batch_operations",
      "cross_document_context",
      "priority_support"
    ];
    return legacyKeys.includes(key);
  }
  /**
   * Check feature access with detailed result
   */
  checkFeatureAccess(featureKey) {
    if (this.isLegacyFeatureKey(featureKey)) {
      return { allowed: true };
    }
    const feature = this.features.get(featureKey);
    if (!feature) {
      return {
        allowed: false,
        reason: `Feature '${featureKey}' not found`
      };
    }
    if (feature.enabled) {
      return { allowed: true };
    }
    if (feature.isTimeGated) {
      const config = SUPERNOVA_FEATURES[featureKey];
      if (config) {
        const now = this.getCurrentDate();
        const generalDate = new Date(config.generalDate);
        const supernovaDate = new Date(config.supernovaDate);
        if (this.getIsSupernova() && now < supernovaDate) {
          return {
            allowed: false,
            reason: `This feature will be available to Supernova supporters on ${config.supernovaDate}`,
            isSupernovaFeature: true,
            availableDate: supernovaDate
          };
        } else if (!this.getIsSupernova() && now < generalDate) {
          return {
            allowed: false,
            reason: `This feature is currently in early access for Supernova supporters. It will be available to all users on ${config.generalDate}`,
            isSupernovaFeature: true,
            availableDate: generalDate
          };
        }
      }
    }
    return {
      allowed: false,
      reason: "Feature is not available"
    };
  }
  /**
   * Get all enabled features
   */
  getEnabledFeatures() {
    return Array.from(this.features.values()).filter((feature) => feature.enabled);
  }
  /**
   * Get all Supernova early access features
   */
  getSupernovaFeatures() {
    return Array.from(this.features.values()).filter(
      (feature) => feature.isTimeGated && feature.earlyAccessOnly
    );
  }
  /**
   * Update debug settings for development testing
   */
  updateDebugSettings(settings) {
    this.debugSettings = settings;
    this.initializeFeatureFlags();
  }
  /**
   * Get debug settings
   */
  getDebugSettings() {
    return { ...this.debugSettings };
  }
  /**
   * Get feature summary
   */
  getFeatureSummary() {
    const enabled = [];
    const comingSoon = [];
    for (const [key, feature] of this.features) {
      if (feature.enabled) {
        enabled.push(key);
      } else if (feature.isTimeGated) {
        const config = SUPERNOVA_FEATURES[key];
        if (config) {
          const isSupernovaUser = this.getIsSupernova();
          comingSoon.push({
            key,
            availableDate: isSupernovaUser ? config.supernovaDate : config.generalDate,
            isSupernova: isSupernovaUser
          });
        }
      }
    }
    return {
      isSupernova: this.getIsSupernova(),
      enabled,
      comingSoon
    };
  }
};

// src/licensing/license-validator.ts
var LicenseValidator = class {
  constructor() {
    // Embedded signing key - in production this would be obfuscated
    this.SECRET_KEY = "nova-license-signing-key-2025";
  }
  /**
   * Validates a license key and returns validation result
   */
  async validateLicense(licenseKey) {
    try {
      const license = this.parseLicenseKey(licenseKey);
      if (!license) {
        return {
          valid: false,
          error: "INVALID_FORMAT" /* INVALID_FORMAT */
        };
      }
      const validationError = await this.validateLicenseObject(license);
      if (validationError) {
        return {
          valid: false,
          license,
          error: validationError
        };
      }
      return {
        valid: true,
        license
      };
    } catch (error) {
      return {
        valid: false,
        error: "MALFORMED_DATA" /* MALFORMED_DATA */
      };
    }
  }
  /**
   * Parses a license key string into a License object
   */
  parseLicenseKey(licenseKey) {
    try {
      const decoded = this.base64Decode(licenseKey);
      const parts = decoded.split("|");
      if (parts.length !== 5) {
        return null;
      }
      const [email, tier, expiresAtStr, issuedAtStr, signature] = parts;
      const expiresAt = expiresAtStr === "lifetime" ? null : new Date(expiresAtStr);
      const issuedAt = new Date(issuedAtStr);
      if (isNaN(issuedAt.getTime())) {
        return null;
      }
      if (expiresAt && isNaN(expiresAt.getTime())) {
        return null;
      }
      return {
        email,
        expiresAt,
        issuedAt,
        signature,
        licenseKey
      };
    } catch (error) {
      return null;
    }
  }
  /**
   * Safe base64 decode that handles both browser and Node.js environments
   */
  base64Decode(str) {
    if (typeof atob !== "undefined") {
      return atob(str);
    }
    return Buffer.from(str, "base64").toString("utf8");
  }
  /**
   * Safe base64 encode that handles both browser and Node.js environments
   */
  base64Encode(str) {
    if (typeof btoa !== "undefined") {
      return btoa(str);
    }
    return Buffer.from(str, "utf8").toString("base64");
  }
  /**
   * Validates a license object
   */
  async validateLicenseObject(license) {
    const expectedSignature = await this.generateSignature(
      license.email,
      "legacy",
      // Use legacy for old licenses
      license.expiresAt,
      license.issuedAt
    );
    if (license.signature !== expectedSignature) {
      return "INVALID_SIGNATURE" /* INVALID_SIGNATURE */;
    }
    if (license.expiresAt && /* @__PURE__ */ new Date() > license.expiresAt) {
      return "EXPIRED" /* EXPIRED */;
    }
    if (license.issuedAt > /* @__PURE__ */ new Date()) {
      return "FUTURE_DATED" /* FUTURE_DATED */;
    }
    return null;
  }
  /**
   * Generates HMAC-SHA256 signature for license data
   */
  async generateSignature(email, tier, expiresAt, issuedAt) {
    const data = `${email}|${tier}|${(expiresAt == null ? void 0 : expiresAt.toISOString()) || "lifetime"}|${issuedAt.toISOString()}`;
    const encoder = new TextEncoder();
    const keyData = encoder.encode(this.SECRET_KEY);
    const messageData = encoder.encode(data);
    const cryptoKey = await crypto.subtle.importKey(
      "raw",
      keyData,
      { name: "HMAC", hash: "SHA-256" },
      false,
      ["sign"]
    );
    const signature = await crypto.subtle.sign("HMAC", cryptoKey, messageData);
    return Array.from(new Uint8Array(signature)).map((b) => b.toString(16).padStart(2, "0")).join("");
  }
  /**
   * Creates a test license for development purposes
   */
  async createTestLicense(email, tier, lifetimeMode = true) {
    const issuedAt = /* @__PURE__ */ new Date();
    const expiresAt = lifetimeMode ? null : new Date(Date.now() + 365 * 24 * 60 * 60 * 1e3);
    const signature = await this.generateSignature(email, tier, expiresAt, issuedAt);
    const licenseData = `${email}|${tier}|${(expiresAt == null ? void 0 : expiresAt.toISOString()) || "lifetime"}|${issuedAt.toISOString()}|${signature}`;
    return this.base64Encode(licenseData);
  }
  /**
   * Validates a Supernova license key
   */
  async validateSupernovaLicense(licenseKey) {
    try {
      const license = this.parseSupernovaLicenseKey(licenseKey);
      if (!license) {
        return {
          valid: false,
          error: "INVALID_FORMAT" /* INVALID_FORMAT */
        };
      }
      const validationError = await this.validateSupernovaLicenseObject(license);
      if (validationError) {
        return {
          valid: false,
          license,
          error: validationError
        };
      }
      return {
        valid: true,
        license
      };
    } catch (error) {
      return {
        valid: false,
        error: "MALFORMED_DATA" /* MALFORMED_DATA */
      };
    }
  }
  /**
   * Parses a Supernova license key string
   */
  parseSupernovaLicenseKey(licenseKey) {
    try {
      const decoded = this.base64Decode(licenseKey);
      const parts = decoded.split("|");
      if (parts.length !== 5) {
        return null;
      }
      const [email, type, expiresAtStr, issuedAtStr, signature] = parts;
      if (type !== "annual" && type !== "lifetime") {
        return null;
      }
      const expiresAt = expiresAtStr === "lifetime" ? null : new Date(expiresAtStr);
      const issuedAt = new Date(issuedAtStr);
      if (isNaN(issuedAt.getTime())) {
        return null;
      }
      if (expiresAt && isNaN(expiresAt.getTime())) {
        return null;
      }
      return {
        email,
        type,
        expiresAt,
        issuedAt,
        signature,
        licenseKey
      };
    } catch (error) {
      return null;
    }
  }
  /**
   * Validates a Supernova license object
   */
  async validateSupernovaLicenseObject(license) {
    const expectedSignature = await this.generateSupernovaSignature(
      license.email,
      license.type,
      license.expiresAt,
      license.issuedAt
    );
    if (license.signature !== expectedSignature) {
      return "INVALID_SIGNATURE" /* INVALID_SIGNATURE */;
    }
    if (license.expiresAt && /* @__PURE__ */ new Date() > license.expiresAt) {
      return "EXPIRED" /* EXPIRED */;
    }
    if (license.issuedAt > /* @__PURE__ */ new Date()) {
      return "FUTURE_DATED" /* FUTURE_DATED */;
    }
    return null;
  }
  /**
   * Generates HMAC-SHA256 signature for Supernova license
   */
  async generateSupernovaSignature(email, type, expiresAt, issuedAt) {
    const data = `${email}|${type}|${(expiresAt == null ? void 0 : expiresAt.toISOString()) || "lifetime"}|${issuedAt.toISOString()}`;
    const encoder = new TextEncoder();
    const keyData = encoder.encode(this.SECRET_KEY);
    const messageData = encoder.encode(data);
    const cryptoKey = await crypto.subtle.importKey(
      "raw",
      keyData,
      { name: "HMAC", hash: "SHA-256" },
      false,
      ["sign"]
    );
    const signature = await crypto.subtle.sign("HMAC", cryptoKey, messageData);
    return Array.from(new Uint8Array(signature)).map((b) => b.toString(16).padStart(2, "0")).join("");
  }
  /**
   * Creates a test Supernova license for development
   */
  async createTestSupernovaLicense(email, type) {
    const issuedAt = /* @__PURE__ */ new Date();
    const expiresAt = type === "lifetime" ? null : new Date(Date.now() + 365 * 24 * 60 * 60 * 1e3);
    const signature = await this.generateSupernovaSignature(email, type, expiresAt, issuedAt);
    const licenseData = `${email}|${type}|${(expiresAt == null ? void 0 : expiresAt.toISOString()) || "lifetime"}|${issuedAt.toISOString()}|${signature}`;
    return this.base64Encode(licenseData);
  }
};

// src/core/intent-detector.ts
var IntentDetector = class {
  constructor() {
    this.consultationPatterns = [
      { pattern: /^(Now is|Today|This week|Lately|Currently|These days)/i, name: "temporal" },
      { pattern: /\b(I'm (feeling|thinking|working|trying)|I've been|I was|I feel)\b/i, name: "personal_state" },
      { pattern: /\b(reminds me|makes me think|I wonder|I'm wondering)\b/i, name: "reflective" },
      { pattern: /\b(I think|I believe|I suspect|I notice|seems like|appears|looks like)\b/i, name: "opinion_observation" },
      { pattern: /\b(might be|could be|may be|probably|perhaps|maybe)\b/i, name: "speculation" }
    ];
    this.editingPatterns = [
      { pattern: /\b(mak(e|ing)|fix|improve|change|add|remove|rewrite|edit)\b/i, name: "command_verb" },
      { pattern: /\b(this (section|paragraph|part|text|writing|better)|the writing here|here we|here needs|this is (unclear|wrong|confusing|right))\b/i, name: "document_reference" },
      { pattern: /\b(unclear|needs work|sounds wrong|too wordy|confusing)\b/i, name: "quality_assessment" },
      { pattern: /\b(at the end|in the (introduction|conclusion)|before this|after that)\b/i, name: "document_targeting" }
    ];
  }
  classifyInput(input) {
    const consultationMatches = [];
    const editingMatches = [];
    for (const { pattern, name } of this.consultationPatterns) {
      if (pattern.test(input)) {
        consultationMatches.push(name);
      }
    }
    for (const { pattern, name } of this.editingPatterns) {
      if (pattern.test(input)) {
        editingMatches.push(name);
      }
    }
    if (consultationMatches.length > 0 && editingMatches.length === 0) {
      return {
        type: "consultation",
        confidence: 0.9,
        matchedPatterns: consultationMatches
      };
    }
    if (editingMatches.length > 0 && consultationMatches.length === 0) {
      return {
        type: "editing",
        confidence: 0.9,
        matchedPatterns: editingMatches
      };
    }
    if (consultationMatches.length > 0 && editingMatches.length > 0) {
      const hasSpeculation = consultationMatches.includes("speculation") || consultationMatches.includes("opinion_observation");
      if (hasSpeculation) {
        return {
          type: "consultation",
          confidence: 0.8,
          matchedPatterns: consultationMatches
        };
      }
    }
    return {
      type: "ambiguous",
      confidence: 0.5,
      matchedPatterns: []
    };
  }
};

// src/core/ai-intent-classifier.ts
var AIIntentClassifier = class {
  constructor(providerManager) {
    this.providerManager = providerManager;
    this.intentDetector = new IntentDetector();
  }
  /**
   * Classify user input into one of three intents
   */
  async classifyIntent(userInput, hasSelection = false) {
    if (userInput.startsWith(":")) {
      return "CHAT";
    }
    return this.fallbackClassification(userInput);
  }
  /**
   * Enhanced fallback classification using IntentDetector
   */
  fallbackClassification(userInput) {
    const lowerInput = userInput.toLowerCase().trim();
    if (lowerInput.includes("?") || lowerInput.startsWith("what") || lowerInput.startsWith("why") || lowerInput.startsWith("how") || lowerInput.startsWith("when") || lowerInput.startsWith("where") || lowerInput.startsWith("who") || lowerInput.startsWith("can you") || lowerInput.startsWith("could you") || lowerInput.includes("explain") || lowerInput.includes("help me understand")) {
      return "CHAT";
    }
    const intentClassification = this.intentDetector.classifyInput(userInput);
    if (intentClassification.type === "consultation") {
      return "CHAT";
    }
    if (intentClassification.type === "editing") {
      if (this.isMetadataRelated(lowerInput)) {
        return "METADATA";
      }
      return "CONTENT";
    }
    if (this.isMetadataRelated(lowerInput)) {
      return "METADATA";
    }
    return "CONTENT";
  }
  /**
   * Helper method to check if input is metadata-related
   */
  isMetadataRelated(lowerInput) {
    return (
      // Tag-specific patterns
      /\btags?\b/i.test(lowerInput) || /\btagging\b/i.test(lowerInput) || // Property patterns
      /\b(title|author|date|status|category|categories)\b/i.test(lowerInput) || // Metadata/frontmatter patterns
      /\b(metadata|frontmatter|properties|property)\b/i.test(lowerInput) || // Common metadata actions
      /^(add|update|set|remove|clean|optimize)\s+(tags?|title|author|metadata)/i.test(lowerInput)
    );
  }
};

// main.ts
var NOVA_ICON_SVG2 = `
<svg viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
  <!-- Central star core -->
  <circle cx="12" cy="12" r="2.5" fill="currentColor"/>
  
  <!-- Primary rays (4 main directions) -->
  <path d="M12 1L12 6" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M12 18L12 23" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M23 12L18 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  <path d="M6 12L1 12" stroke="currentColor" stroke-width="3" stroke-linecap="round"/>
  
  <!-- Secondary rays (diagonals) -->
  <path d="M18.364 5.636L15.536 8.464" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M8.464 15.536L5.636 18.364" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M18.364 18.364L15.536 15.536" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
  <path d="M8.464 8.464L5.636 5.636" stroke="currentColor" stroke-width="2.5" stroke-linecap="round"/>
</svg>`;
var NovaPlugin = class extends import_obsidian15.Plugin {
  async onload() {
    try {
      await this.loadSettings();
      this.licenseValidator = new LicenseValidator();
      this.featureManager = new FeatureManager(
        this.licenseValidator,
        this.settings.licensing.debugSettings
      );
      if (this.settings.licensing.licenseKey) {
        await this.featureManager.updateSupernovaLicense(this.settings.licensing.licenseKey);
      }
      this.app.workspace.onLayoutReady(async () => {
        const leaves = this.app.workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
        if (leaves.length > 0) {
          const sidebarView = leaves[0].view;
          sidebarView.refreshSupernovaUI();
          await sidebarView.refreshProviderDropdown();
        }
      });
      (0, import_obsidian15.addIcon)("nova-star", NOVA_ICON_SVG2);
      this.aiProviderManager = new AIProviderManager(this.settings, this.featureManager);
      await this.aiProviderManager.initialize();
      const dataStore = {
        loadData: (key) => this.loadDataWithKey(key),
        saveData: (key, data) => this.saveDataWithKey(key, data)
      };
      this.conversationManager = new ConversationManager(dataStore);
      this.documentEngine = new DocumentEngine(this.app, dataStore);
      this.documentEngine.setConversationManager(this.conversationManager);
      this.contextBuilder = new ContextBuilder(this.settings);
      this.commandParser = new CommandParser();
      this.promptBuilder = new PromptBuilder(this.documentEngine, this.conversationManager);
      this.aiIntentClassifier = new AIIntentClassifier(this.aiProviderManager);
      this.addCommandHandler = new AddCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.editCommandHandler = new EditCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.deleteCommandHandler = new DeleteCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.grammarCommandHandler = new GrammarCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.rewriteCommandHandler = new RewriteCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.metadataCommandHandler = new MetadataCommand(this.app, this.documentEngine, this.contextBuilder, this.aiProviderManager);
      this.registerView(
        VIEW_TYPE_NOVA_SIDEBAR,
        (leaf) => new NovaSidebarView(leaf, this)
      );
      const ribbonIcon = this.addRibbonIcon("nova-star", "Nova AI", (evt) => {
        this.activateView();
      });
      this.addCommand({
        id: "nova-improve-writing",
        name: "Improve Writing",
        editorCallback: async (editor) => {
          await this.handleSelectionCommand("improve", editor);
        }
      });
      this.addCommand({
        id: "nova-make-longer",
        name: "Make Longer",
        editorCallback: async (editor) => {
          await this.handleSelectionCommand("longer", editor);
        }
      });
      this.addCommand({
        id: "nova-make-shorter",
        name: "Make Shorter",
        editorCallback: async (editor) => {
          await this.handleSelectionCommand("shorter", editor);
        }
      });
      TONE_OPTIONS.forEach((tone) => {
        this.addCommand({
          id: `nova-make-${tone.id}`,
          name: `Make ${tone.label}`,
          editorCallback: async (editor) => {
            await this.handleToneCommand(tone.id, editor);
          }
        });
      });
      this.addCommand({
        id: "nova-tell-nova",
        name: "Tell Nova...",
        editorCallback: async (editor) => {
          await this.handleSelectionCommand("custom", editor);
        }
      });
      this.addCommand({
        id: "open-nova-sidebar",
        name: "Open sidebar",
        callback: () => {
          this.activateView();
        }
      });
      this.selectionContextMenu = new SelectionContextMenu(this.app, this);
      this.selectionContextMenu.register();
      this.settingTab = new NovaSettingTab(this.app, this);
      this.addSettingTab(this.settingTab);
    } catch (error) {
    }
  }
  onunload() {
    var _a, _b;
    (_a = this.aiProviderManager) == null ? void 0 : _a.cleanup();
    (_b = this.conversationManager) == null ? void 0 : _b.cleanup();
  }
  async loadSettings() {
    var _a, _b;
    const savedData = await this.loadData();
    console.log("\u{1F527} Nova: Loading settings...");
    console.log("\u{1F527} Saved data (full):", savedData);
    console.log("\u{1F527} Saved data platformSettings:", savedData == null ? void 0 : savedData.platformSettings);
    if ((_a = savedData == null ? void 0 : savedData.platformSettings) == null ? void 0 : _a.desktop) {
      console.log("\u{1F527} Saved desktop primaryProvider:", savedData.platformSettings.desktop.primaryProvider);
    }
    console.log("\u{1F527} Default platformSettings:", DEFAULT_SETTINGS.platformSettings);
    this.settings = Object.assign({}, DEFAULT_SETTINGS, savedData);
    if (savedData == null ? void 0 : savedData.platformSettings) {
      console.log("\u{1F527} Before merge - Default desktop selectedModel:", DEFAULT_SETTINGS.platformSettings.desktop.selectedModel);
      console.log("\u{1F527} Before merge - Saved desktop selectedModel:", (_b = savedData.platformSettings.desktop) == null ? void 0 : _b.selectedModel);
      this.settings.platformSettings = {
        desktop: Object.assign({}, DEFAULT_SETTINGS.platformSettings.desktop, savedData.platformSettings.desktop || {}),
        mobile: Object.assign({}, DEFAULT_SETTINGS.platformSettings.mobile, savedData.platformSettings.mobile || {})
      };
      console.log("\u{1F527} After merge - Final desktop selectedModel:", this.settings.platformSettings.desktop.selectedModel);
    }
    console.log("\u{1F527} Final merged platformSettings:", this.settings.platformSettings);
    console.log("\u{1F527} Current platform:", import_obsidian15.Platform.isMobile ? "mobile" : "desktop");
    console.log("\u{1F527} Selected model for current platform:", this.settings.platformSettings[import_obsidian15.Platform.isMobile ? "mobile" : "desktop"].selectedModel);
  }
  /**
   * Deep merge two objects, preserving nested structures
   */
  deepMerge(target, source) {
    if (!source) return target;
    const result = { ...target };
    for (const key in source) {
      if (source.hasOwnProperty(key)) {
        if (source[key] && typeof source[key] === "object" && !Array.isArray(source[key])) {
          result[key] = this.deepMerge(target[key] || {}, source[key]);
        } else {
          result[key] = source[key];
        }
      }
    }
    return result;
  }
  async saveSettings() {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i;
    console.log("\u{1F4BE} Nova: Saving settings...");
    console.log("\u{1F4BE} Current platform:", import_obsidian15.Platform.isMobile ? "mobile" : "desktop");
    console.log("\u{1F4BE} Platform settings being saved:", this.settings.platformSettings);
    console.log("\u{1F4BE} Desktop selectedModel being saved:", this.settings.platformSettings.desktop.selectedModel);
    console.log("\u{1F4BE} Mobile selectedModel being saved:", this.settings.platformSettings.mobile.selectedModel);
    try {
      await this.saveData(this.settings);
      console.log("\u{1F4BE} First saveData() completed");
      await new Promise((resolve) => setTimeout(resolve, 200));
      await this.saveData(this.settings);
      console.log("\u{1F4BE} Second saveData() completed");
      await new Promise((resolve) => setTimeout(resolve, 200));
      const readBack = await this.loadData();
      console.log("\u{1F4BE} Verification read - Desktop selectedModel:", (_b = (_a = readBack == null ? void 0 : readBack.platformSettings) == null ? void 0 : _a.desktop) == null ? void 0 : _b.selectedModel);
      console.log("\u{1F4BE} Verification read - Mobile selectedModel:", (_d = (_c = readBack == null ? void 0 : readBack.platformSettings) == null ? void 0 : _c.mobile) == null ? void 0 : _d.selectedModel);
      const currentPlatform = import_obsidian15.Platform.isMobile ? "mobile" : "desktop";
      const expectedModel = this.settings.platformSettings[currentPlatform].selectedModel;
      const actualModel = (_f = (_e = readBack == null ? void 0 : readBack.platformSettings) == null ? void 0 : _e[currentPlatform]) == null ? void 0 : _f.selectedModel;
      if (expectedModel !== actualModel) {
        console.error("\u274C Save verification STILL failed after retry!", {
          expected: expectedModel,
          actual: actualModel,
          platform: currentPlatform
        });
        console.log("\u{1F4BE} Attempting forced save...");
        await this.saveData(JSON.parse(JSON.stringify(this.settings)));
        await new Promise((resolve) => setTimeout(resolve, 300));
        const finalCheck = await this.loadData();
        const finalActual = (_h = (_g = finalCheck == null ? void 0 : finalCheck.platformSettings) == null ? void 0 : _g[currentPlatform]) == null ? void 0 : _h.selectedModel;
        if (expectedModel === finalActual) {
          console.log("\u2705 Forced save succeeded");
        } else {
          console.error("\u274C Forced save also failed!", { finalActual });
        }
      } else {
        console.log("\u2705 Save verification successful");
      }
      (_i = this.aiProviderManager) == null ? void 0 : _i.updateSettings(this.settings);
      console.log("\u{1F4BE} Settings saved successfully");
    } catch (error) {
      console.error("\u274C Error during save operation:", error);
      throw error;
    }
  }
  async activateView() {
    const { workspace } = this.app;
    let leaf;
    const leaves = workspace.getLeavesOfType(VIEW_TYPE_NOVA_SIDEBAR);
    if (leaves.length > 0) {
      leaf = leaves[0];
    } else {
      leaf = workspace.getRightLeaf(false);
      await (leaf == null ? void 0 : leaf.setViewState({ type: VIEW_TYPE_NOVA_SIDEBAR, active: true }));
    }
    workspace.revealLeaf(leaf);
    if ((leaf == null ? void 0 : leaf.view) instanceof NovaSidebarView) {
      this.sidebarView = leaf.view;
    }
  }
  /**
   * Handle selection-based commands
   */
  async handleSelectionCommand(actionId, editor) {
    try {
      const selectedText = editor.getSelection();
      if (!selectedText || selectedText.trim().length === 0) {
        new import_obsidian15.Notice("Please select some text first");
        return;
      }
      await this.selectionContextMenu.handleSelectionAction(actionId, editor, selectedText);
    } catch (error) {
      console.error("Error executing Nova selection command:", error);
      new import_obsidian15.Notice("Failed to execute Nova action. Please try again.", 3e3);
    }
  }
  /**
   * Handle tone-specific commands
   */
  async handleToneCommand(toneId, editor) {
    try {
      const selectedText = editor.getSelection();
      if (!selectedText || selectedText.trim().length === 0) {
        new import_obsidian15.Notice("Please select some text first");
        return;
      }
      await this.selectionContextMenu.handleSelectionAction("tone", editor, selectedText, toneId);
    } catch (error) {
      console.error("Error executing Nova tone command:", error);
      new import_obsidian15.Notice("Failed to execute Nova action. Please try again.", 3e3);
    }
  }
  /**
   * Show upgrade prompt for Core tier mobile users
   */
  showMobileUpgradePrompt() {
    const modal = document.createElement("div");
    modal.className = "modal nova-mobile-upgrade-modal";
    modal.innerHTML = `
			<div class="modal-container">
				<div class="modal-bg"></div>
				<div class="modal-content">
					<div class="modal-header">
						<h3>Nova SuperNova Required</h3>
					</div>
					<div class="modal-body">
						<div class="nova-tier-badge core" style="margin-bottom: 1em;">
							<span class="tier-icon">FREE</span>
							<span class="tier-name">Core (Free)</span>
						</div>
						<p>Mobile access is available with Nova SuperNova.</p>
						<p>Core tier is limited to desktop use only.</p>
						<div class="nova-feature-list">
							<h4>SuperNova includes:</h4>
							<ul>
								<li>Mobile device support</li>
								<li>Multiple AI providers</li>
								<li>In-chat provider switching</li>
								<li>Advanced templates</li>
								<li>Priority support</li>
							</ul>
						</div>
					</div>
					<div class="modal-footer">
						<button class="mod-cta nova-upgrade-btn">Upgrade to SuperNova</button>
						<button class="nova-close-btn">Close</button>
					</div>
				</div>
			</div>
		`;
    const upgradeBtn = modal.querySelector(".nova-upgrade-btn");
    const closeBtn = modal.querySelector(".nova-close-btn");
    const modalBg = modal.querySelector(".modal-bg");
    const closeModal = () => {
      modal.remove();
    };
    upgradeBtn.addEventListener("click", () => {
      window.open("https://novawriter.ai/upgrade", "_blank");
      closeModal();
    });
    closeBtn.addEventListener("click", closeModal);
    modalBg.addEventListener("click", closeModal);
    document.body.appendChild(modal);
    new import_obsidian15.Notice("Nova mobile access requires SuperNova license", 8e3);
  }
  // DataStore interface implementation for ConversationManager
  async loadDataWithKey(key) {
    const allData = await this.loadData();
    return allData ? allData[key] : void 0;
  }
  async saveDataWithKey(key, data) {
    const allData = await this.loadData() || {};
    allData[key] = data;
    return await this.saveData(allData);
  }
};
//# sourceMappingURL=data:application/json;base64,
