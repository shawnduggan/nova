{
  "env": {
    "browser": true,
    "es2020": true,
    "node": true,
    "jest": true
  },
  "extends": [
    "eslint:recommended"
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 2020,
    "sourceType": "module"
  },
  "plugins": [
    "@typescript-eslint"
  ],
  "globals": {
    "AsyncGenerator": "readonly",
    "NodeJS": "readonly"
  },
  "rules": {
    "@typescript-eslint/no-unused-vars": [
      "warn",
      { "argsIgnorePattern": "^_" }
    ],
    "@typescript-eslint/no-explicit-any": "warn",
    "no-unused-vars": "off",
    "no-undef": "error",
    "prefer-const": "error",
    "no-var": "error",
    "no-console": "warn",
    "no-case-declarations": "error",
    "no-mixed-spaces-and-tabs": "error",
    
    // Obsidian security rules - using built-in ESLint rules
    
    // Prevent direct style manipulation
    "no-restricted-properties": [
      "error",
      {
        "object": "*",
        "property": "style",
        "message": "Avoid setting styles directly. Use CSS classes instead for better theme compatibility."
      },
      {
        "object": "*",
        "property": "innerHTML",
        "message": "Avoid innerHTML for security. Use DOM manipulation methods or textContent instead."
      },
      {
        "object": "*",
        "property": "outerHTML", 
        "message": "Avoid outerHTML for security. Use DOM manipulation methods instead."
      }
    ],
    
    // Prevent unsafe DOM methods
    "no-restricted-syntax": [
      "error",
      {
        "selector": "CallExpression[callee.property.name='setAttribute'][arguments.0.value='style']",
        "message": "Avoid setting style attributes. Use CSS classes instead."
      },
      {
        "selector": "CallExpression[callee.property.name='insertAdjacentHTML']",
        "message": "Avoid insertAdjacentHTML for security. Use DOM methods instead."
      }
    ],
    
    // TypeScript casting rules (simplified to avoid parser service requirements)
    "@typescript-eslint/consistent-type-assertions": [
      "error",
      {
        "assertionStyle": "as",
        "objectLiteralTypeAssertions": "allow-as-parameter"
      }
    ]
  },
  "ignorePatterns": [
    "main.js",
    "*.d.ts",
    "node_modules/",
    "dist/",
    "build/"
  ]
}